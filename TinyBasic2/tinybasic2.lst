0001   0000             ;Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
0002   0000             ;Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
0003   0000             ;Status bit for read in CHKIO changed to 0x02
0004   0000             ;Status bit for write in OUTC (actually OC3) changed to 0x01
0005   0000             ;Changed UART initialization parameters in INIT
0006   0000             ;Changed ORG statements at end of file to match system with 2K RAM
0007   0000             ;*************************************************************
0008   0000             ; 
0009   0000             ;                 TINY BASIC FOR INTEL 8080
0010   0000             ;                       VERSION 2.0
0011   0000             ;                     BY LI-CHEN WANG
0012   0000             ;                  MODIFIED AND TRANSLATED
0013   0000             ;                    TO INTEL MNEMONICS
0014   0000             ;                     BY ROGER RAUSKOLB
0015   0000             ;                      10 OCTOBER,1976
0016   0000             ;                        @COPYLEFT
0017   0000             ;                   ALL WRONGS RESERVED
0018   0000             ; 
0019   0000             ;*************************************************************
0020   0000             ; 
0021   0000             ; *** ZERO PAGE SUBROUTINES ***
0022   0000             ; 
0023   0000             ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
0024   0000             ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
0025   0000             ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
0026   0000             ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
0027   0000             ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
0028   0000             ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
0029   0000             ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
0030   0000             ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
0031   0000             ; 
0032   0000             
0033   0000             ;DWA     MACRO WHERE
0034   0000             ;        DB   (WHERE SHR 8) + 128
0035   0000             ;        DB   WHERE AND 0FFH
0036   0000             ;        ENDM
0037   0000             ;
0038   0000             
0039   0000             ; Memory map
0040   0000             ROMBGN  .EQU $0000      ; Execution must start here
0041   0000             RAMBGN  .EQU $0800      ; 2K ROM
0042   0000             RAMSZE  .EQU $1800      ; 6K RAM
0043   0000             
0044   0000             ; IO map
0045   0000             IODATA  .EQU 1
0046   0000             IOSTAT  .EQU 2
0047   0000             
0048   0000             ; Control character
0049   0000             BS      .EQU 08H        ; ^H, BACKSPACE
0050   0000             CR      .EQU 0DH        ; ^M, CARRIAGE RETURN
0051   0000             LF      .EQU 0AH        ; ^J, LINE FEED
0052   0000             CAN     .EQU 18H        ; ^X, CANCEL
0053   0000             DEL     .EQU 7FH        ; DELETE
0054   0000             
0055   0000             ; Store a label address as BIG endian with bit A15 set
0056   0000             #DEFINE DWA(LABEL) .DB (LABEL >> 8) | $80 \ .DB (LABEL & $FF)
0057   0000             
0058   0000             ; if CHAR != A then jump relative to LABEL
0059   0000             #DEFINE TSTC(CHAR,LABEL) RST RTSTC \ .DB CHAR \ .DB LABEL-$-1
0060   0000             
0061   0000             
0062   0000                     .ORG ROMBGN
0063   0000             
0064   0000 31 00 20    START:  LXI  SP,STACK                   ;*** COLD START ***
0065   0003 3E FF               MVI  A,0FFH
0066   0005 C3 C3 06            JMP  INIT
0067   0008             
0068   0008             RTSTC  .EQU 1                          ;*** RST 1 @ $0008 ***
0069   0008 E3                  XTHL
0070   0009 EF                  RST  RIGNBLK                    ;IGNORE BLANKS AND
0071   000A BE                  CMP  M                          ;TEST CHARACTER
0072   000B C3 6F 00            JMP  TC1                        ;REST OF THIS IS AT TC1
0073   000E             
0074   000E 3E 0D       CRLF:   MVI  A,CR                       ;*** CRLF ***
0075   0010             ;
0076   0010             ROUTC   .EQU 2                          ;*** RST 2 @ $0010 ***
0077   0010 D3 01       OUTC:   OUT  IODATA                     ;Out to data port
0078   0012 FE 0D               CPI  CR                         ;WAS IT CR?
0079   0014 C0                  RNZ                             ;NO, FINISHED
0080   0015 C3 E2 06            JMP  OC1                        ;REST OF THIS IS AT OC1
0081   0018             
0082   0018             REXPR   .EQU 3                          ;*** RST 3 @ $0018 ***
0083   0018 CD B9 03    EXPR:   CALL EXPR2
0084   001B E5                  PUSH H                          ;EVALUATE AN EXPRESSION
0085   001C C3 75 03            JMP  EXPR1                      ;REST OF IT AT EXPR1
0086   001F 57                  .DB  "W"
0087   0020             
0088   0020             RCOMP   .EQU 4                          ;*** RST 4 @ $0020 ***
0089   0020 7C          COMP:   MOV  A,H
0090   0021 BA                  CMP  D                          ;COMPARE HL WITH DE
0091   0022 C0                  RNZ                             ;RETURN CORRECT C AND
0092   0023 7D                  MOV  A,L                        ;Z FLAGS
0093   0024 BB                  CMP  E                          ;BUT OLD A IS LOST
0094   0025 C9                  RET
0095   0026 41 4E               .DB  "AN"
0096   0028             
0097   0028             RIGNBLK .EQU 5                          ;*** RST 5 @ $0028 ***
0098   0028 1A          IGNBLK: LDAX D
0099   0029 FE 20               CPI  20H                        ;IGNORE BLANKS
0100   002B C0                  RNZ                             ;IN TEXT (WHERE DE->)
0101   002C 13                  INX  D                          ;AND RETURN THE FIRST
0102   002D C3 28 00            JMP  IGNBLK                     ;NON-BLANK CHAR. IN A
0103   0030             
0104   0030             RFINISH .EQU 6                          ;*** RST 6 @ $0030 ***
0105   0030 F1          FINISH: POP  PSW
0106   0031 CD 0D 05            CALL FIN                        ;CHECK END OF COMMAND
0107   0034 C3 20 05            JMP  QWHAT                      ;PRINT "WHAT?" IF WRONG
0108   0037 47                  .DB  "G"
0109   0038             
0110   0038             RTSTV   .EQU 7                          ;*** RST 7 @ $0038 ***
0111   0038 EF          TSTV:   RST  RIGNBLK                    ;IGNBLK
0112   0039 D6 40               SUI  40H                        ;TEST VARIABLES
0113   003B D8                  RC                              ;C:NOT A VARIABLE
0114   003C C2 58 00            JNZ  TV1                        ;NOT "@" ARRAY
0115   003F 13                  INX  D                          ;IT IS THE "@" ARRAY
0116   0040 CD 62 04            CALL PARN                       ;@ SHOULD BE FOLLOWED
0117   0043 29                  DAD  H                          ;BY (EXPR) AS ITS INDEX
0118   0044 DA D5 00            JC   QHOW                       ;IS INDEX TOO BIG (>0x7FFF)?
0119   0047 D5                  PUSH D                          ;WILL IT OVERWRITE
0120   0048 EB                  XCHG                            ;TEXT?
0121   0049 CD A1 04            CALL SIZE                       ;FIND SIZE OF FREE
0122   004C E7                  RST  RCOMP                      ;AND CHECK THAT
0123   004D DA 4E 05            JC   ASORRY                     ;IF SO, SAY "SORRY"
0124   0050 21 00 1F            LXI  H,VARBGN                   ;IF NOT GET ADDRESS
0125   0053 CD D6 04            CALL SUBDE                      ;OF @(EXPR) AND PUT IT
0126   0056 D1                  POP  D                          ;IN HL (top-down from TXTEND)
0127   0057 C9                  RET                             ;C FLAG IS CLEARED
0128   0058             ;
0129   0058 FE 21       TV1:    CPI  21H                        ;>='a'?
0130   005A DA 5F 00            JC   TV2                        ;NO
0131   005D D6 20               SUI  20H                        ;MAKE UPPER CASE
0132   005F FE 1B       TV2:    CPI  1BH                        ;NOT @, IS IT A TO Z?
0133   0061 3F                  CMC                             ;IF NOT RETURN C FLAG
0134   0062 D8                  RC
0135   0063 13                  INX  D                          ;IF A THROUGH Z
0136   0064 21 00 1F            LXI  H,VARBGN                   ;COMPUTE ADDRESS OF
0137   0067 07                  RLC                             ;THAT VARIABLE
0138   0068 85                  ADD  L                          ;AND RETURN IT IN HL
0139   0069 6F                  MOV  L,A                        ;WITH C FLAG CLEARED
0140   006A 3E 00               MVI  A,0
0141   006C 8C                  ADC  H
0142   006D 67                  MOV  H,A
0143   006E C9                  RET
0144   006F             
0145   006F             ;TSTC:  XTHL                            ;*** TSTC OR RST 1 ***
0146   006F             ;       RST  RIGNBLK                    ;THIS IS AT LOC. 8
0147   006F             ;       CMP  M                          ;AND THEN JUMP HERE
0148   006F 23          TC1:    INX  H                          ;COMPARE THE BYTE THAT
0149   0070 CA 7A 00            JZ   TC2                        ;FOLLOWS THE RST INST.
0150   0073 C5                  PUSH B                          ;WITH THE TEXT (DE->)
0151   0074 4E                  MOV  C,M                        ;IF NOT =, ADD THE 2ND
0152   0075 06 00               MVI  B,0                        ;BYTE THAT FOLLOWS THE
0153   0077 09                  DAD  B                          ;RST TO THE OLD PC
0154   0078 C1                  POP  B                          ;I.E., DO A RELATIVE
0155   0079 1B                  DCX  D                          ;JUMP IF NOT =
0156   007A 13          TC2:    INX  D                          ;IF =, SKIP THOSE BYTES
0157   007B 23                  INX  H                          ;AND CONTINUE
0158   007C E3                  XTHL
0159   007D C9                  RET
0160   007E             
0161   007E 21 00 00    TSTNUM: LXI  H,0                        ;*** TSTNUM ***
0162   0081 44                  MOV  B,H                        ;TEST IF THE TEXT IS
0163   0082 EF                  RST  RIGNBLK                    ;A NUMBER
0164   0083 FE 24               CPI  '$'                        ;HEX NUMBER?
0165   0085 CA AB 00            JZ   TX1                        ;YES
0166   0088 FE 30       TN1:    CPI  '0'                        ;IF NOT, RETURN 0 IN
0167   008A D8                  RC                              ;B AND HL
0168   008B FE 3A               CPI  '9'+1                      ;IF NUMBERS, CONVERT
0169   008D D0                  RNC                             ;TO BINARY IN HL AND
0170   008E 3E F0               MVI  A,0F0H                     ;SET B TO # OF DIGITS
0171   0090 A4                  ANA  H                          ;IF H>15, THERE IS NO
0172   0091 C2 D5 00            JNZ  QHOW                       ;ROOM FOR NEXT DIGIT
0173   0094 04                  INR  B                          ;B COUNTS # OF DIGITS
0174   0095 C5                  PUSH B
0175   0096 44                  MOV  B,H                        ;HL=10*HL+(NEW DIGIT)
0176   0097 4D                  MOV  C,L
0177   0098 29                  DAD  H                          ; 2*HL
0178   0099 29                  DAD  H                          ; 4*HL
0179   009A 09                  DAD  B                          ; 5*HL
0180   009B 29                  DAD  H                          ;10*HL
0181   009C 1A                  LDAX D                          ;AND (DIGIT) IS FROM
0182   009D 13                  INX  D                          ;STRIPPING THE ASCII
0183   009E E6 0F               ANI  0FH                        ;CODE
0184   00A0 85                  ADD  L
0185   00A1 6F                  MOV  L,A
0186   00A2 3E 00               MVI  A,0
0187   00A4 8C                  ADC  H
0188   00A5 67                  MOV  H,A
0189   00A6 C1                  POP  B
0190   00A7 1A                  LDAX D                          ;DO THIS DIGIT AFTER
0191   00A8 F2 88 00            JP   TN1                        ;DIGIT. S SAYS OVERFLOW
0192   00AB             
0193   00AB 13          TX1:    INX  D                          ;SKIP TO NEXT HEX
0194   00AC 1A                  LDAX D                          ;GET HEX DIGIT
0195   00AD FE 30               CPI  '0'                        ;< '0'
0196   00AF D8                  RC                              ;ERROR
0197   00B0 FE 3A               CPI  '9'+1                      ;<= '9'
0198   00B2 DA BF 00            JC   TX2                        ;OK '0'..'9'
0199   00B5 FE 41               CPI  'A'                        ;< 'A'
0200   00B7 D8                  RC                              ;ERROR, >'9' && < 'A'
0201   00B8 E6 5F               ANI  5FH                        ;CONVERT ALPHA TO UPPER
0202   00BA FE 47               CPI  'F'+1                      ;> 'F'
0203   00BC D0                  RNC                             ;ERROR
0204   00BD D6 07               SUI  'A'-'0'-10                 ;SKIP GAP '9' -> 'A'
0205   00BF E6 0F       TX2:    ANI  0FH                        ;GET HEX CODE 0..F
0206   00C1 C5                  PUSH B
0207   00C2 47                  MOV  B,A                        ;SAVE HEX CODE
0208   00C3 3E F0               MVI  A,0F0H                     ;IF H>15
0209   00C5 A4                  ANA  H                          ;THERE IS NO ROOM
0210   00C6 78                  MOV  A,B
0211   00C7 C1                  POP  B
0212   00C8 C2 D5 00            JNZ  QHOW                       ;FOR NEXT DIGIT
0213   00CB             
0214   00CB 04                  INR  B                          ;B COUNTS # OF DIGITS
0215   00CC 29                  DAD  H                          ;2*HL
0216   00CD 29                  DAD  H                          ;4*HL
0217   00CE 29                  DAD  H                          ;8*HL
0218   00CF 29                  DAD  H                          ;16*HL
0219   00D0 B5                  ORA  L                          ;PUT HEX CODE INTO
0220   00D1 6F                  MOV  L,A                        ;THE 4 LSB OF HL
0221   00D2                     ;MOV  A,H
0222   00D2                     ;ORA  A
0223   00D2 C3 AB 00            JMP  TX1                        ;DIGIT AFTER DIGIT
0224   00D5             
0225   00D5 D5          QHOW:   PUSH D                          ;*** ERROR "HOW?" ***
0226   00D6 11 DC 00    AHOW:   LXI  D,HOW
0227   00D9 C3 24 05            JMP  ERROR
0228   00DC             
0229   00DC 48 4F 57 3F HOW:    .DB  "HOW?"
0230   00E0 0D                  .DB  CR
0231   00E1             
0232   00E1 4F 4B       OK:     .DB  "OK"
0233   00E3 0D                  .DB  CR
0234   00E4             
0235   00E4 57 48 41 54 WHAT:   .DB  "WHAT?"
0235   00E8 3F 
0236   00E9 0D                  .DB  CR
0237   00EA             
0238   00EA 53 4F 52 52 SORRY:  .DB  "SORRY"
0238   00EE 59 
0239   00EF 0D                  .DB  CR
0240   00F0             
0241   00F0             ;*************************************************************
0242   00F0             ;
0243   00F0             ; *** MAIN ***
0244   00F0             ;
0245   00F0             ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
0246   00F0             ; AND STORES IT IN THE MEMORY.
0247   00F0             ;
0248   00F0             ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
0249   00F0             ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
0250   00F0             ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
0251   00F0             ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
0252   00F0             ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
0253   00F0             ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
0254   00F0             ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
0255   00F0             ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
0256   00F0             ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
0257   00F0             ;
0258   00F0             ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
0259   00F0             ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
0260   00F0             ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
0261   00F0             ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
0262   00F0             ;
0263   00F0             ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
0264   00F0             ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
0265   00F0             ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
0266   00F0             ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
0267   00F0             ;
0268   00F0             ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
0269   00F0             ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
0270   00F0             ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
0271   00F0             ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
0272   00F0             ;
0273   00F0 31 00 20    RSTART: LXI  SP,STACK
0274   00F3 CD 0E 00    ST1:    CALL CRLF                       ;AND JUMP TO HERE
0275   00F6 11 E1 00            LXI  D,OK                       ;DE->STRING
0276   00F9 97                  SUB  A                          ;A=0
0277   00FA CD C5 05            CALL PRTSTG                     ;PRINT STRING UNTIL CR
0278   00FD 21 04 01            LXI  H,ST2+1                    ;LITERAL 0
0279   0100 22 02 08            SHLD CURRNT                     ;CURRENT->LINE # = 0
0280   0103 21 00 00    ST2:    LXI  H,0
0281   0106 22 0A 08            SHLD LOPVAR
0282   0109 22 04 08            SHLD STKGOS
0283   010C 3E 3E       ST3:    MVI  A,'>'                      ;PROMPT '>' AND
0284   010E CD 54 05            CALL GETLN                      ;READ A LINE
0285   0111 D5                  PUSH D                          ;DE->END OF LINE
0286   0112 11 68 1F            LXI  D,BUFFER                   ;DE->BEGINNING OF LINE
0287   0115 CD 7E 00            CALL TSTNUM                     ;TEST IF IT IS A NUMBER
0288   0118 EF                  RST  RIGNBLK
0289   0119 7C                  MOV  A,H                        ;HL=VALUE OF THE # OR
0290   011A B5                  ORA  L                          ;0 IF NO # WAS FOUND
0291   011B C1                  POP  B                          ;BC->END OF LINE
0292   011C CA 9A 07            JZ   DIRECT
0293   011F 1B                  DCX  D                          ;BACKUP DE AND SAVE
0294   0120 7C                  MOV  A,H                        ;VALUE OF LINE # THERE
0295   0121 12                  STAX D
0296   0122 1B                  DCX  D
0297   0123 7D                  MOV  A,L
0298   0124 12                  STAX D
0299   0125 C5                  PUSH B                          ;BC,DE->BEGIN, END
0300   0126 D5                  PUSH D
0301   0127 79                  MOV  A,C
0302   0128 93                  SUB  E
0303   0129 F5                  PUSH PSW                        ;A=# OF BYTES IN LINE
0304   012A CD 9D 05            CALL FNDLN                      ;FIND THIS LINE IN SAVE
0305   012D D5                  PUSH D                          ;AREA, DE->SAVE AREA
0306   012E C2 41 01            JNZ  ST4                        ;NZ:NOT FOUND, INSERT
0307   0131 D5                  PUSH D                          ;Z:FOUND, DELETE IT
0308   0132 CD B9 05            CALL FNDNXT                     ;FIND NEXT LINE
0309   0135                                                     ;DE->NEXT LINE
0310   0135 C1                  POP  B                          ;BC->LINE TO BE DELETED
0311   0136 2A 16 08            LHLD TXTUNF                     ;HL->UNFILLED SAVE AREA
0312   0139 CD 66 06            CALL MVUP                       ;MOVE UP TO DELETE
0313   013C 60                  MOV  H,B                        ;TXTUNF->UNFILLED AREA
0314   013D 69                  MOV  L,C
0315   013E 22 16 08            SHLD TXTUNF                     ;UPDATE
0316   0141 C1          ST4:    POP  B                          ;GET READY TO INSERT
0317   0142 2A 16 08            LHLD TXTUNF                     ;BUT FIRST CHECK IF
0318   0145 F1                  POP  PSW                        ;THE LENGTH OF NEW LINE
0319   0146 E5                  PUSH H                          ;IS 3 (LINE # AND CR)
0320   0147 FE 03               CPI  3                          ;THEN DO NOT INSERT
0321   0149 CA F0 00            JZ   RSTART                     ;MUST CLEAR THE STACK
0322   014C 85                  ADD  L                          ;COMPUTE NEW TXTUNF
0323   014D 6F                  MOV  L,A
0324   014E 3E 00               MVI  A,0
0325   0150 8C                  ADC  H
0326   0151 67                  MOV  H,A                        ;HL->NEW UNFILLED AREA
0327   0152 11 00 1F            LXI  D,TXTEND                   ;CHECK TO SEE IF THERE
0328   0155 E7                  RST  RCOMP                      ;COMP HL,DE - IS ENOUGH SPACE
0329   0156 D2 4D 05            JNC  QSORRY                     ;SORRY, NO ROOM FOR IT
0330   0159 22 16 08            SHLD TXTUNF                     ;OK, UPDATE TXTUNF
0331   015C D1                  POP  D                          ;DE->OLD UNFILLED AREA
0332   015D CD 6F 06            CALL MVDOWN
0333   0160 D1                  POP  D                          ;DE->BEGIN, HL->END
0334   0161 E1                  POP  H
0335   0162 CD 66 06            CALL MVUP                       ;MOVE NEW LINE TO SAVE
0336   0165 C3 0C 01            JMP  ST3                        ;AREA
0337   0168             
0338   0168             ;*************************************************************
0339   0168             ;
0340   0168             ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
0341   0168             ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
0342   0168             ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
0343   0168             ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
0344   0168             ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
0345   0168             ;
0346   0168             ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
0347   0168             ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
0348   0168             ; GO BACK TO 'RSTART'.
0349   0168             ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
0350   0168             ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
0351   0168             ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
0352   0168             ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
0353   0168             ;*************************************************************
0354   0168             ;
0355   0168             ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
0356   0168             ;
0357   0168             ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
0358   0168             ;
0359   0168             ; 'STOP(CR)' GOES BACK TO 'RSTART'
0360   0168             ;
0361   0168             ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
0362   0168             ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
0363   0168             ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
0364   0168             ;
0365   0168             ; THERE ARE 3 MORE ENTRIES IN 'RUN':
0366   0168             ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
0367   0168             ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
0368   0168             ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
0369   0168             ;
0370   0168             ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
0371   0168             ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
0372   0168             ;
0373   0168 CD 1C 05    NEW:    CALL ENDCHK                     ;*** NEW(CR) ***
0374   016B 21 18 08            LXI  H,TXTBGN
0375   016E 22 16 08            SHLD TXTUNF
0376   0171             ;
0377   0171 CD 1C 05    STOP:   CALL ENDCHK                     ;*** STOP(CR) ***
0378   0174 C3 F0 00            JMP  RSTART
0379   0177             
0380   0177 CD 1C 05    RUN:    CALL ENDCHK                     ;*** RUN(CR) ***
0381   017A 11 18 08            LXI  D,TXTBGN                   ;FIRST SAVED LINE
0382   017D             ;
0383   017D 21 00 00    RUNNXL: LXI  H,0                        ;*** RUNNXL ***
0384   0180 CD A5 05            CALL FNDLP                      ;FIND WHATEVER LINE #
0385   0183 DA F0 00            JC   RSTART                     ;C:PASSED TXTUNF, QUIT
0386   0186             ;
0387   0186 EB          RUNTSL: XCHG                            ;*** RUNTSL ***
0388   0187 22 02 08            SHLD CURRNT                     ;SET 'CURRENT'->LINE #
0389   018A EB                  XCHG
0390   018B 13                  INX  D                          ;BUMP PASS LINE #
0391   018C 13                  INX  D
0392   018D             ;
0393   018D CD E8 06    RUNSML: CALL CHKIO                      ;*** RUNSML ***
0394   0190 21 10 07            LXI  H,TAB2-1                   ;FIND COMMAND IN TAB2
0395   0193 C3 9D 07            JMP  EXEC                       ;AND EXECUTE IT
0396   0196             
0397   0196 DF          GOTO:   RST  REXPR                      ;*** GOTO EXPR ***
0398   0197 D5                  PUSH D                          ;SAVE FOR ERROR ROUTINE
0399   0198 CD 1C 05            CALL ENDCHK                     ;MUST FIND A CR
0400   019B CD 9D 05            CALL FNDLN                      ;FIND THE TARGET LINE
0401   019E C2 D6 00            JNZ  AHOW                       ;NO SUCH LINE #
0402   01A1 F1                  POP  PSW                        ;CLEAR THE PUSH DE
0403   01A2 C3 86 01            JMP  RUNTSL                     ;GO DO IT
0404   01A5             ;
0405   01A5             ;*************************************************************
0406   01A5             ;
0407   01A5             ; *** LIST *** & PRINT ***
0408   01A5             ;
0409   01A5             ; LIST HAS TWO FORMS:
0410   01A5             ; 'LIST(CR)' LISTS ALL SAVED LINES
0411   01A5             ; 'LIST #(CR)' START LIST AT THIS LINE #
0412   01A5             ; YOU CAN STOP THE LISTING BY CONTROL C KEY
0413   01A5             ;
0414   01A5             ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
0415   01A5             ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
0416   01A5             ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
0417   01A5             ;
0418   01A5             ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
0419   01A5             ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
0420   01A5             ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
0421   01A5             ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
0422   01A5             ; SPECIFIED, 6 POSITIONS WILL BE USED.
0423   01A5             ;
0424   01A5             ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
0425   01A5             ; DOUBLE QUOTES.
0426   01A5             ;
0427   01A5             ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
0428   01A5             ;
0429   01A5             ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
0430   01A5             ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
0431   01A5             ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
0432   01A5             ;
0433   01A5 CD 7E 00    LIST:   CALL TSTNUM                     ;TEST IF THERE IS A #
0434   01A8 CD 1C 05            CALL ENDCHK                     ;IF NO # WE GET A 0
0435   01AB CD 9D 05            CALL FNDLN                      ;FIND THIS OR NEXT LINE
0436   01AE DA F0 00    LS1:    JC   RSTART                     ;C:PASSED TXTUNF
0437   01B1 CD 4E 06            CALL PRTLN                      ;PRINT THE LINE
0438   01B4 CD E8 06            CALL CHKIO                      ;STOP IF HIT CONTROL-C
0439   01B7 CD A5 05            CALL FNDLP                      ;FIND NEXT LINE
0440   01BA C3 AE 01            JMP  LS1                        ;AND LOOP BACK
0441   01BD             
0442   01BD 0E 08       PRINT:  MVI  C,8                        ;C = # OF SPACES
0443   01BF 3E 0A               MVI  A,10                       ;DEFAULT BASE FOR PRTNUM
0444   01C1 32 00 08            STA  PNBASE
0445   01C4 CF                  TSTC(';',PR2)                   ;IF NULL LIST & ";"
0445   01C5 3B          
0445   01C6 06          
0446   01C7 CD 0E 00            CALL CRLF                       ;GIVE CR-LF AND
0447   01CA C3 8D 01            JMP  RUNSML                     ;CONTINUE SAME LINE
0448   01CD CF          PR2:    TSTC(CR,PR0)                    ;IF NULL LIST (CR)
0448   01CE 0D          
0448   01CF 06          
0449   01D0 CD 0E 00            CALL CRLF                       ;ALSO GIVE CR-LF AND
0450   01D3 C3 7D 01            JMP  RUNNXL                     ;GO TO NEXT LINE
0451   01D6 CF          PR0:    TSTC('#',PR5)                   ;ELSE IS IT FORMAT?
0451   01D7 23          
0451   01D8 05          
0452   01D9 DF                  RST  REXPR                      ;YES, EVALUATE EXPR.
0453   01DA 4D                  MOV  C,L                        ;AND SAVE IT IN C
0454   01DB C3 EF 01            JMP  PR3                        ;LOOK FOR MORE TO PRINT
0455   01DE CF          PR5:    TSTC('%',PR1)                   ;ELSE IS IT PRTNUM BASE?
0455   01DF 25          
0455   01E0 08          
0456   01E1 DF                  RST  REXPR                      ;YES, EVALUATE EXPR.
0457   01E2 7D                  MOV  A,L                        ;AND STORE THE LOW PART
0458   01E3 32 00 08            STA  PNBASE                     ;IN PNBASE
0459   01E6 C3 EF 01            JMP  PR3                        ;LOOK FOR MORE TO PRINT
0460   01E9 CD D1 05    PR1:    CALL QTSTG                      ;OR IS IT A STRING?
0461   01EC C3 01 02            JMP  PR8                        ;IF NOT, MUST BE EXPR.
0462   01EF CF          PR3:    TSTC($2C,PR6)                   ;IF ",", GO FIND NEXT
0462   01F0 2C          
0462   01F1 06          
0463   01F2 CD 0D 05            CALL FIN                        ;IN THE LIST.
0464   01F5 C3 D6 01            JMP  PR0                        ;LIST CONTINUES
0465   01F8 3E 0A       PR6:    MVI  A,10                       ;END OF LIST REACHED
0466   01FA 32 00 08            STA  PNBASE                     ;RESET DEFAULT BASE
0467   01FD CD 0E 00            CALL CRLF                       ;LIST ENDS WITH CRLF
0468   0200 F7                  RST  RFINISH                    ;FINISH
0469   0201 DF          PR8:    RST  REXPR                      ;EVALUATE THE EXPR
0470   0202 C5                  PUSH B
0471   0203 CD F6 05            CALL PRTNUM                     ;PRINT THE VALUE
0472   0206 C1                  POP  B
0473   0207 C3 EF 01            JMP  PR3                        ;MORE TO PRINT?
0474   020A             ;
0475   020A             ;*************************************************************
0476   020A             ;
0477   020A             ; *** GOSUB *** & RETURN ***
0478   020A             ;
0479   020A             ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
0480   020A             ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
0481   020A             ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
0482   020A             ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
0483   020A             ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
0484   020A             ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
0485   020A             ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
0486   020A             ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
0487   020A             ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
0488   020A             ;
0489   020A             ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
0490   020A             ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
0491   020A             ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
0492   020A             ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
0493   020A             ;
0494   020A CD 9A 06    GOSUB:  CALL PUSHA                      ;SAVE THE CURRENT "FOR"
0495   020D DF                  RST  REXPR                      ;PARAMETERS
0496   020E D5                  PUSH D                          ;AND TEXT POINTER
0497   020F CD 9D 05            CALL FNDLN                      ;FIND THE TARGET LINE
0498   0212 C2 D6 00            JNZ  AHOW                       ;NOT THERE. SAY "HOW?"
0499   0215 2A 02 08            LHLD CURRNT                     ;FOUND IT, SAVE OLD
0500   0218 E5                  PUSH H                          ;'CURRNT' OLD 'STKGOS'
0501   0219 2A 04 08            LHLD STKGOS
0502   021C E5                  PUSH H
0503   021D 21 00 00            LXI  H,0                        ;AND LOAD NEW ONES
0504   0220 22 0A 08            SHLD LOPVAR
0505   0223 39                  DAD  SP
0506   0224 22 04 08            SHLD STKGOS
0507   0227 C3 86 01            JMP  RUNTSL                     ;THEN RUN THAT LINE
0508   022A CD 1C 05    RETURN: CALL ENDCHK                     ;THERE MUST BE A CR
0509   022D 2A 04 08            LHLD STKGOS                     ;OLD STACK POINTER
0510   0230 7C                  MOV  A,H                        ;0 MEANS NOT EXIST
0511   0231 B5                  ORA  L
0512   0232 CA 20 05            JZ   QWHAT                      ;SO, WE SAY: "WHAT?"
0513   0235 F9                  SPHL                            ;ELSE, RESTORE IT
0514   0236 E1                  POP  H
0515   0237 22 04 08            SHLD STKGOS                     ;AND THE OLD 'STKGOS'
0516   023A E1                  POP  H
0517   023B 22 02 08            SHLD CURRNT                     ;AND THE OLD 'CURRNT'
0518   023E D1                  POP  D                          ;OLD TEXT POINTER
0519   023F CD 7E 06            CALL POPA                       ;OLD "FOR" PARAMETERS
0520   0242 F7                  RST  RFINISH                    ;AND WE ARE BACK HOME
0521   0243             ;
0522   0243             ;*************************************************************
0523   0243             ;
0524   0243             ; *** FOR *** & NEXT ***
0525   0243             ;
0526   0243             ; 'FOR' HAS TWO FORMS:
0527   0243             ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
0528   0243             ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
0529   0243             ; EXP3=1.  (I.E., WITH A STEP OF +1.)
0530   0243             ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
0531   0243             ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
0532   0243             ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
0533   0243             ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
0534   0243             ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
0535   0243             ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
0536   0243             ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
0537   0243             ; BEFORE THE NEW ONE OVERWRITES IT.
0538   0243             ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
0539   0243             ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
0540   0243             ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
0541   0243             ; (PURGED FROM THE STACK..)
0542   0243             ;
0543   0243             ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
0544   0243             ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
0545   0243             ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
0546   0243             ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
0547   0243             ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
0548   0243             ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
0549   0243             ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
0550   0243             ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
0551   0243             ; IS PURGED AND EXECUTION CONTINUES.
0552   0243             ;
0553   0243 CD 9A 06    FOR:    CALL PUSHA                      ;SAVE THE OLD SAVE AREA
0554   0246 CD FA 04            CALL SETVAL                     ;SET THE CONTROL VAR.
0555   0249 2B                  DCX  H                          ;HL IS ITS ADDRESS
0556   024A 22 0A 08            SHLD LOPVAR                     ;SAVE THAT
0557   024D 21 75 07            LXI  H,TAB5-1                   ;USE 'EXEC' TO LOOK
0558   0250 C3 9D 07            JMP  EXEC                       ;FOR THE WORD 'TO'
0559   0253 DF          FR1:    RST  REXPR                      ;EVALUATE THE LIMIT
0560   0254 22 0E 08            SHLD LOPLMT                     ;SAVE THAT
0561   0257 21 7B 07            LXI  H,TAB6-1                   ;USE 'EXEC' TO LOOK
0562   025A C3 9D 07            JMP EXEC                        ;FOR THE WORD 'STEP'
0563   025D DF          FR2:    RST  REXPR                      ;FOUND IT, GET STEP
0564   025E C3 64 02            JMP  FR4
0565   0261 21 01 00    FR3:    LXI  H,1H                       ;NOT FOUND, SET TO 1
0566   0264 22 0C 08    FR4:    SHLD LOPINC                     ;SAVE THAT TOO
0567   0267 2A 02 08    FR5:    LHLD CURRNT                     ;SAVE CURRENT LINE #
0568   026A 22 10 08            SHLD LOPLN
0569   026D EB                  XCHG                            ;AND TEXT POINTER
0570   026E 22 12 08            SHLD LOPPT
0571   0271 01 0A 00            LXI  B,0AH                      ;DIG INTO STACK TO
0572   0274 2A 0A 08            LHLD LOPVAR                     ;FIND 'LOPVAR'
0573   0277 EB                  XCHG
0574   0278 60                  MOV  H,B
0575   0279 68                  MOV  L,B                        ;HL=0 NOW
0576   027A 39                  DAD  SP                         ;HERE IS THE STACK
0577   027B 3E                  .DB  3EH
0578   027C 09          FR7:    DAD  B                          ;EACH LEVEL IS 10 DEEP
0579   027D 7E                  MOV  A,M                        ;GET THAT OLD 'LOPVAR'
0580   027E 23                  INX  H
0581   027F B6                  ORA  M
0582   0280 CA 9D 02            JZ   FR8                        ;0 SAYS NO MORE IN IT
0583   0283 7E                  MOV  A,M
0584   0284 2B                  DCX  H
0585   0285 BA                  CMP  D                          ;SAME AS THIS ONE?
0586   0286 C2 7C 02            JNZ  FR7
0587   0289 7E                  MOV  A,M                        ;THE OTHER HALF?
0588   028A BB                  CMP  E
0589   028B C2 7C 02            JNZ  FR7
0590   028E EB                  XCHG                            ;YES, FOUND ONE
0591   028F 21 00 00            LXI  H,0H
0592   0292 39                  DAD  SP                         ;TRY TO MOVE SP
0593   0293 44                  MOV  B,H
0594   0294 4D                  MOV  C,L
0595   0295 21 0A 00            LXI  H,0AH
0596   0298 19                  DAD  D
0597   0299 CD 6F 06            CALL MVDOWN                     ;AND PURGE 10 WORDS
0598   029C F9                  SPHL                            ;IN THE STACK
0599   029D 2A 12 08    FR8:    LHLD LOPPT                      ;JOB DONE, RESTORE DE
0600   02A0 EB                  XCHG
0601   02A1 F7                  RST  RFINISH                    ;AND CONTINUE
0602   02A2             ;
0603   02A2 FF          NEXT:   RST  RTSTV                      ;GET ADDRESS OF VAR.
0604   02A3 DA 20 05            JC   QWHAT                      ;NO VARIABLE, "WHAT?"
0605   02A6 22 06 08            SHLD VARNXT                     ;YES, SAVE IT
0606   02A9 D5          NX0:    PUSH D                          ;SAVE TEXT POINTER
0607   02AA EB                  XCHG
0608   02AB 2A 0A 08            LHLD LOPVAR                     ;GET VAR. IN 'FOR'
0609   02AE 7C                  MOV  A,H
0610   02AF B5                  ORA  L                          ;0 SAYS NEVER HAD ONE
0611   02B0 CA 21 05            JZ   AWHAT                      ;SO WE ASK: "WHAT?"
0612   02B3 E7                  RST  RCOMP                      ;ELSE WE CHECK THEM
0613   02B4 CA C1 02            JZ   NX3                        ;OK, THEY AGREE
0614   02B7 D1                  POP  D                          ;NO, LET'S SEE
0615   02B8 CD 7E 06            CALL POPA                       ;PURGE CURRENT LOOP
0616   02BB 2A 06 08            LHLD VARNXT                     ;AND POP ONE LEVEL
0617   02BE C3 A9 02            JMP  NX0                        ;GO CHECK AGAIN
0618   02C1 5E          NX3:    MOV  E,M                        ;COME HERE WHEN AGREED
0619   02C2 23                  INX  H
0620   02C3 56                  MOV  D,M                        ;DE=VALUE OF VAR.
0621   02C4 2A 0C 08            LHLD LOPINC
0622   02C7 E5                  PUSH H
0623   02C8 7C                  MOV  A,H
0624   02C9 AA                  XRA  D
0625   02CA 7A                  MOV  A,D
0626   02CB 19                  DAD  D                          ;ADD ONE STEP
0627   02CC FA D3 02            JM   NX4
0628   02CF AC                  XRA  H
0629   02D0 FA F5 02            JM   NX5
0630   02D3 EB          NX4:    XCHG
0631   02D4 2A 0A 08            LHLD LOPVAR                     ;PUT IT BACK
0632   02D7 73                  MOV  M,E
0633   02D8 23                  INX  H
0634   02D9 72                  MOV  M,D
0635   02DA 2A 0E 08            LHLD LOPLMT                     ;HL->LIMIT
0636   02DD F1                  POP  PSW                        ;OLD HL
0637   02DE B7                  ORA  A
0638   02DF F2 E3 02            JP   NX1                        ;STEP > 0
0639   02E2 EB                  XCHG                            ;STEP < 0
0640   02E3 CD F2 04    NX1:    CALL CKHLDE                     ;COMPARE WITH LIMIT
0641   02E6 D1                  POP  D                          ;RESTORE TEXT POINTER
0642   02E7 DA F7 02            JC   NX2                        ;OUTSIDE LIMIT
0643   02EA 2A 10 08            LHLD LOPLN                      ;WITHIN LIMIT, GO
0644   02ED 22 02 08            SHLD CURRNT                     ;BACK TO THE SAVED
0645   02F0 2A 12 08            LHLD LOPPT                      ;'CURRNT' AND TEXT
0646   02F3 EB                  XCHG                            ;POINTER
0647   02F4 F7                  RST  RFINISH
0648   02F5 E1          NX5:    POP  H
0649   02F6 D1                  POP  D
0650   02F7 CD 7E 06    NX2:    CALL POPA                       ;PURGE THIS LOOP
0651   02FA F7                  RST  RFINISH
0652   02FB             ;
0653   02FB             ;*************************************************************
0654   02FB             ;
0655   02FB             ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
0656   02FB             ;
0657   02FB             ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
0658   02FB             ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
0659   02FB             ;
0660   02FB             ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
0661   02FB             ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
0662   02FB             ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
0663   02FB             ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
0664   02FB             ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
0665   02FB             ; EXECUTION CONTINUES AT THE NEXT LINE.
0666   02FB             ;
0667   02FB             ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
0668   02FB             ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
0669   02FB             ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
0670   02FB             ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
0671   02FB             ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
0672   02FB             ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
0673   02FB             ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
0674   02FB             ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
0675   02FB             ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
0676   02FB             ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
0677   02FB             ;
0678   02FB             ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
0679   02FB             ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
0680   02FB             ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
0681   02FB             ; THIS IS HANDLED IN 'INPERR'.
0682   02FB             ;
0683   02FB             ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
0684   02FB             ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
0685   02FB             ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
0686   02FB             ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
0687   02FB             ; THIS IS DONE BY 'DEFLT'.
0688   02FB             ;
0689   02FB 21 00 00    REM:    LXI  H,0H                       ;*** REM ***
0690   02FE 3E                  .DB  3EH                        ;SKIP RST, THIS IS LIKE 'IF 0'
0691   02FF             ;
0692   02FF DF          IFF:    RST  REXPR                      ;*** IF ***
0693   0300 7C                  MOV  A,H                        ;IS THE EXPR.=0?
0694   0301 B5                  ORA  L
0695   0302 C2 8D 01            JNZ  RUNSML                     ;NO, CONTINUE
0696   0305 CD BB 05            CALL FNDSKP                     ;YES, SKIP REST OF LINE
0697   0308 D2 86 01            JNC  RUNTSL                     ;AND RUN THE NEXT LINE
0698   030B C3 F0 00            JMP  RSTART                     ;IF NO NEXT, RE-START
0699   030E             ;
0700   030E 2A 08 08    INPERR: LHLD STKINP                     ;*** INPERR ***
0701   0311 F9                  SPHL                            ;RESTORE OLD SP
0702   0312 E1                  POP  H                          ;AND OLD 'CURRNT'
0703   0313 22 02 08            SHLD CURRNT
0704   0316 D1                  POP  D                          ;AND OLD TEXT POINTER
0705   0317 D1                  POP  D                          ;REDO INPUT
0706   0318             ;
0707   0318             INPUT:                                  ;*** INPUT ***
0708   0318 D5          IP1:    PUSH D                          ;SAVE IN CASE OF ERROR
0709   0319 CD D1 05            CALL QTSTG                      ;IS NEXT ITEM A STRING?
0710   031C C3 26 03            JMP  IP2                        ;NO
0711   031F FF                  RST  RTSTV                      ;YES, BUT FOLLOWED BY A
0712   0320 DA 5D 03            JC   IP4                        ;VARIABLE?   NO.
0713   0323 C3 36 03            JMP  IP3                        ;YES.  INPUT VARIABLE
0714   0326 D5          IP2:    PUSH D                          ;SAVE FOR 'PRTSTG'
0715   0327 FF                  RST  RTSTV                      ;MUST BE VARIABLE NOW
0716   0328 DA 20 05            JC   QWHAT                      ;"WHAT?" IT IS NOT?
0717   032B 1A                  LDAX D                          ;GET READY FOR 'PRTSTR'
0718   032C 4F                  MOV  C,A
0719   032D 97                  SUB  A
0720   032E 12                  STAX D
0721   032F D1                  POP  D
0722   0330 CD C5 05            CALL PRTSTG                     ;PRINT STRING AS PROMPT
0723   0333 79                  MOV  A,C                        ;RESTORE TEXT
0724   0334 1B                  DCX  D
0725   0335 12                  STAX D
0726   0336 D5          IP3:    PUSH D                          ;SAVE TEXT POINTER
0727   0337 EB                  XCHG
0728   0338 2A 02 08            LHLD CURRNT                     ;ALSO SAVE 'CURRNT'
0729   033B E5                  PUSH H
0730   033C 21 18 03            LXI  H,IP1                      ;A NEGATIVE NUMBER
0731   033F 22 02 08            SHLD CURRNT                     ;AS A FLAG
0732   0342 21 00 00            LXI  H,0H                       ;SAVE SP TOO
0733   0345 39                  DAD  SP
0734   0346 22 08 08            SHLD STKINP
0735   0349 D5                  PUSH D                          ;OLD HL
0736   034A 3E 3A               MVI  A,':'                      ;PRINT THIS TOO
0737   034C CD 54 05            CALL GETLN                      ;AND GET A LINE
0738   034F 11 68 1F            LXI  D,BUFFER                   ;POINTS TO BUFFER
0739   0352 DF                  RST  REXPR                      ;EVALUATE INPUT
0740   0353                     ;NOP                             ;CAN BE 'CALL ENDCHK'
0741   0353                     ;NOP
0742   0353                     ;NOP
0743   0353 D1                  POP  D                          ;OK, GET OLD HL
0744   0354 EB                  XCHG
0745   0355 73                  MOV  M,E                        ;SAVE VALUE IN VAR.
0746   0356 23                  INX  H
0747   0357 72                  MOV  M,D
0748   0358 E1                  POP  H                          ;GET OLD 'CURRNT'
0749   0359 22 02 08            SHLD CURRNT
0750   035C D1                  POP  D                          ;AND OLD TEXT POINTER
0751   035D F1          IP4:    POP  PSW                        ;PURGE JUNK IN STACK
0752   035E CF                  TSTC($2C,IP5)                   ;IS NEXT CH. ','?
0752   035F 2C          
0752   0360 03          
0753   0361 C3 18 03            JMP  IP1                        ;YES, MORE ITEMS.
0754   0364 F7          IP5:    RST  RFINISH
0755   0365             ;
0756   0365 1A          DEFLT:  LDAX D                          ;***  DEFLT ***
0757   0366 FE 0D               CPI  CR                         ;EMPTY LINE IS OK
0758   0368 CA 74 03            JZ   LT1                        ;ELSE IT IS 'LET'
0759   036B             ;
0760   036B CD FA 04    LET:    CALL SETVAL                     ;*** LET ***
0761   036E CF                  TSTC($2C,LT1)                   ;SET VALUE TO VAR.
0761   036F 2C          
0761   0370 03          
0762   0371 C3 6B 03            JMP  LET                        ;ITEM BY ITEM
0763   0374 F7          LT1:    RST  RFINISH                    ;UNTIL FINISH
0764   0375             ;
0765   0375             ;*************************************************************
0766   0375             ;
0767   0375             ; *** EXPR ***
0768   0375             ;
0769   0375             ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
0770   0375             ; <EXPR>::<EXPR2>
0771   0375             ;         <EXPR2><REL.OP.><EXPR2>
0772   0375             ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
0773   0375             ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
0774   0375             ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
0775   0375             ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
0776   0375             ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
0777   0375             ; <EXPR4>::=<VARIABLE>
0778   0375             ;           <FUNCTION>
0779   0375             ;           (<EXPR>)
0780   0375             ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
0781   0375             ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
0782   0375             ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
0783   0375             ;
0784   0375             ;EXPR:  CALL EXPR2                      ;THIS IS AT LOC. 18
0785   0375             ;       PUSH H                          ;SAVE <EXPR2> VALUE
0786   0375 21 83 07    EXPR1:  LXI  H,TAB8-1                   ;LOOKUP REL.OP.
0787   0378 C3 9D 07            JMP  EXEC                       ;GO DO IT
0788   037B             ;
0789   037B CD A4 03    XP11:   CALL XP18                       ;REL.OP.">="
0790   037E D8                  RC                              ;NO, RETURN HL=0
0791   037F 6F                  MOV  L,A                        ;YES, RETURN HL=1
0792   0380 C9                  RET
0793   0381             ;
0794   0381 CD A4 03    XP12:   CALL XP18                       ;REL.OP."#"
0795   0384 C8                  RZ                              ;FALSE, RETURN HL=0
0796   0385 6F                  MOV  L,A                        ;TRUE, RETURN HL=1
0797   0386 C9                  RET
0798   0387             ;
0799   0387 CD A4 03    XP13:   CALL XP18                       ;REL.OP.">"
0800   038A C8                  RZ                              ;FALSE
0801   038B D8                  RC                              ;ALSO FALSE, HL=0
0802   038C 6F                  MOV  L,A                        ;TRUE, HL=1
0803   038D C9                  RET
0804   038E             ;
0805   038E CD A4 03    XP14:   CALL XP18                       ;REL.OP."<="
0806   0391 6F                  MOV  L,A                        ;SET HL=1
0807   0392 C8                  RZ                              ;REL. TRUE, RETURN
0808   0393 D8                  RC
0809   0394 6C                  MOV  L,H                        ;ELSE SET HL=0
0810   0395 C9                  RET
0811   0396             ;
0812   0396 CD A4 03    XP15:   CALL XP18                       ;REL.OP."="
0813   0399 C0                  RNZ                             ;FALSE, RETURN HL=0
0814   039A 6F                  MOV  L,A                        ;ELSE SET HL=1
0815   039B C9                  RET
0816   039C             ;
0817   039C CD A4 03    XP16:   CALL XP18                       ;REL.OP."<"
0818   039F D0                  RNC                             ;FALSE, RETURN HL=0
0819   03A0 6F                  MOV  L,A                        ;ELSE SET HL=1
0820   03A1 C9                  RET
0821   03A2             ;
0822   03A2 E1          XP17:   POP  H                          ;NOT .REL.OP
0823   03A3 C9                  RET                             ;RETURN HL=<EXPR2>
0824   03A4             ;
0825   03A4 79          XP18:   MOV  A,C                        ;SUBROUTINE FOR ALL
0826   03A5 E1                  POP  H                          ;REL.OP.'S
0827   03A6 C1                  POP  B
0828   03A7 E5                  PUSH H                          ;REVERSE TOP OF STACK
0829   03A8 C5                  PUSH B
0830   03A9 4F                  MOV  C,A
0831   03AA CD B9 03            CALL EXPR2                      ;GET 2ND <EXPR2>
0832   03AD EB                  XCHG                            ;VALUE IN DE NOW
0833   03AE E3                  XTHL                            ;1ST <EXPR2> IN HL
0834   03AF CD F2 04            CALL CKHLDE                     ;COMPARE 1ST WITH 2ND
0835   03B2 D1                  POP  D                          ;RESTORE TEXT POINTER
0836   03B3 21 00 00            LXI  H,0H                       ;SET HL=0, A=1
0837   03B6 3E 01               MVI  A,1
0838   03B8 C9                  RET
0839   03B9             ;
0840   03B9 CF          EXPR2:  TSTC('-',XP21)                  ;NEGATIVE SIGN?
0840   03BA 2D          
0840   03BB 06          
0841   03BC 21 00 00            LXI  H,0H                       ;YES, FAKE '0-'
0842   03BF C3 E3 03            JMP  XP26                       ;TREAT LIKE SUBTRACT
0843   03C2             ;
0844   03C2 CF          XP21:   TSTC('+',XP22)                  ;POSITIVE SIGN? IGNORE
0844   03C3 2B          
0844   03C4 00          
0845   03C5 CD ED 03    XP22:   CALL EXPR3                      ;1ST <EXPR3>
0846   03C8 CF          XP23:   TSTC('+',XP25)                  ;ADD?
0846   03C9 2B          
0846   03CA 15          
0847   03CB E5                  PUSH H                          ;YES, SAVE VALUE
0848   03CC CD ED 03            CALL EXPR3                      ;GET 2ND <EXPR3>
0849   03CF EB          XP24:   XCHG                            ;2ND IN DE
0850   03D0 E3                  XTHL                            ;1ST IN HL
0851   03D1 7C                  MOV  A,H                        ;COMPARE SIGN
0852   03D2 AA                  XRA  D
0853   03D3 7A                  MOV  A,D
0854   03D4 19                  DAD  D
0855   03D5 D1                  POP  D                          ;RESTORE TEXT POINTER
0856   03D6 FA C8 03            JM   XP23                       ;1ST AND 2ND SIGN DIFFER
0857   03D9 AC                  XRA  H                          ;1ST AND 2ND SIGN EQUAL
0858   03DA F2 C8 03            JP   XP23                       ;SO IS RESULT
0859   03DD             ;
0860   03DD C3 D5 00            JMP  QHOW                       ;ELSE WE HAVE OVERFLOW
0861   03E0             ;
0862   03E0 CF          XP25:   TSTC('-',XP42)                  ;SUBTRACT?
0862   03E1 2D          
0862   03E2 86          
0863   03E3 E5          XP26:   PUSH H                          ;YES, SAVE 1ST <EXPR3>
0864   03E4 CD ED 03            CALL EXPR3                      ;GET 2ND <EXPR3>
0865   03E7 CD E0 04            CALL CHGSGN                     ;NEGATE
0866   03EA C3 CF 03            JMP  XP24                       ;AND ADD THEM
0867   03ED             ;
0868   03ED CD 4D 04    EXPR3:  CALL EXPR4                      ;GET 1ST <EXPR4>
0869   03F0 CF          XP31:   TSTC('*',XP34)                  ;MULTIPLY?
0869   03F1 2A          
0869   03F2 2D          
0870   03F3 E5                  PUSH H                          ;YES, SAVE 1ST
0871   03F4 CD 4D 04            CALL EXPR4                      ;AND GET 2ND <EXPR4>
0872   03F7 06 00               MVI  B,0H                       ;CLEAR B FOR SIGN
0873   03F9 CD DD 04            CALL CHKSGN                     ;CHECK SIGN
0874   03FC E3                  XTHL                            ;1ST IN HL
0875   03FD CD DD 04            CALL CHKSGN                     ;CHECK SIGN OF 1ST
0876   0400 EB                  XCHG
0877   0401 E3                  XTHL
0878   0402 7C                  MOV  A,H                        ;IS HL > 255 ?
0879   0403 B7                  ORA  A
0880   0404 CA 0D 04            JZ   XP32                       ;NO
0881   0407 7A                  MOV  A,D                        ;YES, HOW ABOUT DE
0882   0408 B2                  ORA  D
0883   0409 EB                  XCHG                            ;PUT SMALLER IN HL
0884   040A C2 D6 00            JNZ  AHOW                       ;ALSO >, WILL OVERFLOW
0885   040D 7D          XP32:   MOV  A,L                        ;THIS IS DUMB
0886   040E 21 00 00            LXI  H,0H                       ;CLEAR RESULT
0887   0411 B7                  ORA  A                          ;ADD AND COUNT
0888   0412 CA 3F 04            JZ   XP35
0889   0415 19          XP33:   DAD  D
0890   0416 DA D6 00            JC   AHOW                       ;OVERFLOW
0891   0419 3D                  DCR  A
0892   041A C2 15 04            JNZ  XP33
0893   041D C3 3F 04            JMP  XP35                       ;FINISHED
0894   0420             ;
0895   0420 CF          XP34:   TSTC('/',XP42)                  ;DIVIDE?
0895   0421 2F          
0895   0422 46          
0896   0423 E5                  PUSH H                          ;YES, SAVE 1ST <EXPR4>
0897   0424 CD 4D 04            CALL EXPR4                      ;AND GET THE SECOND ONE
0898   0427 06 00               MVI  B,0H                       ;CLEAR B FOR SIGN
0899   0429 CD DD 04            CALL CHKSGN                     ;CHECK SIGN OF 2ND
0900   042C E3                  XTHL                            ;GET 1ST IN HL
0901   042D CD DD 04            CALL CHKSGN                     ;CHECK SIGN OF 1ST
0902   0430 EB                  XCHG
0903   0431 E3                  XTHL
0904   0432 EB                  XCHG
0905   0433 7A                  MOV  A,D                        ;DIVIDE BY 0?
0906   0434 B3                  ORA  E
0907   0435 CA D6 00            JZ   AHOW                       ;SAY "HOW?"
0908   0438 C5                  PUSH B                          ;ELSE SAVE SIGN
0909   0439 CD C0 04            CALL DIVIDE                     ;USE SUBROUTINE
0910   043C 60                  MOV  H,B                        ;RESULT IN HL NOW
0911   043D 69                  MOV  L,C
0912   043E C1                  POP  B                          ;GET SIGN BACK
0913   043F D1          XP35:   POP  D                          ;AND TEXT POINTER
0914   0440 7C                  MOV  A,H                        ;HL MUST BE +
0915   0441 B7                  ORA  A
0916   0442 FA D5 00            JM   QHOW                       ;ELSE IT IS OVERFLOW
0917   0445 78                  MOV  A,B
0918   0446 B7                  ORA  A
0919   0447 FC E0 04            CM   CHGSGN                     ;CHANGE SIGN IF NEEDED
0920   044A C3 F0 03            JMP  XP31                       ;LOOK FOR MORE TERMS
0921   044D             ;
0922   044D 21 57 07    EXPR4:  LXI  H,TAB4-1                   ;FIND FUNCTION IN TAB4
0923   0450 C3 9D 07            JMP  EXEC                       ;AND GO DO IT
0924   0453             ;
0925   0453 FF          XP40:   RST  RTSTV                      ;NO, NOT A FUNCTION
0926   0454 DA 5C 04            JC   XP41                       ;NOR A VARIABLE
0927   0457 7E                  MOV  A,M                        ;VARIABLE
0928   0458 23                  INX  H
0929   0459 66                  MOV  H,M                        ;VALUE IN HL
0930   045A 6F                  MOV  L,A
0931   045B C9                  RET
0932   045C             ;
0933   045C CD 7E 00    XP41:   CALL TSTNUM                     ;OR IS IT A NUMBER
0934   045F 78                  MOV  A,B                        ;# OF DIGIT
0935   0460 B7                  ORA  A
0936   0461 C0                  RNZ                             ;OK
0937   0462 CF          PARN:   TSTC($28,XP43)                  ; '('
0937   0463 28          
0937   0464 05          
0938   0465 DF                  RST  REXPR                      ;"(EXPR)"
0939   0466 CF                  TSTC($29,XP43)                  ; ')'
0939   0467 29          
0939   0468 01          
0940   0469 C9          XP42:   RET
0941   046A C3 20 05    XP43:   JMP  QWHAT                      ;ELSE SAY: "WHAT?"
0942   046D             
0943   046D CD 62 04    RND:    CALL PARN                       ;*** RND(EXPR) ***
0944   0470 7C                  MOV  A,H                        ;EXPR MUST BE +
0945   0471 B7                  ORA  A
0946   0472 FA D5 00            JM   QHOW
0947   0475 B5                  ORA  L                          ;AND NON-ZERO
0948   0476 CA D5 00            JZ   QHOW
0949   0479 D5                  PUSH D                          ;SAVE BOTH
0950   047A E5                  PUSH H
0951   047B 2A 14 08            LHLD RANPNT                     ;GET MEMORY AS RANDOM
0952   047E 11 D7 07            LXI  D,LSTROM                   ;NUMBER
0953   0481 E7                  RST  RCOMP
0954   0482 DA 88 04            JC   RA1                        ;WRAP AROUND IF LAST
0955   0485 21 00 00            LXI  H,START
0956   0488 5E          RA1:    MOV  E,M
0957   0489 23                  INX  H
0958   048A 56                  MOV  D,M
0959   048B 22 14 08            SHLD RANPNT
0960   048E E1                  POP  H
0961   048F EB                  XCHG
0962   0490 C5                  PUSH B
0963   0491 CD C0 04            CALL DIVIDE                     ;RND(N)=MOD(M,N)+1
0964   0494 C1                  POP  B
0965   0495 D1                  POP  D
0966   0496 23                  INX  H
0967   0497 C9                  RET
0968   0498             
0969   0498 CD 62 04    ABS:    CALL PARN                       ;*** ABS(EXPR) ***
0970   049B 1B                  DCX  D
0971   049C CD DD 04            CALL CHKSGN                     ;CHECK SIGN
0972   049F 13                  INX  D
0973   04A0 C9                  RET
0974   04A1             
0975   04A1 2A 16 08    SIZE:   LHLD TXTUNF                     ;*** RETURN SIZE IN HL ***
0976   04A4 D5                  PUSH D                          ;GET THE NUMBER OF FREE
0977   04A5 EB                  XCHG                            ;BYTES BETWEEN 'TXTUNF'
0978   04A6 21 00 1F            LXI  H,VARBGN                   ;AND 'VARBGN'
0979   04A9 CD D6 04            CALL SUBDE
0980   04AC D1                  POP  D
0981   04AD C9                  RET
0982   04AE             
0983   04AE CD 62 04    PEEK:   CALL PARN                       ;*** PEEK(EXPR) ***
0984   04B1 7E                  MOV  A,M                        ;GET CONTENT OF (HL)
0985   04B2 26 00               MVI  H,0                        ;RETURN RESULT IN HL
0986   04B4 6F                  MOV  L,A
0987   04B5 C9                  RET
0988   04B6             
0989   04B6 CD 62 04    DEEK:   CALL PARN                       ;*** PEEK(EXPR) ***
0990   04B9 D5                  PUSH D
0991   04BA 5E                  MOV  E,M                        ;GET LOW CONTENT OF (HL)
0992   04BB 23                  INX  H
0993   04BC 56                  MOV  D,M                        ;GET HIGH CONTENT OF (HL)
0994   04BD EB                  XCHG                            ;RETURN RESULT IN HL
0995   04BE D1                  POP  D
0996   04BF C9                  RET
0997   04C0             
0998   04C0             ;
0999   04C0             ;*************************************************************
1000   04C0             ;
1001   04C0             ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1002   04C0             ;
1003   04C0             ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1004   04C0             ;
1005   04C0             ; 'SUBDE' SUBSTRACTS DE FROM HL
1006   04C0             ;
1007   04C0             ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1008   04C0             ; SIGN AND FLIP SIGN OF B.
1009   04C0             ;
1010   04C0             ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1011   04C0             ;
1012   04C0             ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1013   04C0             ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1014   04C0             ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1015   04C0             ;
1016   04C0 E5          DIVIDE: PUSH H                          ;*** DIVIDE ***
1017   04C1 6C                  MOV  L,H                        ;DIVIDE H BY DE
1018   04C2 26 00               MVI  H,0
1019   04C4 CD CB 04            CALL DV1
1020   04C7 41                  MOV  B,C                        ;SAVE RESULT IN B
1021   04C8 7D                  MOV  A,L                        ;(REMINDER+L)/DE
1022   04C9 E1                  POP  H
1023   04CA 67                  MOV  H,A
1024   04CB 0E FF       DV1:    MVI  C,0FFH                     ;RESULT IN C
1025   04CD 0C          DV2:    INR  C                          ;DUMB ROUTINE
1026   04CE CD D6 04            CALL SUBDE                      ;DIVIDE BY SUBTRACT
1027   04D1 D2 CD 04            JNC  DV2                        ;AND COUNT
1028   04D4 19                  DAD  D
1029   04D5 C9                  RET
1030   04D6             ;
1031   04D6 7D          SUBDE:  MOV  A,L                        ;*** SUBDE ***
1032   04D7 93                  SUB  E                          ;SUBSTRACT DE FROM
1033   04D8 6F                  MOV  L,A                        ;HL
1034   04D9 7C                  MOV  A,H
1035   04DA 9A                  SBB  D
1036   04DB 67                  MOV  H,A
1037   04DC C9                  RET
1038   04DD             ;
1039   04DD 7C          CHKSGN: MOV  A,H                        ;*** CHKSGN ***
1040   04DE B7                  ORA  A                          ;CHECK SIGN OF HL
1041   04DF F0                  RP                              ;IF -, CHANGE SIGN
1042   04E0             ;
1043   04E0 7C          CHGSGN: MOV  A,H                        ;*** CHGSGN ***
1044   04E1 F5                  PUSH PSW
1045   04E2 2F                  CMA                             ;CHANGE SIGN OF HL
1046   04E3 67                  MOV  H,A
1047   04E4 7D                  MOV  A,L
1048   04E5 2F                  CMA
1049   04E6 6F                  MOV  L,A
1050   04E7 23                  INX  H
1051   04E8 F1                  POP  PSW
1052   04E9 AC                  XRA  H
1053   04EA F2 D5 00            JP   QHOW
1054   04ED 78                  MOV  A,B                        ;AND ALSO FLIP B
1055   04EE EE 80               XRI  80H
1056   04F0 47                  MOV  B,A
1057   04F1 C9                  RET
1058   04F2             
1059   04F2 7C          CKHLDE: MOV  A,H
1060   04F3 AA                  XRA  D                          ;SAME SIGN?
1061   04F4 F2 F8 04            JP   CK1                        ;YES, COMPARE
1062   04F7 EB                  XCHG                            ;NO, XCH AND COMP
1063   04F8 E7          CK1:    RST  RCOMP
1064   04F9 C9                  RET
1065   04FA             ;
1066   04FA             ;*************************************************************
1067   04FA             ;
1068   04FA             ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1069   04FA             ;
1070   04FA             ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1071   04FA             ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1072   04FA             ; TO THAT VALUE.
1073   04FA             ;
1074   04FA             ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1075   04FA             ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1076   04FA             ; NEXT LINE AND CONTINUE FROM THERE.
1077   04FA             ;
1078   04FA             ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1079   04FA             ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1080   04FA             ;
1081   04FA             ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1082   04FA             ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1083   04FA             ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1084   04FA             ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1085   04FA             ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1086   04FA             ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1087   04FA             ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1088   04FA             ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1089   04FA             ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1090   04FA             ;
1091   04FA             ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1092   04FA             ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1093   04FA             ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1094   04FA             ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1095   04FA             ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1096   04FA             ;
1097   04FA FF          SETVAL: RST  RTSTV                      ;*** SETVAL ***
1098   04FB DA 20 05            JC   QWHAT                      ;"WHAT?" NO VARIABLE
1099   04FE E5                  PUSH H                          ;SAVE ADDRESS OF VAR.
1100   04FF CF                  TSTC('=',SV1)                   ;PASS "=" SIGN
1100   0500 3D          
1100   0501 08          
1101   0502 DF                  RST  REXPR                      ;EVALUATE EXPR.
1102   0503 44                  MOV  B,H                        ;VALUE IS IN BC NOW
1103   0504 4D                  MOV  C,L
1104   0505 E1                  POP  H                          ;GET ADDRESS
1105   0506 71                  MOV  M,C                        ;SAVE VALUE
1106   0507 23                  INX  H
1107   0508 70                  MOV  M,B
1108   0509 C9                  RET
1109   050A C3 20 05    SV1:    JMP  QWHAT                      ;NO "=" SIGN
1110   050D             
1111   050D CF          FIN:    TSTC(';',FI1)                   ;*** FIN ***
1111   050E 3B          
1111   050F 04          
1112   0510 F1                  POP  PSW                        ;";", PURGE RET. ADDR.
1113   0511 C3 8D 01            JMP  RUNSML                     ;CONTINUE SAME LINE
1114   0514 CF          FI1:    TSTC(CR,FI2)                    ;NOT ";", IS IT CR?
1114   0515 0D          
1114   0516 04          
1115   0517 F1                  POP  PSW                        ;YES, PURGE RET. ADDR.
1116   0518 C3 7D 01            JMP  RUNNXL                     ;RUN NEXT LINE
1117   051B C9          FI2:    RET                             ;ELSE RETURN TO CALLER
1118   051C             
1119   051C EF          ENDCHK: RST  RIGNBLK                    ;IGNBLK
1120   051D FE 0D               CPI  CR                         ;END WITH CR?
1121   051F C8                  RZ                              ;OK, ELSE SAY: "WHAT?"
1122   0520             ;
1123   0520 D5          QWHAT:  PUSH D                          ;*** QWHAT ***
1124   0521 11 E4 00    AWHAT:  LXI  D,WHAT                     ;*** AWHAT ***
1125   0524 97          ERROR:  SUB  A                          ;*** ERROR ***
1126   0525 CD C5 05            CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?'
1127   0528 D1                  POP  D                          ;OR 'SORRY'
1128   0529 1A                  LDAX D                          ;SAVE THE CHARACTER
1129   052A F5                  PUSH PSW                        ;AT WHERE OLD DE ->
1130   052B 97                  SUB  A                          ;AND PUT A 0 THERE
1131   052C 12                  STAX D
1132   052D 2A 02 08            LHLD CURRNT                     ;GET CURRENT LINE #
1133   0530 E5                  PUSH H
1134   0531 7E                  MOV  A,M                        ;CHECK THE VALUE
1135   0532 23                  INX  H
1136   0533 B6                  ORA  M
1137   0534 D1                  POP  D
1138   0535 CA F0 00            JZ   RSTART                     ;IF ZERO, JUST RESTART
1139   0538 7E                  MOV  A,M                        ;IF NEGATIVE,
1140   0539 B7                  ORA  A
1141   053A FA 0E 03            JM   INPERR                     ;REDO INPUT
1142   053D CD 4E 06            CALL PRTLN                      ;ELSE PRINT THE LINE
1143   0540 1B                  DCX  D                          ;UPTO WHERE THE 0 IS
1144   0541 F1                  POP  PSW                        ;RESTORE THE CHARACTER
1145   0542 12                  STAX D
1146   0543 3E 3F               MVI  A,'?'                      ;PRINT A "?"
1147   0545 D7                  RST  ROUTC
1148   0546 97                  SUB  A                          ;AND THE REST OF THE
1149   0547 CD C5 05            CALL PRTSTG                     ;LINE
1150   054A C3 F0 00            JMP  RSTART                     ;THEN RESTART
1151   054D             ;
1152   054D D5          QSORRY: PUSH D                          ;*** QSORRY ***
1153   054E 11 EA 00    ASORRY: LXI  D,SORRY                    ;*** ASORRY ***
1154   0551 C3 24 05            JMP  ERROR
1155   0554             ;
1156   0554             ;*************************************************************
1157   0554             ;
1158   0554             ; *** GETLN *** FNDLN (& FRIENDS) ***
1159   0554             ;
1160   0554             ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1161   0554             ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1162   0554             ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1163   0554             ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1164   0554             ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1165   0554             ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1166   0554             ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1167   0554             ;
1168   0554             ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1169   0554             ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1170   0554             ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1171   0554             ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1172   0554             ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1173   0554             ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1174   0554             ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1175   0554             ; LINE, FLAGS ARE C & NZ.
1176   0554             ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1177   0554             ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1178   0554             ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1179   0554             ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1180   0554             ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1181   0554             ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1182   0554             ;
1183   0554 D7          GETLN:  RST  ROUTC                      ;*** GETLN ***
1184   0555 11 68 1F            LXI  D,BUFFER                   ;PROMPT AND INIT.
1185   0558 CD E8 06    GL1:    CALL CHKIO                      ;CHECK KEYBOARD
1186   055B CA 58 05            JZ   GL1                        ;NO INPUT, WAIT
1187   055E FE 08               CPI  BS                         ;BS, DELETE LAST CHARACTER?
1188   0560 CA 82 05            JZ   GL3                        ;YES
1189   0563 FE 7F               CPI  DEL                        ;DEL, DELETE LAST CHARACTER?
1190   0565 CA 82 05            JZ   GL3                        ;YES
1191   0568 D7                  RST  ROUTC                      ;INPUT, ECHO BACK
1192   0569 FE 0A               CPI  LF                         ;IGNORE LF
1193   056B CA 58 05            JZ   GL1
1194   056E B7                  ORA  A                          ;IGNORE NULL
1195   056F CA 58 05            JZ   GL1
1196   0572 FE 18               CPI  CAN                        ;^X, DELETE THE WHOLE LINE?
1197   0574 CA 95 05            JZ   GL4                        ;YES
1198   0577 12                  STAX D                          ;ELSE SAVE INPUT
1199   0578 13                  INX  D                          ;AND BUMP POINTER
1200   0579 FE 0D               CPI  CR                         ;WAS IT CR?
1201   057B C8                  RZ                              ;YES, END OF LINE
1202   057C 7B                  MOV  A,E                        ;ELSE MORE FREE ROOM?
1203   057D FE A8               CPI  BUFEND & 0FFH
1204   057F C2 58 05            JNZ  GL1                        ;YES, GET NEXT INPUT
1205   0582 7B          GL3:    MOV  A,E                        ;DELETE LAST CHARACTER
1206   0583 FE 68               CPI  BUFFER & 0FFH              ;BUT DO WE HAVE ANY?
1207   0585 CA 95 05            JZ   GL4                        ;NO, REDO WHOLE LINE
1208   0588 1B                  DCX  D                          ;YES, BACKUP POINTER
1209   0589 3E 08               MVI  A,BS                       ;AND ECHO A BACKSPACE
1210   058B D7                  RST  ROUTC
1211   058C 3E 20               MVI  A,' '                      ;AND ECHO A BLANK
1212   058E D7                  RST  ROUTC
1213   058F 3E 08               MVI  A,BS                       ;AND ECHO A BACKSPACE
1214   0591 D7                  RST  ROUTC
1215   0592 C3 58 05            JMP  GL1                        ;GO GET NEXT INPUT
1216   0595 CD 0E 00    GL4:    CALL CRLF                       ;REDO ENTIRE LINE
1217   0598 3E 5E               MVI  A,'^'                      ;CR, LF AND UP-ARROW
1218   059A C3 54 05            JMP  GETLN
1219   059D             ;
1220   059D 7C          FNDLN:  MOV  A,H                        ;*** FNDLN ***
1221   059E B7                  ORA  A                          ;CHECK SIGN OF HL
1222   059F FA D5 00            JM   QHOW                       ;IT CANNOT BE -
1223   05A2 11 18 08            LXI  D,TXTBGN                   ;INIT TEXT POINTER
1224   05A5             ;
1225   05A5             FNDLP:                                  ;*** FDLNP ***
1226   05A5 E5          FL1:    PUSH H                          ;SAVE LINE #
1227   05A6 2A 16 08            LHLD TXTUNF                     ;CHECK IF WE PASSED END
1228   05A9 2B                  DCX  H
1229   05AA E7                  RST  RCOMP
1230   05AB E1                  POP  H                          ;GET LINE # BACK
1231   05AC D8                  RC                              ;C,NZ PASSED END
1232   05AD 1A                  LDAX D                          ;WE DID NOT, GET BYTE 1
1233   05AE 95                  SUB  L                          ;IS THIS THE LINE?
1234   05AF 47                  MOV  B,A                        ;COMPARE LOW ORDER
1235   05B0 13                  INX  D
1236   05B1 1A                  LDAX D                          ;GET BYTE 2
1237   05B2 9C                  SBB  H                          ;COMPARE HIGH ORDER
1238   05B3 DA BA 05            JC   FL2                        ;NO, NOT THERE YET
1239   05B6 1B                  DCX  D                          ;ELSE WE EITHER FOUND
1240   05B7 B0                  ORA  B                          ;IT, OR IT IS NOT THERE
1241   05B8 C9                  RET                             ;NC,Z:FOUND, NC,NZ:NO
1242   05B9             ;
1243   05B9             FNDNXT:                                 ;*** FNDNXT ***
1244   05B9 13                  INX  D                          ;FIND NEXT LINE
1245   05BA 13          FL2:    INX  D                          ;JUST PASSED BYTE 1 & 2
1246   05BB             ;
1247   05BB 1A          FNDSKP: LDAX D                          ;*** FNDSKP ***
1248   05BC FE 0D               CPI  CR                         ;TRY TO FIND CR
1249   05BE C2 BA 05            JNZ  FL2                        ;KEEP LOOKING
1250   05C1 13                  INX  D                          ;FOUND CR, SKIP OVER
1251   05C2 C3 A5 05            JMP  FL1                        ;CHECK IF END OF TEXT
1252   05C5             ;
1253   05C5             ;*************************************************************
1254   05C5             ;
1255   05C5             ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1256   05C5             ;
1257   05C5             ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1258   05C5             ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1259   05C5             ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1260   05C5             ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1261   05C5             ;
1262   05C5             ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1263   05C5             ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1264   05C5             ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1265   05C5             ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1266   05C5             ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1267   05C5             ; OVER (USUALLY A JUMP INSTRUCTION.
1268   05C5             ;
1269   05C5             ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1270   05C5             ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1271   05C5             ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1272   05C5             ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1273   05C5             ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1274   05C5             ;
1275   05C5             ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1276   05C5             ;
1277   05C5 47          PRTSTG: MOV  B,A                        ;*** PRTSTG ***
1278   05C6 1A          PS1:    LDAX D                          ;GET A CHARACTER
1279   05C7 13                  INX  D                          ;BUMP POINTER
1280   05C8 B8                  CMP  B                          ;SAME AS OLD A?
1281   05C9 C8                  RZ                              ;YES, RETURN
1282   05CA D7                  RST  ROUTC                      ;ELSE PRINT IT
1283   05CB FE 0D               CPI  CR                         ;WAS IT A CR?
1284   05CD C2 C6 05            JNZ  PS1                        ;NO, NEXT
1285   05D0 C9                  RET                             ;YES, RETURN
1286   05D1             ;
1287   05D1 CF          QTSTG:  TSTC($22,QT3)                   ;*** QTSTG ***
1287   05D2 22          
1287   05D3 0F          
1288   05D4 3E 22               MVI  A,22H                      ;IT IS A "
1289   05D6 CD C5 05    QT1:    CALL PRTSTG                     ;PRINT UNTIL ANOTHER
1290   05D9 FE 0D               CPI  CR                         ;WAS LAST ONE A CR?
1291   05DB E1                  POP  H                          ;RETURN ADDRESS
1292   05DC CA 7D 01            JZ   RUNNXL                     ;WAS CR, RUN NEXT LINE
1293   05DF 23          QT2:    INX  H                          ;SKIP 3 BYTES ON RETURN
1294   05E0 23                  INX  H
1295   05E1 23                  INX  H
1296   05E2 E9                  PCHL                            ;RETURN
1297   05E3 CF          QT3:    TSTC($27,QT4)                   ;IS IT A '?
1297   05E4 27          
1297   05E5 05          
1298   05E6 3E 27               MVI  A,27H                      ;YES, DO THE SAME
1299   05E8 C3 D6 05            JMP  QT1                        ;AS IN "
1300   05EB CF          QT4:    TSTC($5F,QT5)                   ;IS IT BACK-ARROW?
1300   05EC 5F          
1300   05ED 07          
1301   05EE 3E 8D               MVI  A,08DH                     ;YES, CR WITHOUT LF
1302   05F0 D7                  RST  ROUTC
1303   05F1 E1                  POP  H                          ;RETURN ADDRESS
1304   05F2 C3 DF 05            JMP  QT2
1305   05F5 C9          QT5:    RET                             ;NONE OF ABOVE
1306   05F6             
1307   05F6 D5          PRTNUM: PUSH D                          ;*** PRINT NUMBER IN HL ***
1308   05F7 3A 00 08            LDA  PNBASE                     ;GET NUMBER BASE
1309   05FA 16 00               MVI  D,0                        ;16 BIT FOR DIVIDE
1310   05FC 5F                  MOV  E,A
1311   05FD 42                  MOV  B,D                        ;NO PREFIX YET
1312   05FE FE 10               CPI  16                         ;HEX NUMBER?
1313   0600 C2 09 06            JNZ  PN0                        ;NO, CHECK SIGN
1314   0603 06 24               MVI  B,'$'                      ;PRINT LEADING '$'
1315   0605 0D                  DCR  C                          ;'$' TAKES SPACE
1316   0606 C3 12 06            JMP  PN1                        ;HEX IS UNSIGNED
1317   0609 CD DD 04    PN0:    CALL CHKSGN                     ;CHECK SIGN
1318   060C F2 12 06            JP   PN1                        ;NO SIGN
1319   060F 06 2D               MVI  B,'-'                      ;B=SIGN
1320   0611 0D                  DCR  C                          ;'-' TAKES SPACE
1321   0612 AF          PN1:    XRA  A
1322   0613 57                  MOV  D,A
1323   0614 D5                  PUSH D                          ;SAVE AS A FLAG
1324   0615 0D                  DCR  C                          ;C=SPACES
1325   0616 C5                  PUSH B                          ;SAVE SIGN & SPACE
1326   0617 CD C0 04    PN2:    CALL DIVIDE                     ;DIVIDE HL BY 10
1327   061A 78                  MOV  A,B                        ;RESULT 0?
1328   061B B1                  ORA  C
1329   061C CA 27 06            JZ   PN3                        ;YES, WE GOT ALL
1330   061F E3                  XTHL                            ;NO, SAVE REMAINDER
1331   0620 2D                  DCR  L                          ;AND COUNT SPACE
1332   0621 E5                  PUSH H                          ;HL IS OLD BC
1333   0622 60                  MOV  H,B                        ;MOVE RESULT TO BC
1334   0623 69                  MOV  L,C
1335   0624 C3 17 06            JMP  PN2                        ;AND DIVIDE BY 10
1336   0627 C1          PN3:    POP  B                          ;WE GOT ALL DIGITS IN
1337   0628 0D          PN4:    DCR  C                          ;THE STACK
1338   0629 79                  MOV  A,C                        ;LOOK AT SPACE COUNT
1339   062A B7                  ORA  A
1340   062B FA 34 06            JM   PN5                        ;NO LEADING BLANKS
1341   062E 3E 20               MVI  A,' '                      ;LEADING BLANKS
1342   0630 D7                  RST  ROUTC
1343   0631 C3 28 06            JMP  PN4                        ;MORE?
1344   0634 78          PN5:    MOV  A,B                        ;PRINT SIGN
1345   0635 B7                  ORA  A
1346   0636 C4 10 00            CNZ  OUTC
1347   0639 5D                  MOV  E,L                        ;LAST REMAINDER IN E
1348   063A 3A 00 08    PN6:    LDA  PNBASE                     ;GET NUMBER BASE
1349   063D BB                  CMP  E                          ;IT IS FLAG FOR NO MORE
1350   063E 7B                  MOV  A,E                        ;CHECK DIGIT IN E
1351   063F D1                  POP  D
1352   0640 C8                  RZ                              ;IF SO, RETURN
1353   0641 FE 0A               CPI  10                         ;0-9? < A hex?
1354   0643 DA 48 06            JC   PN7                        ;Skip Add 7
1355   0646 C6 07               ADI  'A'-'0'-10                 ;Bring it up to ASCII A-F
1356   0648 C6 30       PN7:    ADI  '0'                        ;ELSE CONVERT TO ASCII
1357   064A D7                  RST  ROUTC                      ;AND PRINT THE DIGIT
1358   064B C3 3A 06            JMP  PN6                        ;GO BACK FOR MORE
1359   064E             
1360   064E 3E 0A       PRTLN:  MVI  A,10                       ;SET 10 AS DEFAULT BASE
1361   0650 32 00 08            STA  PNBASE                     ;FOR PRTNUM
1362   0653 1A                  LDAX D
1363   0654 6F                  MOV  L,A                        ;LOW ORDER LINE #
1364   0655 13                  INX  D
1365   0656 1A                  LDAX D                          ;HIGH ORDER
1366   0657 67                  MOV  H,A
1367   0658 13                  INX  D
1368   0659 0E 04               MVI  C,4                        ;PRINT 4 DIGIT LINE #
1369   065B CD F6 05            CALL PRTNUM
1370   065E 3E 20               MVI  A,' '                      ;FOLLOWED BY A BLANK
1371   0660 D7                  RST  ROUTC
1372   0661 97                  SUB  A                          ;AND THEN THE NEXT
1373   0662 CD C5 05            CALL PRTSTG
1374   0665 C9                  RET
1375   0666             ;
1376   0666             ;*************************************************************
1377   0666             ;
1378   0666             ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1379   0666             ;
1380   0666             ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1381   0666             ; DE = HL
1382   0666             ;
1383   0666             ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1384   0666             ; UNTIL DE = BC
1385   0666             ;
1386   0666             ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1387   0666             ; STACK
1388   0666             ;
1389   0666             ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1390   0666             ; STACK
1391   0666             ;
1392   0666 E7          MVUP:   RST  RCOMP                      ;*** MVUP ***
1393   0667 C8                  RZ                              ;DE = HL, RETURN
1394   0668 1A                  LDAX D                          ;GET ONE BYTE
1395   0669 02                  STAX B                          ;MOVE IT
1396   066A 13                  INX  D                          ;INCREASE BOTH POINTERS
1397   066B 03                  INX  B
1398   066C C3 66 06            JMP  MVUP                       ;UNTIL DONE
1399   066F             ;
1400   066F 78          MVDOWN: MOV  A,B                        ;*** MVDOWN ***
1401   0670 92                  SUB  D                          ;TEST IF DE = BC
1402   0671 C2 77 06            JNZ  MD1                        ;NO, GO MOVE
1403   0674 79                  MOV  A,C                        ;MAYBE, OTHER BYTE?
1404   0675 93                  SUB  E
1405   0676 C8                  RZ                              ;YES, RETURN
1406   0677 1B          MD1:    DCX  D                          ;ELSE MOVE A BYTE
1407   0678 2B                  DCX  H                          ;BUT FIRST DECREASE
1408   0679 1A                  LDAX D                          ;BOTH POINTERS AND
1409   067A 77                  MOV  M,A                        ;THEN DO IT
1410   067B C3 6F 06            JMP  MVDOWN                     ;LOOP BACK
1411   067E             ;
1412   067E C1          POPA:   POP  B                          ;BC = RETURN ADDR.
1413   067F E1                  POP  H                          ;RESTORE LOPVAR, BUT
1414   0680 22 0A 08            SHLD LOPVAR                     ;=0 MEANS NO MORE
1415   0683 7C                  MOV  A,H
1416   0684 B5                  ORA  L
1417   0685 CA 98 06            JZ   PP1                        ;YEP, GO RETURN
1418   0688 E1                  POP  H                          ;NOP, RESTORE OTHERS
1419   0689 22 0C 08            SHLD LOPINC
1420   068C E1                  POP  H
1421   068D 22 0E 08            SHLD LOPLMT
1422   0690 E1                  POP  H
1423   0691 22 10 08            SHLD LOPLN
1424   0694 E1                  POP  H
1425   0695 22 12 08            SHLD LOPPT
1426   0698 C5          PP1:    PUSH B                          ;BC = RETURN ADDR.
1427   0699 C9                  RET
1428   069A             ;
1429   069A 21 A9 1F    PUSHA:  LXI  H,STKLMT                   ;*** PUSHA ***
1430   069D CD E0 04            CALL CHGSGN
1431   06A0 C1                  POP  B                          ;BC=RETURN ADDRESS
1432   06A1 39                  DAD  SP                         ;IS STACK NEAR THE TOP?
1433   06A2 D2 4D 05            JNC  QSORRY                     ;YES, SORRY FOR THAT
1434   06A5 2A 0A 08            LHLD LOPVAR                     ;ELSE SAVE LOOP VAR'S
1435   06A8 7C                  MOV  A,H                        ;BUT IF LOPVAR IS 0
1436   06A9 B5                  ORA  L                          ;THAT WILL BE ALL
1437   06AA CA C0 06            JZ   PU1
1438   06AD 2A 12 08            LHLD LOPPT                      ;ELSE, MORE TO SAVE
1439   06B0 E5                  PUSH H
1440   06B1 2A 10 08            LHLD LOPLN
1441   06B4 E5                  PUSH H
1442   06B5 2A 0E 08            LHLD LOPLMT
1443   06B8 E5                  PUSH H
1444   06B9 2A 0C 08            LHLD LOPINC
1445   06BC E5                  PUSH H
1446   06BD 2A 0A 08            LHLD LOPVAR
1447   06C0 E5          PU1:    PUSH H
1448   06C1 C5                  PUSH B                          ;BC = RETURN ADDR.
1449   06C2 C9                  RET
1450   06C3             
1451   06C3             ;*************************************************************
1452   06C3             ;
1453   06C3             ; *** OUTC *** CHKIO ***
1454   06C3             ;
1455   06C3             ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1456   06C3             ; OUTC WILL OUTPUT THE BYTE IN A.
1457   06C3             ; IF THAT IS A CR, A LF IS ALSO SEND OUT.
1458   06C3             ; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
1459   06C3             ; ALL REGISTERS ARE RESTORED.
1460   06C3             ;
1461   06C3             ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1462   06C3             ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1463   06C3             ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1464   06C3             ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1465   06C3             ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1466   06C3             ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
1467   06C3             ;
1468   06C3 16 1E       INIT:   MVI  D,30                       ;30 new lines to clear screen
1469   06C5 CD 0E 00    PATLOP: CALL CRLF
1470   06C8 15                  DCR  D
1471   06C9 C2 C5 06            JNZ  PATLOP
1472   06CC 97                  SUB  A
1473   06CD 11 F7 06            LXI  D,MSG1
1474   06D0 CD C5 05            CALL PRTSTG
1475   06D3 21 00 00            LXI  H,START
1476   06D6 22 14 08            SHLD RANPNT
1477   06D9 21 18 08            LXI  H,TXTBGN
1478   06DC 22 16 08            SHLD TXTUNF
1479   06DF C3 F0 00            JMP  RSTART
1480   06E2             
1481   06E2             ;THIS IS AT LOC. 10
1482   06E2             ;OUTC:  OUT  IODATA                     ;Out to data port
1483   06E2             ;       CPI  CR                         ;WAS IT CR?
1484   06E2             ;       RNZ                             ;NO, FINISHED
1485   06E2             ;       JMP  OC1                        ;REST OF THIS IS AT OC1
1486   06E2 3E 0A       OC1:    MVI  A,LF                       ;YES, WE SEND LF TOO
1487   06E4 D7                  RST  ROUTC                      ;THIS IS RECURSIVE
1488   06E5 3E 0D               MVI  A,CR                       ;GET CR BACK IN A
1489   06E7 C9                  RET
1490   06E8             
1491   06E8 DB 02       CHKIO:  IN   IOSTAT                     ;*** CHKIO ***
1492   06EA E6 01               ANI  1H                         ;MASK STATUS BIT
1493   06EC C8                  RZ                              ;NOT READY, RETURN "Z"
1494   06ED DB 01               IN   IODATA                     ;READY, READ DATA
1495   06EF E6 7F               ANI  7FH                        ;MASK BIT 7 OFF
1496   06F1 FE 03       CI0:    CPI  03H                        ;IS IT CONTROL-C?
1497   06F3 C0                  RNZ                             ;NO, RETURN "NZ"
1498   06F4 C3 F0 00            JMP  RSTART                     ;YES, RESTART TBI
1499   06F7             ;
1500   06F7 54 69 6E 79 MSG1:   .DB  "TinyBASIC"
1500   06FB 42 41 53 49 
1500   06FF 43 
1501   0700 0D                  .DB  CR
1502   0701             
1503   0701             ;*************************************************************
1504   0701             ;
1505   0701             ; *** TABLES *** DIRECT *** & EXEC ***
1506   0701             ;
1507   0701             ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1508   0701             ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1509   0701             ; OF CODE ACCORDING TO THE TABLE.
1510   0701             ;
1511   0701             ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1512   0701             ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1513   0701             ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1514   0701             ; ALL DIRECT AND STATEMENT COMMANDS.
1515   0701             ;
1516   0701             ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1517   0701             ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1518   0701             ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1519   0701             ;
1520   0701             ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1521   0701             ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1522   0701             ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1523   0701             ; BYTE SET TO 1.
1524   0701             ; This is done by the macro 'DWA'.
1525   0701             ; If the program is executed from an address < 0x8000
1526   0701             ; take care to mask this bit in program part 'EXEC'.
1527   0701             ;
1528   0701             ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
1529   0701             ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
1530   0701             ; MATCH THIS NULL ITEM AS DEFAULT.
1531   0701             ;
1532   0701             TAB1:                                   ;DIRECT COMMANDS
1533   0701 4C 49 53 54         .DB  "LIST"
1534   0705 81                  DWA(LIST)
1534   0706 A5          
1535   0707 52 55 4E            .DB  "RUN"
1536   070A 81                  DWA(RUN)
1536   070B 77          
1537   070C 4E 45 57            .DB  "NEW"
1538   070F 81                  DWA(NEW)
1538   0710 68          
1539   0711             ;
1540   0711             TAB2:                                   ;DIRECT/STATEMENT
1541   0711 4E 45 58 54         .DB  "NEXT"
1542   0715 82                  DWA(NEXT)
1542   0716 A2          
1543   0717 4C 45 54            .DB  "LET"
1544   071A 83                  DWA(LET)
1544   071B 6B          
1545   071C 49 46               .DB  "IF"
1546   071E 82                  DWA(IFF)
1546   071F FF          
1547   0720 47 4F 54 4F         .DB  "GOTO"
1548   0724 81                  DWA(GOTO)
1548   0725 96          
1549   0726 47 4F 53 55         .DB  "GOSUB"
1549   072A 42 
1550   072B 82                  DWA(GOSUB)
1550   072C 0A          
1551   072D 52 45 54 55         .DB  "RETURN"
1551   0731 52 4E 
1552   0733 82                  DWA(RETURN)
1552   0734 2A          
1553   0735 52 45 4D            .DB  "REM"
1554   0738 82                  DWA(REM)
1554   0739 FB          
1555   073A 46 4F 52            .DB  "FOR"
1556   073D 82                  DWA(FOR)
1556   073E 43          
1557   073F 49 4E 50 55         .DB  "INPUT"
1557   0743 54 
1558   0744 83                  DWA(INPUT)
1558   0745 18          
1559   0746 50 52 49 4E         .DB  "PRINT"
1559   074A 54 
1560   074B 81                  DWA(PRINT)
1560   074C BD          
1561   074D 3F                  .DB  "?"
1562   074E 81                  DWA(PRINT)
1562   074F BD          
1563   0750 53 54 4F 50         .DB  "STOP"
1564   0754 81                  DWA(STOP)
1564   0755 71          
1565   0756 83                  DWA(DEFLT)                      ;END OF LIST
1565   0757 65          
1566   0758             ;
1567   0758             TAB4:                                   ;FUNCTIONS
1568   0758 52 4E 44            .DB  "RND"
1569   075B 84                  DWA(RND)
1569   075C 6D          
1570   075D 41 42 53            .DB  "ABS"
1571   0760 84                  DWA(ABS)
1571   0761 98          
1572   0762 53 49 5A 45         .DB  "SIZE"
1573   0766 84                  DWA(SIZE)
1573   0767 A1          
1574   0768 50 45 45 4B         .DB  "PEEK"                     ;get byte from memory
1575   076C 84                  DWA(PEEK)
1575   076D AE          
1576   076E 44 45 45 4B         .DB  "DEEK"                     ;get word from memory
1577   0772 84                  DWA(DEEK)
1577   0773 B6          
1578   0774 84                  DWA(XP40)                       ;END OF LIST
1578   0775 53          
1579   0776             ;
1580   0776             TAB5:                                   ;"TO" IN "FOR"
1581   0776 54 4F               .DB  "TO"
1582   0778 82                  DWA(FR1)
1582   0779 53          
1583   077A 85                  DWA(QWHAT)                      ;END OF LIST
1583   077B 20          
1584   077C             ;
1585   077C             TAB6:                                   ;"STEP" IN "FOR"
1586   077C 53 54 45 50         .DB  "STEP"
1587   0780 82                  DWA(FR2)
1587   0781 5D          
1588   0782 82                  DWA(FR3)                        ;END OF LIST
1588   0783 61          
1589   0784             ;
1590   0784             TAB8:                                   ;RELATION OPERATORS
1591   0784 3E 3D               .DB  ">="
1592   0786 83                  DWA(XP11)
1592   0787 7B          
1593   0788 23                  .DB  "#"
1594   0789 83                  DWA(XP12)
1594   078A 81          
1595   078B 3E                  .DB  ">"
1596   078C 83                  DWA(XP13)
1596   078D 87          
1597   078E 3D                  .DB  "="
1598   078F 83                  DWA(XP15)
1598   0790 96          
1599   0791 3C 3D               .DB  "<="
1600   0793 83                  DWA(XP14)
1600   0794 8E          
1601   0795 3C                  .DB  "<"
1602   0796 83                  DWA(XP16)
1602   0797 9C          
1603   0798 83                  DWA(XP17)                       ;END OF REL OPERATOR LIST
1603   0799 A2          
1604   079A             ;
1605   079A 21 00 07    DIRECT: LXI  H,TAB1-1                   ;*** DIRECT ***
1606   079D             ;
1607   079D             EXEC:                                   ;*** EXEC ***
1608   079D EF          EX0:    RST  RIGNBLK                    ;IGNORE LEADING BLANKS
1609   079E D5                  PUSH D                          ;SAVE POINTER
1610   079F 1A          EX1:    LDAX D                          ;IF FOUND '.' IN STRING
1611   07A0 13                  INX  D                          ;BEFORE ANY MISMATCH
1612   07A1 FE 2E               CPI  2EH                        ;WE DECLARE A MATCH
1613   07A3 CA C8 07            JZ   EX3
1614   07A6 FE 61               CPI  'a'                        ;< 'a' ?
1615   07A8 DA B2 07            JC   EXN                        ;NO ALPHA CHAR
1616   07AB FE 7B               CPI  'z'+1                      ;> 'z'
1617   07AD D2 B2 07            JNC  EXN                        ;NO ALPHA CHAR
1618   07B0 E6 5F               ANI  5FH                        ;MASK LOWER CASE TO UPPER CASE
1619   07B2             EXN:
1620   07B2 23                  INX  H                          ;HL->TABLE
1621   07B3 BE                  CMP  M                          ;IF MATCH, TEST NEXT
1622   07B4 CA 9F 07            JZ   EX1
1623   07B7 3E 7F               MVI  A,07FH                     ;ELSE SEE IF BIT 7
1624   07B9 1B                  DCX  D                          ;OF TABLE IS SET, WHICH
1625   07BA BE                  CMP  M                          ;IS THE JUMP ADDR. (HI)
1626   07BB DA CF 07            JC   EX5                        ;C:YES, MATCHED
1627   07BE 23          EX2:    INX  H                          ;NC:NO, FIND JUMP ADDR.
1628   07BF BE                  CMP  M
1629   07C0 D2 BE 07            JNC  EX2
1630   07C3 23                  INX  H                          ;BUMP TO NEXT TAB. ITEM
1631   07C4 D1                  POP  D                          ;RESTORE STRING POINTER
1632   07C5 C3 9D 07            JMP  EX0                        ;TEST AGAINST NEXT ITEM
1633   07C8 3E 7F       EX3:    MVI  A,07FH                     ;PARTIAL MATCH, FIND
1634   07CA 23          EX4:    INX  H                          ;JUMP ADDR., WHICH IS
1635   07CB BE                  CMP  M                          ;FLAGGED BY BIT 7
1636   07CC D2 CA 07            JNC  EX4
1637   07CF 7E          EX5:    MOV  A,M                        ;LOAD HL WITH THE JUMP
1638   07D0 23                  INX  H                          ;ADDRESS FROM THE TABLE
1639   07D1 6E                  MOV  L,M
1640   07D2             #IF $ < 8000H
1641   07D2 E6 7F               ANI  7FH                        ;MASK OFF HIGH ADDRESS BIT
1642   07D4             #ENDIF
1643   07D4 67                  MOV  H,A
1644   07D5 F1                  POP  PSW                        ;CLEAN UP THE GARBAGE
1645   07D6 E9                  PCHL                            ;AND WE GO DO IT
1646   07D7             ;
1647   07D7             LSTROM:                                 ;ALL ABOVE CAN BE ROM
1648   07D7             ;
1649   07D7             ;*************************************************************
1650   07D7             
1651   07D7             ;*************************************************************
1652   07D7             ;
1653   0800                     .ORG RAMBGN                     ;HERE DOWN MUST BE RAM
1654   0800             ;
1655   0800             PNBASE: .DS  1                          ;BASE FOR PRTNUM
1656   0801             OCSW:   .DS  1                          ;SWITCH FOR OUTPUT
1657   0802             CURRNT: .DS  2                          ;POINTS TO CURRENT LINE
1658   0804             STKGOS: .DS  2                          ;SAVES SP IN 'GOSUB'
1659   0806             VARNXT: .DS  2                          ;TEMP STORAGE
1660   0808             STKINP: .DS  2                          ;SAVES SP IN 'INPUT'
1661   080A             LOPVAR: .DS  2                          ;'FOR' LOOP SAVE AREA
1662   080C             LOPINC: .DS  2                          ;INCREMENT
1663   080E             LOPLMT: .DS  2                          ;LIMIT
1664   0810             LOPLN:  .DS  2                          ;LINE NUMBER
1665   0812             LOPPT:  .DS  2                          ;TEXT POINTER
1666   0814             RANPNT: .DS  2                          ;RANDOM NUMBER POINTER
1667   0816             TXTUNF: .DS  2                          ;->UNFILLED TEXT AREA
1668   0818             TXTBGN: .EQU $                          ;TEXT SAVE AREA BEGINS
1669   0818             
1670   1F00                     .ORG RAMBGN + RAMSZE - $0100
1671   1F00             ;
1672   1F00             TXTEND: .EQU $                          ;TEXT SAVE AREA ENDS
1673   1F00             VARBGN: .DS  2+2*26                     ;VARIABLE '@(0)' FOLLOWED BY 'A'..'Z'
1674   1F68                                                     ;'@(1), @(2), ... are stored top-down
1675   1F68                                                     ;i.e. &@(i) = TXTEND-2*i
1676   1F68             BUFFER: .DS  64                         ;INPUT BUFFER
1677   1FA8             BUFEND: .DS  1                          ;BUFFER ENDS
1678   1FA9             STKLMT: .DS  1                          ;TOP LIMIT FOR STACK
1679   1FAA             
1680   2000                     .ORG RAMBGN + RAMSZE
1681   2000             ;
1682   2000             STACK:  .EQU $                          ;STACK STARTS HERE
1683   2000             ;
1684   2000                     .END
