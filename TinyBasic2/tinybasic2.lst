0001   0000             ;Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
0002   0000             ;Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
0003   0000             ;Status bit for read in CHKIO changed to 0x02
0004   0000             ;Status bit for write in OUTC (actually OC3) changed to 0x01
0005   0000             ;Changed UART initialization parameters in INIT
0006   0000             ;Changed ORG statements at end of file to match system with 2K RAM
0007   0000             ;
0008   0000             ;2024-10-11 Ho-Ro:
0009   0000             ;Automatically converted from 8080 syntax to Z80 syntax:
0010   0000             ;https://hc-ddr.hucki.net/wiki/doku.php/cpm/8080_z80
0011   0000             ;Assembler: uz80as for Z80 as well as i8080 (uz80as --target=i8080)
0012   0000             ;Modified for use with Z80 dongle simulator
0013   0000             ;UART data port 1
0014   0000             ;UART status port 2
0015   0000             ;New:
0016   0000             ;Case insensitive input
0017   0000             ;PEEK and DEEK
0018   0000             ;PRINT modifier for hex out: PRINT %16,..
0019   0000             ;Hex numbers: $xxxx
0020   0000             ;2024-10-13 Ho-Ro:
0021   0000             ;build ROM version (2K ROM / 6.5K RAM) and RAM version (2K prog RAM / 2K free RAM)
0022   0000             ;add command "HALT" (halts Z80, returns to dongle analyser program)
0023   0000             ;2024-10-15 Ho-Ro:
0024   0000             ;PRINT modifier %nn switches to unsigned number format, e.g.:
0025   0000             ;PRINT %10,$FFFF -> 65535
0026   0000             ;2024-10-17 Ho-Ro:
0027   0000             ;POKE ADDR, VAL, VAL, VAL,...
0028   0000             ;constants RAM (TXTBGN), TOP (TXTEND) and SIZE (TXTEND-TXTUNF)
0029   0000             ;function USR(para) that calls machine code at TOP (128 bytes free)
0030   0000             ;with parameter in HL, returning the result in HL, default is RET at TOP
0031   0000             ;
0032   0000             ;*************************************************************
0033   0000             ;
0034   0000             ;                 TINY BASIC FOR INTEL 8080
0035   0000             ;                       VERSION 2.0
0036   0000             ;                     BY LI-CHEN WANG
0037   0000             ;                  MODIFIED AND TRANSLATED
0038   0000             ;                    TO INTEL MNEMONICS
0039   0000             ;                     BY ROGER RAUSKOLB
0040   0000             ;                      10 OCTOBER,1976
0041   0000             ;                        @COPYLEFT
0042   0000             ;                   ALL WRONGS RESERVED
0043   0000             ;
0044   0000             ;*************************************************************
0045   0000             ;
0046   0000             ; *** ZERO PAGE SUBROUTINES ***
0047   0000             ;
0048   0000             ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
0049   0000             ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
0050   0000             ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
0051   0000             ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
0052   0000             ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
0053   0000             ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
0054   0000             ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
0055   0000             ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
0056   0000             ;
0057   0000             
0058   0000             ; Memory map
0059   0000             ROMBGN          .EQU            $0000           ; Execution must start here
0060   0000             RAMBGN          .EQU            $0800           ; 2K ROM
0061   0000             
0062   0000~            #IFDEF          MAKE_ROM
0063   0000~            ; 2K CODE IN ROM and 6.5K DATA IN RAM FOR Z80_dongle
0064   0000~            RAMSZE          .EQU            $1A00
0065   0000             #ELSE
0066   0000             ; 2K CODE IN RAM & 2K DATA IN RAM AS TEST VERSION
0067   0000             RAMSZE          .EQU            $0800
0068   0000             #ENDIF
0069   0000             
0070   0000             ; IO map
0071   0000             IODATA          .EQU            1
0072   0000             IOSTAT          .EQU            2
0073   0000             IO_RX_BIT       .EQU            $01
0074   0000             
0075   0000             ; Control character
0076   0000             BS              .EQU            08H             ; ^H, BACKSPACE
0077   0000             CR              .EQU            0DH             ; ^M, CARRIAGE RETURN
0078   0000             LF              .EQU            0AH             ; ^J, LINE FEED
0079   0000             CAN             .EQU            18H             ; ^X, CANCEL
0080   0000             DEL             .EQU            7FH             ; DELETE
0081   0000             
0082   0000             
0083   0000             ; Store a label address as BIG endian with bit A15 set
0084   0000             #DEFINE DWA(LABEL) .DB (LABEL >> 8) | $80 \ .DB (LABEL & $FF)
0085   0000             
0086   0000             ; if CHAR = A THEN JUMP RELATIVE TO LABEL
0087   0000             #DEFINE TSTCH(CHAR,LABEL) RST RTSTC \ .DB CHAR \ .DB LABEL-$-1
0088   0000             
0089   0000             
0090   0000             .ORG            ROMBGN
0091   0000             
0092   0000             ;RSTART          .EQU    $
0093   0000 31 00 10    START:          LD      SP,STACK        ;*** COLD START ***
0094   0003 3E FF                       LD      A,0FFH
0095   0005 C3 D4 06                    JP      INIT
0096   0008             
0097   0008             RTSTC           .EQU    $       ;*** RST 1 @ $0008 ***
0098   0008 E3          TSTC:           EX      (SP),HL
0099   0009 EF                          RST     RIGNBLK ;IGNORE BLANKS AND
0100   000A BE                          CP      (HL)    ;TEST CHARACTER
0101   000B C3 70 00                    JP      TC1     ;REST OF THIS IS AT TC1
0102   000E             
0103   000E 3E 0D       CRLF:           LD      A,CR    ;*** CRLF ***
0104   0010             ;
0105   0010             ROUTC           .EQU    $       ;*** RST 2 @ $0010 ***
0106   0010 D3 01       OUTC:           OUT     (IODATA),A      ;Out to data port
0107   0012 FE 0D                       CP      CR      ;WAS IT CR?
0108   0014 C0                          RET     NZ      ;NO, FINISHED
0109   0015 C3 E9 06                    JP      OC1     ;REST OF THIS IS AT OC1
0110   0018             
0111   0018             REXPR           .EQU    $       ;*** RST 3 @ $0018 ***
0112   0018 CD AE 03    EXPR:           CALL    EXPR2
0113   001B E5                          PUSH    HL      ;EVALUATE AN EXPRESSION
0114   001C C3 6A 03                    JP      EXPR1   ;REST OF IT AT EXPR1
0115   001F 57          .DB             "W"
0116   0020             
0117   0020             RCOMP           .EQU    $       ;*** RST 4 @ $0020 ***
0118   0020 7C          COMP:           LD      A,H
0119   0021 BA                          CP      D       ;COMPARE HL WITH DE
0120   0022 C0                          RET     NZ      ;RETURN CORRECT C AND
0121   0023 7D                          LD      A,L     ;Z FLAGS
0122   0024 BB                          CP      E       ;BUT OLD A IS LOST
0123   0025 C9                          RET
0124   0026 41 4E       .DB             "AN"
0125   0028             
0126   0028             RIGNBLK         .EQU    $       ;*** RST 5 @ $0028 ***
0127   0028 1A          IGNBLK:         LD      A,(DE)
0128   0029 FE 20                       CP      20H     ;IGNORE BLANKS
0129   002B C0                          RET     NZ      ;IN TEXT (WHERE DE->)
0130   002C 13                          INC     DE      ;AND RETURN THE FIRST
0131   002D C3 28 00                    JP      IGNBLK  ;NON-BLANK CHAR. IN A
0132   0030             
0133   0030             RFINISH         .EQU    $       ;*** RST 6 @ $0030 ***
0134   0030 F1          FINISH:         POP     AF
0135   0031 CD 16 05                    CALL    FIN     ;CHECK END OF COMMAND
0136   0034 C3 29 05                    JP      QWHAT   ;PRINT "WHAT?" IF WRONG
0137   0037 47          .DB             "G"
0138   0038             
0139   0038             RTSTV           .EQU    $       ;*** RST 7 @ $0038 ***
0140   0038 EF          TSTV:           RST     RIGNBLK ;IGNBLK
0141   0039 D6 40                       SUB     '@'     ;TEST VARIABLES
0142   003B D8                          RET     C       ;C: < '@', NOT A VARIABLE
0143   003C C2 5A 00                    JP      NZ,TV1  ;NZ: NOT THE '@' ARRAY
0144   003F             ;
0145   003F 13                          INC     DE      ;IT IS THE "@" ARRAY
0146   0040 CD 4E 04                    CALL    PARN    ;@ SHOULD BE FOLLOWED
0147   0043 29                          ADD     HL,HL   ;BY (EXPR) AS ITS INDEX
0148   0044 DA D2 00                    JP      C,QHOW  ;IS INDEX TOO BIG (>0x7FFF)?
0149   0047 23                          INC     HL      ;ADD TWO BYTES
0150   0048 23                          INC     HL      ;FOR @(0)
0151   0049 D5                          PUSH    DE      ;WILL IT OVERWRITE
0152   004A EB                          EX      DE,HL   ;TEXT?
0153   004B CD 8C 04                    CALL    SIZE    ;FIND SIZE OF FREE RAM
0154   004E E7                          RST     RCOMP   ;AND CHECK THAT
0155   004F DA 57 05                    JP      C,ASORRY  ;IF SO, SAY "SORRY"
0156   0052 21 00 0E                    LD      HL,TXTEND ;IF NOT GET ADDRESS
0157   0055 CD DC 04                    CALL    SUBDE   ;OF @(EXPR) AND PUT IT
0158   0058 D1                          POP     DE      ;IN HL (top-down from TXTEND)
0159   0059 C9                          RET             ;C FLAG IS CLEARED
0160   005A             ;
0161   005A                             ; VARIABLES 'A'..'Z'
0162   005A FE 21       TV1:            CP      21H     ;>='a'?
0163   005C 38 02                       JR      C,TV2   ;NO
0164   005E D6 20                       SUB     20H     ;MAKE UPPER CASE
0165   0060 FE 1B       TV2:            CP      1BH     ;<='Z'
0166   0062 3F                          CCF             ;IF NOT RETURN C FLAG
0167   0063 D8                          RET     C
0168   0064 13                          INC     DE      ;IT IS 'A'=1 THROUGH 'Z'=26
0169   0065 21 7E 0E                    LD      HL,VARBGN-2       ;COMPUTE ADDRESS OF
0170   0068 07                          RLCA            ;THAT VARIABLE
0171   0069 85                          ADD     A,L     ;AND RETURN IT IN HL
0172   006A 6F                          LD      L,A     ;WITH C FLAG CLEARED
0173   006B 3E 00                       LD      A,0
0174   006D 8C                          ADC     A,H
0175   006E 67                          LD      H,A
0176   006F C9                          RET
0177   0070             
0178   0070             ;TSTC:          EX      (SP),HL ;*** TSTC OR RST 1 ***
0179   0070             ;               RST  RIGNBLK    ;THIS IS AT LOC. 8
0180   0070             ;               CMP     (HL)    ;AND THEN JUMP HERE
0181   0070             ;               JP      TC1     ;REST OF THIS IS AT TC1
0182   0070 23          TC1:            INC     HL      ;COMPARE THE BYTE THAT
0183   0071 28 07                       JR      Z,TC2   ;FOLLOWS THE RST INST.
0184   0073 C5                          PUSH    BC      ;WITH THE TEXT (DE->)
0185   0074 4E                          LD      C,(HL)  ;IF NOT =, ADD THE 2ND
0186   0075 06 00                       LD      B,0     ;BYTE THAT FOLLOWS THE
0187   0077 09                          ADD     HL,BC   ;RST TO THE OLD PC
0188   0078 C1                          POP     BC      ;I.E., DO A RELATIVE
0189   0079 1B                          DEC     DE      ;JUMP IF NOT =
0190   007A 13          TC2:            INC     DE      ;IF =, SKIP THOSE BYTES
0191   007B 23                          INC     HL      ;AND CONTINUE
0192   007C E3                          EX      (SP),HL
0193   007D C9                          RET
0194   007E             
0195   007E 21 00 00    TSTNUM:         LD      HL,0    ;*** TSTNUM ***
0196   0081 44                          LD      B,H     ;TEST IF THE TEXT IS
0197   0082 EF                          RST     RIGNBLK ;A NUMBER
0198   0083 FE 24                       CP      '$'     ;HEX NUMBER?
0199   0085 28 23                       JR      Z,TX1   ;YES
0200   0087 FE 30       TN1:            CP      '0'     ;IF NOT, RETURN 0 IN
0201   0089 D8                          RET     C       ;B AND HL
0202   008A FE 3A                       CP      '9'+1   ;IF NUMBERS, CONVERT
0203   008C D0                          RET     NC      ;TO BINARY IN HL AND
0204   008D 3E F0                       LD      A,0F0H  ;SET B TO # OF DIGITS
0205   008F A4                          AND     H       ;IF H>15, THERE IS NO
0206   0090 C2 D2 00                    JP      NZ,QHOW ;ROOM FOR NEXT DIGIT
0207   0093 04                          INC     B       ;B COUNTS # OF DIGITS
0208   0094 C5                          PUSH    BC
0209   0095 44                          LD      B,H     ;HL=10*HL+(NEW DIGIT)
0210   0096 4D                          LD      C,L
0211   0097 29                          ADD     HL,HL   ; 2*HL
0212   0098 29                          ADD     HL,HL   ; 4*HL
0213   0099 09                          ADD     HL,BC   ; 5*HL
0214   009A 29                          ADD     HL,HL   ;10*HL
0215   009B 1A                          LD      A,(DE)  ;AND (DIGIT) IS FROM
0216   009C 13                          INC     DE      ;STRIPPING THE ASCII
0217   009D E6 0F                       AND     0FH     ;CODE
0218   009F 85                          ADD     A,L
0219   00A0 6F                          LD      L,A
0220   00A1 3E 00                       LD      A,0
0221   00A3 8C                          ADC     A,H
0222   00A4 67                          LD      H,A
0223   00A5 C1                          POP     BC
0224   00A6 1A                          LD      A,(DE)  ;DO THIS DIGIT AFTER
0225   00A7 F2 87 00                    JP      P,TN1   ;DIGIT. S SAYS OVERFLOW
0226   00AA             
0227   00AA 13          TX1:            INC     DE      ;SKIP TO NEXT HEX
0228   00AB 1A                          LD      A,(DE)  ;GET HEX DIGIT
0229   00AC FE 30                       CP      '0'     ;< '0'
0230   00AE D8                          RET     C       ;ERROR
0231   00AF FE 3A                       CP      '9'+1   ;<= '9'
0232   00B1 38 0A                       JR      C,TX2   ;OK '0'..'9'
0233   00B3 FE 41                       CP      'A'     ;< 'A'
0234   00B5 D8                          RET     C       ;ERROR, >'9' && < 'A'
0235   00B6 E6 5F                       AND     5FH     ;CONVERT ALPHA TO UPPER
0236   00B8 FE 47                       CP      'F'+1   ;> 'F'
0237   00BA D0                          RET     NC      ;ERROR
0238   00BB D6 07                       SUB     'A'-'0'-10      ;SKIP GAP '9' -> 'A'
0239   00BD E6 0F       TX2:            AND     0FH     ;GET HEX CODE 0..F
0240   00BF C5                          PUSH    BC
0241   00C0 47                          LD      B,A     ;SAVE HEX CODE
0242   00C1 3E F0                       LD      A,0F0H  ;IF H>15
0243   00C3 A4                          AND     H       ;THERE IS NO ROOM
0244   00C4 78                          LD      A,B
0245   00C5 C1                          POP     BC
0246   00C6 C2 D2 00                    JP      NZ,QHOW ;FOR NEXT DIGIT
0247   00C9             
0248   00C9 04                          INC     B       ;B COUNTS # OF DIGITS
0249   00CA 29                          ADD     HL,HL   ;2*HL
0250   00CB 29                          ADD     HL,HL   ;4*HL
0251   00CC 29                          ADD     HL,HL   ;8*HL
0252   00CD 29                          ADD     HL,HL   ;16*HL
0253   00CE B5                          OR      L       ;PUT HEX CODE INTO
0254   00CF 6F                          LD      L,A     ;THE 4 LSB OF HL
0255   00D0                             ;MOV  A,H
0256   00D0                             ;ORA  A
0257   00D0 18 D8                       JR      TX1     ;DIGIT AFTER DIGIT
0258   00D2             
0259   00D2 D5          QHOW:           PUSH    DE      ;*** ERROR "HOW?" ***
0260   00D3 11 D9 00    AHOW:           LD      DE,HOW
0261   00D6 C3 2D 05                    JP      ERROR
0262   00D9             
0263   00D9 48 4F 57 3F HOW:            .DB             "HOW?"
0264   00DD 0D          .DB             CR
0265   00DE             
0266   00DE 4F 4B       OK:             .DB             "OK"
0267   00E0 0D          .DB             CR
0268   00E1             
0269   00E1 57 48 41 54 WHAT:           .DB             "WHAT?"
0269   00E5 3F 
0270   00E6 0D          .DB             CR
0271   00E7             
0272   00E7 53 4F 52 52 SORRY:          .DB             "SORRY"
0272   00EB 59 
0273   00EC 0D          .DB             CR
0274   00ED             
0275   00ED             ;*************************************************************
0276   00ED             ;
0277   00ED             ; *** MAIN ***
0278   00ED             ;
0279   00ED             ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
0280   00ED             ; AND STORES IT IN THE MEMORY.
0281   00ED             ;
0282   00ED             ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
0283   00ED             ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
0284   00ED             ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
0285   00ED             ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
0286   00ED             ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
0287   00ED             ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
0288   00ED             ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
0289   00ED             ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
0290   00ED             ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
0291   00ED             ;
0292   00ED             ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
0293   00ED             ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
0294   00ED             ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
0295   00ED             ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
0296   00ED             ;
0297   00ED             ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
0298   00ED             ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
0299   00ED             ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
0300   00ED             ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
0301   00ED             ;
0302   00ED             ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
0303   00ED             ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
0304   00ED             ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
0305   00ED             ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
0306   00ED             ;
0307   00ED 3E C9       INIT1:          LD      A,$C9   ;PUT RET OPCODE
0308   00EF 32 00 0E                    LD      (USRSPC),A ; AT USR CODE SPACE
0309   00F2 31 00 10    WSTART:         LD      SP,STACK
0310   00F5 CD 0E 00    ST1:            CALL    CRLF    ;AND JUMP TO HERE
0311   00F8 11 DE 00                    LD      DE,OK   ;DE->STRING
0312   00FB 97                          SUB     A       ;A=0
0313   00FC CD C1 05                    CALL    PRTSTG  ;PRINT STRING UNTIL CR
0314   00FF 21 06 01                    LD      HL,ST2+1        ;LITERAL 0
0315   0102 22 B8 0E                    LD      (CURRNT),HL     ;CURRENT->LINE # = 0
0316   0105 21 00 00    ST2:            LD      HL,0
0317   0108 22 C0 0E                    LD      (LOPVAR),HL
0318   010B 22 BA 0E                    LD      (STKGOS),HL
0319   010E 3E 3E       ST3:            LD      A,'>'   ;PROMPT '>' AND
0320   0110 CD 5D 05                    CALL    GETLN   ;READ A LINE
0321   0113 D5                          PUSH    DE      ;DE->END OF LINE
0322   0114 11 CC 0E                    LD      DE,BUFFER       ;DE->BEGINNING OF LINE
0323   0117 CD 7E 00                    CALL    TSTNUM  ;TEST IF IT IS A NUMBER
0324   011A EF                          RST     RIGNBLK
0325   011B 7C                          LD      A,H     ;HL=VALUE OF THE # OR
0326   011C B5                          OR      L       ;0 IF NO # WAS FOUND
0327   011D C1                          POP     BC      ;BC->END OF LINE
0328   011E CA 08 07                    JP      Z,DIRECT
0329   0121 1B                          DEC     DE      ;BACKUP DE AND SAVE
0330   0122 7C                          LD      A,H     ;VALUE OF LINE # THERE
0331   0123 12                          LD      (DE),A
0332   0124 1B                          DEC     DE
0333   0125 7D                          LD      A,L
0334   0126 12                          LD      (DE),A
0335   0127 C5                          PUSH    BC      ;BC,DE->BEGIN, END
0336   0128 D5                          PUSH    DE
0337   0129 79                          LD      A,C
0338   012A 93                          SUB     E
0339   012B F5                          PUSH    AF      ;A=# OF BYTES IN LINE
0340   012C CD 9C 05                    CALL    FNDLN   ;FIND THIS LINE IN SAVE
0341   012F D5                          PUSH    DE      ;AREA, DE->SAVE AREA
0342   0130 20 10                       JR      NZ,ST4  ;NZ:NOT FOUND, INSERT
0343   0132 D5                          PUSH    DE      ;Z:FOUND, DELETE IT
0344   0133 CD B7 05                    CALL    FNDNXT  ;FIND NEXT LINE
0345   0136                                             ;DE->NEXT LINE
0346   0136 C1                          POP     BC      ;BC->LINE TO BE DELETED
0347   0137 2A B6 0E                    LD      HL,(TXTUNF)     ;HL->UNFILLED SAVE AREA
0348   013A CD 7A 06                    CALL    MVUP    ;MOVE UP TO DELETE
0349   013D 60                          LD      H,B     ;TXTUNF->UNFILLED AREA
0350   013E 69                          LD      L,C
0351   013F 22 B6 0E                    LD      (TXTUNF),HL     ;UPDATE
0352   0142 C1          ST4:            POP     BC      ;GET READY TO INSERT
0353   0143 2A B6 0E                    LD      HL,(TXTUNF)     ;BUT FIRST CHECK IF
0354   0146 F1                          POP     AF      ;THE LENGTH OF NEW LINE
0355   0147 E5                          PUSH    HL      ;IS 3 (LINE # AND CR)
0356   0148 FE 03                       CP      3       ;THEN DO NOT INSERT
0357   014A CA F2 00                    JP      Z,WSTART ;MUST CLEAR THE STACK
0358   014D 85                          ADD     A,L     ;COMPUTE NEW TXTUNF
0359   014E 6F                          LD      L,A
0360   014F 3E 00                       LD      A,0
0361   0151 8C                          ADC     A,H
0362   0152 67                          LD      H,A     ;HL->NEW UNFILLED AREA
0363   0153 11 00 0E                    LD      DE,TXTEND       ;CHECK TO SEE IF THERE
0364   0156 E7                          RST     RCOMP   ;COMP HL,DE - IS ENOUGH SPACE
0365   0157 D2 56 05                    JP      NC,QSORRY       ;SORRY, NO ROOM FOR IT
0366   015A 22 B6 0E                    LD      (TXTUNF),HL     ;OK, UPDATE TXTUNF
0367   015D D1                          POP     DE      ;DE->OLD UNFILLED AREA
0368   015E CD 82 06                    CALL    MVDOWN
0369   0161 D1                          POP     DE      ;DE->BEGIN, HL->END
0370   0162 E1                          POP     HL
0371   0163 CD 7A 06                    CALL    MVUP    ;MOVE NEW LINE TO SAVE
0372   0166 18 A6                       JR      ST3     ;AREA
0373   0168             
0374   0168             ;*************************************************************
0375   0168             ;
0376   0168             ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
0377   0168             ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
0378   0168             ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
0379   0168             ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
0380   0168             ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
0381   0168             ;
0382   0168             ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'WSTART'
0383   0168             ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
0384   0168             ; GO BACK TO 'WSTART'.
0385   0168             ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
0386   0168             ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
0387   0168             ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'WSTART', ELSE
0388   0168             ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
0389   0168             ;*************************************************************
0390   0168             ;
0391   0168             ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
0392   0168             ;
0393   0168             ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
0394   0168             ;
0395   0168             ; 'STOP(CR)' GOES BACK TO 'WSTART'
0396   0168             ;
0397   0168             ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
0398   0168             ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
0399   0168             ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
0400   0168             ;
0401   0168             ; THERE ARE 3 MORE ENTRIES IN 'RUN':
0402   0168             ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
0403   0168             ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
0404   0168             ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
0405   0168             ;
0406   0168             ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
0407   0168             ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
0408   0168             ;
0409   0168 CD 25 05    NEW:            CALL    ENDCHK  ;*** NEW(CR) ***
0410   016B 21 00 08                    LD      HL,TXTBGN
0411   016E 22 B6 0E                    LD      (TXTUNF),HL
0412   0171             ;
0413   0171 CD 25 05    STOP:           CALL    ENDCHK  ;*** STOP(CR) ***
0414   0174 C3 F2 00                    JP      WSTART
0415   0177             
0416   0177 CD 25 05    RUN:            CALL    ENDCHK  ;*** RUN(CR) ***
0417   017A 11 00 08                    LD      DE,TXTBGN       ;FIRST SAVED LINE
0418   017D             ;
0419   017D 21 00 00    RUNNXL:         LD      HL,0    ;*** RUNNXL ***
0420   0180 CD A4 05                    CALL    FNDLP   ;FIND WHATEVER LINE #
0421   0183 DA F2 00                    JP      C,WSTART ;C:PASSED TXTUNF, QUIT
0422   0186             ;
0423   0186 EB          RUNTSL:         EX      DE,HL   ;*** RUNTSL ***
0424   0187 22 B8 0E                    LD      (CURRNT),HL     ;SET 'CURRENT'->LINE #
0425   018A EB                          EX      DE,HL
0426   018B 13                          INC     DE      ;BUMP PASS LINE #
0427   018C 13                          INC     DE
0428   018D             ;
0429   018D CD EF 06    RUNSML:         CALL    CHKIO   ;*** RUNSML ***
0430   0190 21 4C 07                    LD      HL,TAB2-1       ;FIND COMMAND IN TAB2
0431   0193 C3 0B 07                    JP      EXEC    ;AND EXECUTE IT
0432   0196             
0433   0196 DF          GOTO:           RST     REXPR   ;*** GOTO EXPR ***
0434   0197 D5                          PUSH    DE      ;SAVE FOR ERROR ROUTINE
0435   0198 CD 25 05                    CALL    ENDCHK  ;MUST FIND A CR
0436   019B CD 9C 05                    CALL    FNDLN   ;FIND THE TARGET LINE
0437   019E C2 D3 00                    JP      NZ,AHOW ;NO SUCH LINE #
0438   01A1 F1                          POP     AF      ;CLEAR THE PUSH DE
0439   01A2 C3 86 01                    JP      RUNTSL  ;GO DO IT
0440   01A5             ;
0441   01A5             ;*************************************************************
0442   01A5             ;
0443   01A5             ; *** LIST *** & PRINT ***
0444   01A5             ;
0445   01A5             ; LIST HAS TWO FORMS:
0446   01A5             ; 'LIST(CR)' LISTS ALL SAVED LINES
0447   01A5             ; 'LIST #(CR)' START LIST AT THIS LINE #
0448   01A5             ; YOU CAN STOP THE LISTING BY CONTROL C KEY
0449   01A5             ;
0450   01A5             ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
0451   01A5             ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
0452   01A5             ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
0453   01A5             ;
0454   01A5             ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
0455   01A5             ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
0456   01A5             ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
0457   01A5             ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
0458   01A5             ; SPECIFIED, 8 POSITIONS WILL BE USED.
0459   01A5             ;
0460   01A5             ; NUMBER BASE IS SET BY PERCENT SIGN FOLLOEWED BY A NUMBER
0461   01A5             ; BETWEEN 2 and 16. VALUES ARE PRINTED AS UNSIGNED TO THIS BASE
0462   01A5             ; FOR THE REST OF THIS PRINT COMMAND UNLESS CHANGED BY
0463   01A5             ; ANOTHER BASE. IF NO BASE IS PROVIDED NUMBERS ARE SIGNED DECIMAL.
0464   01A5             ;
0465   01A5             ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
0466   01A5             ; DOUBLE QUOTES.
0467   01A5             ;
0468   01A5             ; A BACK-ARROW (UNDERLINE) ALONE MEANS GENERATE A (CR) WITHOUT (LF).
0469   01A5             ;
0470   01A5             ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
0471   01A5             ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
0472   01A5             ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
0473   01A5             ;
0474   01A5 CD 7E 00    LIST:           CALL    TSTNUM  ;TEST IF THERE IS A #
0475   01A8 CD 25 05                    CALL    ENDCHK  ;IF NO # WE GET A 0
0476   01AB CD 9C 05                    CALL    FNDLN   ;FIND THIS OR NEXT LINE
0477   01AE DA F2 00    LS1:            JP      C,WSTART ;C:PASSED TXTUNF
0478   01B1 CD 63 06                    CALL    PRTLN   ;PRINT THE LINE
0479   01B4 CD EF 06                    CALL    CHKIO   ;STOP IF HIT CONTROL-C
0480   01B7 CD A4 05                    CALL    FNDLP   ;FIND NEXT LINE
0481   01BA 18 F2                       JR      LS1     ;AND LOOP BACK
0482   01BC             
0483   01BC 0E 08       PRINT:          LD      C,8     ;C = # OF SPACES
0484   01BE AF                          XOR     A       ;DEFAULT BASE FOR PRTNUM
0485   01BF 32 B5 0E                    LD      (PNBASE),A
0486   01C2 CF                          TSTCH(';',PR2)  ;IF NULL LIST & ";"
0486   01C3 3B          
0486   01C4 06          
0487   01C5 CD 0E 00                    CALL    CRLF    ;GIVE CR-LF AND
0488   01C8 C3 8D 01                    JP      RUNSML  ;CONTINUE SAME LINE
0489   01CB CF          PR2:            TSTCH(CR,PR0)   ;IF NULL LIST (CR)
0489   01CC 0D          
0489   01CD 06          
0490   01CE CD 0E 00                    CALL    CRLF    ;ALSO GIVE CR-LF AND
0491   01D1 C3 7D 01                    JP      RUNNXL  ;GO TO NEXT LINE
0492   01D4 CF          PR0:            TSTCH('#',PR5)  ;ELSE IS IT FORMAT?
0492   01D5 23          
0492   01D6 04          
0493   01D7 DF                          RST     REXPR   ;YES, EVALUATE EXPR.
0494   01D8 4D                          LD      C,L     ;AND SAVE IT IN C
0495   01D9 18 19                       JR      PR3     ;LOOK FOR MORE TO PRINT
0496   01DB CF          PR5:            TSTCH('%',PR1)  ;ELSE IS IT PRTNUM BASE?
0496   01DC 25          
0496   01DD 11          
0497   01DE DF                          RST     REXPR   ;YES, EVALUATE EXPR.
0498   01DF 7D                          LD      A,L     ;GET THE LOW PART
0499   01E0 FE 01                       CP      1       ;EITHER 0 OR >= 2?
0500   01E2 CA D2 00                    JP      Z,QHOW  ;ERROR
0501   01E5 FE 11                       CP      17      ;BASE > 16?
0502   01E7 D2 D2 00                    JP      NC,QHOW ;ERROR
0503   01EA 32 B5 0E                    LD      (PNBASE),A      ;IN PNBASE
0504   01ED 18 05                       JR      PR3     ;LOOK FOR MORE TO PRINT
0505   01EF CD CC 05    PR1:            CALL    QTSTG   ;OR IS IT A STRING?
0506   01F2 18 10                       JR      PR8     ;IF NOT, MUST BE EXPR.
0507   01F4 CF          PR3:            TSTCH($2C,PR6)  ;IF ",", GO FIND NEXT
0507   01F5 2C          
0507   01F6 05          
0508   01F7 CD 16 05                    CALL    FIN     ;IN THE LIST.
0509   01FA 18 D8                       JR      PR0     ;LIST CONTINUES
0510   01FC AF          PR6:            XOR     A       ;END OF LIST REACHED
0511   01FD 32 B5 0E                    LD      (PNBASE),A      ;RESET DEFAULT BASE
0512   0200 CD 0E 00                    CALL    CRLF    ;LIST ENDS WITH CRLF
0513   0203 F7                          RST     RFINISH ;FINISH
0514   0204 DF          PR8:            RST     REXPR   ;EVALUATE THE EXPR
0515   0205 C5                          PUSH    BC
0516   0206 CD FC 05                    CALL    PRTNUM  ;PRINT THE VALUE
0517   0209 C1                          POP     BC
0518   020A 18 E8                       JR      PR3     ;MORE TO PRINT?
0519   020C             ;
0520   020C             ;*************************************************************
0521   020C             ;
0522   020C             ; *** GOSUB *** & RETURN ***
0523   020C             ;
0524   020C             ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
0525   020C             ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
0526   020C             ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
0527   020C             ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
0528   020C             ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
0529   020C             ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
0530   020C             ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
0531   020C             ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
0532   020C             ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
0533   020C             ;
0534   020C             ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
0535   020C             ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
0536   020C             ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
0537   020C             ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
0538   020C             ;
0539   020C CD AB 06    GOSUB:          CALL    PUSHA   ;SAVE THE CURRENT "FOR"
0540   020F DF                          RST     REXPR   ;PARAMETERS
0541   0210 D5                          PUSH    DE      ;AND TEXT POINTER
0542   0211 CD 9C 05                    CALL    FNDLN   ;FIND THE TARGET LINE
0543   0214 C2 D3 00                    JP      NZ,AHOW ;NOT THERE. SAY "HOW?"
0544   0217 2A B8 0E                    LD      HL,(CURRNT)     ;FOUND IT, SAVE OLD
0545   021A E5                          PUSH    HL      ;'CURRNT' OLD 'STKGOS'
0546   021B 2A BA 0E                    LD      HL,(STKGOS)
0547   021E E5                          PUSH    HL
0548   021F 21 00 00                    LD      HL,0    ;AND LOAD NEW ONES
0549   0222 22 C0 0E                    LD      (LOPVAR),HL
0550   0225 39                          ADD     HL,SP
0551   0226 22 BA 0E                    LD      (STKGOS),HL
0552   0229 C3 86 01                    JP      RUNTSL  ;THEN RUN THAT LINE
0553   022C CD 25 05    RETURN:         CALL    ENDCHK  ;THERE MUST BE A CR
0554   022F 2A BA 0E                    LD      HL,(STKGOS)     ;OLD STACK POINTER
0555   0232 7C                          LD      A,H     ;0 MEANS NOT EXIST
0556   0233 B5                          OR      L
0557   0234 CA 29 05                    JP      Z,QWHAT ;SO, WE SAY: "WHAT?"
0558   0237 F9                          LD      SP,HL   ;ELSE, RESTORE IT
0559   0238 E1                          POP     HL
0560   0239 22 BA 0E                    LD      (STKGOS),HL     ;AND THE OLD 'STKGOS'
0561   023C E1                          POP     HL
0562   023D 22 B8 0E                    LD      (CURRNT),HL     ;AND THE OLD 'CURRNT'
0563   0240 D1                          POP     DE      ;OLD TEXT POINTER
0564   0241 CD 8F 06                    CALL    POPA    ;OLD "FOR" PARAMETERS
0565   0244 F7                          RST     RFINISH ;AND WE ARE BACK HOME
0566   0245             ;
0567   0245             ;*************************************************************
0568   0245             ;
0569   0245             ; *** FOR *** & NEXT ***
0570   0245             ;
0571   0245             ; 'FOR' HAS TWO FORMS:
0572   0245             ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
0573   0245             ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
0574   0245             ; EXP3=1.  (I.E., WITH A STEP OF +1.)
0575   0245             ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
0576   0245             ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
0577   0245             ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
0578   0245             ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
0579   0245             ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
0580   0245             ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
0581   0245             ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
0582   0245             ; BEFORE THE NEW ONE OVERWRITES IT.
0583   0245             ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
0584   0245             ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
0585   0245             ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
0586   0245             ; (PURGED FROM THE STACK..)
0587   0245             ;
0588   0245             ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
0589   0245             ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
0590   0245             ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
0591   0245             ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
0592   0245             ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
0593   0245             ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
0594   0245             ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
0595   0245             ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
0596   0245             ; IS PURGED AND EXECUTION CONTINUES.
0597   0245             ;
0598   0245 CD AB 06    FOR:            CALL    PUSHA           ;SAVE THE OLD SAVE AREA
0599   0248 CD 03 05                    CALL    SETVAL          ;SET THE CONTROL VAR.
0600   024B 2B                          DEC     HL              ;HL IS ITS ADDRESS
0601   024C 22 C0 0E                    LD      (LOPVAR),HL     ;SAVE THAT
0602   024F 21 C6 07                    LD      HL,TAB5-1       ;USE 'EXEC' TO LOOK
0603   0252 C3 0B 07                    JP      EXEC            ;FOR THE WORD 'TO'
0604   0255 DF          FR1:            RST     REXPR           ;EVALUATE THE LIMIT
0605   0256 22 C4 0E                    LD      (LOPLMT),HL     ;SAVE THAT
0606   0259 21 CC 07                    LD      HL,TAB6-1       ;USE 'EXEC' TO LOOK
0607   025C C3 0B 07                    JP      EXEC            ;FOR THE WORD 'STEP'
0608   025F DF          FR2:            RST     REXPR           ;FOUND IT, GET STEP
0609   0260 18 03                       JR      FR4
0610   0262 21 01 00    FR3:            LD      HL,1H           ;NOT FOUND, SET TO 1
0611   0265 22 C2 0E    FR4:            LD      (LOPINC),HL     ;SAVE THAT TOO
0612   0268 2A B8 0E    FR5:            LD      HL,(CURRNT)     ;SAVE CURRENT LINE #
0613   026B 22 C6 0E                    LD      (LOPLN),HL
0614   026E EB                          EX      DE,HL           ;AND TEXT POINTER
0615   026F 22 C8 0E                    LD      (LOPPT),HL
0616   0272 01 0A 00                    LD      BC,0AH          ;DIG INTO STACK TO
0617   0275 2A C0 0E                    LD      HL,(LOPVAR)     ;FIND 'LOPVAR'
0618   0278 EB                          EX      DE,HL
0619   0279 60                          LD      H,B
0620   027A 68                          LD      L,B             ;HL=0 NOW
0621   027B 39                          ADD     HL,SP           ;HERE IS THE STACK
0622   027C 3E                          .DB     3EH             ;SKIP "ADD HL,BC"
0623   027D 09          FR7:            ADD     HL,BC           ;EACH LEVEL IS 10 DEEP
0624   027E 7E                          LD      A,(HL)          ;GET THAT OLD 'LOPVAR'
0625   027F 23                          INC     HL
0626   0280 B6                          OR      (HL)
0627   0281 28 18                       JR      Z,FR8           ;0 SAYS NO MORE IN IT
0628   0283 7E                          LD      A,(HL)
0629   0284 2B                          DEC     HL
0630   0285 BA                          CP      D               ;SAME AS THIS ONE?
0631   0286 20 F5                       JR      NZ,FR7
0632   0288 7E                          LD      A,(HL)          ;THE OTHER HALF?
0633   0289 BB                          CP      E
0634   028A 20 F1                       JR      NZ,FR7
0635   028C EB                          EX      DE,HL           ;YES, FOUND ONE
0636   028D 21 00 00                    LD      HL,0H
0637   0290 39                          ADD     HL,SP           ;TRY TO MOVE SP
0638   0291 44                          LD      B,H
0639   0292 4D                          LD      C,L
0640   0293 21 0A 00                    LD      HL,0AH
0641   0296 19                          ADD     HL,DE
0642   0297 CD 82 06                    CALL    MVDOWN          ;AND PURGE 10 WORDS
0643   029A F9                          LD      SP,HL           ;IN THE STACK
0644   029B 2A C8 0E    FR8:            LD      HL,(LOPPT)      ;JOB DONE, RESTORE DE
0645   029E EB                          EX      DE,HL
0646   029F F7                          RST     RFINISH         ;AND CONTINUE
0647   02A0             ;
0648   02A0 FF          NEXT:           RST     RTSTV           ;GET ADDRESS OF VAR.
0649   02A1 DA 29 05                    JP      C,QWHAT         ;NO VARIABLE, "WHAT?"
0650   02A4 22 BC 0E                    LD      (VARNXT),HL     ;YES, SAVE IT
0651   02A7 D5          NX0:            PUSH    DE              ;SAVE TEXT POINTER
0652   02A8 EB                          EX      DE,HL
0653   02A9 2A C0 0E                    LD      HL,(LOPVAR)     ;GET VAR. IN 'FOR'
0654   02AC 7C                          LD      A,H
0655   02AD B5                          OR      L               ;0 SAYS NEVER HAD ONE
0656   02AE CA 2A 05                    JP      Z,AWHAT         ;SO WE ASK: "WHAT?"
0657   02B1 E7                          RST     RCOMP           ;ELSE WE CHECK THEM
0658   02B2 28 09                       JR      Z,NX3           ;OK, THEY AGREE
0659   02B4 D1                          POP     DE              ;NO, LET'S SEE
0660   02B5 CD 8F 06                    CALL    POPA            ;PURGE CURRENT LOOP
0661   02B8 2A BC 0E                    LD      HL,(VARNXT)     ;AND POP ONE LEVEL
0662   02BB 18 EA                       JR      NX0             ;GO CHECK AGAIN
0663   02BD 5E          NX3:            LD      E,(HL)          ;COME HERE WHEN AGREED
0664   02BE 23                          INC     HL
0665   02BF 56                          LD      D,(HL)          ;DE=VALUE OF VAR.
0666   02C0 2A C2 0E                    LD      HL,(LOPINC)
0667   02C3 E5                          PUSH    HL
0668   02C4 7C                          LD      A,H
0669   02C5 AA                          XOR     D
0670   02C6 7A                          LD      A,D
0671   02C7 19                          ADD     HL,DE           ;ADD ONE STEP
0672   02C8 FA CF 02                    JP      M,NX4
0673   02CB AC                          XOR     H
0674   02CC FA F0 02                    JP      M,NX5
0675   02CF EB          NX4:            EX      DE,HL
0676   02D0 2A C0 0E                    LD      HL,(LOPVAR)     ;PUT IT BACK
0677   02D3 73                          LD      (HL),E
0678   02D4 23                          INC     HL
0679   02D5 72                          LD      (HL),D
0680   02D6 2A C4 0E                    LD      HL,(LOPLMT)     ;HL->LIMIT
0681   02D9 F1                          POP     AF              ;OLD HL
0682   02DA B7                          OR      A
0683   02DB F2 DF 02                    JP      P,NX1           ;STEP > 0
0684   02DE EB                          EX      DE,HL           ;STEP < 0
0685   02DF CD FB 04    NX1:            CALL    CKHLDE          ;COMPARE WITH LIMIT
0686   02E2 D1                          POP     DE              ;RESTORE TEXT POINTER
0687   02E3 38 0D                       JR      C,NX2           ;OUTSIDE LIMIT
0688   02E5 2A C6 0E                    LD      HL,(LOPLN)      ;WITHIN LIMIT, GO
0689   02E8 22 B8 0E                    LD      (CURRNT),HL     ;BACK TO THE SAVED
0690   02EB 2A C8 0E                    LD      HL,(LOPPT)      ;'CURRNT' AND TEXT
0691   02EE EB                          EX      DE,HL           ;POINTER
0692   02EF F7                          RST     RFINISH
0693   02F0 E1          NX5:            POP     HL
0694   02F1 D1                          POP     DE
0695   02F2 CD 8F 06    NX2:            CALL    POPA            ;PURGE THIS LOOP
0696   02F5 F7                          RST     RFINISH
0697   02F6             ;
0698   02F6             ;*************************************************************
0699   02F6             ;
0700   02F6             ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
0701   02F6             ;
0702   02F6             ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
0703   02F6             ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
0704   02F6             ;
0705   02F6             ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
0706   02F6             ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
0707   02F6             ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
0708   02F6             ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
0709   02F6             ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
0710   02F6             ; EXECUTION CONTINUES AT THE NEXT LINE.
0711   02F6             ;
0712   02F6             ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
0713   02F6             ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
0714   02F6             ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
0715   02F6             ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
0716   02F6             ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
0717   02F6             ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
0718   02F6             ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
0719   02F6             ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
0720   02F6             ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
0721   02F6             ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
0722   02F6             ;
0723   02F6             ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
0724   02F6             ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
0725   02F6             ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
0726   02F6             ; THIS IS HANDLED IN 'INPERR'.
0727   02F6             ;
0728   02F6             ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
0729   02F6             ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
0730   02F6             ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
0731   02F6             ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
0732   02F6             ; THIS IS DONE BY 'DEFLT'.
0733   02F6             ;
0734   02F6 21 00 00    REM:            LD      HL,0H   ;*** REM ***
0735   02F9 3E          .DB             3EH             ;SKIP RST, THIS IS LIKE 'IF 0'
0736   02FA             ;
0737   02FA DF          IFF:            RST     REXPR   ;*** IF ***
0738   02FB 7C                          LD      A,H     ;IS THE EXPR.=0?
0739   02FC B5                          OR      L
0740   02FD C2 8D 01                    JP      NZ,RUNSML       ;NO, CONTINUE
0741   0300 CD B9 05                    CALL    FNDSKP  ;YES, SKIP REST OF LINE
0742   0303 D2 86 01                    JP      NC,RUNTSL       ;AND RUN THE NEXT LINE
0743   0306 C3 F2 00                    JP      WSTART  ;IF NO NEXT, RE-START
0744   0309             ;
0745   0309 2A BE 0E    INPERR:         LD      HL,(STKINP)     ;*** INPERR ***
0746   030C F9                          LD      SP,HL   ;RESTORE OLD SP
0747   030D E1                          POP     HL      ;AND OLD 'CURRNT'
0748   030E 22 B8 0E                    LD      (CURRNT),HL
0749   0311 D1                          POP     DE      ;AND OLD TEXT POINTER
0750   0312 D1                          POP     DE      ;REDO INPUT
0751   0313             ;
0752   0313             INPUT:          ;*** INPUT ***
0753   0313 D5          IP1:            PUSH    DE      ;SAVE IN CASE OF ERROR
0754   0314 CD CC 05                    CALL    QTSTG   ;IS NEXT ITEM A STRING?
0755   0317 18 05                       JR      IP2     ;NO
0756   0319 FF                          RST     RTSTV   ;YES, BUT FOLLOWED BY A
0757   031A 38 39                       JR      C,IP4   ;VARIABLE?   NO.
0758   031C 18 10                       JR      IP3     ;YES.  INPUT VARIABLE
0759   031E D5          IP2:            PUSH    DE      ;SAVE FOR 'PRTSTG'
0760   031F FF                          RST     RTSTV   ;MUST BE VARIABLE NOW
0761   0320 DA 29 05                    JP      C,QWHAT ;"WHAT?" IT IS NOT?
0762   0323 1A                          LD      A,(DE)  ;GET READY FOR 'PRTSTG'
0763   0324 4F                          LD      C,A
0764   0325 97                          SUB     A
0765   0326 12                          LD      (DE),A
0766   0327 D1                          POP     DE
0767   0328 CD C1 05                    CALL    PRTSTG  ;PRINT STRING AS PROMPT
0768   032B 79                          LD      A,C     ;RESTORE TEXT
0769   032C 1B                          DEC     DE
0770   032D 12                          LD      (DE),A
0771   032E D5          IP3:            PUSH    DE      ;SAVE TEXT POINTER
0772   032F EB                          EX      DE,HL
0773   0330 2A B8 0E                    LD      HL,(CURRNT)     ;ALSO SAVE 'CURRNT'
0774   0333 E5                          PUSH    HL
0775   0334 21 13 03                    LD      HL,IP1  ;A NEGATIVE NUMBER
0776   0337 22 B8 0E                    LD      (CURRNT),HL     ;AS A FLAG
0777   033A 21 00 00                    LD      HL,0H   ;SAVE SP TOO
0778   033D 39                          ADD     HL,SP
0779   033E 22 BE 0E                    LD      (STKINP),HL
0780   0341 D5                          PUSH    DE      ;OLD HL
0781   0342 3E 3A                       LD      A,':'   ;PRINT THIS TOO
0782   0344 CD 5D 05                    CALL    GETLN   ;AND GET A LINE
0783   0347 11 CC 0E                    LD      DE,BUFFER       ;POINTS TO BUFFER
0784   034A DF                          RST     REXPR   ;EVALUATE INPUT
0785   034B             ;NOP                             ;CAN BE 'CALL ENDCHK'
0786   034B             ;NOP
0787   034B             ;NOP
0788   034B D1                          POP     DE      ;OK, GET OLD HL
0789   034C EB                          EX      DE,HL
0790   034D 73                          LD      (HL),E  ;SAVE VALUE IN VAR.
0791   034E 23                          INC     HL
0792   034F 72                          LD      (HL),D
0793   0350 E1                          POP     HL      ;GET OLD 'CURRNT'
0794   0351 22 B8 0E                    LD      (CURRNT),HL
0795   0354 D1                          POP     DE      ;AND OLD TEXT POINTER
0796   0355 F1          IP4:            POP     AF      ;PURGE JUNK IN STACK
0797   0356 CF                          TSTCH($2C,IP5)  ;IS NEXT CH. ','?
0797   0357 2C          
0797   0358 02          
0798   0359 18 B8                       JR      IP1     ;YES, MORE ITEMS.
0799   035B F7          IP5:            RST     RFINISH
0800   035C             ;
0801   035C 1A          DEFLT:          LD      A,(DE)  ;***  DEFLT ***
0802   035D FE 0D                       CP      CR      ;EMPTY LINE IS OK
0803   035F 28 08                       JR      Z,LT1   ;ELSE IT IS 'LET'
0804   0361             ;
0805   0361 CD 03 05    LET:            CALL    SETVAL  ;*** LET ***
0806   0364 CF                          TSTCH($2C,LT1)  ;SET VALUE TO VAR.
0806   0365 2C          
0806   0366 02          
0807   0367 18 F8                       JR      LET     ;ITEM BY ITEM
0808   0369 F7          LT1:            RST     RFINISH ;UNTIL FINISH
0809   036A             ;
0810   036A             ;*************************************************************
0811   036A             ;
0812   036A             ; *** EXPR ***
0813   036A             ;
0814   036A             ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
0815   036A             ; <EXPR>::<EXPR2>
0816   036A             ;         <EXPR2><REL.OP.><EXPR2>
0817   036A             ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
0818   036A             ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
0819   036A             ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
0820   036A             ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
0821   036A             ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
0822   036A             ; <EXPR4>::=<VARIABLE>
0823   036A             ;           <FUNCTION>
0824   036A             ;           (<EXPR>)
0825   036A             ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
0826   036A             ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
0827   036A             ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
0828   036A             ;
0829   036A             ;EXPR:          CALL    EXPR2   ;THIS IS AT LOC. 18
0830   036A             ;               PUSH    HL      ;SAVE <EXPR2> VALUE
0831   036A             ;               JP      EXPR1   ;REST OF IT AT EXPR1
0832   036A 21 D4 07    EXPR1:          LD      HL,TAB8-1       ;LOOKUP REL.OP.
0833   036D C3 0B 07                    JP      EXEC    ;GO DO IT
0834   0370             ;
0835   0370 CD 99 03    XP11:           CALL    XP18    ;REL.OP.">="
0836   0373 D8                          RET     C       ;NO, RETURN HL=0
0837   0374 6F                          LD      L,A     ;YES, RETURN HL=1
0838   0375 C9                          RET
0839   0376             ;
0840   0376 CD 99 03    XP12:           CALL    XP18    ;REL.OP."#"
0841   0379 C8                          RET     Z       ;FALSE, RETURN HL=0
0842   037A 6F                          LD      L,A     ;TRUE, RETURN HL=1
0843   037B C9                          RET
0844   037C             ;
0845   037C CD 99 03    XP13:           CALL    XP18    ;REL.OP.">"
0846   037F C8                          RET     Z       ;FALSE
0847   0380 D8                          RET     C       ;ALSO FALSE, HL=0
0848   0381 6F                          LD      L,A     ;TRUE, HL=1
0849   0382 C9                          RET
0850   0383             ;
0851   0383 CD 99 03    XP14:           CALL    XP18    ;REL.OP."<="
0852   0386 6F                          LD      L,A     ;SET HL=1
0853   0387 C8                          RET     Z       ;REL. TRUE, RETURN
0854   0388 D8                          RET     C
0855   0389 6C                          LD      L,H     ;ELSE SET HL=0
0856   038A C9                          RET
0857   038B             ;
0858   038B CD 99 03    XP15:           CALL    XP18    ;REL.OP."="
0859   038E C0                          RET     NZ      ;FALSE, RETURN HL=0
0860   038F 6F                          LD      L,A     ;ELSE SET HL=1
0861   0390 C9                          RET
0862   0391             ;
0863   0391 CD 99 03    XP16:           CALL    XP18    ;REL.OP."<"
0864   0394 D0                          RET     NC      ;FALSE, RETURN HL=0
0865   0395 6F                          LD      L,A     ;ELSE SET HL=1
0866   0396 C9                          RET
0867   0397             ;
0868   0397 E1          XP17:           POP     HL      ;NOT .REL.OP
0869   0398 C9                          RET             ;RETURN HL=<EXPR2>
0870   0399             ;
0871   0399 79          XP18:           LD      A,C     ;SUBROUTINE FOR ALL
0872   039A E1                          POP     HL      ;REL.OP.'S
0873   039B C1                          POP     BC
0874   039C E5                          PUSH    HL      ;REVERSE TOP OF STACK
0875   039D C5                          PUSH    BC
0876   039E 4F                          LD      C,A
0877   039F CD AE 03                    CALL    EXPR2   ;GET 2ND <EXPR2>
0878   03A2 EB                          EX      DE,HL   ;VALUE IN DE NOW
0879   03A3 E3                          EX      (SP),HL ;1ST <EXPR2> IN HL
0880   03A4 CD FB 04                    CALL    CKHLDE  ;COMPARE 1ST WITH 2ND
0881   03A7 D1                          POP     DE      ;RESTORE TEXT POINTER
0882   03A8 21 00 00                    LD      HL,0H   ;SET HL=0, A=1
0883   03AB 3E 01                       LD      A,1
0884   03AD C9                          RET
0885   03AE             ;
0886   03AE CF          EXPR2:          TSTCH('-',XP21) ;NEGATIVE SIGN?
0886   03AF 2D          
0886   03B0 05          
0887   03B1 21 00 00                    LD      HL,0H   ;YES, FAKE '0-'
0888   03B4 18 21                       JR      XP26    ;TREAT LIKE SUBTRACT
0889   03B6             ;
0890   03B6 CF          XP21:           TSTCH('+',XP22) ;POSITIVE SIGN? IGNORE
0890   03B7 2B          
0890   03B8 00          
0891   03B9 CD E0 03    XP22:           CALL    EXPR3   ;1ST <EXPR3>
0892   03BC CF          XP23:           TSTCH('+',XP25) ;ADD?
0892   03BD 2B          
0892   03BE 15          
0893   03BF E5                          PUSH    HL      ;YES, SAVE VALUE
0894   03C0 CD E0 03                    CALL    EXPR3   ;GET 2ND <EXPR3>
0895   03C3 EB          XP24:           EX      DE,HL   ;2ND IN DE
0896   03C4 E3                          EX      (SP),HL ;1ST IN HL
0897   03C5 7C                          LD      A,H     ;COMPARE SIGN
0898   03C6 AA                          XOR     D
0899   03C7 7A                          LD      A,D
0900   03C8 19                          ADD     HL,DE
0901   03C9 D1                          POP     DE      ;RESTORE TEXT POINTER
0902   03CA FA BC 03                    JP      M,XP23  ;1ST AND 2ND SIGN DIFFER
0903   03CD AC                          XOR     H       ;1ST AND 2ND SIGN EQUAL
0904   03CE F2 BC 03                    JP      P,XP23  ;SO IS RESULT
0905   03D1             ;
0906   03D1 C3 D2 00                    JP      QHOW    ;ELSE WE HAVE OVERFLOW
0907   03D4             ;
0908   03D4 CF          XP25:           TSTCH('-',XP42) ;SUBTRACT?
0908   03D5 2D          
0908   03D6 7E          
0909   03D7 E5          XP26:           PUSH    HL      ;YES, SAVE 1ST <EXPR3>
0910   03D8 CD E0 03                    CALL    EXPR3   ;GET 2ND <EXPR3>
0911   03DB CD E6 04                    CALL    CHGSGN  ;NEGATE
0912   03DE 18 E3                       JR      XP24    ;AND ADD THEM
0913   03E0             ;
0914   03E0 CD 3A 04    EXPR3:          CALL    EXPR4   ;GET 1ST <EXPR4>
0915   03E3 CF          XP31:           TSTCH('*',XP34) ;MULTIPLY?
0915   03E4 2A          
0915   03E5 28          
0916   03E6 E5                          PUSH    HL      ;YES, SAVE 1ST
0917   03E7 CD 3A 04                    CALL    EXPR4   ;AND GET 2ND <EXPR4>
0918   03EA 06 00                       LD      B,0H    ;CLEAR B FOR SIGN
0919   03EC CD E3 04                    CALL    CHKSGN  ;CHECK SIGN
0920   03EF E3                          EX      (SP),HL ;1ST IN HL
0921   03F0 CD E3 04                    CALL    CHKSGN  ;CHECK SIGN OF 1ST
0922   03F3 EB                          EX      DE,HL
0923   03F4 E3                          EX      (SP),HL
0924   03F5 7C                          LD      A,H     ;IS HL > 255 ?
0925   03F6 B7                          OR      A
0926   03F7 28 06                       JR      Z,XP32  ;NO
0927   03F9 7A                          LD      A,D     ;YES, HOW ABOUT DE
0928   03FA B2                          OR      D
0929   03FB EB                          EX      DE,HL   ;PUT SMALLER IN HL
0930   03FC C2 D3 00                    JP      NZ,AHOW ;ALSO >, WILL OVERFLOW
0931   03FF 7D          XP32:           LD      A,L     ;THIS IS DUMB
0932   0400 21 00 00                    LD      HL,0H   ;CLEAR RESULT
0933   0403 B7                          OR      A       ;ADD AND COUNT
0934   0404 28 27                       JR      Z,XP35
0935   0406 19          XP33:           ADD     HL,DE
0936   0407 38 CA                       JR      C,AHOW  ;OVERFLOW
0937   0409 3D                          DEC     A
0938   040A 20 FA                       JR      NZ,XP33
0939   040C 18 1F                       JR      XP35    ;FINISHED
0940   040E             ;
0941   040E CF          XP34:           TSTCH('/',XP42) ;DIVIDE?
0941   040F 2F          
0941   0410 44          
0942   0411 E5                          PUSH    HL      ;YES, SAVE 1ST <EXPR4>
0943   0412 CD 3A 04                    CALL    EXPR4   ;AND GET THE SECOND ONE
0944   0415 06 00                       LD      B,0H    ;CLEAR B FOR SIGN
0945   0417 CD E3 04                    CALL    CHKSGN  ;CHECK SIGN OF 2ND
0946   041A E3                          EX      (SP),HL ;GET 1ST IN HL
0947   041B CD E3 04                    CALL    CHKSGN  ;CHECK SIGN OF 1ST
0948   041E EB                          EX      DE,HL
0949   041F E3                          EX      (SP),HL
0950   0420 EB                          EX      DE,HL
0951   0421 7A                          LD      A,D     ;DIVIDE BY 0?
0952   0422 B3                          OR      E
0953   0423 CA D3 00                    JP      Z,AHOW  ;SAY "HOW?"
0954   0426 C5                          PUSH    BC      ;ELSE SAVE SIGN
0955   0427 CD C7 04                    CALL    DIVIDE  ;USE SUBROUTINE
0956   042A 60                          LD      H,B     ;RESULT IN HL NOW
0957   042B 69                          LD      L,C
0958   042C C1                          POP     BC      ;GET SIGN BACK
0959   042D D1          XP35:           POP     DE      ;AND TEXT POINTER
0960   042E 7C                          LD      A,H     ;HL MUST BE +
0961   042F B7                          OR      A
0962   0430 FA D2 00                    JP      M,QHOW  ;ELSE IT IS OVERFLOW
0963   0433 78                          LD      A,B
0964   0434 B7                          OR      A
0965   0435 FC E6 04                    CALL    M,CHGSGN        ;CHANGE SIGN IF NEEDED
0966   0438 18 A9                       JR      XP31    ;LOOK FOR MORE TERMS
0967   043A             ;
0968   043A 21 9F 07    EXPR4:          LD      HL,TAB4-1       ;FIND FUNCTION IN TAB4
0969   043D C3 0B 07                    JP      EXEC    ;AND GO DO IT
0970   0440             ;
0971   0440 FF          XP40:           RST     RTSTV   ;NO, NOT A FUNCTION
0972   0441 38 05                       JR      C,XP41  ;NOR A VARIABLE
0973   0443 7E                          LD      A,(HL)  ;VARIABLE
0974   0444 23                          INC     HL
0975   0445 66                          LD      H,(HL)  ;VALUE IN HL
0976   0446 6F                          LD      L,A
0977   0447 C9                          RET
0978   0448             ;
0979   0448 CD 7E 00    XP41:           CALL    TSTNUM  ;OR IS IT A NUMBER
0980   044B 78                          LD      A,B     ;# OF DIGIT
0981   044C B7                          OR      A
0982   044D C0                          RET     NZ      ;OK
0983   044E CF          PARN:           TSTCH($28,XP43) ; '('
0983   044F 28          
0983   0450 05          
0984   0451 DF                          RST     REXPR   ;"(EXPR)"
0985   0452 CF                          TSTCH($29,XP43) ; ')'
0985   0453 29          
0985   0454 01          
0986   0455 C9          XP42:           RET
0987   0456 C3 29 05    XP43:           JP      QWHAT   ;ELSE SAY: "WHAT?"
0988   0459             
0989   0459 CD 4E 04    RND:            CALL    PARN    ;*** RND(EXPR) ***
0990   045C 7C                          LD      A,H     ;EXPR MUST BE +
0991   045D B7                          OR      A
0992   045E FA D2 00                    JP      M,QHOW
0993   0461 B5                          OR      L       ;AND NON-ZERO
0994   0462 CA D2 00                    JP      Z,QHOW
0995   0465 D5                          PUSH    DE      ;SAVE BOTH
0996   0466 E5                          PUSH    HL
0997   0467 2A CA 0E                    LD      HL,(RANPNT)     ;GET MEMORY AS RANDOM
0998   046A 11 F3 07                    LD      DE,LSTROM       ;NUMBER
0999   046D E7                          RST     RCOMP
1000   046E 38 03                       JR      C,RA1   ;WRAP AROUND IF LAST
1001   0470 21 00 00                    LD      HL,START
1002   0473 5E          RA1:            LD      E,(HL)
1003   0474 23                          INC     HL
1004   0475 56                          LD      D,(HL)
1005   0476 22 CA 0E                    LD      (RANPNT),HL
1006   0479 E1                          POP     HL
1007   047A EB                          EX      DE,HL
1008   047B C5                          PUSH    BC
1009   047C CD C7 04                    CALL    DIVIDE  ;RND(N)=MOD(M,N)+1
1010   047F C1                          POP     BC
1011   0480 D1                          POP     DE
1012   0481 23                          INC     HL
1013   0482 C9                          RET
1014   0483             
1015   0483 CD 4E 04    ABS:            CALL    PARN    ;*** ABS(EXPR) ***
1016   0486 1B                          DEC     DE
1017   0487 CD E3 04                    CALL    CHKSGN  ;CHECK SIGN AND CHANGE IF HL < 0
1018   048A 13                          INC     DE
1019   048B C9                          RET
1020   048C             
1021   048C 2A B6 0E    SIZE:           LD      HL,(TXTUNF)     ;*** RETURN SIZE IN HL ***
1022   048F D5                          PUSH    DE              ;GET THE NUMBER OF FREE
1023   0490 EB                          EX      DE,HL           ;BYTES BETWEEN 'TXTUNF'
1024   0491 21 00 0E                    LD      HL,TXTEND       ;AND 'TXTEND'
1025   0494 CD DC 04                    CALL    SUBDE
1026   0497 D1                          POP     DE
1027   0498 C9                          RET
1028   0499             
1029   0499 CD 4E 04    PEEK:           CALL    PARN    ;*** PEEK(ADDR) ***
1030   049C 6E                          LD      L,(HL)  ;GET CONTENT OF (HL)
1031   049D 26 00                       LD      H,0     ;RETURN RESULT IN HL
1032   049F C9                          RET
1033   04A0             
1034   04A0 CD 4E 04    USR:            CALL    PARN    ;*** USR(PARA) ***
1035   04A3 C3 00 0E                    JP      USRSPC  ;GET para in HL and JP to prog
1036   04A6             ;                               ;There you should:
1037   04A6             ;               ...             ;    - Do the work
1038   04A6             ;               ...             ;    - Put result in HL
1039   04A6             ;               RET             ;$C9 - RET to BASIC
1040   04A6             
1041   04A6             
1042   04A6 21 00 08    RAM:            LD      HL,TXTBGN ; *** RAM *** START OF TEXT AREA
1043   04A9 C9                          RET
1044   04AA             
1045   04AA             
1046   04AA 21 00 0E    TOP:            LD      HL,TXTEND ; *** TOP *** END OF TEXT AREA
1047   04AD C9                          RET
1048   04AE             
1049   04AE             
1050   04AE 2A B6 0E    UNF:            LD      HL,(TXTUNF) ; *** UNF *** START OF UNFILLED TEXT AREA
1051   04B1 C9                          RET
1052   04B2             
1053   04B2             
1054   04B2 DF          POKE:           RST     REXPR   ;*** POKE ADDR, VAL1 [,VAL2, VAL3,..]
1055   04B3 CF                          TSTCH($2C,PK2)  ; 1ST ',' SEPARATES THE VALUE(S)
1055   04B4 2C          
1055   04B5 0D          
1056   04B6 E5                          PUSH    HL      ;SAVE ADDR
1057   04B7 DF          PK0:            RST     REXPR   ;GET VAL IN HL
1058   04B8 7D                          LD      A,L     ;LOW BYTE OF VAL
1059   04B9 E1                          POP     HL      ;GET ADDR
1060   04BA 77                          LD      (HL),A  ;PUT VALUE IN RAM
1061   04BB CF                          TSTCH($2C,PK1)  ;READY UNLESS ","
1061   04BC 2C          
1061   04BD 04          
1062   04BE 23                          INC     HL      ;NEXT ADDR
1063   04BF E5                          PUSH    HL
1064   04C0 18 F5                       JR      PK0     ;LIST CONTINUES
1065   04C2             ;
1066   04C2 F7          PK1:            RST     RFINISH ;READY
1067   04C3             ;
1068   04C3             PK2:            ;POP     HL
1069   04C3 C3 29 05                    JP      QWHAT   ;ELSE SAY: "WHAT?"
1070   04C6             
1071   04C6             
1072   04C6             
1073   04C6             
1074   04C6 76          HALT:           HALT            ;HALT CPU (return to analyser)
1075   04C7             ;
1076   04C7             ;*************************************************************
1077   04C7             ;
1078   04C7             ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1079   04C7             ;
1080   04C7             ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1081   04C7             ;
1082   04C7             ; 'SUBDE' SUBSTRACTS DE FROM HL
1083   04C7             ;
1084   04C7             ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1085   04C7             ; SIGN AND FLIP SIGN OF B.
1086   04C7             ;
1087   04C7             ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1088   04C7             ;
1089   04C7             ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1090   04C7             ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1091   04C7             ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1092   04C7             ;
1093   04C7 E5          DIVIDE:         PUSH    HL      ;*** DIVIDE ***
1094   04C8 6C                          LD      L,H     ;DIVIDE H BY DE
1095   04C9 26 00                       LD      H,0
1096   04CB CD D2 04                    CALL    DV1
1097   04CE 41                          LD      B,C     ;SAVE RESULT IN B
1098   04CF 7D                          LD      A,L     ;(REMINDER+L)/DE
1099   04D0 E1                          POP     HL
1100   04D1 67                          LD      H,A
1101   04D2 0E FF       DV1:            LD      C,0FFH  ;RESULT IN C
1102   04D4 0C          DV2:            INC     C       ;DUMB ROUTINE
1103   04D5 CD DC 04                    CALL    SUBDE   ;DIVIDE BY SUBTRACT
1104   04D8 30 FA                       JR      NC,DV2  ;AND COUNT
1105   04DA 19                          ADD     HL,DE
1106   04DB C9                          RET
1107   04DC             ;
1108   04DC 7D          SUBDE:          LD      A,L     ;*** SUBDE ***
1109   04DD 93                          SUB     E       ;SUBSTRACT DE FROM
1110   04DE 6F                          LD      L,A     ;HL
1111   04DF 7C                          LD      A,H
1112   04E0 9A                          SBC     A,D
1113   04E1 67                          LD      H,A
1114   04E2 C9                          RET
1115   04E3             ;
1116   04E3 7C          CHKSGN:         LD      A,H     ;*** CHKSGN ***
1117   04E4 B7                          OR      A       ;CHECK SIGN OF HL
1118   04E5 F0                          RET     P       ;IF HL >=0 RETURN
1119   04E6             ;
1120   04E6 7C          CHGSGN:         LD      A,H     ;*** CHGSGN ***
1121   04E7 B5                          OR      L       ;CHECK VALUE OF HL
1122   04E8 C8                          RET     Z       ;IF HL == 0 RETURN
1123   04E9             ;
1124   04E9 7C                          LD      A,H
1125   04EA F5                          PUSH    AF      ;SAVE SIGN
1126   04EB 2F                          CPL             ;CHANGE SIGN OF HL
1127   04EC 67                          LD      H,A
1128   04ED 7D                          LD      A,L
1129   04EE 2F                          CPL
1130   04EF 6F                          LD      L,A
1131   04F0 23                          INC     HL      ;HL = -HL
1132   04F1 F1                          POP     AF      ;GET ORIGINAL SIGN
1133   04F2 AC                          XOR     H       ;COMPARE
1134   04F3 F2 D2 00                    JP      P,QHOW  ;ERROR IF SIGN UNCHANGED (HL=$8000)
1135   04F6 78                          LD      A,B     ;AND ALSO FLIP B
1136   04F7 EE 80                       XOR     80H
1137   04F9 47                          LD      B,A
1138   04FA C9                          RET
1139   04FB             
1140   04FB 7C          CKHLDE:         LD      A,H
1141   04FC AA                          XOR     D       ;SAME SIGN?
1142   04FD F2 01 05                    JP      P,CK1   ;YES, COMPARE
1143   0500 EB                          EX      DE,HL   ;NO, XCH AND COMP
1144   0501 E7          CK1:            RST     RCOMP
1145   0502 C9                          RET
1146   0503             ;
1147   0503             ;*************************************************************
1148   0503             ;
1149   0503             ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1150   0503             ;
1151   0503             ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1152   0503             ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1153   0503             ; TO THAT VALUE.
1154   0503             ;
1155   0503             ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1156   0503             ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1157   0503             ; NEXT LINE AND CONTINUE FROM THERE.
1158   0503             ;
1159   0503             ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1160   0503             ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1161   0503             ;
1162   0503             ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1163   0503             ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1164   0503             ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1165   0503             ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1166   0503             ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1167   0503             ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1168   0503             ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1169   0503             ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1170   0503             ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1171   0503             ;
1172   0503             ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1173   0503             ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1174   0503             ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1175   0503             ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1176   0503             ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1177   0503             ;
1178   0503 FF          SETVAL:         RST     RTSTV   ;*** SETVAL ***
1179   0504 DA 29 05                    JP      C,QWHAT ;"WHAT?" NO VARIABLE
1180   0507 E5                          PUSH    HL      ;SAVE ADDRESS OF VAR.
1181   0508 CF                          TSTCH('=',SV1)  ;PASS "=" SIGN
1181   0509 3D          
1181   050A 08          
1182   050B DF                          RST     REXPR   ;EVALUATE EXPR.
1183   050C 44                          LD      B,H     ;VALUE IS IN BC NOW
1184   050D 4D                          LD      C,L
1185   050E E1                          POP     HL      ;GET ADDRESS
1186   050F 71                          LD      (HL),C  ;SAVE VALUE
1187   0510 23                          INC     HL
1188   0511 70                          LD      (HL),B
1189   0512 C9                          RET
1190   0513 C3 29 05    SV1:            JP      QWHAT   ;NO "=" SIGN
1191   0516             
1192   0516 CF          FIN:            TSTCH(';',FI1)  ;*** FIN ***
1192   0517 3B          
1192   0518 04          
1193   0519 F1                          POP     AF      ;";", PURGE RET. ADDR.
1194   051A C3 8D 01                    JP      RUNSML  ;CONTINUE SAME LINE
1195   051D CF          FI1:            TSTCH(CR,FI2)   ;NOT ";", IS IT CR?
1195   051E 0D          
1195   051F 04          
1196   0520 F1                          POP     AF      ;YES, PURGE RET. ADDR.
1197   0521 C3 7D 01                    JP      RUNNXL  ;RUN NEXT LINE
1198   0524 C9          FI2:            RET             ;ELSE RETURN TO CALLER
1199   0525             
1200   0525 EF          ENDCHK:         RST     RIGNBLK ;IGNBLK
1201   0526 FE 0D                       CP      CR      ;END WITH CR?
1202   0528 C8                          RET     Z       ;OK, ELSE SAY: "WHAT?"
1203   0529             ;
1204   0529 D5          QWHAT:          PUSH    DE      ;*** QWHAT ***
1205   052A 11 E1 00    AWHAT:          LD      DE,WHAT ;*** AWHAT ***
1206   052D 97          ERROR:          SUB     A       ;*** ERROR ***
1207   052E CD C1 05                    CALL    PRTSTG  ;PRINT 'WHAT?', 'HOW?'
1208   0531 D1                          POP     DE      ;OR 'SORRY'
1209   0532 1A                          LD      A,(DE)  ;SAVE THE CHARACTER
1210   0533 F5                          PUSH    AF      ;AT WHERE OLD DE ->
1211   0534 97                          SUB     A       ;AND PUT A 0 THERE
1212   0535 12                          LD      (DE),A
1213   0536 2A B8 0E                    LD      HL,(CURRNT)     ;GET CURRENT LINE #
1214   0539 E5                          PUSH    HL
1215   053A 7E                          LD      A,(HL)  ;CHECK THE VALUE
1216   053B 23                          INC     HL
1217   053C B6                          OR      (HL)
1218   053D D1                          POP     DE
1219   053E CA F2 00                    JP      Z,WSTART ;IF ZERO, JUST RESTART
1220   0541 7E                          LD      A,(HL)  ;IF NEGATIVE,
1221   0542 B7                          OR      A
1222   0543 FA 09 03                    JP      M,INPERR        ;REDO INPUT
1223   0546 CD 63 06                    CALL    PRTLN   ;ELSE PRINT THE LINE
1224   0549 1B                          DEC     DE      ;UPTO WHERE THE 0 IS
1225   054A F1                          POP     AF      ;RESTORE THE CHARACTER
1226   054B 12                          LD      (DE),A
1227   054C 3E 3F                       LD      A,'?'   ;PRINT A "?"
1228   054E D7                          RST     ROUTC
1229   054F 97                          SUB     A       ;AND THE REST OF THE
1230   0550 CD C1 05                    CALL    PRTSTG  ;LINE
1231   0553 C3 F2 00                    JP      WSTART  ;THEN RESTART
1232   0556             ;
1233   0556 D5          QSORRY:         PUSH    DE      ;*** QSORRY ***
1234   0557 11 E7 00    ASORRY:         LD      DE,SORRY        ;*** ASORRY ***
1235   055A C3 2D 05                    JP      ERROR
1236   055D             ;
1237   055D             ;*************************************************************
1238   055D             ;
1239   055D             ; *** GETLN *** FNDLN (& FRIENDS) ***
1240   055D             ;
1241   055D             ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1242   055D             ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1243   055D             ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1244   055D             ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1245   055D             ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1246   055D             ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1247   055D             ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1248   055D             ;
1249   055D             ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1250   055D             ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1251   055D             ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1252   055D             ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1253   055D             ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1254   055D             ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1255   055D             ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1256   055D             ; LINE, FLAGS ARE C & NZ.
1257   055D             ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1258   055D             ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1259   055D             ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1260   055D             ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1261   055D             ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1262   055D             ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1263   055D             ;
1264   055D D7          GETLN:          RST     ROUTC   ;*** GETLN ***
1265   055E 11 CC 0E                    LD      DE,BUFFER       ;PROMPT AND INIT.
1266   0561 CD EF 06    GL1:            CALL    CHKIO   ;CHECK KEYBOARD
1267   0564 28 FB                       JR      Z,GL1   ;NO INPUT, WAIT
1268   0566 FE 08                       CP      BS      ;BS, DELETE LAST CHARACTER?
1269   0568 28 1A                       JR      Z,GL3   ;YES
1270   056A FE 7F                       CP      DEL     ;DEL, DELETE LAST CHARACTER?
1271   056C 28 16                       JR      Z,GL3   ;YES
1272   056E D7                          RST     ROUTC   ;INPUT, ECHO BACK
1273   056F FE 0A                       CP      LF      ;IGNORE LF
1274   0571 28 EE                       JR      Z,GL1
1275   0573 B7                          OR      A       ;IGNORE NULL
1276   0574 28 EB                       JR      Z,GL1
1277   0576 FE 18                       CP      CAN     ;^X, DELETE THE WHOLE LINE?
1278   0578 28 1B                       JR      Z,GL4   ;YES
1279   057A 12                          LD      (DE),A  ;ELSE SAVE INPUT
1280   057B 13                          INC     DE      ;AND BUMP POINTER
1281   057C FE 0D                       CP      CR      ;WAS IT CR?
1282   057E C8                          RET     Z       ;YES, END OF LINE
1283   057F 7B                          LD      A,E     ;ELSE MORE FREE ROOM?
1284   0580 FE 1C                       CP      BUFEND & 0FFH
1285   0582 20 DD                       JR      NZ,GL1  ;YES, GET NEXT INPUT
1286   0584 7B          GL3:            LD      A,E     ;DELETE LAST CHARACTER
1287   0585 FE CC                       CP      BUFFER & 0FFH   ;BUT DO WE HAVE ANY?
1288   0587 28 0C                       JR      Z,GL4   ;NO, REDO WHOLE LINE
1289   0589 1B                          DEC     DE      ;YES, BACKUP POINTER
1290   058A 3E 08                       LD      A,BS    ;AND ECHO A BACKSPACE
1291   058C D7                          RST     ROUTC
1292   058D 3E 20                       LD      A,' '   ;AND ECHO A BLANK
1293   058F D7                          RST     ROUTC
1294   0590 3E 08                       LD      A,BS    ;AND ECHO A BACKSPACE
1295   0592 D7                          RST     ROUTC
1296   0593 18 CC                       JR      GL1     ;GO GET NEXT INPUT
1297   0595 CD 0E 00    GL4:            CALL    CRLF    ;REDO ENTIRE LINE
1298   0598 3E 5E                       LD      A,'^'   ;CR, LF AND UP-ARROW
1299   059A 18 C1                       JR      GETLN
1300   059C             ;
1301   059C 7C          FNDLN:          LD      A,H     ;*** FNDLN ***
1302   059D B7                          OR      A       ;CHECK SIGN OF HL
1303   059E FA D2 00                    JP      M,QHOW  ;IT CANNOT BE -
1304   05A1 11 00 08                    LD      DE,TXTBGN       ;INIT TEXT POINTER
1305   05A4             ;
1306   05A4             FNDLP:          ;*** FDLNP ***
1307   05A4 E5          FL1:            PUSH    HL      ;SAVE LINE #
1308   05A5 2A B6 0E                    LD      HL,(TXTUNF)     ;CHECK IF WE PASSED END
1309   05A8 2B                          DEC     HL
1310   05A9 E7                          RST     RCOMP
1311   05AA E1                          POP     HL      ;GET LINE # BACK
1312   05AB D8                          RET     C       ;C,NZ PASSED END
1313   05AC 1A                          LD      A,(DE)  ;WE DID NOT, GET BYTE 1
1314   05AD 95                          SUB     L       ;IS THIS THE LINE?
1315   05AE 47                          LD      B,A     ;COMPARE LOW ORDER
1316   05AF 13                          INC     DE
1317   05B0 1A                          LD      A,(DE)  ;GET BYTE 2
1318   05B1 9C                          SBC     A,H     ;COMPARE HIGH ORDER
1319   05B2 38 04                       JR      C,FL2   ;NO, NOT THERE YET
1320   05B4 1B                          DEC     DE      ;ELSE WE EITHER FOUND
1321   05B5 B0                          OR      B       ;IT, OR IT IS NOT THERE
1322   05B6 C9                          RET     ;NC,Z:FOUND, NC,NZ:NO
1323   05B7             ;
1324   05B7             FNDNXT:         ;*** FNDNXT ***
1325   05B7 13                          INC     DE      ;FIND NEXT LINE
1326   05B8 13          FL2:            INC     DE      ;JUST PASSED BYTE 1 & 2
1327   05B9             ;
1328   05B9 1A          FNDSKP:         LD      A,(DE)  ;*** FNDSKP ***
1329   05BA FE 0D                       CP      CR      ;TRY TO FIND CR
1330   05BC 20 FA                       JR      NZ,FL2  ;KEEP LOOKING
1331   05BE 13                          INC     DE      ;FOUND CR, SKIP OVER
1332   05BF 18 E3                       JR      FL1     ;CHECK IF END OF TEXT
1333   05C1             ;
1334   05C1             ;*************************************************************
1335   05C1             ;
1336   05C1             ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1337   05C1             ;
1338   05C1             ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1339   05C1             ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1340   05C1             ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1341   05C1             ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1342   05C1             ;
1343   05C1             ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1344   05C1             ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1345   05C1             ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1346   05C1             ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1347   05C1             ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1348   05C1             ; OVER (USUALLY A JUMP INSTRUCTION.
1349   05C1             ;
1350   05C1             ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1351   05C1             ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1352   05C1             ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1353   05C1             ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1354   05C1             ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1355   05C1             ;
1356   05C1             ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1357   05C1             ;
1358   05C1 47          PRTSTG:         LD      B,A     ;*** PRTSTG ***
1359   05C2 1A          PS1:            LD      A,(DE)  ;GET A CHARACTER
1360   05C3 13                          INC     DE      ;BUMP POINTER
1361   05C4 B8                          CP      B       ;SAME AS OLD A?
1362   05C5 C8                          RET     Z       ;YES, RETURN
1363   05C6 D7                          RST     ROUTC   ;ELSE PRINT IT
1364   05C7 FE 0D                       CP      CR      ;WAS IT A CR?
1365   05C9 20 F7                       JR      NZ,PS1  ;NO, NEXT
1366   05CB C9                          RET             ;YES, RETURN
1367   05CC             ;
1368   05CC CF          QTSTG:          TSTCH($22,QT3)  ;*** QTSTG ***
1368   05CD 22          
1368   05CE 0F          
1369   05CF 3E 22                       LD      A,22H   ;IT IS A '"'
1370   05D1 CD C1 05    QT1:            CALL    PRTSTG  ;PRINT UNTIL ANOTHER
1371   05D4 FE 0D       QT1A:           CP      CR      ;WAS LAST ONE A CR?
1372   05D6 E1                          POP     HL      ;RETURN ADDRESS
1373   05D7 CA 7D 01                    JP      Z,RUNNXL        ;WAS CR, RUN NEXT LINE
1374   05DA 23          QT2:            INC     HL      ;SKIP 3 BYTES ON RETURN
1375   05DB 23                          INC     HL
1376   05DC 23                          INC     HL
1377   05DD E9                          JP      (HL)    ;RETURN
1378   05DE CF          QT3:            TSTCH($27,QT4)  ;IS IT A "'"?
1378   05DF 27          
1378   05E0 04          
1379   05E1 3E 27                       LD      A,27H   ;YES, DO THE SAME
1380   05E3 18 EC                       JR      QT1     ;AS IN '"'
1381   05E5 CF          QT4:            TSTCH($5F,QT5)  ;IS IT UNDERLINE?
1381   05E6 5F          
1381   05E7 06          
1382   05E8 3E 8D                       LD      A,08DH  ;YES, CR WITHOUT LF
1383   05EA D7                          RST     ROUTC
1384   05EB E1                          POP     HL      ;RETURN ADDRESS
1385   05EC 18 EC                       JR      QT2
1386   05EE CF          QT5:            TSTCH(5EH,QT5)  ;RST 1, is it '^'?
1386   05EF 5E          
1386   05F0 FD          
1387   05F1 1A                          LD      A,(DE)
1388   05F2 EE 40                       XOR     40H
1389   05F4 CD 10 00                    CALL    OUTC
1390   05F7 1A                          LD      A,(DE)
1391   05F8 13                          INC     DE
1392   05F9 18 D9                       JR      QT1A
1393   05FB C9          QT6:            RET             ;NONE OF ABOVE
1394   05FC             
1395   05FC             PRTNUM:                         ;*** PRINT NUMBER IN HL ***
1396   05FC 3A B5 0E                    LD      A,(PNBASE)      ;GET NUMBER BASE
1397   05FF B7                          OR      A
1398   0600 28 0B                       JR      Z,PN0   ;0: DEFAULT DEC
1399   0602 FE 10                       CP      16      ;HEX NUMBER?
1400   0604 C2 18 06                    JP      NZ,PN1  ;NO
1401   0607 06 24                       LD      B,'$'   ;PRINT LEADING '$'
1402   0609 0D                          DEC     C       ;'$' TAKES SPACE
1403   060A C3 18 06                    JP      PN1     ;HEX IS UNSIGNED
1404   060D 06 00       PN0:            LD      B,0     ;NO PREFIX YET
1405   060F CD E3 04                    CALL    CHKSGN  ;CHECK SIGN
1406   0612 F2 18 06                    JP      P,PN1   ;NO SIGN
1407   0615 06 2D                       LD      B,'-'   ;B=SIGN
1408   0617 0D                          DEC     C       ;'-' TAKES SPACE
1409   0618 D5          PN1:            PUSH    DE
1410   0619 3A B5 0E                    LD      A,(PNBASE)
1411   061C B7                          OR      A       ;DEFAULT DECIMAL?
1412   061D 20 02                       JR      NZ,PN1A
1413   061F 3E 0A                       LD      A,10
1414   0621 5F          PN1A:           LD      E,A
1415   0622 AF                          XOR     A
1416   0623 57                          LD      D,A
1417   0624 D5                          PUSH    DE      ;SAVE AS A FLAG
1418   0625 0D                          DEC     C       ;C=SPACES
1419   0626 C5                          PUSH    BC      ;SAVE SIGN & SPACE
1420   0627 CD C7 04    PN2:            CALL    DIVIDE  ;DIVIDE HL BY NUMBER BASE
1421   062A 78                          LD      A,B     ;RESULT 0?
1422   062B B1                          OR      C
1423   062C CA 37 06                    JP      Z,PN3   ;YES, WE GOT ALL
1424   062F E3                          EX      (SP),HL ;NO, SAVE REMAINDER
1425   0630 2D                          DEC     L       ;AND COUNT SPACE
1426   0631 E5                          PUSH    HL      ;HL IS OLD BC
1427   0632 60                          LD      H,B     ;MOVE RESULT TO BC
1428   0633 69                          LD      L,C
1429   0634 C3 27 06                    JP      PN2     ;AND DIVIDE AGAIN
1430   0637             ;
1431   0637 C1          PN3:            POP     BC      ;WE GOT ALL DIGITS IN
1432   0638 0D          PN4:            DEC     C       ;THE STACK
1433   0639 79                          LD      A,C     ;LOOK AT SPACE COUNT
1434   063A B7                          OR      A
1435   063B FA 44 06                    JP      M,PN5   ;NO LEADING BLANKS
1436   063E 3E 20                       LD      A,' '   ;LEADING BLANKS
1437   0640 D7                          RST     ROUTC
1438   0641 C3 38 06                    JP      PN4     ;MORE?
1439   0644 78          PN5:            LD      A,B     ;PRINT SIGN OR '$'
1440   0645 B7                          OR      A
1441   0646 C4 10 00                    CALL    NZ,OUTC
1442   0649 5D                          LD      E,L     ;LAST REMAINDER IN E
1443   064A 3A B5 0E    PN6:            LD      A,(PNBASE)      ;GET NUMBER BASE
1444   064D B7                          OR      A       ;DEFAULT DECIMAL?
1445   064E 20 02                       JR      NZ,PN6A
1446   0650 3E 0A                       LD      A,10
1447   0652 BB          PN6A:           CP      E       ;IT IS FLAG FOR NO MORE
1448   0653 7B                          LD      A,E     ;CHECK DIGIT IN E
1449   0654 D1                          POP     DE
1450   0655 C8                          RET     Z       ;IF SO, RETURN
1451   0656 FE 0A                       CP      10      ;0-9? < A hex?
1452   0658 DA 5D 06                    JP      C,PN7   ;Skip Add 7
1453   065B C6 07                       ADD     A,'A'-'0'-10    ;Bring it up to ASCII A-F
1454   065D C6 30       PN7:            ADD     A,'0'   ;ELSE CONVERT TO ASCII
1455   065F D7                          RST     ROUTC   ;AND PRINT THE DIGIT
1456   0660 C3 4A 06                    JP      PN6     ;GO BACK FOR MORE
1457   0663             
1458   0663 AF          PRTLN:          XOR     A       ;SET 10 AS DEFAULT BASE
1459   0664 32 B5 0E                    LD      (PNBASE),A      ;FOR PRTNUM
1460   0667 1A                          LD      A,(DE)
1461   0668 6F                          LD      L,A     ;LOW ORDER LINE #
1462   0669 13                          INC     DE
1463   066A 1A                          LD      A,(DE)  ;HIGH ORDER
1464   066B 67                          LD      H,A
1465   066C 13                          INC     DE
1466   066D 0E 04                       LD      C,4     ;PRINT 4 DIGIT LINE #
1467   066F CD FC 05                    CALL    PRTNUM
1468   0672 3E 20                       LD      A,' '   ;FOLLOWED BY A BLANK
1469   0674 D7                          RST     ROUTC
1470   0675 97                          SUB     A       ;AND THEN THE NEXT
1471   0676 CD C1 05                    CALL    PRTSTG
1472   0679 C9                          RET
1473   067A             ;
1474   067A             ;*************************************************************
1475   067A             ;
1476   067A             ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1477   067A             ;
1478   067A             ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1479   067A             ; DE = HL
1480   067A             ;
1481   067A             ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1482   067A             ; UNTIL DE = BC
1483   067A             ;
1484   067A             ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1485   067A             ; STACK
1486   067A             ;
1487   067A             ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1488   067A             ; STACK
1489   067A             ;
1490   067A E7          MVUP:           RST     RCOMP   ;*** MVUP ***
1491   067B C8                          RET     Z       ;DE = HL, RETURN
1492   067C 1A                          LD      A,(DE)  ;GET ONE BYTE
1493   067D 02                          LD      (BC),A  ;MOVE IT
1494   067E 13                          INC     DE      ;INCREASE BOTH POINTERS
1495   067F 03                          INC     BC
1496   0680 18 F8                       JR      MVUP    ;UNTIL DONE
1497   0682             ;
1498   0682 78          MVDOWN:         LD      A,B     ;*** MVDOWN ***
1499   0683 92                          SUB     D       ;TEST IF DE = BC
1500   0684 20 03                       JR      NZ,MD1  ;NO, GO MOVE
1501   0686 79                          LD      A,C     ;MAYBE, OTHER BYTE?
1502   0687 93                          SUB     E
1503   0688 C8                          RET     Z       ;YES, RETURN
1504   0689 1B          MD1:            DEC     DE      ;ELSE MOVE A BYTE
1505   068A 2B                          DEC     HL      ;BUT FIRST DECREASE
1506   068B 1A                          LD      A,(DE)  ;BOTH POINTERS AND
1507   068C 77                          LD      (HL),A  ;THEN DO IT
1508   068D 18 F3                       JR      MVDOWN  ;LOOP BACK
1509   068F             ;
1510   068F C1          POPA:           POP     BC      ;BC = RETURN ADDR.
1511   0690 E1                          POP     HL      ;RESTORE LOPVAR, BUT
1512   0691 22 C0 0E                    LD      (LOPVAR),HL     ;=0 MEANS NO MORE
1513   0694 7C                          LD      A,H
1514   0695 B5                          OR      L
1515   0696 CA A9 06                    JP      Z,PP1   ;YEP, GO RETURN
1516   0699 E1                          POP     HL      ;NOP, RESTORE OTHERS
1517   069A 22 C2 0E                    LD      (LOPINC),HL
1518   069D E1                          POP     HL
1519   069E 22 C4 0E                    LD      (LOPLMT),HL
1520   06A1 E1                          POP     HL
1521   06A2 22 C6 0E                    LD      (LOPLN),HL
1522   06A5 E1                          POP     HL
1523   06A6 22 C8 0E                    LD      (LOPPT),HL
1524   06A9 C5          PP1:            PUSH    BC      ;BC = RETURN ADDR.
1525   06AA C9                          RET
1526   06AB             ;
1527   06AB 21 1D 0F    PUSHA:          LD      HL,STKLMT       ;*** PUSHA ***
1528   06AE CD E6 04                    CALL    CHGSGN
1529   06B1 C1                          POP     BC      ;BC=RETURN ADDRESS
1530   06B2 39                          ADD     HL,SP   ;IS STACK NEAR THE TOP?
1531   06B3 D2 56 05                    JP      NC,QSORRY       ;YES, SORRY FOR THAT
1532   06B6 2A C0 0E                    LD      HL,(LOPVAR)     ;ELSE SAVE LOOP VAR'S
1533   06B9 7C                          LD      A,H     ;BUT IF LOPVAR IS 0
1534   06BA B5                          OR      L       ;THAT WILL BE ALL
1535   06BB CA D1 06                    JP      Z,PU1
1536   06BE 2A C8 0E                    LD      HL,(LOPPT)      ;ELSE, MORE TO SAVE
1537   06C1 E5                          PUSH    HL
1538   06C2 2A C6 0E                    LD      HL,(LOPLN)
1539   06C5 E5                          PUSH    HL
1540   06C6 2A C4 0E                    LD      HL,(LOPLMT)
1541   06C9 E5                          PUSH    HL
1542   06CA 2A C2 0E                    LD      HL,(LOPINC)
1543   06CD E5                          PUSH    HL
1544   06CE 2A C0 0E                    LD      HL,(LOPVAR)
1545   06D1 E5          PU1:            PUSH    HL
1546   06D2 C5                          PUSH    BC      ;BC = RETURN ADDR.
1547   06D3 C9                          RET
1548   06D4             
1549   06D4             ;*************************************************************
1550   06D4             ; *** INIT ***
1551   06D4             ;
1552   06D4             ; PUT IO INITIALISATION HERE, E.G. FOR THE SERIAL INTERFACE
1553   06D4             ;
1554   06D4             ; *** OUTC *** CHKIO ***
1555   06D4             ;
1556   06D4             ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1557   06D4             ; OUTC WILL OUTPUT THE BYTE IN A.
1558   06D4             ; IF THAT IS A CR, A LF IS ALSO SEND OUT.
1559   06D4             ; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
1560   06D4             ; ALL REGISTERS ARE RESTORED.
1561   06D4             ;
1562   06D4             ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1563   06D4             ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1564   06D4             ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1565   06D4             ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1566   06D4             ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1567   06D4             ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
1568   06D4             ;
1569   06D4             ;THIS IS AT LOC. 0
1570   06D4             ;START:         LD      SP,STACK        ;*** COLD START ***
1571   06D4             ;               LD      A,0FFH
1572   06D4             ;               JP      INIT
1573   06D4             
1574   06D4 11 FE 06    INIT:           LD      DE,MSG1
1575   06D7 CD C1 05                    CALL    PRTSTG
1576   06DA 21 00 00                    LD      HL,START
1577   06DD 22 CA 0E                    LD      (RANPNT),HL
1578   06E0 21 00 08                    LD      HL,TXTBGN
1579   06E3 22 B6 0E                    LD      (TXTUNF),HL
1580   06E6 C3 ED 00                    JP      INIT1
1581   06E9             
1582   06E9             ;THIS IS AT LOC. 10
1583   06E9             ;OUTC:          OUT     (IODATA),A      ;Out to data port
1584   06E9             ;               CP      CR      ;WAS IT CR?
1585   06E9             ;               RET     NZ      ;NO, FINISHED
1586   06E9             ;               JP      OC1     ;REST OF THIS IS AT OC1
1587   06E9 3E 0A       OC1:            LD      A,LF    ;YES, WE SEND LF TOO
1588   06EB D7                          RST     ROUTC   ;THIS IS RECURSIVE
1589   06EC 3E 0D                       LD      A,CR    ;GET CR BACK IN A
1590   06EE C9                          RET
1591   06EF             
1592   06EF DB 02       CHKIO:          IN      A,(IOSTAT)      ;*** CHKIO ***
1593   06F1 E6 01                       AND     IO_RX_BIT       ;MASK STATUS BIT
1594   06F3 C8                          RET     Z       ;NOT READY, RETURN "Z"
1595   06F4 DB 01                       IN      A,(IODATA)      ;READY, READ DATA
1596   06F6 E6 7F                       AND     7FH     ;MASK BIT 7 OFF
1597   06F8 FE 03       CI0:            CP      03H     ;IS IT CONTROL-C?
1598   06FA C0                          RET     NZ      ;NO, RETURN "NZ"
1599   06FB C3 F2 00                    JP      WSTART  ;YES, RESTART TBI
1600   06FE             ;
1601   06FE 54 69 6E 79 MSG1:           .DB     "TinyBASIC"
1601   0702 42 41 53 49 
1601   0706 43 
1602   0707 0D                          .DB     CR
1603   0708             
1604   0708             
1605   0708             ;*************************************************************
1606   0708             ;
1607   0708             ; *** DIRECT *** EXEC *** TABLES ***
1608   0708             ;
1609   0708             ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1610   0708             ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1611   0708             ; OF CODE ACCORDING TO THE TABLE.
1612   0708             ;
1613   0708             ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1614   0708             ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1615   0708             ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1616   0708             ; ALL DIRECT AND STATEMENT COMMANDS.
1617   0708             ;
1618   0708             ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1619   0708             ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1620   0708             ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1621   0708             ;
1622   0708             
1623   0708 21 3C 07    DIRECT:         LD      HL,TAB1-1       ;*** DIRECT ***
1624   070B             ;
1625   070B             EXEC:           ;*** EXEC ***
1626   070B EF          EX0:            RST     RIGNBLK ;IGNORE LEADING BLANKS
1627   070C D5                          PUSH    DE      ;SAVE POINTER
1628   070D 1A          EX1:            LD      A,(DE)  ;IF FOUND '.' IN STRING
1629   070E 13                          INC     DE      ;BEFORE ANY MISMATCH
1630   070F FE 2E                       CP      2EH     ;WE DECLARE A MATCH
1631   0711 28 1C                       JR      Z,EX3
1632   0713 FE 61                       CP      'a'     ;< 'a' ?
1633   0715 38 06                       JR      C,EXN   ;NO ALPHA CHAR
1634   0717 FE 7B                       CP      'z'+1   ;> 'z'
1635   0719 30 02                       JR      NC,EXN  ;NO ALPHA CHAR
1636   071B E6 5F                       AND     5FH     ;MASK LOWER CASE TO UPPER CASE
1637   071D             EXN:
1638   071D 23                          INC     HL      ;HL->TABLE
1639   071E BE                          CP      (HL)    ;IF MATCH, TEST NEXT
1640   071F 28 EC                       JR      Z,EX1
1641   0721 3E 7F                       LD      A,07FH  ;ELSE SEE IF BIT 7
1642   0723 1B                          DEC     DE      ;OF TABLE IS SET, WHICH
1643   0724 BE                          CP      (HL)    ;IS THE JUMP ADDR. (HI)
1644   0725 38 0E                       JR      C,EX5   ;C:YES, MATCHED
1645   0727 23          EX2:            INC     HL      ;NC:NO, FIND JUMP ADDR.
1646   0728 BE                          CP      (HL)
1647   0729 30 FC                       JR      NC,EX2
1648   072B 23                          INC     HL      ;BUMP TO NEXT TAB. ITEM
1649   072C D1                          POP     DE      ;RESTORE STRING POINTER
1650   072D 18 DC                       JR      EX0     ;TEST AGAINST NEXT ITEM
1651   072F 3E 7F       EX3:            LD      A,07FH  ;PARTIAL MATCH, FIND
1652   0731 23          EX4:            INC     HL      ;JUMP ADDR., WHICH IS
1653   0732 BE                          CP      (HL)    ;FLAGGED BY BIT 7
1654   0733 30 FC                       JR      NC,EX4
1655   0735 7E          EX5:            LD      A,(HL)  ;LOAD HL WITH THE JUMP
1656   0736 23                          INC     HL      ;ADDRESS FROM THE TABLE
1657   0737 6E                          LD      L,(HL)
1658   0738                                             ;ADDRESSES ARE BIG-ENDIAN
1659   0738                                             ;WITH MSB SET to 1
1660   0738             #IF             $ < 8000H
1661   0738 E6 7F                       AND     7FH     ;MASK OFF HIGH ADDRESS BIT
1662   073A             #ENDIF
1663   073A 67                          LD      H,A
1664   073B F1                          POP     AF      ;CLEAN UP THE GARBAGE
1665   073C E9                          JP      (HL)    ;AND WE GO DO IT
1666   073D             ;
1667   073D             
1668   073D             ; THE TABLES CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1669   073D             ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1670   073D             ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1671   073D             ; BYTE SET TO 1.
1672   073D             ; This is done by the macro 'DWA'.
1673   073D             ; If the program is executed from an address < 0x8000
1674   073D             ; take care to mask this bit in program part 'EXEC'.
1675   073D             ;
1676   073D             ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.
1677   073D             ; IF THE STRING DOES NOT MATCH ANY OF THE OTHER ITEMS,
1678   073D             ; IT WILL MATCH THIS NULL ITEM AS DEFAULT.
1679   073D             
1680   073D             ;
1681   073D             TAB1:           ;DIRECT ONLY COMMANDS
1682   073D 4C 49 53 54                 .DB     "LIST"
1683   0741 81                          DWA(LIST)
1683   0742 A5          
1684   0743 52 55 4E                    .DB     "RUN"
1685   0746 81                          DWA(RUN)
1685   0747 77          
1686   0748 4E 45 57                    .DB     "NEW"
1687   074B 81                          DWA(NEW)
1687   074C 68          
1688   074D             ;
1689   074D             TAB2:           ;DIRECT OR PROGRAM STATEMENT
1690   074D 4E 45 58 54                 .DB     "NEXT"
1691   0751 82                          DWA(NEXT)
1691   0752 A0          
1692   0753 4C 45 54                    .DB     "LET"           ; can be omitted
1693   0756 83                          DWA(LET)
1693   0757 61          
1694   0758 49 46                       .DB     "IF"
1695   075A 82                          DWA(IFF)
1695   075B FA          
1696   075C 47 4F 54 4F                 .DB     "GOTO"
1697   0760 81                          DWA(GOTO)
1697   0761 96          
1698   0762 47 4F 53 55                 .DB     "GOSUB"
1698   0766 42 
1699   0767 82                          DWA(GOSUB)
1699   0768 0C          
1700   0769 52 45 54 55                 .DB     "RETURN"
1700   076D 52 4E 
1701   076F 82                          DWA(RETURN)
1701   0770 2C          
1702   0771 52 45 4D                    .DB     "REM"
1703   0774 82                          DWA(REM)
1703   0775 F6          
1704   0776 46 4F 52                    .DB     "FOR"
1705   0779 82                          DWA(FOR)
1705   077A 45          
1706   077B 49 4E 50 55                 .DB     "INPUT"         ; wait for KBD input
1706   077F 54 
1707   0780 83                          DWA(INPUT)
1707   0781 13          
1708   0782 50 52 49 4E                 .DB     "PRINT"
1708   0786 54 
1709   0787 81                          DWA(PRINT)
1709   0788 BC          
1710   0789 3F                          .DB     "?"             ; short for PRINT
1711   078A 81                          DWA(PRINT)
1711   078B BC          
1712   078C 50 4F 4B 45                 .DB     "POKE"          ; POKE ADDR, VAL, VAL,...
1713   0790 84                          DWA(POKE)
1713   0791 B2          
1714   0792 53 54 4F 50                 .DB     "STOP"          ; warm start
1715   0796 81                          DWA(STOP)
1715   0797 71          
1716   0798 48 41 4C 54                 .DB     "HALT"          ; HALT CPU (return to analyser)
1717   079C 84                          DWA(HALT)
1717   079D C6          
1718   079E 83                          DWA(DEFLT)              ;END OF LIST
1718   079F 5C          
1719   07A0             ;
1720   07A0             TAB4:           ;FUNCTIONS AND CONSTANTS
1721   07A0 52 4E 44                    .DB     "RND"           ;fkt RND(RANGE)
1722   07A3 84                          DWA(RND)
1722   07A4 59          
1723   07A5 41 42 53                    .DB     "ABS"           ;fkt ABS(VALUE)
1724   07A8 84                          DWA(ABS)
1724   07A9 83          
1725   07AA 50 45 45 4B                 .DB     "PEEK"          ;fkt PEEK(ADR) get byte from memory
1726   07AE 84                          DWA(PEEK)
1726   07AF 99          
1727   07B0 55 53 52                    .DB     "USR"           ;fkt USR(PARA) call usr fkt at TOP
1728   07B3 84                          DWA(USR)                ; and return a result in HL
1728   07B4 A0          
1729   07B5 53 49 5A 45                 .DB     "SIZE"          ;const SIZE - no parantesis, get free mem
1730   07B9 84                          DWA(SIZE)
1730   07BA 8C          
1731   07BB 52 41 4D                    .DB     "RAM"           ;const RAM - no par., get TEXT begin
1732   07BE 84                          DWA(RAM)
1732   07BF A6          
1733   07C0 54 4F 50                    .DB     "TOP"           ;const TOP - no par., get TEXT TOP
1734   07C3 84                          DWA(TOP)
1734   07C4 AA          
1735   07C5 84                          DWA(XP40)               ;END OF LIST
1735   07C6 40          
1736   07C7             ;
1737   07C7             TAB5:           ;"TO" IN "FOR"
1738   07C7 54 4F                       .DB     "TO"
1739   07C9 82                          DWA(FR1)
1739   07CA 55          
1740   07CB 85                          DWA(QWHAT)              ;END OF LIST
1740   07CC 29          
1741   07CD             ;
1742   07CD             TAB6:           ;"STEP" IN "FOR"
1743   07CD 53 54 45 50                 .DB     "STEP"
1744   07D1 82                          DWA(FR2)
1744   07D2 5F          
1745   07D3 82                          DWA(FR3)                ;END OF LIST
1745   07D4 62          
1746   07D5             ;
1747   07D5             TAB8:           ;RELATION OPERATORS
1748   07D5 3E 3D                       .DB     ">="
1749   07D7 83                          DWA(XP11)
1749   07D8 70          
1750   07D9 21 3D                       .DB     "!="
1751   07DB 83                          DWA(XP12)
1751   07DC 76          
1752   07DD 23                          .DB     "#"
1753   07DE 83                          DWA(XP12)
1753   07DF 76          
1754   07E0 3E                          .DB     ">"
1755   07E1 83                          DWA(XP13)
1755   07E2 7C          
1756   07E3 3D 3D                       .DB     "=="
1757   07E5 83                          DWA(XP15)
1757   07E6 8B          
1758   07E7 3D                          .DB     "="
1759   07E8 83                          DWA(XP15)
1759   07E9 8B          
1760   07EA 3C 3D                       .DB     "<="
1761   07EC 83                          DWA(XP14)
1761   07ED 83          
1762   07EE 3C                          .DB     "<"
1763   07EF 83                          DWA(XP16)
1763   07F0 91          
1764   07F1 83                          DWA(XP17)               ;END OF REL OPERATOR LIST
1764   07F2 97          
1765   07F3             ;
1766   07F3             LSTROM:                                 ;ALL ABOVE CAN BE ROM
1767   07F3             
1768   07F3             ; Check if the program code overflows the ROM size
1769   07F3             ;
1770   07F3~            #IF $ > RAMBGN
1771   07F3~                            .ECHO   "\n\n*** The ROM section is "
1772   07F3~                            .ECHO   $ - RAMBGN
1773   07F3~                            .ECHO   " bytes too long! ***\n\n\n"
1774   07F3             #ELSE
1775   07F3                             .ECHO   "ROM size: "
1776   07F3                             .ECHO   $
1777   07F3                             .ECHO   " bytes\n"
1778   07F3             #ENDIF
1779   07F3             ;
1780   07F3             ;
1781   07F3             ;*************************************************************
1782   07F3             
1783   07F3             
1784   0800                             .ORG            RAMBGN          ;HERE DOWN MUST BE RAM
1785   0800             
1786   0800             ;*************************************************************
1787   0800             ;
1788   0800             ;
1789   0800             TXTBGN:
1790   0800             ;
1791   0E00                             .ORG            RAMBGN+RAMSZE-$200
1792   0E00             ;
1793   0E00             TXTEND:         .EQU            $               ;TEXT SAVE AREA ENDS
1794   0E00                                                             ;VARIABLEs '@(0)', '@(1), @(2)
1795   0E00                                                             ;... stored top-down
1796   0E00                                                             ;i.e. &@(i) = TXTEND-2-2*i
1797   0E00             USRSPC:         .DS             128
1798   0E80             ;
1799   0E80             VARBGN:         .DS             2*26            ;VARIABLES 'A'..'Z'
1800   0EB4             OCSW:           .DS             1               ;SWITCH FOR OUTPUT
1801   0EB5             PNBASE:         .DS             1               ;BASE FOR PRTNUM
1802   0EB6             TXTUNF:         .DS             2               ;->UNFILLED TEXT AREA
1803   0EB8             CURRNT:         .DS             2               ;POINTS TO CURRENT LINE
1804   0EBA             STKGOS:         .DS             2               ;SAVES SP IN 'GOSUB'
1805   0EBC             VARNXT:         .DS             2               ;TEMP STORAGE
1806   0EBE             STKINP:         .DS             2               ;SAVES SP IN 'INPUT'
1807   0EC0             LOPVAR:         .DS             2               ;'FOR' LOOP SAVE AREA
1808   0EC2             LOPINC:         .DS             2               ;INCREMENT
1809   0EC4             LOPLMT:         .DS             2               ;LIMIT
1810   0EC6             LOPLN:          .DS             2               ;LINE NUMBER
1811   0EC8             LOPPT:          .DS             2               ;TEXT POINTER
1812   0ECA             RANPNT:         .DS             2               ;RANDOM NUMBER POINTER
1813   0ECC             BUFFER:         .DS             80              ;INPUT BUFFER
1814   0F1C             BUFEND:         .DS             1               ;BUFFER ENDS
1815   0F1D             STKLMT:         .DS             1               ;TOP LIMIT FOR STACK
1816   0F1E             ;
1817   1000                             .ORG            RAMBGN+RAMSZE   ;RAM END
1818   1000             STACK:          .EQU            $               ;STACK STARTS HERE
1819   1000             ;
1820   1000                             .END
