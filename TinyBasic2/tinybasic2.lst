   1:			; Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
   2:			; Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
   3:			; Status bit for read in CHKIO changed to 0x02
   4:			; Status bit for write in OUTC (actually OC3) changed to 0x01
   5:			; Changed UART initialization parameters in INIT
   6:			; Changed ORG statements at end of file to match system with 2K RAM
   7:			;
   8:			; 2024-10-11 Ho-Ro:
   9:			; Automatically converted from 8080 syntax to Z80 syntax:
  10:			; https://hc-ddr.hucki.net/wiki/doku.php/cpm/8080_z80
  11:			; Assembler: uz80as for Z80 as well as i8080 (uz80as --target=i8080)
  12:			; Modified for use with Z80 dongle simulator
  13:			; UART data port 1
  14:			; UART status port 2
  15:			; New:
  16:			; Case insensitive input
  17:			; PRINT modifier for hex out: PRINT %16,..
  18:			; Hex numbers: $xxxx
  19:			; 2024-10-13 Ho-Ro:
  20:			; build ROM version (2K ROM / 6.5K RAM) and RAM version (2K prog RAM / 2K free RAM)
  21:			; add command "HALT" (halts Z80, returns to dongle analyser program)
  22:			; 2024-10-15 Ho-Ro:
  23:			; PRINT modifier %nn switches to unsigned number format, e.g.:
  24:			; PRINT %10,$FFFF -> 65535
  25:			; 2024-10-17 Ho-Ro:
  26:			; PUT ADDR, VAL, VAL, VAL,...
  27:			; constants RAM (TXTBGN), TOP (TXTEND) and SIZE (TXTEND-TXTUNF)
  28:			; function USR(para) that calls machine code at TOP (128 bytes free)
  29:			; with parameter in HL, returning the result in HL, default is RET at TOP
  30:			; Changed to the more authentic zmac syntax (https://github.com/gp48k/zmac)
  31:			; 2024-10-30 Ho-Ro:
  32:			; add operator '|' and '&'; remove RAM and TXT; 2044 bytes
  33:			
  34:			; *************************************************************
  35:			;
  36:			;                 TINY BASIC FOR INTEL 8080
  37:			;                       VERSION 2.0
  38:			;                     BY LI-CHEN WANG
  39:			;                  MODIFIED AND TRANSLATED
  40:			;                    TO INTEL MNEMONICS
  41:			;                     BY ROGER RAUSKOLB
  42:			;                      10 OCTOBER,1976
  43:			;                        @COPYLEFT
  44:			;                   ALL WRONGS RESERVED
  45:			;
  46:			; *************************************************************
  47:			;
  48:			; *** ZERO PAGE SUBROUTINES ***
  49:			;
  50:			; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
  51:			; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
  52:			; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
  53:			; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
  54:			; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
  55:			; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
  56:			; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
  57:			; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
  58:			;
  59:			
  60:			                .Z80
  61:			
  62:			; Memory map
  63:	0000          	ROMBGN:         .EQU    $0000           ; Execution must start here
  64:	0800          	RAMBGN:         .EQU    $0800           ; 2K ROM
  65:			
  66:	0000          	                .IFDEF  MAKE_ROM
  69:			                .ELSE
  70:			; 2K CODE IN RAM & 2K DATA IN RAM AS TEST VERSION
  71:	0800          	RAMSZE:         .EQU    $0800
  72:			                .ENDIF
  73:			
  74:			; IO map
  75:	0001          	IODATA:         .EQU    1
  76:	0002          	IOSTAT:         .EQU    2
  77:	0001          	IO_RX_BIT:      .EQU    $01
  78:			
  79:			; Control character
  80:	0008          	BS:             .EQU    $08             ; ^H, BACKSPACE
  81:	000D          	CR:             .EQU    $0D             ; ^M, CARRIAGE RETURN
  82:	000A          	LF:             .EQU    $0A             ; ^J, LINE FEED
  83:	0018          	CAN:            .EQU    $18             ; ^X, CANCEL
  84:	007F          	DEL:            .EQU    $7F             ; DELETE
  85:			
  86:			
  87:			; Store a label address as BIG endian with bit A15 set
  88:			
  89:			DWA             .MACRO   LABEL
  90:			                .DB     HIGH LABEL | $80
  91:			                .DB     LOW LABEL
  92:			                .ENDM
  93:			
  94:			; if CHAR = A THEN JUMP RELATIVE TO LABEL
  95:			
  96:			TSTC            .MACRO   CHAR,LABEL
  97:			                RST     RTSTC
  98:			                .DB     CHAR
  99:			                .DB     LABEL-$-1
 100:			                .ENDM
 101:			
 102:			
 103:	0000          	                .ORG    ROMBGN
 104:			
 105:	0000  310009  	CSTART:         LD      SP,STACK        ; *** COLD START ***
 106:	0003  3E00    	                LD      A,0             ; must be 2 byte
 107:	0005  C30901  	                JP      INIT            ; as delimiter for PRTSTG
 108:			
 109:			
 110:	0008  E3      	RTSTC:          EX      (SP),HL         ; *** RST 1 @ $0008 ***
 111:	0009  EF      	                RST     RIGNBLK         ; IGNORE BLANKS AND
 112:	000A  BE      	                CP      (HL)            ; TEST CHARACTER
 113:	000B  C37000  	                JP      TC1             ; REST OF THIS IS AT TC1
 114:			
 115:	000E  3E0D    	CRLF:           LD      A,CR            ; *** CRLF ***
 116:			                                        ; *** RST 2 @ $0010 ***
 117:	0010  D301    	ROUTC:          OUT     (IODATA),A      ; Out to data port
 118:	0012  FE0D    	                CP      CR              ; WAS IT CR?
 119:	0014  C0      	                RET     NZ              ; NO, FINISHED
 120:	0015  C3F500  	                JP      OC1             ; REST OF THIS IS AT OC1
 121:			
 122:			
 123:	0018  CDE803  	REXPR:          CALL    EXPR2           ; *** RST 3 @ $0018 ***
 124:	001B  E5      	                PUSH    HL              ; EVALUATE AN EXPRESSION
 125:	001C  C3A403  	                JP      EXPR1           ; REST OF IT AT EXPR1
 126:	001F  57      	                .DB     "W"             ; FILL ONE BYTE
 127:			
 128:			
 129:	0020  7C      	RCOMP:          LD      A,H             ; *** RST 4 @ $0020 ***
 130:	0021  BA      	                CP      D               ; COMPARE HL WITH DE
 131:	0022  C0      	                RET     NZ              ; RETURN CORRECT C AND
 132:	0023  7D      	                LD      A,L             ; Z FLAGS
 133:	0024  BB      	                CP      E               ; BUT OLD A IS LOST
 134:	0025  C9      	                RET
 135:	0026  414E    	                .DB     "AN"            ; FILL TWO BYTES
 136:			
 137:			
 138:	0028  1A      	RIGNBLK:        LD      A,(DE)          ; *** RST 5 @ $0028 ***
 139:	0029  FE20    	                CP      20H             ; IGNORE BLANKS
 140:	002B  C0      	                RET     NZ              ; IN TEXT (WHERE DE->)
 141:	002C  13      	                INC     DE              ; AND RETURN THE FIRST
 142:	002D  C32800  	                JP      RIGNBLK         ; NON-BLANK CHAR. IN A
 143:			
 144:			
 145:	0030  F1      	RFINISH:        POP     AF              ; *** RST 6 @ $0030 ***
 146:	0031  CD6A05  	                CALL    FIN             ; CHECK END OF COMMAND
 147:	0034  C37D05  	                JP      QWHAT           ; PRINT "WHAT?" IF WRONG
 148:	0037  47      	                .DB     "G"             ; FILL ONE BYTE
 149:			
 150:			
 151:	0038  EF      	RTSTV:          RST     RIGNBLK         ; *** RST 7 @ $0038 ***
 152:	0039  D640    	                SUB     '@'             ; TEST VARIABLES
 153:	003B  D8      	                RET     C               ; C: < '@', NOT A VARIABLE
 154:	003C  C25A00  	                JP      NZ,TV1          ; NZ: NOT THE '@' ARRAY
 155:			;
 156:	003F  13      	                INC     DE              ; IT IS THE "@" ARRAY
 157:	0040  CDAD04  	                CALL    PARN            ; @ SHOULD BE FOLLOWED
 158:	0043  29      	                ADD     HL,HL           ; BY (EXPR) AS ITS INDEX
 159:	0044  DAD000  	                JP      C,QHOW          ; IS INDEX TOO BIG (>0x7FFF)?
 160:	0047  23      	                INC     HL              ; ADD TWO BYTES
 161:	0048  23      	                INC     HL              ; FOR @(0)
 162:	0049  D5      	                PUSH    DE              ; WILL IT OVERWRITE
 163:	004A  EB      	                EX      DE,HL           ; TEXT?
 164:	004B  CDEF04  	                CALL    SIZE            ; FIND SIZE OF FREE RAM
 165:	004E  E7      	                RST     RCOMP           ; AND CHECK THAT
 166:	004F  DAAB05  	                JP      C,ASORRY        ; IF SO, SAY "SORRY"
 167:	0052  21000F  	                LD      HL,TXTEND       ; IF NOT GET ADDRESS
 168:	0055  CD3705  	                CALL    SUBDE           ; OF @(EXPR) AND PUT IT
 169:	0058  D1      	                POP     DE              ; IN HL (top-down from TXTEND)
 170:	0059  C9      	                RET                     ; C FLAG IS CLEARED
 171:			;
 172:			                                        ; VARIABLES 'A'..'Z'
 173:	005A  FE21    	TV1:            CP      21H             ; >='a'?
 174:	005C  3802    	                JR      C,TV2           ; NO
 175:	005E  D620    	                SUB     20H             ; MAKE UPPER CASE
 176:	0060  FE1B    	TV2:            CP      1BH             ; <='Z'
 177:	0062  3F      	                CCF                     ; IF NOT RETURN C FLAG
 178:	0063  D8      	                RET     C
 179:	0064  13      	                INC     DE              ; IT IS 'A'=1 THROUGH 'Z'=26
 180:	0065  21FE07  	                LD      HL,VARBGN-2     ; COMPUTE ADDRESS OF
 181:	0068  07      	                RLCA                    ; THAT VARIABLE
 182:	0069  85      	                ADD     A,L             ; AND RETURN IT IN HL
 183:	006A  6F      	                LD      L,A             ; WITH C FLAG CLEARED
 184:	006B  3E00    	                LD      A,0
 185:	006D  8C      	                ADC     A,H
 186:	006E  67      	                LD      H,A
 187:	006F  C9      	                RET
 188:			
 189:			; TSTC:         EX      (SP),HL         ; *** TSTC OR RST 1 ***
 190:			;               RST     RIGNBLK         ; THIS IS AT LOC. 8
 191:			;               CMP     (HL)            ; AND THEN JUMP HERE
 192:			;               JP      TC1             ; REST OF THIS IS AT TC1
 193:			;
 194:	0070  23      	TC1:            INC     HL              ; COMPARE THE BYTE THAT
 195:	0071  2807    	                JR      Z,TC2           ; FOLLOWS THE RST INST.
 196:	0073  C5      	                PUSH    BC              ; WITH THE TEXT (DE->)
 197:	0074  4E      	                LD      C,(HL)          ; IF NOT =, ADD THE 2ND
 198:	0075  0600    	                LD      B,0             ; BYTE THAT FOLLOWS THE
 199:	0077  09      	                ADD     HL,BC           ; RST TO THE OLD PC
 200:	0078  C1      	                POP     BC              ; I.E., DO A RELATIVE
 201:	0079  1B      	                DEC     DE              ; JUMP IF NOT =
 202:	007A  13      	TC2:            INC     DE              ; IF =, SKIP THOSE BYTES
 203:	007B  23      	                INC     HL              ; AND CONTINUE
 204:	007C  E3      	                EX      (SP),HL
 205:	007D  C9      	                RET
 206:			
 207:	007E  210000  	TSTNUM:         LD      HL,0            ; *** TSTNUM ***
 208:	0081  44      	                LD      B,H             ; TEST IF THE TEXT IS
 209:	0082  EF      	                RST     RIGNBLK         ; A NUMBER
 210:	0083  FE24    	                CP      '$'             ; HEX NUMBER?
 211:	0085  2822    	                JR      Z,TX1           ; YES
 212:	0087  FE30    	TN1:            CP      '0'             ; IF NOT, RETURN 0 IN
 213:	0089  D8      	                RET     C               ; B AND HL
 214:	008A  FE3A    	                CP      '9'+1           ; IF NUMBERS, CONVERT
 215:	008C  D0      	                RET     NC              ; TO BINARY IN HL AND
 216:	008D  3EF0    	                LD      A,0F0H          ; SET B TO # OF DIGITS
 217:	008F  A4      	                AND     H               ; IF H>15, THERE IS NO
 218:	0090  203E    	                JR      NZ,QHOW         ; ROOM FOR NEXT DIGIT
 219:	0092  04      	                INC     B               ; B COUNTS # OF DIGITS
 220:	0093  C5      	                PUSH    BC
 221:	0094  44      	                LD      B,H             ; HL=10*HL+(NEW DIGIT)
 222:	0095  4D      	                LD      C,L
 223:	0096  29      	                ADD     HL,HL           ; 2*HL
 224:	0097  29      	                ADD     HL,HL           ; 4*HL
 225:	0098  09      	                ADD     HL,BC           ; 5*HL
 226:	0099  29      	                ADD     HL,HL           ; 10*HL
 227:	009A  1A      	                LD      A,(DE)          ; AND (DIGIT) IS FROM
 228:	009B  13      	                INC     DE              ; STRIPPING THE ASCII
 229:	009C  E60F    	                AND     0FH             ; CODE
 230:	009E  85      	                ADD     A,L
 231:	009F  6F      	                LD      L,A
 232:	00A0  3E00    	                LD      A,0
 233:	00A2  8C      	                ADC     A,H
 234:	00A3  67      	                LD      H,A
 235:	00A4  C1      	                POP     BC
 236:	00A5  1A      	                LD      A,(DE)          ; DO THIS DIGIT AFTER
 237:	00A6  F28700  	                JP      P,TN1           ; DIGIT. S SAYS OVERFLOW
 238:			;
 239:			                                        ; OUTPUT HEX NUMBER
 240:	00A9  13      	TX1:            INC     DE              ; SKIP TO NEXT HEX
 241:	00AA  1A      	                LD      A,(DE)          ; GET HEX DIGIT
 242:	00AB  FE30    	                CP      '0'             ; < '0'
 243:	00AD  D8      	                RET     C               ; ERROR
 244:	00AE  FE3A    	                CP      '9'+1           ; <= '9'
 245:	00B0  380A    	                JR      C,TX2           ; OK '0'..'9'
 246:	00B2  FE41    	                CP      'A'             ; < 'A'
 247:	00B4  D8      	                RET     C               ; ERROR, >'9' && < 'A'
 248:	00B5  E65F    	                AND     5FH             ; CONVERT ALPHA TO UPPER
 249:	00B7  FE47    	                CP      'F'+1           ; > 'F'
 250:	00B9  D0      	                RET     NC              ; ERROR
 251:	00BA  D607    	                SUB     'A'-'0'-10      ; SKIP GAP '9' -> 'A'
 252:	00BC  E60F    	TX2:            AND     0FH             ; GET HEX CODE 0..F
 253:	00BE  C5      	                PUSH    BC
 254:	00BF  47      	                LD      B,A             ; SAVE HEX CODE
 255:	00C0  3EF0    	                LD      A,0F0H          ; IF H>15
 256:	00C2  A4      	                AND     H               ; THERE IS NO ROOM
 257:	00C3  78      	                LD      A,B
 258:	00C4  C1      	                POP     BC
 259:	00C5  2009    	                JR      NZ,QHOW         ; FOR NEXT DIGIT
 260:			
 261:	00C7  04      	                INC     B               ; B COUNTS # OF DIGITS
 262:	00C8  29      	                ADD     HL,HL           ; 2*HL
 263:	00C9  29      	                ADD     HL,HL           ; 4*HL
 264:	00CA  29      	                ADD     HL,HL           ; 8*HL
 265:	00CB  29      	                ADD     HL,HL           ; 16*HL
 266:	00CC  B5      	                OR      L               ; PUT HEX CODE INTO
 267:	00CD  6F      	                LD      L,A             ; THE 4 LSB OF HL
 268:	00CE  18D9    	                JR      TX1             ; DIGIT AFTER DIGIT
 269:			
 270:	00D0  D5      	QHOW:           PUSH    DE              ; *** ERROR "HOW?" ***
 271:	00D1  11E100  	AHOW:           LD      DE,HOW
 272:	00D4  C38105  	                JP      ERROR
 273:			
 274:	00D7  54696E79	TIBAS:          .DB     "TinyBASIC"
	      42415349
	      43
 275:	00E0  0D      	                .DB     CR
 276:			
 277:	00E1  484F573F	HOW:            .DB     "HOW?"
 278:	00E5  0D      	                .DB     CR
 279:			
 280:	00E6  4F4B    	OK:             .DB     "OK"
 281:	00E8  0D      	                .DB     CR
 282:			
 283:	00E9  57484154	WHAT:           .DB     "WHAT?"
	      3F
 284:	00EE  0D      	                .DB     CR
 285:			
 286:	00EF  534F5252	SORRY:          .DB     "SORRY"
	      59
 287:	00F4  0D      	                .DB     CR
 288:			
 289:			;
 290:			; *************************************************************
 291:			;
 292:			; *** ROUTC *** CHKIO ***
 293:			;
 294:			; THESE ARE THE ONLY I/O ROUTINES IN TBI.
 295:			; OUTC WILL OUTPUT THE BYTE IN A.
 296:			; IF THAT IS A CR, A LF IS ALSO SEND OUT.
 297:			; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
 298:			; ALL REGISTERS ARE RESTORED.
 299:			;
 300:			; 'CHKIO' CHECKS THE INPUT.
 301:			; IF NO INPUT, IT WILL RETURN TO THE CALLER WITH THE Z FLAG SET.
 302:			; IF THERE IS INPUT, Z FLAG IS CLEARED AND THE INPUT BYTE IS IN A.
 303:			; IF A CONTROL-C IS READ, 'CHKIO' WILL RESTART TBI
 304:			; AND DO NOT RETURN TO THE CALLER.
 305:			;
 306:			
 307:			; THIS IS AT LOC. 10
 308:			; ROUTC:        OUT     (IODATA),A      ; Out to data port
 309:			;               CP      CR              ; WAS IT CR?
 310:			;               RET     NZ              ; NO, FINISHED
 311:			;               JP      OC1             ; REST OF THIS IS AT OC1
 312:			;
 313:	00F5  3E0A    	OC1:            LD      A,LF            ; YES, WE SEND LF TOO
 314:	00F7  D7      	                RST     ROUTC           ; THIS IS RECURSIVE
 315:	00F8  3E0D    	                LD      A,CR            ; GET CR BACK IN A
 316:	00FA  C9      	                RET
 317:			
 318:	00FB  DB02    	CHKIO:          IN      A,(IOSTAT)      ; *** CHKIO ***
 319:	00FD  E601    	                AND     IO_RX_BIT       ; MASK STATUS BIT
 320:	00FF  C8      	                RET     Z               ; NOT READY, RETURN "Z"
 321:	0100  DB01    	                IN      A,(IODATA)      ; READY, READ DATA
 322:	0102  E67F    	                AND     7FH             ; MASK BIT 7 OFF
 323:	0104  FE03    	CI0:            CP      03H             ; IS IT CONTROL-C?
 324:	0106  C0      	                RET     NZ              ; NO, RETURN "NZ"
 325:	0107  1823    	                JR      WSTART          ; YES, RESTART TBI
 326:			
 327:			;
 328:			; *************************************************************
 329:			;
 330:			
 331:			;
 332:			; *************************************************************
 333:			;
 334:			; *** INIT ***
 335:			;
 336:			; PUT IO INITIALISATION HERE, E.G. FOR THE SERIAL INTERFACE
 337:			;
 338:			; *** MAIN ***
 339:			;
 340:			; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
 341:			; AND STORES IT IN THE MEMORY.
 342:			;
 343:			; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
 344:			; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
 345:			; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
 346:			; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
 347:			; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
 348:			; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
 349:			; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
 350:			; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
 351:			; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
 352:			;
 353:			; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
 354:			; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
 355:			; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
 356:			; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
 357:			;
 358:			; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
 359:			; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
 360:			; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
 361:			; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
 362:			;
 363:			; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
 364:			; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
 365:			; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
 366:			; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
 367:			;
 368:			;
 369:			                                        ; THIS IS AT LOC. 0
 370:			; CSTART:       LD      SP,STACK        ; *** COLD START ***
 371:			;               XOR     A               ;
 372:			;               JP      INIT            ;
 373:			;
 374:	0109          	INIT:
 375:	0109  210008  	                LD      HL,RAMBGN       ; SOURCE
 376:	010C  77      	                LD      (HL),A          ; CLEAR MEM
 377:	010D  110108  	                LD      DE,RAMBGN+1     ; DESTINATION
 378:	0110  01FF07  	                LD      BC,RAMSZE-1     ; BYTE COUNT
 379:	0113  EDB0    	                LDIR                    ; CLR COMPLETE MEMORY
 380:	0115  11D700  	                LD      DE,TIBAS        ; COLD START MESSAGE
 381:	0118  CD1406  	                CALL    PRTSTG
 382:	011B  3EC9    	                LD      A,$C9
 383:	011D  32000F  	                LD      (USRSPC),A      ; "RET" AT USR CODE SPACE
 384:	0120  210000  	                LD      HL,CSTART       ; INIT RANDOM POINTER
 385:	0123  224A08  	                LD      (RANPNT),HL
 386:	0126  210009  	                LD      HL,TXTBGN       ; UNFILLED TEXT
 387:	0129  223608  	                LD      (TXTUNF),HL
 388:			;
 389:	012C  310009  	WSTART:         LD      SP,STACK        ; *** WARM START ***
 390:	012F  CD0E00  	                CALL    CRLF            ; AND JUMP TO HERE
 391:	0132  11E600  	                LD      DE,OK           ; DE->STRING
 392:	0135  97      	                SUB     A               ; A=0
 393:	0136  CD1406  	                CALL    PRTSTG          ; PRINT STRING UNTIL CR
 394:	0139  214001  	                LD      HL,ST2+1        ; HACK ST2+1 -> 0000
 395:	013C  223808  	                LD      (CURRNT),HL     ; CURRENT->LINE # = 0
 396:	013F  210000  	ST2:            LD      HL,0000         ; <- ST2+1
 397:	0142  224008  	                LD      (LOPVAR),HL
 398:	0145  223A08  	                LD      (STKGOS),HL
 399:	0148  3E3E    	ST3:            LD      A,'>'           ; PROMPT '>' AND
 400:	014A  CDB005  	                CALL    GETLN           ; READ A LINE
 401:	014D  D5      	                PUSH    DE              ; DE->END OF LINE
 402:	014E  11800F  	                LD      DE,BUFFER       ; DE->BEGINNING OF LINE
 403:	0151  CD7E00  	                CALL    TSTNUM          ; TEST IF IT IS A NUMBER
 404:	0154  EF      	                RST     RIGNBLK
 405:	0155  7C      	                LD      A,H             ; HL=VALUE OF THE # OR
 406:	0156  B5      	                OR      L               ; 0 IF NO # WAS FOUND
 407:	0157  C1      	                POP     BC              ; BC->END OF LINE
 408:	0158  CA1C07  	                JP      Z,DIRECT
 409:	015B  1B      	                DEC     DE              ; BACKUP DE AND SAVE
 410:	015C  7C      	                LD      A,H             ; VALUE OF LINE # THERE
 411:	015D  12      	                LD      (DE),A
 412:	015E  1B      	                DEC     DE
 413:	015F  7D      	                LD      A,L
 414:	0160  12      	                LD      (DE),A
 415:	0161  C5      	                PUSH    BC              ; BC,DE->BEGIN, END
 416:	0162  D5      	                PUSH    DE
 417:	0163  79      	                LD      A,C
 418:	0164  93      	                SUB     E
 419:	0165  F5      	                PUSH    AF              ; A=# OF BYTES IN LINE
 420:	0166  CDEF05  	                CALL    FNDLN           ; FIND THIS LINE IN SAVE
 421:	0169  D5      	                PUSH    DE              ; AREA, DE->SAVE AREA
 422:	016A  2010    	                JR      NZ,ST4          ; NZ:NOT FOUND, INSERT
 423:	016C  D5      	                PUSH    DE              ; Z:FOUND, DELETE IT
 424:	016D  CD0A06  	                CALL    FNDNXT          ; FIND NEXT LINE
 425:			                                        ; DE->NEXT LINE
 426:	0170  C1      	                POP     BC              ; BC->LINE TO BE DELETED
 427:	0171  2A3608  	                LD      HL,(TXTUNF)     ; HL->UNFILLED SAVE AREA
 428:	0174  CDC406  	                CALL    MVUP            ; MOVE UP TO DELETE
 429:	0177  60      	                LD      H,B             ; TXTUNF->UNFILLED AREA
 430:	0178  69      	                LD      L,C
 431:	0179  223608  	                LD      (TXTUNF),HL     ; UPDATE
 432:	017C  C1      	ST4:            POP     BC              ; GET READY TO INSERT
 433:	017D  2A3608  	                LD      HL,(TXTUNF)     ; BUT FIRST CHECK IF
 434:	0180  F1      	                POP     AF              ; THE LENGTH OF NEW LINE
 435:	0181  E5      	                PUSH    HL              ; IS 3 (LINE # AND CR)
 436:	0182  FE03    	                CP      3               ; THEN DO NOT INSERT
 437:	0184  28A6    	                JR      Z,WSTART        ; MUST CLEAR THE STACK
 438:	0186  85      	                ADD     A,L             ; COMPUTE NEW TXTUNF
 439:	0187  6F      	                LD      L,A
 440:	0188  3E00    	                LD      A,0
 441:	018A  8C      	                ADC     A,H
 442:	018B  67      	                LD      H,A             ; HL->NEW UNFILLED AREA
 443:	018C  11000F  	                LD      DE,TXTEND       ; CHECK TO SEE IF THERE
 444:	018F  E7      	                RST     RCOMP           ; COMP HL,DE - IS ENOUGH SPACE
 445:	0190  D2AA05  	                JP      NC,QSORRY       ; SORRY, NO ROOM FOR IT
 446:	0193  223608  	                LD      (TXTUNF),HL     ; OK, UPDATE TXTUNF
 447:	0196  D1      	                POP     DE              ; DE->OLD UNFILLED AREA
 448:	0197  CDCC06  	                CALL    MVDOWN
 449:	019A  D1      	                POP     DE              ; DE->BEGIN, HL->END
 450:	019B  E1      	                POP     HL
 451:	019C  CDC406  	                CALL    MVUP            ; MOVE NEW LINE TO SAVE
 452:	019F  18A7    	                JR      ST3             ; AREA
 453:			
 454:			; *************************************************************
 455:			;
 456:			; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
 457:			; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
 458:			; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
 459:			; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
 460:			; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
 461:			;
 462:			; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'WSTART'
 463:			; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
 464:			; GO BACK TO 'WSTART'.
 465:			; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
 466:			; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
 467:			; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'WSTART', ELSE
 468:			; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
 469:			; *************************************************************
 470:			;
 471:			; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
 472:			;
 473:			; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
 474:			;
 475:			; 'STOP(CR)' GOES BACK TO 'WSTART'
 476:			;
 477:			; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
 478:			; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
 479:			; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
 480:			;
 481:			; THERE ARE 3 MORE ENTRIES IN 'RUN':
 482:			; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
 483:			; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
 484:			; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
 485:			;
 486:			; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
 487:			; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
 488:			;
 489:	01A1  CD7905  	NEW:            CALL    ENDCHK          ; *** NEW(CR) ***
 490:	01A4  210009  	                LD      HL,TXTBGN
 491:	01A7  223608  	                LD      (TXTUNF),HL
 492:			;
 493:	01AA  CD7905  	STOP:           CALL    ENDCHK          ; *** STOP(CR) ***
 494:	01AD  C32C01  	                JP      WSTART
 495:			
 496:	01B0  CD7905  	RUN:            CALL    ENDCHK          ; *** RUN(CR) ***
 497:	01B3  110009  	                LD      DE,TXTBGN       ; FIRST SAVED LINE
 498:			;
 499:	01B6  210000  	RUNNXL:         LD      HL,0            ; *** RUNNXL ***
 500:	01B9  CDF705  	                CALL    FNDLP           ; FIND WHATEVER LINE #
 501:	01BC  DA2C01  	                JP      C,WSTART        ; C:PASSED TXTUNF, QUIT
 502:			;
 503:	01BF  EB      	RUNTSL:         EX      DE,HL           ; *** RUNTSL ***
 504:	01C0  223808  	                LD      (CURRNT),HL     ; SET 'CURRENT'->LINE #
 505:	01C3  EB      	                EX      DE,HL
 506:	01C4  13      	                INC     DE              ; BUMP PASS LINE #
 507:	01C5  13      	                INC     DE
 508:			;
 509:	01C6  CDFB00  	RUNSML:         CALL    CHKIO           ; *** RUNSML ***
 510:	01C9  216007  	                LD      HL,TAB2-1       ; FIND COMMAND IN TAB2
 511:	01CC  C31F07  	                JP      EXEC            ; AND EXECUTE IT
 512:			
 513:	01CF  DF      	GOTO:           RST     REXPR           ; *** GOTO EXPR ***
 514:	01D0  D5      	                PUSH    DE              ; SAVE FOR ERROR ROUTINE
 515:	01D1  CD7905  	                CALL    ENDCHK          ; MUST FIND A CR
 516:	01D4  CDEF05  	                CALL    FNDLN           ; FIND THE TARGET LINE
 517:	01D7  C2D100  	                JP      NZ,AHOW         ; NO SUCH LINE #
 518:	01DA  F1      	                POP     AF              ; CLEAR THE PUSH DE
 519:	01DB  18E2    	                JR      RUNTSL          ; GO DO IT
 520:			;
 521:			; *************************************************************
 522:			;
 523:			; *** LIST *** & PRINT ***
 524:			;
 525:			; LIST HAS TWO FORMS:
 526:			; 'LIST(CR)' LISTS ALL SAVED LINES
 527:			; 'LIST #(CR)' START LIST AT THIS LINE #
 528:			; YOU CAN STOP THE LISTING BY CONTROL C KEY
 529:			;
 530:			; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
 531:			; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
 532:			; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
 533:			;
 534:			; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
 535:			; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
 536:			; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
 537:			; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
 538:			; SPECIFIED, 8 POSITIONS WILL BE USED.
 539:			;
 540:			; NUMBER BASE IS SET BY PERCENT SIGN FOLLOEWED BY A NUMBER
 541:			; BETWEEN 2 and 16. VALUES ARE PRINTED AS UNSIGNED TO THIS BASE
 542:			; FOR THE REST OF THIS PRINT COMMAND UNLESS CHANGED BY
 543:			; ANOTHER BASE. IF NO BASE IS PROVIDED NUMBERS ARE SIGNED DECIMAL.
 544:			;
 545:			; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
 546:			; DOUBLE QUOTES.
 547:			;
 548:			; A BACK-ARROW (UNDERLINE) ALONE MEANS GENERATE A (CR) WITHOUT (LF).
 549:			;
 550:			; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
 551:			; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
 552:			; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
 553:			;
 554:	01DD  CD7E00  	LIST_:          CALL    TSTNUM          ; TEST IF THERE IS A #
 555:	01E0  CD7905  	                CALL    ENDCHK          ; IF NO # WE GET A 0
 556:	01E3  CDEF05  	                CALL    FNDLN           ; FIND THIS OR NEXT LINE
 557:	01E6  DA2C01  	LS1:            JP      C,WSTART        ; C:PASSED TXTUNF
 558:	01E9  CDAD06  	                CALL    PRTLN           ; PRINT THE LINE
 559:	01EC  CDFB00  	                CALL    CHKIO           ; STOP IF HIT CONTROL-C
 560:	01EF  CDF705  	                CALL    FNDLP           ; FIND NEXT LINE
 561:	01F2  18F2    	                JR      LS1             ; AND LOOP BACK
 562:			
 563:	01F4  0E08    	PRINT:          LD      C,8             ; C = # OF SPACES
 564:	01F6  AF      	                XOR     A               ; DEFAULT BASE FOR PRTNUM
 565:	01F7  323508  	                LD      (PNBASE),A
 566:	01FA  CF3B06  	                TSTC    ';',PR2         ; IF NULL LIST & ";"
 567:	01FD  CD0E00  	                CALL    CRLF            ; GIVE CR-LF AND
 568:	0200  C3C601  	                JP      RUNSML          ; CONTINUE SAME LINE
 569:	0203  CF0D06  	PR2:            TSTC    CR,PR0          ; IF NULL LIST (CR)
 570:	0206  CD0E00  	                CALL    CRLF            ; ALSO GIVE CR-LF AND
 571:	0209  C3B601  	                JP      RUNNXL          ; GO TO NEXT LINE
 572:	020C  CF2304  	PR0:            TSTC    '#',PR5         ; ELSE IS IT FORMAT?
 573:	020F  DF      	                RST     REXPR           ; YES, EVALUATE EXPR.
 574:	0210  4D      	                LD      C,L             ; AND SAVE IT IN C
 575:	0211  181A    	                JR      PR3             ; LOOK FOR MORE TO PRINT
 576:	0213  CF2511  	PR5:            TSTC    '%',PR1         ; ELSE IS IT PRTNUM BASE?
 577:	0216  DF      	                RST     REXPR           ; YES, EVALUATE EXPR.
 578:	0217  7D      	                LD      A,L             ; GET THE LOW PART
 579:	0218  FE01    	                CP      1               ; EITHER 0 OR >= 2?
 580:	021A  CAD000  	                JP      Z,QHOW          ; ERROR
 581:	021D  FE11    	                CP      17              ; BASE > 16?
 582:	021F  D2D000  	                JP      NC,QHOW         ; ERROR
 583:	0222  323508  	                LD      (PNBASE),A      ; IN PNBASE
 584:	0225  1806    	                JR      PR3             ; LOOK FOR MORE TO PRINT
 585:	0227  CD1F06  	PR1:            CALL    QTSTG           ; OR IS IT A STRING?
 586:	022A  C33D02  	                JP      PR8             ; HACK JP!! IF NOT, MUST BE EXPR.
 587:	022D  CF2C05  	PR3:            TSTC    $2C,PR6         ; IF ",", GO FIND NEXT
 588:	0230  CD6A05  	                CALL    FIN             ; IN THE LIST.
 589:	0233  18D7    	                JR      PR0             ; LIST CONTINUES
 590:	0235  AF      	PR6:            XOR     A               ; END OF LIST REACHED
 591:	0236  323508  	                LD      (PNBASE),A      ; RESET DEFAULT BASE
 592:	0239  CD0E00  	                CALL    CRLF            ; LIST ENDS WITH CRLF
 593:	023C  F7      	                RST     RFINISH         ; FINISH
 594:	023D  DF      	PR8:            RST     REXPR           ; EVALUATE THE EXPR
 595:	023E  C5      	                PUSH    BC
 596:	023F  CD4D06  	                CALL    PRTNUM          ; PRINT THE VALUE
 597:	0242  C1      	                POP     BC
 598:	0243  18E8    	                JR      PR3             ; MORE TO PRINT?
 599:			;
 600:			; *************************************************************
 601:			;
 602:			; *** GOSUB *** & RETURN ***
 603:			;
 604:			; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
 605:			; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
 606:			; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
 607:			; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
 608:			; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
 609:			; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
 610:			; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
 611:			; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
 612:			; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
 613:			;
 614:			; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
 615:			; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
 616:			; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
 617:			; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
 618:			;
 619:	0245  CDF406  	GOSUB:          CALL    PUSHA           ; SAVE THE CURRENT "FOR"
 620:	0248  DF      	                RST     REXPR           ; PARAMETERS
 621:	0249  D5      	                PUSH    DE              ; AND TEXT POINTER
 622:	024A  CDEF05  	                CALL    FNDLN           ; FIND THE TARGET LINE
 623:	024D  C2D100  	                JP      NZ,AHOW         ; NOT THERE. SAY "HOW?"
 624:	0250  2A3808  	                LD      HL,(CURRNT)     ; FOUND IT, SAVE OLD
 625:	0253  E5      	                PUSH    HL              ; 'CURRNT' OLD 'STKGOS'
 626:	0254  2A3A08  	                LD      HL,(STKGOS)
 627:	0257  E5      	                PUSH    HL
 628:	0258  210000  	                LD      HL,0            ; AND LOAD NEW ONES
 629:	025B  224008  	                LD      (LOPVAR),HL
 630:	025E  39      	                ADD     HL,SP
 631:	025F  223A08  	                LD      (STKGOS),HL
 632:	0262  C3BF01  	                JP      RUNTSL          ; THEN RUN THAT LINE
 633:			;
 634:	0265  CD7905  	RETURN:         CALL    ENDCHK          ; THERE MUST BE A CR
 635:	0268  2A3A08  	                LD      HL,(STKGOS)     ; OLD STACK POINTER
 636:	026B  7C      	                LD      A,H             ; 0 MEANS NOT EXIST
 637:	026C  B5      	                OR      L
 638:	026D  CA7D05  	                JP      Z,QWHAT         ; SO, WE SAY: "WHAT?"
 639:	0270  F9      	                LD      SP,HL           ; ELSE, RESTORE IT
 640:	0271  E1      	                POP     HL
 641:	0272  223A08  	                LD      (STKGOS),HL     ; AND THE OLD 'STKGOS'
 642:	0275  E1      	                POP     HL
 643:	0276  223808  	                LD      (CURRNT),HL     ; AND THE OLD 'CURRNT'
 644:	0279  D1      	                POP     DE              ; OLD TEXT POINTER
 645:	027A  CDD906  	                CALL    POPA            ; OLD "FOR" PARAMETERS
 646:	027D  F7      	                RST     RFINISH         ; AND WE ARE BACK HOME
 647:			;
 648:			; *************************************************************
 649:			;
 650:			; *** FOR *** & NEXT ***
 651:			;
 652:			; 'FOR' HAS TWO FORMS:
 653:			; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
 654:			; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
 655:			; EXP3=1.  (I.E., WITH A STEP OF +1.)
 656:			; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
 657:			; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
 658:			; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
 659:			; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
 660:			; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
 661:			; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
 662:			; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
 663:			; BEFORE THE NEW ONE OVERWRITES IT.
 664:			; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
 665:			; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
 666:			; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
 667:			; (PURGED FROM THE STACK..)
 668:			;
 669:			; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
 670:			; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
 671:			; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
 672:			; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
 673:			; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
 674:			; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
 675:			; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
 676:			; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
 677:			; IS PURGED AND EXECUTION CONTINUES.
 678:			;
 679:	027E  CDF406  	FOR:            CALL    PUSHA           ; SAVE THE OLD SAVE AREA
 680:	0281  CD5B05  	                CALL    SETVAL          ; SET THE CONTROL VAR.
 681:	0284  2B      	                DEC     HL              ; HL IS ITS ADDRESS
 682:	0285  224008  	                LD      (LOPVAR),HL     ; SAVE THAT
 683:	0288  21D307  	                LD      HL,TAB5-1       ; USE 'EXEC' TO LOOK
 684:	028B  C31F07  	                JP      EXEC            ; FOR THE WORD 'TO'
 685:	028E  DF      	FR1:            RST     REXPR           ; EVALUATE THE LIMIT
 686:	028F  224408  	                LD      (LOPLMT),HL     ; SAVE THAT
 687:	0292  21D907  	                LD      HL,TAB6-1       ; USE 'EXEC' TO LOOK
 688:	0295  C31F07  	                JP      EXEC            ; FOR THE WORD 'STEP'
 689:	0298  DF      	FR2:            RST     REXPR           ; FOUND IT, GET STEP
 690:	0299  1803    	                JR      FR4
 691:	029B  210100  	FR3:            LD      HL,1H           ; NOT FOUND, SET TO 1
 692:	029E  224208  	FR4:            LD      (LOPINC),HL     ; SAVE THAT TOO
 693:	02A1  2A3808  	FR5:            LD      HL,(CURRNT)     ; SAVE CURRENT LINE #
 694:	02A4  224608  	                LD      (LOPLN),HL
 695:	02A7  EB      	                EX      DE,HL           ; AND TEXT POINTER
 696:	02A8  224808  	                LD      (LOPPT),HL
 697:	02AB  010A00  	                LD      BC,0AH          ; DIG INTO STACK TO
 698:	02AE  2A4008  	                LD      HL,(LOPVAR)     ; FIND 'LOPVAR'
 699:	02B1  EB      	                EX      DE,HL
 700:	02B2  60      	                LD      H,B
 701:	02B3  68      	                LD      L,B             ; HL=0 NOW
 702:	02B4  39      	                ADD     HL,SP           ; HERE IS THE STACK
 703:	02B5  3E      	                .DB     3EH             ; HACK SKIP "ADD HL,BC"
 704:	02B6  09      	FR7:            ADD     HL,BC           ; EACH LEVEL IS 10 DEEP
 705:	02B7  7E      	                LD      A,(HL)          ; GET THAT OLD 'LOPVAR'
 706:	02B8  23      	                INC     HL
 707:	02B9  B6      	                OR      (HL)
 708:	02BA  2818    	                JR      Z,FR8           ; 0 SAYS NO MORE IN IT
 709:	02BC  7E      	                LD      A,(HL)
 710:	02BD  2B      	                DEC     HL
 711:	02BE  BA      	                CP      D               ; SAME AS THIS ONE?
 712:	02BF  20F5    	                JR      NZ,FR7
 713:	02C1  7E      	                LD      A,(HL)          ; THE OTHER HALF?
 714:	02C2  BB      	                CP      E
 715:	02C3  20F1    	                JR      NZ,FR7
 716:	02C5  EB      	                EX      DE,HL           ; YES, FOUND ONE
 717:	02C6  210000  	                LD      HL,0H
 718:	02C9  39      	                ADD     HL,SP           ; TRY TO MOVE SP
 719:	02CA  44      	                LD      B,H
 720:	02CB  4D      	                LD      C,L
 721:	02CC  210A00  	                LD      HL,0AH
 722:	02CF  19      	                ADD     HL,DE
 723:	02D0  CDCC06  	                CALL    MVDOWN          ; AND PURGE 10 WORDS
 724:	02D3  F9      	                LD      SP,HL           ; IN THE STACK
 725:	02D4  2A4808  	FR8:            LD      HL,(LOPPT)      ; JOB DONE, RESTORE DE
 726:	02D7  EB      	                EX      DE,HL
 727:	02D8  F7      	                RST     RFINISH         ; AND CONTINUE
 728:			;
 729:	02D9  FF      	NEXT:           RST     RTSTV           ; GET ADDRESS OF VAR.
 730:	02DA  DA7D05  	                JP      C,QWHAT         ; NO VARIABLE, "WHAT?"
 731:	02DD  223C08  	                LD      (VARNXT),HL     ; YES, SAVE IT
 732:	02E0  D5      	NX0:            PUSH    DE              ; SAVE TEXT POINTER
 733:	02E1  EB      	                EX      DE,HL
 734:	02E2  2A4008  	                LD      HL,(LOPVAR)     ; GET VAR. IN 'FOR'
 735:	02E5  7C      	                LD      A,H
 736:	02E6  B5      	                OR      L               ; 0 SAYS NEVER HAD ONE
 737:	02E7  CA7E05  	                JP      Z,AWHAT         ; SO WE ASK: "WHAT?"
 738:	02EA  E7      	                RST     RCOMP           ; ELSE WE CHECK THEM
 739:	02EB  2809    	                JR      Z,NX3           ; OK, THEY AGREE
 740:	02ED  D1      	                POP     DE              ; NO, LET'S SEE
 741:	02EE  CDD906  	                CALL    POPA            ; PURGE CURRENT LOOP
 742:	02F1  2A3C08  	                LD      HL,(VARNXT)     ; AND POP ONE LEVEL
 743:	02F4  18EA    	                JR      NX0             ; GO CHECK AGAIN
 744:	02F6  5E      	NX3:            LD      E,(HL)          ; COME HERE WHEN AGREED
 745:	02F7  23      	                INC     HL
 746:	02F8  56      	                LD      D,(HL)          ; DE=VALUE OF VAR.
 747:	02F9  2A4208  	                LD      HL,(LOPINC)
 748:	02FC  E5      	                PUSH    HL
 749:	02FD  7C      	                LD      A,H
 750:	02FE  AA      	                XOR     D
 751:	02FF  7A      	                LD      A,D
 752:	0300  19      	                ADD     HL,DE           ; ADD ONE STEP
 753:	0301  FA0803  	                JP      M,NX4
 754:	0304  AC      	                XOR     H
 755:	0305  FA2903  	                JP      M,NX5
 756:	0308  EB      	NX4:            EX      DE,HL
 757:	0309  2A4008  	                LD      HL,(LOPVAR)     ; PUT IT BACK
 758:	030C  73      	                LD      (HL),E
 759:	030D  23      	                INC     HL
 760:	030E  72      	                LD      (HL),D
 761:	030F  2A4408  	                LD      HL,(LOPLMT)     ; HL->LIMIT
 762:	0312  F1      	                POP     AF              ; OLD HL
 763:	0313  B7      	                OR      A
 764:	0314  F21803  	                JP      P,NX1           ; STEP > 0
 765:	0317  EB      	                EX      DE,HL           ; STEP < 0
 766:	0318  CD5305  	NX1:            CALL    CKHLDE          ; COMPARE WITH LIMIT
 767:	031B  D1      	                POP     DE              ; RESTORE TEXT POINTER
 768:	031C  380D    	                JR      C,NX2           ; OUTSIDE LIMIT
 769:	031E  2A4608  	                LD      HL,(LOPLN)      ; WITHIN LIMIT, GO
 770:	0321  223808  	                LD      (CURRNT),HL     ; BACK TO THE SAVED
 771:	0324  2A4808  	                LD      HL,(LOPPT)      ; 'CURRNT' AND TEXT
 772:	0327  EB      	                EX      DE,HL           ; POINTER
 773:	0328  F7      	                RST     RFINISH
 774:	0329  E1      	NX5:            POP     HL
 775:	032A  D1      	                POP     DE
 776:	032B  CDD906  	NX2:            CALL    POPA            ; PURGE THIS LOOP
 777:	032E  F7      	                RST     RFINISH
 778:			;
 779:			; *************************************************************
 780:			;
 781:			; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
 782:			;
 783:			; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
 784:			; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
 785:			;
 786:			; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
 787:			; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
 788:			; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
 789:			; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
 790:			; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
 791:			; EXECUTION CONTINUES AT THE NEXT LINE.
 792:			;
 793:			; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
 794:			; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
 795:			; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
 796:			; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
 797:			; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
 798:			; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
 799:			; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
 800:			; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
 801:			; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
 802:			; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
 803:			;
 804:			; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
 805:			; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
 806:			; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
 807:			; THIS IS HANDLED IN 'INPERR'.
 808:			;
 809:			; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
 810:			; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
 811:			; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
 812:			; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
 813:			; THIS IS DONE BY 'DEFLT'.
 814:			;
 815:	032F  210000  	REM:            LD      HL,0H           ; *** REM ***
 816:	0332  3E      	                .DB     3EH             ; SKIP RST, THIS IS LIKE 'IF 0'
 817:			;
 818:	0333  DF      	IF_:            RST     REXPR           ; *** IF ***
 819:	0334  7C      	                LD      A,H             ; IS THE EXPR.=0?
 820:	0335  B5      	                OR      L
 821:	0336  C2C601  	                JP      NZ,RUNSML       ; NO, CONTINUE
 822:	0339  CD0C06  	                CALL    FNDSKP          ; YES, SKIP REST OF LINE
 823:	033C  D2BF01  	                JP      NC,RUNTSL       ; AND RUN THE NEXT LINE
 824:	033F  C32C01  	                JP      WSTART          ; IF NO NEXT, RE-START
 825:			;
 826:	0342  2A3E08  	INPERR:         LD      HL,(STKINP)     ; *** INPERR ***
 827:	0345  F9      	                LD      SP,HL           ; RESTORE OLD SP
 828:	0346  E1      	                POP     HL              ; AND OLD 'CURRNT'
 829:	0347  223808  	                LD      (CURRNT),HL
 830:	034A  D1      	                POP     DE              ; AND OLD TEXT POINTER
 831:	034B  D1      	                POP     DE              ; REDO INPUT
 832:			;
 833:	034C          	INPUT:                                  ; *** INPUT ***
 834:	034C  D5      	IP1:            PUSH    DE              ; SAVE IN CASE OF ERROR
 835:	034D  CD1F06  	                CALL    QTSTG           ; IS NEXT ITEM A STRING?
 836:	0350  C35803  	                JP      IP2             ; HACK JP!! NO
 837:	0353  FF      	                RST     RTSTV           ; YES, BUT FOLLOWED BY A
 838:	0354  3839    	                JR      C,IP4           ; VARIABLE?   NO.
 839:	0356  1810    	                JR      IP3             ; YES.  INPUT VARIABLE
 840:	0358  D5      	IP2:            PUSH    DE              ; SAVE FOR 'PRTSTG'
 841:	0359  FF      	                RST     RTSTV           ; MUST BE VARIABLE NOW
 842:	035A  DA7D05  	                JP      C,QWHAT         ; "WHAT?" IT IS NOT?
 843:	035D  1A      	                LD      A,(DE)          ; GET READY FOR 'PRTSTG'
 844:	035E  4F      	                LD      C,A
 845:	035F  97      	                SUB     A
 846:	0360  12      	                LD      (DE),A
 847:	0361  D1      	                POP     DE
 848:	0362  CD1406  	                CALL    PRTSTG          ; PRINT STRING AS PROMPT
 849:	0365  79      	                LD      A,C             ; RESTORE TEXT
 850:	0366  1B      	                DEC     DE
 851:	0367  12      	                LD      (DE),A
 852:	0368  D5      	IP3:            PUSH    DE              ; SAVE TEXT POINTER
 853:	0369  EB      	                EX      DE,HL
 854:	036A  2A3808  	                LD      HL,(CURRNT)     ; ALSO SAVE 'CURRNT'
 855:	036D  E5      	                PUSH    HL
 856:	036E  214C03  	                LD      HL,IP1          ; A NEGATIVE NUMBER
 857:	0371  223808  	                LD      (CURRNT),HL     ; AS A FLAG
 858:	0374  210000  	                LD      HL,0H           ; SAVE SP TOO
 859:	0377  39      	                ADD     HL,SP
 860:	0378  223E08  	                LD      (STKINP),HL
 861:	037B  D5      	                PUSH    DE              ; OLD HL
 862:	037C  3E3A    	                LD      A,':'           ; PRINT THIS TOO
 863:	037E  CDB005  	                CALL    GETLN           ; AND GET A LINE
 864:	0381  11800F  	                LD      DE,BUFFER       ; POINTS TO BUFFER
 865:	0384  DF      	                RST     REXPR           ; EVALUATE INPUT
 866:			                                        ; NOP            ;??? CAN BE 'CALL ENDCHK'
 867:			                                        ; NOP
 868:			                                        ; NOP
 869:	0385  D1      	                POP     DE              ; OK, GET OLD HL
 870:	0386  EB      	                EX      DE,HL
 871:	0387  73      	                LD      (HL),E          ; SAVE VALUE IN VAR.
 872:	0388  23      	                INC     HL
 873:	0389  72      	                LD      (HL),D
 874:	038A  E1      	                POP     HL              ; GET OLD 'CURRNT'
 875:	038B  223808  	                LD      (CURRNT),HL
 876:	038E  D1      	                POP     DE              ; AND OLD TEXT POINTER
 877:	038F  F1      	IP4:            POP     AF              ; PURGE JUNK IN STACK
 878:	0390  CF2C02  	                TSTC    $2C,IP5         ; IS NEXT CH. ','?
 879:	0393  18B7    	                JR      IP1             ; YES, MORE ITEMS.
 880:	0395  F7      	IP5:            RST     RFINISH
 881:			;
 882:	0396  1A      	DEFLT:          LD      A,(DE)          ; ***  DEFLT ***
 883:	0397  FE0D    	                CP      CR              ; EMPTY LINE IS OK
 884:	0399  2808    	                JR      Z,LT1           ; ELSE IT IS 'LET'
 885:			;
 886:	039B  CD5B05  	LET:            CALL    SETVAL          ; *** LET ***
 887:	039E  CF2C02  	                TSTC    $2C,LT1         ; SET VALUE TO VAR.
 888:	03A1  18F8    	                JR      LET             ; ITEM BY ITEM
 889:	03A3  F7      	LT1:            RST     RFINISH         ; UNTIL FINISH
 890:			;
 891:			; *************************************************************
 892:			;
 893:			; *** EXPR ***
 894:			;
 895:			; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
 896:			; <EXPR>::<EXPR2>
 897:			;         <EXPR2><REL.OP.><EXPR2>
 898:			; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
 899:			; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
 900:			; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
 901:			; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
 902:			; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
 903:			; <EXPR4>::=<VARIABLE>
 904:			;           <FUNCTION>
 905:			;           (<EXPR>)
 906:			; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
 907:			; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
 908:			; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
 909:			;
 910:			; EXPR:         CALL    EXPR2           ; THIS IS AT LOC. 18
 911:			;               PUSH    HL              ; SAVE <EXPR2> VALUE
 912:			;               JP      EXPR1           ; REST OF IT AT EXPR1
 913:			;
 914:	03A4  21E107  	EXPR1:          LD      HL,TAB8-1       ; LOOKUP REL.OP.
 915:	03A7  C31F07  	                JP      EXEC            ; GO DO IT
 916:			;
 917:	03AA  CDD303  	XP11:           CALL    XP18            ; REL.OP.">="
 918:	03AD  D8      	                RET     C               ; NO, RETURN HL=0
 919:	03AE  6F      	                LD      L,A             ; YES, RETURN HL=1
 920:	03AF  C9      	                RET
 921:			;
 922:	03B0  CDD303  	XP12:           CALL    XP18            ; REL.OP."#" OR "<>" OR "!="
 923:	03B3  C8      	                RET     Z               ; FALSE, RETURN HL=0
 924:	03B4  6F      	                LD      L,A             ; TRUE, RETURN HL=1
 925:	03B5  C9      	                RET
 926:			;
 927:	03B6  CDD303  	XP13:           CALL    XP18            ; REL.OP.">"
 928:	03B9  C8      	                RET     Z               ; FALSE
 929:	03BA  D8      	                RET     C               ; ALSO FALSE, HL=0
 930:	03BB  6F      	                LD      L,A             ; TRUE, HL=1
 931:	03BC  C9      	                RET
 932:			;
 933:	03BD  CDD303  	XP14:           CALL    XP18            ; REL.OP."<="
 934:	03C0  6F      	                LD      L,A             ; SET HL=1
 935:	03C1  C8      	                RET     Z               ; REL. TRUE, RETURN
 936:	03C2  D8      	                RET     C
 937:	03C3  6C      	                LD      L,H             ; ELSE SET HL=0
 938:	03C4  C9      	                RET
 939:			;
 940:	03C5  CDD303  	XP15:           CALL    XP18            ; REL.OP."=" OR "=="
 941:	03C8  C0      	                RET     NZ              ; FALSE, RETURN HL=0
 942:	03C9  6F      	                LD      L,A             ; ELSE SET HL=1
 943:	03CA  C9      	                RET
 944:			;
 945:	03CB  CDD303  	XP16:           CALL    XP18            ; REL.OP."<"
 946:	03CE  D0      	                RET     NC              ; FALSE, RETURN HL=0
 947:	03CF  6F      	                LD      L,A             ; ELSE SET HL=1
 948:	03D0  C9      	                RET
 949:			;
 950:	03D1  E1      	XP17:           POP     HL              ; NOT .REL.OP
 951:	03D2  C9      	                RET                     ; RETURN HL=<EXPR2>
 952:			;
 953:	03D3  79      	XP18:           LD      A,C             ; SUBROUTINE FOR ALL
 954:	03D4  E1      	                POP     HL              ; REL.OP.'S
 955:	03D5  C1      	                POP     BC
 956:	03D6  E5      	                PUSH    HL              ; REVERSE TOP OF STACK
 957:	03D7  C5      	                PUSH    BC
 958:	03D8  4F      	                LD      C,A
 959:	03D9  CDE803  	                CALL    EXPR2           ; GET 2ND <EXPR2>
 960:	03DC  EB      	                EX      DE,HL           ; VALUE IN DE NOW
 961:	03DD  E3      	                EX      (SP),HL         ; 1ST <EXPR2> IN HL
 962:	03DE  CD5305  	                CALL    CKHLDE          ; COMPARE 1ST WITH 2ND
 963:	03E1  D1      	                POP     DE              ; RESTORE TEXT POINTER
 964:	03E2  210000  	                LD      HL,0H           ; SET HL=0, A=1
 965:	03E5  3E01    	                LD      A,1
 966:	03E7  C9      	                RET
 967:			;
 968:	03E8  CF2D05  	EXPR2:          TSTC    '-',XP21        ; NEGATIVE SIGN?
 969:	03EB  210000  	                LD      HL,0H           ; YES, FAKE '0-'
 970:	03EE  1821    	                JR      XP26            ; TREAT LIKE SUBTRACT
 971:			;
 972:	03F0  CF2B00  	XP21:           TSTC    '+',XP22        ; POSITIVE SIGN? IGNORE
 973:	03F3  CD2C04  	XP22:           CALL    EXPR3           ; 1ST <EXPR3>
 974:	03F6  CF2B15  	XP23:           TSTC    '+',XP25        ; ADD?
 975:	03F9  E5      	                PUSH    HL              ; YES, SAVE VALUE
 976:	03FA  CD2C04  	                CALL    EXPR3           ; GET 2ND <EXPR3>
 977:	03FD  EB      	XP24:           EX      DE,HL           ; 2ND IN DE
 978:	03FE  E3      	                EX      (SP),HL         ; 1ST IN HL
 979:	03FF  7C      	                LD      A,H             ; COMPARE SIGN
 980:	0400  AA      	                XOR     D
 981:	0401  7A      	                LD      A,D
 982:	0402  19      	                ADD     HL,DE
 983:	0403  D1      	                POP     DE              ; RESTORE TEXT POINTER
 984:	0404  FAF603  	                JP      M,XP23          ; 1ST AND 2ND SIGN DIFFER
 985:	0407  AC      	                XOR     H               ; 1ST AND 2ND SIGN EQUAL
 986:	0408  F2F603  	                JP      P,XP23          ; SO IS RESULT
 987:			;
 988:	040B  C3D000  	                JP      QHOW            ; ELSE WE HAVE OVERFLOW
 989:			;
 990:	040E  CF2D09  	XP25:           TSTC    '-',XP27        ; SUBTRACT?
 991:	0411  E5      	XP26:           PUSH    HL              ; YES, SAVE 1ST <EXPR3>
 992:	0412  CD2C04  	                CALL    EXPR3           ; GET 2ND <EXPR3>
 993:	0415  CD3E05  	                CALL    CHGSGN          ; NEGATE
 994:	0418  18E3    	                JR      XP24            ; AND ADD THEM
 995:			
 996:	041A  CF7C97  	XP27:           TSTC    '|',XP42        ; OR?
 997:	041D  E5      	                PUSH    HL              ; YES, SAVE 1ST <EXPR3>
 998:	041E  CD2C04  	                CALL    EXPR3           ; GET 2ND <EXPR3>
 999:	0421  EB      	                EX      DE,HL           ; 2ND IN DE
1000:	0422  E3      	                EX      (SP),HL         ; 1ST IN HL
1001:	0423  7C      	                LD      A,H             ; HL = HL & DE
1002:	0424  B2      	                OR      D
1003:	0425  67      	                LD      H,A
1004:	0426  7D      	                LD      A,L
1005:	0427  B3      	                OR      E
1006:	0428  6F      	                LD      L,A
1007:	0429  D1      	                POP     DE              ; RESTORE TEXT POINTER
1008:	042A  18CA    	                JR      XP23            ; LOOK FOR MORE TERMS
1009:			;
1010:	042C  CD9904  	EXPR3:          CALL    EXPR4           ; GET 1ST <EXPR4>
1011:	042F  CF2A29  	XP31:           TSTC    '*',XP34        ; MULTIPLY?
1012:	0432  E5      	                PUSH    HL              ; YES, SAVE 1ST
1013:	0433  CD9904  	                CALL    EXPR4           ; AND GET 2ND <EXPR4>
1014:	0436  0600    	                LD      B,0H            ; CLEAR B FOR SIGN
1015:	0438  CD3B05  	                CALL    CHKSGN          ; CHECK SIGN
1016:	043B  E3      	                EX      (SP),HL         ; 1ST IN HL
1017:	043C  CD3B05  	                CALL    CHKSGN          ; CHECK SIGN OF 1ST
1018:	043F  EB      	                EX      DE,HL
1019:	0440  E3      	                EX      (SP),HL
1020:	0441  7C      	                LD      A,H             ; IS HL > 255 ?
1021:	0442  B7      	                OR      A
1022:	0443  2806    	                JR      Z,XP32          ; NO
1023:	0445  7A      	                LD      A,D             ; YES, HOW ABOUT DE
1024:	0446  B2      	                OR      D
1025:	0447  EB      	                EX      DE,HL           ; PUT SMALLER IN HL
1026:	0448  C2D100  	                JP      NZ,AHOW         ; ALSO >, WILL OVERFLOW
1027:	044B  7D      	XP32:           LD      A,L             ; THIS IS DUMB
1028:	044C  210000  	                LD      HL,0H           ; CLEAR RESULT
1029:	044F  B7      	                OR      A               ; ADD AND COUNT
1030:	0450  2828    	                JR      Z,XP35
1031:	0452  19      	XP33:           ADD     HL,DE
1032:	0453  DAD100  	                JP      C,AHOW          ; OVERFLOW
1033:	0456  3D      	                DEC     A
1034:	0457  20F9    	                JR      NZ,XP33
1035:	0459  181F    	                JR      XP35            ; FINISHED
1036:			;
1037:	045B  CF2F29  	XP34:           TSTC    '/',XP36        ; DIVIDE?
1038:	045E  E5      	                PUSH    HL              ; YES, SAVE 1ST <EXPR4>
1039:	045F  CD9904  	                CALL    EXPR4           ; AND GET THE SECOND ONE
1040:	0462  0600    	                LD      B,0H            ; CLEAR B FOR SIGN
1041:	0464  CD3B05  	                CALL    CHKSGN          ; CHECK SIGN OF 2ND
1042:	0467  E3      	                EX      (SP),HL         ; GET 1ST IN HL
1043:	0468  CD3B05  	                CALL    CHKSGN          ; CHECK SIGN OF 1ST
1044:	046B  EB      	                EX      DE,HL
1045:	046C  E3      	                EX      (SP),HL
1046:	046D  EB      	                EX      DE,HL
1047:	046E  7A      	                LD      A,D             ; DIVIDE BY 0?
1048:	046F  B3      	                OR      E
1049:	0470  CAD100  	                JP      Z,AHOW          ; SAY "HOW?"
1050:	0473  C5      	                PUSH    BC              ; ELSE SAVE SIGN
1051:	0474  CD2205  	                CALL    DIVIDE          ; USE SUBROUTINE
1052:	0477  60      	                LD      H,B             ; RESULT IN HL NOW
1053:	0478  69      	                LD      L,C
1054:	0479  C1      	                POP     BC              ; GET SIGN BACK
1055:	047A  D1      	XP35:           POP     DE              ; AND TEXT POINTER
1056:	047B  7C      	                LD      A,H             ; HL MUST BE +
1057:	047C  B7      	                OR      A
1058:	047D  FAD000  	                JP      M,QHOW          ; ELSE IT IS OVERFLOW
1059:	0480  78      	                LD      A,B
1060:	0481  B7      	                OR      A
1061:	0482  FC3E05  	                CALL    M,CHGSGN        ; CHANGE SIGN IF NEEDED
1062:	0485  18A8    	                JR      XP31            ; LOOK FOR MORE TERMS
1063:			;
1064:	0487  CF262A  	XP36:           TSTC    '&',XP42        ; AND?
1065:	048A  E5      	                PUSH    HL              ; YES, SAVE 1ST <EXPR4>
1066:	048B  CD9904  	                CALL    EXPR4           ; AND GET THE SECOND ONE
1067:	048E  EB      	                EX      DE,HL           ; 2ND IN DE
1068:	048F  E3      	                EX      (SP),HL         ; 1ST IN HL
1069:	0490  7C      	                LD      A,H             ; HL = HL & DE
1070:	0491  A2      	                AND     D
1071:	0492  67      	                LD      H,A
1072:	0493  7D      	                LD      A,L
1073:	0494  A3      	                AND     E
1074:	0495  6F      	                LD      L,A
1075:	0496  D1      	                POP     DE              ; RESTORE TEXT POINTER
1076:	0497  1896    	                JR      XP31            ; LOOK FOR MORE TERMS
1077:			
1078:			;
1079:	0499  21B207  	EXPR4:          LD      HL,TAB4-1       ; FIND FUNCTION IN TAB4
1080:	049C  C31F07  	                JP      EXEC            ; AND GO DO IT
1081:			;
1082:	049F  FF      	XP40:           RST     RTSTV           ; NO, NOT A FUNCTION
1083:	04A0  3805    	                JR      C,XP41          ; NOR A VARIABLE
1084:	04A2  7E      	                LD      A,(HL)          ; VARIABLE
1085:	04A3  23      	                INC     HL
1086:	04A4  66      	                LD      H,(HL)          ; VALUE IN HL
1087:	04A5  6F      	                LD      L,A
1088:	04A6  C9      	                RET
1089:			;
1090:	04A7  CD7E00  	XP41:           CALL    TSTNUM          ; OR IS IT A NUMBER
1091:	04AA  78      	                LD      A,B             ; # OF DIGIT
1092:	04AB  B7      	                OR      A
1093:	04AC  C0      	                RET     NZ              ; OK
1094:	04AD  CF2805  	PARN:           TSTC    $28,XP43        ; '('
1095:	04B0  DF      	                RST     REXPR           ; "(EXPR)"
1096:	04B1  CF2901  	                TSTC    $29,XP43        ; ')'
1097:	04B4  C9      	XP42:           RET
1098:	04B5  C37D05  	XP43:           JP      QWHAT           ; ELSE SAY: "WHAT?"
1099:			
1100:	04B8  CDAD04  	RND:            CALL    PARN            ; *** RND(EXPR) ***
1101:	04BB  7C      	                LD      A,H             ; EXPR MUST BE +
1102:	04BC  B7      	                OR      A
1103:	04BD  FAD000  	                JP      M,QHOW
1104:	04C0  B5      	                OR      L               ; AND NON-ZERO
1105:	04C1  CAD000  	                JP      Z,QHOW
1106:	04C4  D5      	                PUSH    DE              ; SAVE BOTH
1107:	04C5  E5      	                PUSH    HL
1108:	04C6  2A4A08  	                LD      HL,(RANPNT)     ; GET MEMORY AS RANDOM
1109:	04C9  11FC07  	                LD      DE,LSTROM       ; NUMBER
1110:	04CC  E7      	                RST     RCOMP
1111:	04CD  3803    	                JR      C,RA1           ; WRAP AROUND IF LAST
1112:	04CF  210000  	                LD      HL,CSTART
1113:	04D2  ED5F    	RA1:            LD      A,R             ; RFSH REG GIVES TIME DEP. RANDOM
1114:	04D4  AE      	                XOR     (HL)
1115:	04D5  5F      	                LD      E,A
1116:	04D6  23      	                INC     HL
1117:	04D7  AE      	                XOR     (HL)
1118:	04D8  57      	                LD      D,A
1119:	04D9  224A08  	                LD      (RANPNT),HL
1120:	04DC  E1      	                POP     HL
1121:	04DD  EB      	                EX      DE,HL
1122:	04DE  C5      	                PUSH    BC
1123:	04DF  CD2205  	                CALL    DIVIDE          ; RND(N)=MOD(M,N)+1
1124:	04E2  C1      	                POP     BC
1125:	04E3  D1      	                POP     DE
1126:	04E4  23      	                INC     HL
1127:	04E5  C9      	                RET
1128:			
1129:	04E6  CDAD04  	ABS:            CALL    PARN            ; *** ABS(EXPR) ***
1130:	04E9  1B      	                DEC     DE
1131:	04EA  CD3B05  	                CALL    CHKSGN          ; CHECK SIGN AND CHANGE IF HL < 0
1132:	04ED  13      	                INC     DE
1133:	04EE  C9      	                RET
1134:			
1135:	04EF  2A3608  	SIZE:           LD      HL,(TXTUNF)     ; *** RETURN SIZE IN HL ***
1136:	04F2  D5      	                PUSH    DE              ; GET THE NUMBER OF FREE
1137:	04F3  EB      	                EX      DE,HL           ; BYTES BETWEEN 'TXTUNF'
1138:	04F4  21000F  	                LD      HL,TXTEND       ; AND 'TXTEND'
1139:	04F7  CD3705  	                CALL    SUBDE
1140:	04FA  D1      	                POP     DE
1141:	04FB  C9      	                RET
1142:			
1143:	04FC  CDAD04  	GET:            CALL    PARN            ; *** GET(ADDR) ***
1144:	04FF  6E      	                LD      L,(HL)          ; GET CONTENT OF (HL)
1145:	0500  2600    	                LD      H,0             ; RETURN RESULT IN HL
1146:	0502  C9      	                RET
1147:			
1148:	0503  CDAD04  	USR:            CALL    PARN            ; *** USR(PARA) ***
1149:	0506  C3000F  	                JP      USRSPC          ; GET para in HL and JP to prog
1150:			;                                       ; There you should:
1151:			;               ...                     ;   - Do the work
1152:			;               ...                     ;   - Put result in HL
1153:			;               RET                     ; $C9 - RET to BASIC
1154:			;                                       ; DEFAULT: (USRSPC)=$C9
1155:			
1156:	0509  21000F  	TOP:            LD      HL,TXTEND       ; *** TOP *** END OF TEXT AREA = USRSPC
1157:	050C  C9      	                RET
1158:			
1159:	050D  DF      	PUT:            RST     REXPR           ; *** PUT ADDR, VAL1 [,VAL2, VAL3,..]
1160:	050E  CF2C0D  	                TSTC    $2C,PT2         ; 1ST ',' SEPARATES THE VALUE(S)
1161:	0511  E5      	                PUSH    HL              ; SAVE ADDR
1162:	0512  DF      	PT0:            RST     REXPR           ; GET VAL IN HL
1163:	0513  7D      	                LD      A,L             ; LOW BYTE OF VAL
1164:	0514  E1      	                POP     HL              ; GET ADDR
1165:	0515  77      	                LD      (HL),A          ; PUT VALUE IN RAM
1166:	0516  CF2C04  	                TSTC    $2C,PT1         ; READY UNLESS ","
1167:	0519  23      	                INC     HL              ; NEXT ADDR
1168:	051A  E5      	                PUSH    HL
1169:	051B  18F5    	                JR      PT0             ; LIST CONTINUES
1170:			;
1171:	051D  F7      	PT1:            RST     RFINISH         ; READY
1172:			;
1173:	051E  C37D05  	PT2:            JP      QWHAT           ; ELSE SAY: "WHAT?"
1174:			
1175:	0521  76      	HALT_:          HALT                    ; HALT CPU (return to analyser)
1176:			
1177:			;
1178:			; *************************************************************
1179:			;
1180:			; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1181:			;
1182:			; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1183:			;
1184:			; 'SUBDE' SUBSTRACTS DE FROM HL
1185:			;
1186:			; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1187:			; SIGN AND FLIP SIGN OF B.
1188:			;
1189:			; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1190:			;
1191:			; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1192:			; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1193:			; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1194:			;
1195:	0522  E5      	DIVIDE:         PUSH    HL              ; *** DIVIDE ***
1196:	0523  6C      	                LD      L,H             ; DIVIDE H BY DE
1197:	0524  2600    	                LD      H,0
1198:	0526  CD2D05  	                CALL    DV1
1199:	0529  41      	                LD      B,C             ; SAVE RESULT IN B
1200:	052A  7D      	                LD      A,L             ; (REMINDER+L)/DE
1201:	052B  E1      	                POP     HL
1202:	052C  67      	                LD      H,A
1203:	052D  0EFF    	DV1:            LD      C,0FFH          ; RESULT IN C
1204:	052F  0C      	DV2:            INC     C               ; DUMB ROUTINE
1205:	0530  CD3705  	                CALL    SUBDE           ; DIVIDE BY SUBTRACT
1206:	0533  30FA    	                JR      NC,DV2          ; AND COUNT
1207:	0535  19      	                ADD     HL,DE
1208:	0536  C9      	                RET
1209:			
1210:	0537  B7      	SUBDE:          OR      A               ; CLR CY
1211:	0538  ED52    	                SBC     HL,DE
1212:	053A  C9      	                RET
1213:			
1214:	053B  7C      	CHKSGN:         LD      A,H             ; *** CHKSGN ***
1215:	053C  B7      	                OR      A               ; CHECK SIGN OF HL
1216:	053D  F0      	                RET     P               ; IF HL >=0 RETURN
1217:			;
1218:	053E  7C      	CHGSGN:         LD      A,H             ; *** CHGSGN ***
1219:	053F  B5      	                OR      L               ; CHECK VALUE OF HL
1220:	0540  C8      	                RET     Z               ; IF HL == 0 RETURN
1221:			;
1222:	0541  7C      	                LD      A,H
1223:	0542  F5      	                PUSH    AF              ; SAVE SIGN
1224:	0543  2F      	                CPL                     ; CHANGE SIGN OF HL
1225:	0544  67      	                LD      H,A
1226:	0545  7D      	                LD      A,L
1227:	0546  2F      	                CPL
1228:	0547  6F      	                LD      L,A
1229:	0548  23      	                INC     HL              ; HL = -HL
1230:	0549  F1      	                POP     AF              ; GET ORIGINAL SIGN
1231:	054A  AC      	                XOR     H               ; COMPARE
1232:	054B  F2D000  	                JP      P,QHOW          ; ERROR IF SIGN UNCHANGED (HL=$8000)
1233:	054E  78      	                LD      A,B             ; AND ALSO FLIP B
1234:	054F  EE80    	                XOR     80H
1235:	0551  47      	                LD      B,A
1236:	0552  C9      	                RET
1237:			
1238:	0553  7C      	CKHLDE:         LD      A,H
1239:	0554  AA      	                XOR     D               ; SAME SIGN?
1240:	0555  F25905  	                JP      P,CK1           ; YES, COMPARE
1241:	0558  EB      	                EX      DE,HL           ; NO, XCH AND COMP
1242:	0559  E7      	CK1:            RST     RCOMP
1243:	055A  C9      	                RET
1244:			;
1245:			; *************************************************************
1246:			;
1247:			; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1248:			;
1249:			; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1250:			; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1251:			; TO THAT VALUE.
1252:			;
1253:			; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1254:			; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1255:			; NEXT LINE AND CONTINUE FROM THERE.
1256:			;
1257:			; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1258:			; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1259:			;
1260:			; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1261:			; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1262:			; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1263:			; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1264:			; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1265:			; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1266:			; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1267:			; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1268:			; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1269:			;
1270:			; RELATED TO 'ERROR' ARE THE FOLLOWING:
1271:			; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1272:			; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1273:			; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1274:			; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1275:			;
1276:	055B  FF      	SETVAL:         RST     RTSTV           ; *** SETVAL ***
1277:	055C  381F    	                JR      C,QWHAT         ; "WHAT?" NO VARIABLE
1278:	055E  E5      	                PUSH    HL              ; SAVE ADDRESS OF VAR.
1279:	055F  CF3D1B  	                TSTC    '=',QWHAT       ; PASS "=" SIGN
1280:	0562  DF      	                RST     REXPR           ; EVALUATE EXPR.
1281:	0563  44      	                LD      B,H             ; VALUE IS IN BC NOW
1282:	0564  4D      	                LD      C,L
1283:	0565  E1      	                POP     HL              ; GET ADDRESS
1284:	0566  71      	                LD      (HL),C          ; SAVE VALUE
1285:	0567  23      	                INC     HL
1286:	0568  70      	                LD      (HL),B
1287:	0569  C9      	                RET
1288:			
1289:	056A  CF3B04  	FIN:            TSTC    ';',FI1         ; *** FIN ***
1290:	056D  F1      	                POP     AF              ; ";", PURGE RET. ADDR.
1291:	056E  C3C601  	                JP      RUNSML          ; CONTINUE SAME LINE
1292:	0571  CF0D04  	FI1:            TSTC    CR,FI2          ; NOT ";", IS IT CR?
1293:	0574  F1      	                POP     AF              ; YES, PURGE RET. ADDR.
1294:	0575  C3B601  	                JP      RUNNXL          ; RUN NEXT LINE
1295:	0578  C9      	FI2:            RET                     ; ELSE RETURN TO CALLER
1296:			
1297:	0579  EF      	ENDCHK:         RST     RIGNBLK         ; IGNBLK
1298:	057A  FE0D    	                CP      CR              ; END WITH CR?
1299:	057C  C8      	                RET     Z               ; OK, ELSE SAY: "WHAT?"
1300:			;
1301:	057D  D5      	QWHAT:          PUSH    DE              ; *** QWHAT ***
1302:	057E  11E900  	AWHAT:          LD      DE,WHAT         ; *** AWHAT ***
1303:	0581  97      	ERROR:          SUB     A               ; *** ERROR ***
1304:	0582  CD1406  	                CALL    PRTSTG          ; PRINT 'WHAT?', 'HOW?'
1305:	0585  D1      	                POP     DE              ; OR 'SORRY'
1306:	0586  1A      	                LD      A,(DE)          ; SAVE THE CHARACTER
1307:	0587  F5      	                PUSH    AF              ; AT WHERE OLD DE ->
1308:	0588  97      	                SUB     A               ; AND PUT A 0 THERE
1309:	0589  12      	                LD      (DE),A
1310:	058A  2A3808  	                LD      HL,(CURRNT)     ; GET CURRENT LINE #
1311:	058D  E5      	                PUSH    HL
1312:	058E  7E      	                LD      A,(HL)          ; CHECK THE VALUE
1313:	058F  23      	                INC     HL
1314:	0590  B6      	                OR      (HL)
1315:	0591  D1      	                POP     DE
1316:	0592  CA2C01  	                JP      Z,WSTART        ; IF ZERO, JUST RESTART
1317:	0595  7E      	                LD      A,(HL)          ; IF NEGATIVE,
1318:	0596  B7      	                OR      A
1319:	0597  FA4203  	                JP      M,INPERR        ; REDO INPUT
1320:	059A  CDAD06  	                CALL    PRTLN           ; ELSE PRINT THE LINE
1321:	059D  1B      	                DEC     DE              ; UPTO WHERE THE 0 IS
1322:	059E  F1      	                POP     AF              ; RESTORE THE CHARACTER
1323:	059F  12      	                LD      (DE),A
1324:	05A0  3E3F    	                LD      A,'?'           ; PRINT A "?"
1325:	05A2  D7      	                RST     ROUTC
1326:	05A3  97      	                SUB     A               ; AND THE REST OF THE
1327:	05A4  CD1406  	                CALL    PRTSTG          ; LINE
1328:	05A7  C32C01  	                JP      WSTART          ; THEN RESTART
1329:			;
1330:	05AA  D5      	QSORRY:         PUSH    DE              ; *** QSORRY ***
1331:	05AB  11EF00  	ASORRY:         LD      DE,SORRY        ; *** ASORRY ***
1332:	05AE  18D1    	                JR      ERROR
1333:			
1334:			;
1335:			; *************************************************************
1336:			;
1337:			; *** GETLN *** FNDLN (& FRIENDS) ***
1338:			;
1339:			; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1340:			; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1341:			; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1342:			; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1343:			; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1344:			; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1345:			; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1346:			;
1347:			; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1348:			; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1349:			; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1350:			; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1351:			; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1352:			; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1353:			; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1354:			; LINE, FLAGS ARE C & NZ.
1355:			; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1356:			; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1357:			; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1358:			; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1359:			; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1360:			; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1361:			;
1362:	05B0  D7      	GETLN:          RST     ROUTC           ; *** GETLN ***
1363:	05B1  11800F  	                LD      DE,BUFFER       ; PROMPT AND INIT.
1364:	05B4  CDFB00  	GL1:            CALL    CHKIO           ; CHECK KEYBOARD
1365:	05B7  28FB    	                JR      Z,GL1           ; NO INPUT, WAIT
1366:	05B9  FE08    	                CP      BS              ; BS, DELETE LAST CHARACTER?
1367:	05BB  281A    	                JR      Z,GL3           ; YES
1368:	05BD  FE7F    	                CP      DEL             ; DEL, DELETE LAST CHARACTER?
1369:	05BF  2816    	                JR      Z,GL3           ; YES
1370:	05C1  D7      	                RST     ROUTC           ; INPUT, ECHO BACK
1371:	05C2  FE0A    	                CP      LF              ; IGNORE LF
1372:	05C4  28EE    	                JR      Z,GL1
1373:	05C6  B7      	                OR      A               ; IGNORE NULL
1374:	05C7  28EB    	                JR      Z,GL1
1375:	05C9  FE18    	                CP      CAN             ; ^X, DELETE THE WHOLE LINE?
1376:	05CB  281B    	                JR      Z,GL4           ; YES
1377:	05CD  12      	                LD      (DE),A          ; ELSE SAVE INPUT
1378:	05CE  13      	                INC     DE              ; AND BUMP POINTER
1379:	05CF  FE0D    	                CP      CR              ; WAS IT CR?
1380:	05D1  C8      	                RET     Z               ; YES, END OF LINE
1381:	05D2  7B      	                LD      A,E             ; ELSE MORE FREE ROOM?
1382:	05D3  FEFF    	                CP      BUFEND & 0FFH
1383:	05D5  20DD    	                JR      NZ,GL1          ; YES, GET NEXT INPUT
1384:	05D7  7B      	GL3:            LD      A,E             ; DELETE LAST CHARACTER
1385:	05D8  FE80    	                CP      BUFFER & 0FFH   ; BUT DO WE HAVE ANY?
1386:	05DA  280C    	                JR      Z,GL4           ; NO, REDO WHOLE LINE
1387:	05DC  1B      	                DEC     DE              ; YES, BACKUP POINTER
1388:	05DD  3E08    	                LD      A,BS            ; AND ECHO A BACKSPACE
1389:	05DF  D7      	                RST     ROUTC
1390:	05E0  3E20    	                LD      A,' '           ; AND ECHO A BLANK
1391:	05E2  D7      	                RST     ROUTC
1392:	05E3  3E08    	                LD      A,BS            ; AND ECHO A BACKSPACE
1393:	05E5  D7      	                RST     ROUTC
1394:	05E6  18CC    	                JR      GL1             ; GO GET NEXT INPUT
1395:	05E8  CD0E00  	GL4:            CALL    CRLF            ; REDO ENTIRE LINE
1396:	05EB  3E5E    	                LD      A,'^'           ; CR, LF AND UP-ARROW
1397:	05ED  18C1    	                JR      GETLN
1398:			;
1399:	05EF  7C      	FNDLN:          LD      A,H             ; *** FNDLN ***
1400:	05F0  B7      	                OR      A               ; CHECK SIGN OF HL
1401:	05F1  FAD000  	                JP      M,QHOW          ; IT CANNOT BE -
1402:	05F4  110009  	                LD      DE,TXTBGN       ; INIT TEXT POINTER
1403:			;
1404:	05F7          	FNDLP:                                  ; *** FDLNP ***
1405:	05F7  E5      	FL1:            PUSH    HL              ; SAVE LINE #
1406:	05F8  2A3608  	                LD      HL,(TXTUNF)     ; CHECK IF WE PASSED END
1407:	05FB  2B      	                DEC     HL
1408:	05FC  E7      	                RST     RCOMP
1409:	05FD  E1      	                POP     HL              ; GET LINE # BACK
1410:	05FE  D8      	                RET     C               ; C,NZ PASSED END
1411:	05FF  1A      	                LD      A,(DE)          ; WE DID NOT, GET BYTE 1
1412:	0600  95      	                SUB     L               ; IS THIS THE LINE?
1413:	0601  47      	                LD      B,A             ; COMPARE LOW ORDER
1414:	0602  13      	                INC     DE
1415:	0603  1A      	                LD      A,(DE)          ; GET BYTE 2
1416:	0604  9C      	                SBC     A,H             ; COMPARE HIGH ORDER
1417:	0605  3804    	                JR      C,FL2           ; NO, NOT THERE YET
1418:	0607  1B      	                DEC     DE              ; ELSE WE EITHER FOUND
1419:	0608  B0      	                OR      B               ; IT, OR IT IS NOT THERE
1420:	0609  C9      	                RET                     ; NC,Z:FOUND, NC,NZ:NO
1421:			;
1422:	060A          	FNDNXT:                                 ; *** FNDNXT ***
1423:	060A  13      	                INC     DE              ; FIND NEXT LINE
1424:	060B  13      	FL2:            INC     DE              ; JUST PASSED BYTE 1 & 2
1425:			;
1426:	060C  1A      	FNDSKP:         LD      A,(DE)          ; *** FNDSKP ***
1427:	060D  FE0D    	                CP      CR              ; TRY TO FIND CR
1428:	060F  20FA    	                JR      NZ,FL2          ; KEEP LOOKING
1429:	0611  13      	                INC     DE              ; FOUND CR, SKIP OVER
1430:	0612  18E3    	                JR      FL1             ; CHECK IF END OF TEXT
1431:			;
1432:			; *************************************************************
1433:			;
1434:			; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1435:			;
1436:			; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1437:			; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1438:			; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1439:			; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1440:			;
1441:			; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1442:			; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1443:			; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1444:			; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1445:			; HACK AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER
1446:			;      IS SKIPPED OVER (SHALL BE A "JP" INSTRUCTION).
1447:			;
1448:			; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1449:			; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1450:			; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1451:			; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1452:			; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1453:			;
1454:			; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1455:			;
1456:	0614  47      	PRTSTG:         LD      B,A             ; *** PRTSTG ***
1457:	0615  1A      	PS1:            LD      A,(DE)          ; GET A CHARACTER
1458:	0616  13      	                INC     DE              ; BUMP POINTER
1459:	0617  B8      	                CP      B               ; SAME AS OLD A?
1460:	0618  C8      	                RET     Z               ; YES, RETURN
1461:	0619  D7      	                RST     ROUTC           ; ELSE PRINT IT
1462:	061A  FE0D    	                CP      CR              ; WAS IT A CR?
1463:	061C  20F7    	                JR      NZ,PS1          ; NO, NEXT
1464:	061E  C9      	                RET                     ; YES, RETURN
1465:			;
1466:	061F  CF220F  	QTSTG:          TSTC    $22,QT3         ; *** QTSTG ***
1467:	0622  3E22    	                LD      A,22H           ; IT IS A '"'
1468:	0624  CD1406  	QT1:            CALL    PRTSTG          ; PRINT UNTIL ANOTHER
1469:	0627  FE0D    	QT1A:           CP      CR              ; WAS LAST ONE A CR?
1470:	0629  E1      	                POP     HL              ; HACK RETURN ADDRESS
1471:	062A  CAB601  	                JP      Z,RUNNXL        ; WAS CR, RUN NEXT LINE
1472:	062D  23      	QT2:            INC     HL              ; !! SKIP 3 BYTES ON RETURN
1473:	062E  23      	                INC     HL              ; !! -> AFTER "CALL QTSTG"
1474:	062F  23      	                INC     HL              ; !!    MUST BE "JP .."
1475:	0630  E9      	                JP      (HL)            ; !! RETURN AFTER THIS "JP"
1476:			;
1477:	0631  CF2704  	QT3:            TSTC    $27,QT4         ; IS IT A "'"?
1478:	0634  3E27    	                LD      A,27H           ; YES, DO THE SAME
1479:	0636  18EC    	                JR      QT1             ; AS IN '"'
1480:			;
1481:	0638  CF5F06  	QT4:            TSTC    $5F,QT5         ; IS IT UNDERLINE?
1482:	063B  3E8D    	                LD      A,08DH          ; YES, CR WITHOUT LF
1483:	063D  D7      	                RST     ROUTC
1484:	063E  E1      	                POP     HL              ; HACK RETURN ADDRESS
1485:	063F  18EC    	                JR      QT2
1486:			;
1487:	0641  CF5E08  	QT5:            TSTC    5EH,QT6         ; RST 1, is it '^'?
1488:	0644  1A      	                LD      A,(DE)          ; CHR
1489:	0645  EE40    	                XOR     40H             ; CONVERT TO CTRL
1490:	0647  D7      	                RST     ROUTC
1491:	0648  1A      	                LD      A,(DE)          ; RESTORE CHR
1492:	0649  13      	                INC     DE
1493:	064A  18DB    	                JR      QT1A
1494:	064C  C9      	QT6:            RET                     ; NONE OF ABOVE
1495:			
1496:	064D          	PRTNUM:                                 ; *** PRINT NUMBER IN HL ***
1497:	064D  3A3508  	                LD      A,(PNBASE)      ; GET NUMBER BASE
1498:	0650  B7      	                OR      A
1499:	0651  2809    	                JR      Z,PN0           ; 0: DEFAULT DEC
1500:	0653  FE10    	                CP      16              ; HEX NUMBER?
1501:	0655  2010    	                JR      NZ,PN1          ; NO
1502:	0657  0624    	                LD      B,'$'           ; PRINT LEADING '$'
1503:	0659  0D      	                DEC     C               ; '$' TAKES SPACE
1504:	065A  180B    	                JR      PN1             ; HEX IS UNSIGNED
1505:	065C  0600    	PN0:            LD      B,0             ; NO PREFIX YET
1506:	065E  CD3B05  	                CALL    CHKSGN          ; CHECK SIGN
1507:	0661  F26706  	                JP      P,PN1           ; NO SIGN
1508:	0664  062D    	                LD      B,'-'           ; B=SIGN
1509:	0666  0D      	                DEC     C               ; '-' TAKES SPACE
1510:	0667  D5      	PN1:            PUSH    DE
1511:	0668  3A3508  	                LD      A,(PNBASE)
1512:	066B  B7      	                OR      A               ; DEFAULT DECIMAL?
1513:	066C  2002    	                JR      NZ,PN1A
1514:	066E  3E0A    	                LD      A,10
1515:	0670  5F      	PN1A:           LD      E,A
1516:	0671  AF      	                XOR     A
1517:	0672  57      	                LD      D,A
1518:	0673  D5      	                PUSH    DE              ; SAVE AS A FLAG
1519:	0674  0D      	                DEC     C               ; C=SPACES
1520:	0675  C5      	                PUSH    BC              ; SAVE SIGN & SPACE
1521:	0676  CD2205  	PN2:            CALL    DIVIDE          ; DIVIDE HL BY NUMBER BASE
1522:	0679  78      	                LD      A,B             ; RESULT 0?
1523:	067A  B1      	                OR      C
1524:	067B  2807    	                JR      Z,PN3           ; YES, WE GOT ALL
1525:	067D  E3      	                EX      (SP),HL         ; NO, SAVE REMAINDER
1526:	067E  2D      	                DEC     L               ; AND COUNT SPACE
1527:	067F  E5      	                PUSH    HL              ; HL IS OLD BC
1528:	0680  60      	                LD      H,B             ; MOVE RESULT TO BC
1529:	0681  69      	                LD      L,C
1530:	0682  18F2    	                JR      PN2             ; AND DIVIDE AGAIN
1531:			;
1532:	0684  C1      	PN3:            POP     BC              ; WE GOT ALL DIGITS IN
1533:	0685  0D      	PN4:            DEC     C               ; THE STACK
1534:	0686  79      	                LD      A,C             ; LOOK AT SPACE COUNT
1535:	0687  B7      	                OR      A
1536:	0688  FA9006  	                JP      M,PN5           ; NO LEADING BLANKS
1537:	068B  3E20    	                LD      A,' '           ; LEADING BLANKS
1538:	068D  D7      	                RST     ROUTC
1539:	068E  18F5    	                JR      PN4             ; MORE?
1540:	0690  78      	PN5:            LD      A,B             ; PRINT SIGN OR '$'
1541:	0691  B7      	                OR      A
1542:	0692  C41000  	                CALL    NZ,ROUTC
1543:	0695  5D      	                LD      E,L             ; LAST REMAINDER IN E
1544:	0696  3A3508  	PN6:            LD      A,(PNBASE)      ; GET NUMBER BASE
1545:	0699  B7      	                OR      A               ; DEFAULT DECIMAL?
1546:	069A  2002    	                JR      NZ,PN6A
1547:	069C  3E0A    	                LD      A,10
1548:	069E  BB      	PN6A:           CP      E               ; IT IS FLAG FOR NO MORE
1549:	069F  7B      	                LD      A,E             ; CHECK DIGIT IN E
1550:	06A0  D1      	                POP     DE
1551:	06A1  C8      	                RET     Z               ; IF SO, RETURN
1552:	06A2  FE0A    	                CP      10              ; 0-9? < A hex?
1553:	06A4  3802    	                JR      C,PN7           ; Skip Add 7
1554:	06A6  C607    	                ADD     A,'A'-'0'-10    ; Bring it up to ASCII A-F
1555:	06A8  C630    	PN7:            ADD     A,'0'           ; ELSE CONVERT TO ASCII
1556:	06AA  D7      	                RST     ROUTC           ; AND PRINT THE DIGIT
1557:	06AB  18E9    	                JR      PN6             ; GO BACK FOR MORE
1558:			
1559:	06AD  AF      	PRTLN:          XOR     A               ; 0 -> DEFAULT BASE 10 SIGNED
1560:	06AE  323508  	                LD      (PNBASE),A      ; FOR PRTNUM
1561:	06B1  1A      	                LD      A,(DE)
1562:	06B2  6F      	                LD      L,A             ; LOW ORDER LINE #
1563:	06B3  13      	                INC     DE
1564:	06B4  1A      	                LD      A,(DE)          ; HIGH ORDER
1565:	06B5  67      	                LD      H,A
1566:	06B6  13      	                INC     DE
1567:	06B7  0E04    	                LD      C,4             ; PRINT 4 DIGIT LINE #
1568:	06B9  CD4D06  	                CALL    PRTNUM
1569:	06BC  3E20    	                LD      A,' '           ; FOLLOWED BY A BLANK
1570:	06BE  D7      	                RST     ROUTC
1571:	06BF  97      	                SUB     A               ; AND THEN THE NEXT
1572:	06C0  CD1406  	                CALL    PRTSTG
1573:	06C3  C9      	                RET
1574:			;
1575:			; *************************************************************
1576:			;
1577:			; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1578:			;
1579:			; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1580:			; DE = HL
1581:			;
1582:			; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1583:			; UNTIL DE = BC
1584:			;
1585:			; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1586:			; STACK
1587:			;
1588:			; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1589:			; STACK
1590:			;
1591:	06C4  E7      	MVUP:           RST     RCOMP           ; *** MVUP ***
1592:	06C5  C8      	                RET     Z               ; DE = HL, RETURN
1593:	06C6  1A      	                LD      A,(DE)          ; GET ONE BYTE
1594:	06C7  02      	                LD      (BC),A          ; MOVE IT
1595:	06C8  13      	                INC     DE              ; INCREASE BOTH POINTERS
1596:	06C9  03      	                INC     BC
1597:	06CA  18F8    	                JR      MVUP            ; UNTIL DONE
1598:			;
1599:	06CC  78      	MVDOWN:         LD      A,B             ; *** MVDOWN ***
1600:	06CD  92      	                SUB     D               ; TEST IF DE = BC
1601:	06CE  2003    	                JR      NZ,MD1          ; NO, GO MOVE
1602:	06D0  79      	                LD      A,C             ; MAYBE, OTHER BYTE?
1603:	06D1  93      	                SUB     E
1604:	06D2  C8      	                RET     Z               ; YES, RETURN
1605:	06D3  1B      	MD1:            DEC     DE              ; ELSE MOVE A BYTE
1606:	06D4  2B      	                DEC     HL              ; BUT FIRST DECREASE
1607:	06D5  1A      	                LD      A,(DE)          ; BOTH POINTERS AND
1608:	06D6  77      	                LD      (HL),A          ; THEN DO IT
1609:	06D7  18F3    	                JR      MVDOWN          ; LOOP BACK
1610:			;
1611:	06D9  C1      	POPA:           POP     BC              ; BC = RETURN ADDR.
1612:	06DA  E1      	                POP     HL              ; RESTORE LOPVAR, BUT
1613:	06DB  224008  	                LD      (LOPVAR),HL     ; =0 MEANS NO MORE
1614:	06DE  7C      	                LD      A,H
1615:	06DF  B5      	                OR      L
1616:	06E0  2810    	                JR      Z,PP1           ; YEP, GO RETURN
1617:	06E2  E1      	                POP     HL              ; NOP, RESTORE OTHERS
1618:	06E3  224208  	                LD      (LOPINC),HL
1619:	06E6  E1      	                POP     HL
1620:	06E7  224408  	                LD      (LOPLMT),HL
1621:	06EA  E1      	                POP     HL
1622:	06EB  224608  	                LD      (LOPLN),HL
1623:	06EE  E1      	                POP     HL
1624:	06EF  224808  	                LD      (LOPPT),HL
1625:	06F2  C5      	PP1:            PUSH    BC              ; BC = RETURN ADDR.
1626:	06F3  C9      	                RET
1627:			;
1628:	06F4  214C08  	PUSHA:          LD      HL,STKLMT       ; *** PUSHA ***
1629:	06F7  CD3E05  	                CALL    CHGSGN
1630:	06FA  C1      	                POP     BC              ; BC=RETURN ADDRESS
1631:	06FB  39      	                ADD     HL,SP           ; IS STACK NEAR THE TOP?
1632:	06FC  D2AA05  	                JP      NC,QSORRY       ; YES, SORRY FOR THAT
1633:	06FF  2A4008  	                LD      HL,(LOPVAR)     ; ELSE SAVE LOOP VAR'S
1634:	0702  7C      	                LD      A,H             ; BUT IF LOPVAR IS 0
1635:	0703  B5      	                OR      L               ; THAT WILL BE ALL
1636:	0704  2813    	                JR      Z,PU1
1637:	0706  2A4808  	                LD      HL,(LOPPT)      ; ELSE, MORE TO SAVE
1638:	0709  E5      	                PUSH    HL
1639:	070A  2A4608  	                LD      HL,(LOPLN)
1640:	070D  E5      	                PUSH    HL
1641:	070E  2A4408  	                LD      HL,(LOPLMT)
1642:	0711  E5      	                PUSH    HL
1643:	0712  2A4208  	                LD      HL,(LOPINC)
1644:	0715  E5      	                PUSH    HL
1645:	0716  2A4008  	                LD      HL,(LOPVAR)
1646:	0719  E5      	PU1:            PUSH    HL
1647:	071A  C5      	                PUSH    BC              ; BC = RETURN ADDR.
1648:	071B  C9      	                RET
1649:			
1650:			; *************************************************************
1651:			;
1652:			; *** DIRECT *** EXEC *** TABLES ***
1653:			;
1654:			; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1655:			; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1656:			; OF CODE ACCORDING TO THE TABLE.
1657:			;
1658:			; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1659:			; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1660:			; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1661:			; ALL DIRECT AND STATEMENT COMMANDS.
1662:			;
1663:			; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1664:			; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1665:			; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1666:			;
1667:			
1668:	071C  215007  	DIRECT:         LD      HL,TAB1-1       ; *** DIRECT ***
1669:			;
1670:	071F          	EXEC:                                   ; *** EXEC ***
1671:	071F  EF      	EX0:            RST     RIGNBLK         ; IGNORE LEADING BLANKS
1672:	0720  D5      	                PUSH    DE              ; SAVE POINTER
1673:	0721  1A      	EX1:            LD      A,(DE)          ; IF FOUND '.' IN STRING
1674:	0722  13      	                INC     DE              ; BEFORE ANY MISMATCH
1675:	0723  FE2E    	                CP      2EH             ; WE DECLARE A MATCH
1676:	0725  281C    	                JR      Z,EX3
1677:	0727  FE61    	                CP      'a'             ; < 'a' ?
1678:	0729  3806    	                JR      C,EXN           ; NO ALPHA CHAR
1679:	072B  FE7B    	                CP      'z'+1           ; > 'z'
1680:	072D  3002    	                JR      NC,EXN          ; NO ALPHA CHAR
1681:	072F  E65F    	                AND     5FH             ; MASK LOWER CASE TO UPPER CASE
1682:	0731          	EXN:
1683:	0731  23      	                INC     HL              ; HL->TABLE
1684:	0732  BE      	                CP      (HL)            ; IF MATCH, TEST NEXT
1685:	0733  28EC    	                JR      Z,EX1
1686:	0735  3E7F    	                LD      A,07FH          ; ELSE SEE IF BIT 7
1687:	0737  1B      	                DEC     DE              ; OF TABLE IS SET, WHICH
1688:	0738  BE      	                CP      (HL)            ; IS THE JUMP ADDR. (HI)
1689:	0739  380E    	                JR      C,EX5           ; C:YES, MATCHED
1690:	073B  23      	EX2:            INC     HL              ; NC:NO, FIND JUMP ADDR.
1691:	073C  BE      	                CP      (HL)
1692:	073D  30FC    	                JR      NC,EX2
1693:	073F  23      	                INC     HL              ; BUMP TO NEXT TAB. ITEM
1694:	0740  D1      	                POP     DE              ; RESTORE STRING POINTER
1695:	0741  18DC    	                JR      EX0             ; TEST AGAINST NEXT ITEM
1696:	0743  3E7F    	EX3:            LD      A,07FH          ; PARTIAL MATCH, FIND
1697:	0745  23      	EX4:            INC     HL              ; JUMP ADDR., WHICH IS
1698:	0746  BE      	                CP      (HL)            ; FLAGGED BY BIT 7
1699:	0747  30FC    	                JR      NC,EX4
1700:	0749  7E      	EX5:            LD      A,(HL)          ; LOAD HL WITH THE JUMP
1701:	074A  23      	                INC     HL              ; ADDRESS FROM THE TABLE
1702:	074B  6E      	                LD      L,(HL)
1703:			                                        ; ADDRESSES ARE BIG-ENDIAN
1704:			                                        ; WITH MSB SET to 1
1705:	0001          	                .IF     $ < 8000H
1706:	074C  E67F    	                AND     7FH             ; MASK OFF HIGH ADDRESS BIT
1707:			                .ENDIF
1708:	074E  67      	                LD      H,A
1709:	074F  F1      	                POP     AF              ; CLEAN UP THE GARBAGE
1710:	0750  E9      	                JP      (HL)            ; AND WE GO DO IT
1711:			;
1712:			
1713:			; THE TABLES CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1714:			; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1715:			; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1716:			; BYTE SET TO 1.
1717:			; This is done by the macro 'DWA'.
1718:			; If the program is executed from an address < 0x8000
1719:			; take care to mask this bit in program part 'EXEC'.
1720:			;
1721:			; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.
1722:			; IF THE STRING DOES NOT MATCH ANY OF THE OTHER ITEMS,
1723:			; IT WILL MATCH THIS NULL ITEM AS DEFAULT.
1724:			
1725:			;
1726:	0751          	TAB1:                                   ; DIRECT ONLY COMMANDS
1727:	0751  4C495354	                .DB     "LIST"
1728:	0755  81DD    	                DWA     LIST_
1729:	0757  52554E  	                .DB     "RUN"
1730:	075A  81B0    	                DWA     RUN
1731:	075C  4E4557  	                .DB     "NEW"
1732:	075F  81A1    	                DWA     NEW
1733:			;
1734:	0761          	TAB2:                                   ; DIRECT OR PROGRAM STATEMENT
1735:	0761  4E455854	                .DB     "NEXT"
1736:	0765  82D9    	                DWA     NEXT
1737:	0767  4C4554  	                .DB     "LET"           ; can be omitted
1738:	076A  839B    	                DWA     LET
1739:	076C  4946    	                .DB     "IF"
1740:	076E  8333    	                DWA     IF_
1741:	0770  474F544F	                .DB     "GOTO"
1742:	0774  81CF    	                DWA     GOTO
1743:	0776  474F5355	                .DB     "GOSUB"
	      42
1744:	077B  8245    	                DWA     GOSUB
1745:	077D  52455455	                .DB     "RETURN"
	      524E
1746:	0783  8265    	                DWA     RETURN
1747:	0785  52454D  	                .DB     "REM"
1748:	0788  832F    	                DWA     REM
1749:	078A  464F52  	                .DB     "FOR"
1750:	078D  827E    	                DWA     FOR
1751:	078F  494E5055	                .DB     "INPUT"         ; wait for KBD input
	      54
1752:	0794  834C    	                DWA     INPUT
1753:	0796  5052494E	                .DB     "PRINT"
	      54
1754:	079B  81F4    	                DWA     PRINT
1755:	079D  3F      	                .DB     "?"             ; short for PRINT
1756:	079E  81F4    	                DWA     PRINT
1757:	07A0  505554  	                .DB     "PUT"           ; PUT ADDR, VAL, VAL,...
1758:	07A3  850D    	                DWA     PUT
1759:	07A5  53544F50	                .DB     "STOP"          ; warm start
1760:	07A9  81AA    	                DWA     STOP
1761:	07AB  48414C54	                .DB     "HALT"          ; HALT CPU (return to analyser)
1762:	07AF  8521    	                DWA     HALT_
1763:	07B1  8396    	                DWA     DEFLT           ; END OF LIST
1764:			;
1765:	07B3          	TAB4:                                   ; FUNCTIONS AND CONSTANTS
1766:	07B3  524E44  	                .DB     "RND"           ; funct RND(RANGE)
1767:	07B6  84B8    	                DWA     RND
1768:	07B8  414253  	                .DB     "ABS"           ; funct ABS(VALUE)
1769:	07BB  84E6    	                DWA     ABS
1770:	07BD  474554  	                .DB     "GET"           ; funct GET(ADR) get byte from memory
1771:	07C0  84FC    	                DWA     GET
1772:	07C2  555352  	                .DB     "USR"           ; funct USR(PARA) call usr funct at TOP
1773:	07C5  8503    	                DWA     USR             ; and return a result in HL
1774:	07C7  53495A45	                .DB     "SIZE"          ; const SIZE - no parantesis, get free mem
1775:	07CB  84EF    	                DWA     SIZE
1776:	07CD  544F50  	                .DB     "TOP"           ; const TOP - no par., get TEXT TOP = USRSPC
1777:	07D0  8509    	                DWA     TOP
1778:	07D2  849F    	                DWA     XP40            ; END OF LIST
1779:			;
1780:	07D4          	TAB5:                                   ; "TO" IN "FOR"
1781:	07D4  544F    	                .DB     "TO"
1782:	07D6  828E    	                DWA     FR1
1783:	07D8  857D    	                DWA     QWHAT           ; END OF LIST
1784:			;
1785:	07DA          	TAB6:                                   ; "STEP" IN "FOR"
1786:	07DA  53544550	                .DB     "STEP"
1787:	07DE  8298    	                DWA     FR2
1788:	07E0  829B    	                DWA     FR3             ; END OF LIST
1789:			;
1790:	07E2          	TAB8:                                   ; RELATION OPERATORS
1791:	07E2  3E3D    	                .DB     ">="
1792:	07E4  83AA    	                DWA     XP11
1793:	07E6  23      	                .DB     "#"
1794:	07E7  83B0    	                DWA     XP12
1795:	07E9  3C3E    	                .DB     "<>"
1796:	07EB  83B0    	                DWA     XP12
1797:	07ED  3E      	                .DB     ">"
1798:	07EE  83B6    	                DWA     XP13
1799:	07F0  3D      	                .DB     "="
1800:	07F1  83C5    	                DWA     XP15
1801:	07F3  3C3D    	                .DB     "<="
1802:	07F5  83BD    	                DWA     XP14
1803:	07F7  3C      	                .DB     "<"
1804:	07F8  83CB    	                DWA     XP16
1805:	07FA  83D1    	                DWA     XP17            ; END OF REL OPERATOR LIST
1806:			
1807:			;
1808:	07FC          	LSTROM:                                 ; ALL ABOVE CAN BE ROM
1809:			
1810:			;
1811:			; CHECK THAT THE PROGRAM DOES NOT EXCEED ROM SIZE
1812:			;
1813:	0001          	                .ASSERT $ <= RAMBGN
1814:			
1815:			
1816:	07FC ..07FF 00	                .DC     RAMBGN-$,$00    ; fill with $00 until RAMBGN
1817:			;
1818:			;
1819:			; *************************************************************
1820:			
1821:	0800          	                .ORG    RAMBGN          ; HERE DOWN MUST BE RAM
1822:			;
1823:			; *************************************************************
1824:			;
1825:			
1826:	0800          	VARBGN:         .DS     2*26            ; VARIABLES 'A'..'Z'
1827:	0834          	OCSW:           .DS     1               ; SWITCH FOR OUTPUT
1828:	0835          	PNBASE:         .DS     1               ; BASE FOR PRTNUM
1829:	0836          	TXTUNF:         .DS     2               ; ->UNFILLED TEXT AREA
1830:	0838          	CURRNT:         .DS     2               ; POINTS TO CURRENT LINE
1831:	083A          	STKGOS:         .DS     2               ; SAVES SP IN 'GOSUB'
1832:	083C          	VARNXT:         .DS     2               ; TEMP STORAGE
1833:	083E          	STKINP:         .DS     2               ; SAVES SP IN 'INPUT'
1834:	0840          	LOPVAR:         .DS     2               ; 'FOR' LOOP SAVE AREA
1835:	0842          	LOPINC:         .DS     2               ; INCREMENT
1836:	0844          	LOPLMT:         .DS     2               ; LIMIT
1837:	0846          	LOPLN:          .DS     2               ; LINE NUMBER
1838:	0848          	LOPPT:          .DS     2               ; TEXT POINTER
1839:	084A          	RANPNT:         .DS     2               ; RANDOM NUMBER POINTER
1840:	084C          	STKLMT:         .EQU    $               ; LIMIT FOR STACK
1841:			
1842:	0900          	                .ORG    RAMBGN+$100
1843:			;
1844:	0900          	STACK:                                  ; STACK STARTS HERE AND GROWS DOWN
1845:			
1846:	0900          	TXTBGN:                                 ; TEXT STARTS HERE AND GROWS UP
1847:			;
1848:			
1849:	0F00          	                .ORG    RAMBGN+RAMSZE-$100
1850:	0F00          	TXTEND:                                 ; TEXT SAVE AREA ENDS
1851:			;
1852:			                                        ; VARIABLES @(0), @(1), @(2)
1853:			                                        ; ... stored top-down
1854:			                                        ; i.e. &@(i) = TXTEND-2-2*i
1855:			;
1856:	0F00          	USRSPC:         .DS     128
1857:			
1858:	0F80          	BUFFER:         .DS     127             ; INPUT BUFFER
1859:	0FFF          	BUFEND:         .DS     1               ; BUFFER END
1860:			
1861:	1000          	                .END



Statistics:

     4	passes
     0	jr promotions
   225	symbols
  2048	bytes

    63	macro calls
   203	macro bytes
     0	invented symbols



Symbol Table:

ABS              4E6      1254
AHOW            D1        209
ASORRY           5AB      1451
AWHAT            57E      1406
BS             =08        8
BUFEND           FFF      4095
BUFFER           F80      3968
CAN            =18        24
CHGSGN           53E      1342
CHKIO           FB        251
CHKSGN           53B      1339
CI0              104      260
CK1              559      1369
CKHLDE           553      1363
CR             =0D        13
CRLF            0E        14
CSTART          00        0
CURRNT           838      2104
DEFLT            396      918
DEL            =7F        127
DIRECT           71C      1820
DIVIDE           522      1314
DV1              52D      1325
DV2              52F      1327
ENDCHK           579      1401
ERROR            581      1409
EX0              71F      1823
EX1              721      1825
EX2              73B      1851
EX3              743      1859
EX4              745      1861
EX5              749      1865
EXEC             71F      1823
EXN              731      1841
EXPR1            3A4      932
EXPR2            3E8      1000
EXPR3            42C      1068
EXPR4            499      1177
FI1              571      1393
FI2              578      1400
FIN              56A      1386
FL1              5F7      1527
FL2              60B      1547
FNDLN            5EF      1519
FNDLP            5F7      1527
FNDNXT           60A      1546
FNDSKP           60C      1548
FOR              27E      638
FR1              28E      654
FR2              298      664
FR3              29B      667
FR4              29E      670
FR5              2A1      673
FR7              2B6      694
FR8              2D4      724
GET              4FC      1276
GETLN            5B0      1456
GL1              5B4      1460
GL3              5D7      1495
GL4              5E8      1512
GOSUB            245      581
GOTO             1CF      463
HALT_            521      1313
HOW             E1        225
IF_              333      819
INIT             109      265
INPERR           342      834
INPUT            34C      844
IODATA         =01        1
IOSTAT         =02        2
IO_RX_BIT      =01        1
IP1              34C      844
IP2              358      856
IP3              368      872
IP4              38F      911
IP5              395      917
LET              39B      923
LF             =0A        10
LIST_            1DD      477
LOPINC           842      2114
LOPLMT           844      2116
LOPLN            846      2118
LOPPT            848      2120
LOPVAR           840      2112
LS1              1E6      486
LSTROM           7FC      2044
LT1              3A3      931
MD1              6D3      1747
MVDOWN           6CC      1740
MVUP             6C4      1732
NEW              1A1      417
NEXT             2D9      729
NX0              2E0      736
NX1              318      792
NX2              32B      811
NX3              2F6      758
NX4              308      776
NX5              329      809
OC1             F5        245
OCSW             834      2100
OK              E6        230
PARN             4AD      1197
PN0              65C      1628
PN1              667      1639
PN1A             670      1648
PN2              676      1654
PN3              684      1668
PN4              685      1669
PN5              690      1680
PN6              696      1686
PN6A             69E      1694
PN7              6A8      1704
PNBASE           835      2101
POPA             6D9      1753
PP1              6F2      1778
PR0              20C      524
PR1              227      551
PR2              203      515
PR3              22D      557
PR5              213      531
PR6              235      565
PR8              23D      573
PRINT            1F4      500
PRTLN            6AD      1709
PRTNUM           64D      1613
PRTSTG           614      1556
PS1              615      1557
PT0              512      1298
PT1              51D      1309
PT2              51E      1310
PU1              719      1817
PUSHA            6F4      1780
PUT              50D      1293
QHOW            D0        208
QSORRY           5AA      1450
QT1              624      1572
QT1A             627      1575
QT2              62D      1581
QT3              631      1585
QT4              638      1592
QT5              641      1601
QT6              64C      1612
QTSTG            61F      1567
QWHAT            57D      1405
RA1              4D2      1234
RAMBGN         = 800      2048
RAMSZE         = 800      2048
RANPNT           84A      2122
RCOMP           20        32
REM              32F      815
RETURN           265      613
REXPR           18        24
RFINISH         30        48
RIGNBLK         28        40
RND              4B8      1208
ROMBGN         =00        0
ROUTC           10        16
RTSTC           08        8
RTSTV           38        56
RUN              1B0      432
RUNNXL           1B6      438
RUNSML           1C6      454
RUNTSL           1BF      447
SETVAL           55B      1371
SIZE             4EF      1263
SORRY           EF        239
ST2              13F      319
ST3              148      328
ST4              17C      380
STACK            900      2304
STKGOS           83A      2106
STKINP           83E      2110
STKLMT         = 84C      2124
STOP             1AA      426
SUBDE            537      1335
TAB1             751      1873
TAB2             761      1889
TAB4             7B3      1971
TAB5             7D4      2004
TAB6             7DA      2010
TAB8             7E2      2018
TC1             70        112
TC2             7A        122
TIBAS           D7        215
TN1             87        135
TOP              509      1289
TSTNUM          7E        126
TV1             5A        90
TV2             60        96
TX1             A9        169
TX2             BC        188
TXTBGN           900      2304
TXTEND           F00      3840
TXTUNF           836      2102
USR              503      1283
USRSPC           F00      3840
VARBGN           800      2048
VARNXT           83C      2108
WHAT            E9        233
WSTART           12C      300
XP11             3AA      938
XP12             3B0      944
XP13             3B6      950
XP14             3BD      957
XP15             3C5      965
XP16             3CB      971
XP17             3D1      977
XP18             3D3      979
XP21             3F0      1008
XP22             3F3      1011
XP23             3F6      1014
XP24             3FD      1021
XP25             40E      1038
XP26             411      1041
XP27             41A      1050
XP31             42F      1071
XP32             44B      1099
XP33             452      1106
XP34             45B      1115
XP35             47A      1146
XP36             487      1159
XP40             49F      1183
XP41             4A7      1191
XP42             4B4      1204
XP43             4B5      1205
