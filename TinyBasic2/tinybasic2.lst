   1:			;Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
   2:			;Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
   3:			;Status bit for read in CHKIO changed to 0x02
   4:			;Status bit for write in OUTC (actually OC3) changed to 0x01
   5:			;Changed UART initialization parameters in INIT
   6:			;Changed ORG statements at end of file to match system with 2K RAM
   7:			;
   8:			;2024-10-11 Ho-Ro:
   9:			;Automatically converted from 8080 syntax to Z80 syntax:
  10:			;https://hc-ddr.hucki.net/wiki/doku.php/cpm/8080_z80
  11:			;Assembler: uz80as for Z80 as well as i8080 (uz80as --target=i8080)
  12:			;Modified for use with Z80 dongle simulator
  13:			;UART data port 1
  14:			;UART status port 2
  15:			;New:
  16:			;Case insensitive input
  17:			;PRINT modifier for hex out: PRINT %16,..
  18:			;Hex numbers: $xxxx
  19:			;2024-10-13 Ho-Ro:
  20:			;build ROM version (2K ROM / 6.5K RAM) and RAM version (2K prog RAM / 2K free RAM)
  21:			;add command "HALT" (halts Z80, returns to dongle analyser program)
  22:			;2024-10-15 Ho-Ro:
  23:			;PRINT modifier %nn switches to unsigned number format, e.g.:
  24:			;PRINT %10,$FFFF -> 65535
  25:			;2024-10-17 Ho-Ro:
  26:			;PUT ADDR, VAL, VAL, VAL,...
  27:			;constants RAM (TXTBGN), TOP (TXTEND) and SIZE (TXTEND-TXTUNF)
  28:			;function USR(para) that calls machine code at TOP (128 bytes free)
  29:			;with parameter in HL, returning the result in HL, default is RET at TOP
  30:			;Changed to the more authentic zmac syntax (https://github.com/gp48k/zmac)
  31:			;
  32:			;*************************************************************
  33:			;
  34:			;                 TINY BASIC FOR INTEL 8080
  35:			;                       VERSION 2.0
  36:			;                     BY LI-CHEN WANG
  37:			;                  MODIFIED AND TRANSLATED
  38:			;                    TO INTEL MNEMONICS
  39:			;                     BY ROGER RAUSKOLB
  40:			;                      10 OCTOBER,1976
  41:			;                        @COPYLEFT
  42:			;                   ALL WRONGS RESERVED
  43:			;
  44:			;*************************************************************
  45:			;
  46:			; *** ZERO PAGE SUBROUTINES ***
  47:			;
  48:			; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
  49:			; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
  50:			; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
  51:			; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
  52:			; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
  53:			; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
  54:			; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
  55:			; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
  56:			;
  57:			
  58:			                .Z80
  59:			
  60:			; Memory map
  61:	0000          	ROMBGN:         .EQU    $0000           ; Execution must start here
  62:	0800          	RAMBGN:         .EQU    $0800           ; 2K ROM
  63:			
  64:	0000          	.IFDEF           MAKE_ROM
  67:			.ELSE
  68:			; 2K CODE IN RAM & 2K DATA IN RAM AS TEST VERSION
  69:	0800          	RAMSZE:         .EQU    $0800
  70:			.ENDIF
  71:			
  72:			; IO map
  73:	0001          	IODATA:         .EQU    1
  74:	0002          	IOSTAT:         .EQU    2
  75:	0001          	IO_RX_BIT:      .EQU    $01
  76:			
  77:			; Control character
  78:	0008          	BS:             .EQU    $08             ; ^H, BACKSPACE
  79:	000D          	CR:             .EQU    $0D             ; ^M, CARRIAGE RETURN
  80:	000A          	LF:             .EQU    $0A             ; ^J, LINE FEED
  81:	0018          	CAN:            .EQU    $18             ; ^X, CANCEL
  82:	007F          	DEL:            .EQU    $7F             ; DELETE
  83:			
  84:			
  85:			; Store a label address as BIG endian with bit A15 set
  86:			
  87:			DWA             MACRO   LABEL
  88:			                .DB     (LABEL >> 8) | $80
  89:			                .DB     LABEL & $FF
  90:			                ENDM
  91:			
  92:			; if CHAR = A THEN JUMP RELATIVE TO LABEL
  93:			
  94:			TSTC            MACRO   CHAR,LABEL
  95:			                RST     RTSTC
  96:			                .DB     CHAR
  97:			                .DB     LABEL-$-1
  98:			                ENDM
  99:			
 100:			
 101:	0000          	                .ORG    ROMBGN
 102:			
 103:	0000  310009  	CSTART:         LD      SP,STACK ;*** COLD START ***
 104:	0003  3E00    	                LD      A,0     ;must be 2 byte
 105:	0005  C30901  	                JP      INIT    ;as delimiter for PRTSTG
 106:			
 107:			                ;*** RST 1 @ $0008 ***
 108:	0008  E3      	RTSTC:          EX      (SP),HL
 109:	0009  EF      	                RST     RIGNBLK ;IGNORE BLANKS AND
 110:	000A  BE      	                CP      (HL)    ;TEST CHARACTER
 111:	000B  C37000  	                JP      TC1     ;REST OF THIS IS AT TC1
 112:			
 113:	000E  3E0D    	CRLF:           LD      A,CR    ;*** CRLF ***
 114:			;
 115:			                ;*** RST 2 @ $0010 ***
 116:	0010  D301    	ROUTC:          OUT     (IODATA),A      ;Out to data port
 117:	0012  FE0D    	                CP      CR      ;WAS IT CR?
 118:	0014  C0      	                RET     NZ      ;NO, FINISHED
 119:	0015  C3F500  	                JP      OC1     ;REST OF THIS IS AT OC1
 120:			
 121:			                ;*** RST 3 @ $0018 ***
 122:	0018  CDE803  	REXPR:          CALL    EXPR2
 123:	001B  E5      	                PUSH    HL      ;EVALUATE AN EXPRESSION
 124:	001C  C3A403  	                JP      EXPR1   ;REST OF IT AT EXPR1
 125:	001F  57      	                .DB     "W"
 126:			
 127:			                ;*** RST 4 @ $0020 ***
 128:	0020  7C      	RCOMP:          LD      A,H
 129:	0021  BA      	                CP      D       ;COMPARE HL WITH DE
 130:	0022  C0      	                RET     NZ      ;RETURN CORRECT C AND
 131:	0023  7D      	                LD      A,L     ;Z FLAGS
 132:	0024  BB      	                CP      E       ;BUT OLD A IS LOST
 133:	0025  C9      	                RET
 134:	0026  414E    	                .DB     "AN"
 135:			
 136:			                ;*** RST 5 @ $0028 ***
 137:	0028  1A      	RIGNBLK:        LD      A,(DE)
 138:	0029  FE20    	                CP      20H     ;IGNORE BLANKS
 139:	002B  C0      	                RET     NZ      ;IN TEXT (WHERE DE->)
 140:	002C  13      	                INC     DE      ;AND RETURN THE FIRST
 141:	002D  C32800  	                JP      RIGNBLK  ;NON-BLANK CHAR. IN A
 142:			
 143:			                ;*** RST 6 @ $0030 ***
 144:	0030  F1      	RFINISH:        POP     AF
 145:	0031  CD4E05  	                CALL    FIN     ;CHECK END OF COMMAND
 146:	0034  C36105  	                JP      QWHAT   ;PRINT "WHAT?" IF WRONG
 147:	0037  47      	                .DB     "G"
 148:			
 149:			                ;*** RST 7 @ $0038 ***
 150:	0038  EF      	RTSTV:          RST     RIGNBLK ;IGNBLK
 151:	0039  D640    	                SUB     '@'     ;TEST VARIABLES
 152:	003B  D8      	                RET     C       ;C: < '@', NOT A VARIABLE
 153:	003C  C25A00  	                JP      NZ,TV1  ;NZ: NOT THE '@' ARRAY
 154:			;
 155:	003F  13      	                INC     DE      ;IT IS THE "@" ARRAY
 156:	0040  CD8904  	                CALL    PARN    ;@ SHOULD BE FOLLOWED
 157:	0043  29      	                ADD     HL,HL   ;BY (EXPR) AS ITS INDEX
 158:	0044  DAD000  	                JP      C,QHOW  ;IS INDEX TOO BIG (>0x7FFF)?
 159:	0047  23      	                INC     HL      ;ADD TWO BYTES
 160:	0048  23      	                INC     HL      ;FOR @(0)
 161:	0049  D5      	                PUSH    DE      ;WILL IT OVERWRITE
 162:	004A  EB      	                EX      DE,HL   ;TEXT?
 163:	004B  CDCB04  	                CALL    SIZE    ;FIND SIZE OF FREE RAM
 164:	004E  E7      	                RST     RCOMP   ;AND CHECK THAT
 165:	004F  DA8F05  	                JP      C,ASORRY  ;IF SO, SAY "SORRY"
 166:	0052  21000F  	                LD      HL,TXTEND ;IF NOT GET ADDRESS
 167:	0055  CD1B05  	                CALL    SUBDE   ;OF @(EXPR) AND PUT IT
 168:	0058  D1      	                POP     DE      ;IN HL (top-down from TXTEND)
 169:	0059  C9      	                RET             ;C FLAG IS CLEARED
 170:			;
 171:			                ; VARIABLES 'A'..'Z'
 172:	005A  FE21    	TV1:            CP      21H     ;>='a'?
 173:	005C  3802    	                JR      C,TV2   ;NO
 174:	005E  D620    	                SUB     20H     ;MAKE UPPER CASE
 175:	0060  FE1B    	TV2:            CP      1BH     ;<='Z'
 176:	0062  3F      	                CCF             ;IF NOT RETURN C FLAG
 177:	0063  D8      	                RET     C
 178:	0064  13      	                INC     DE      ;IT IS 'A'=1 THROUGH 'Z'=26
 179:	0065  21FE07  	                LD      HL,VARBGN-2       ;COMPUTE ADDRESS OF
 180:	0068  07      	                RLCA            ;THAT VARIABLE
 181:	0069  85      	                ADD     A,L     ;AND RETURN IT IN HL
 182:	006A  6F      	                LD      L,A     ;WITH C FLAG CLEARED
 183:	006B  3E00    	                LD      A,0
 184:	006D  8C      	                ADC     A,H
 185:	006E  67      	                LD      H,A
 186:	006F  C9      	                RET
 187:			
 188:			;TSTC:          EX      (SP),HL ;*** TSTC OR RST 1 ***
 189:			;               RST  RIGNBLK    ;THIS IS AT LOC. 8
 190:			;               CMP     (HL)    ;AND THEN JUMP HERE
 191:			;               JP      TC1     ;REST OF THIS IS AT TC1
 192:	0070  23      	TC1:            INC     HL      ;COMPARE THE BYTE THAT
 193:	0071  2807    	                JR      Z,TC2   ;FOLLOWS THE RST INST.
 194:	0073  C5      	                PUSH    BC      ;WITH THE TEXT (DE->)
 195:	0074  4E      	                LD      C,(HL)  ;IF NOT =, ADD THE 2ND
 196:	0075  0600    	                LD      B,0     ;BYTE THAT FOLLOWS THE
 197:	0077  09      	                ADD     HL,BC   ;RST TO THE OLD PC
 198:	0078  C1      	                POP     BC      ;I.E., DO A RELATIVE
 199:	0079  1B      	                DEC     DE      ;JUMP IF NOT =
 200:	007A  13      	TC2:            INC     DE      ;IF =, SKIP THOSE BYTES
 201:	007B  23      	                INC     HL      ;AND CONTINUE
 202:	007C  E3      	                EX      (SP),HL
 203:	007D  C9      	                RET
 204:			
 205:	007E  210000  	TSTNUM:         LD      HL,0    ;*** TSTNUM ***
 206:	0081  44      	                LD      B,H     ;TEST IF THE TEXT IS
 207:	0082  EF      	                RST     RIGNBLK ;A NUMBER
 208:	0083  FE24    	                CP      '$'     ;HEX NUMBER?
 209:	0085  2822    	                JR      Z,TX1   ;YES
 210:	0087  FE30    	TN1:            CP      '0'     ;IF NOT, RETURN 0 IN
 211:	0089  D8      	                RET     C       ;B AND HL
 212:	008A  FE3A    	                CP      '9'+1   ;IF NUMBERS, CONVERT
 213:	008C  D0      	                RET     NC      ;TO BINARY IN HL AND
 214:	008D  3EF0    	                LD      A,0F0H  ;SET B TO # OF DIGITS
 215:	008F  A4      	                AND     H       ;IF H>15, THERE IS NO
 216:	0090  203E    	                JR      NZ,QHOW ;ROOM FOR NEXT DIGIT
 217:	0092  04      	                INC     B       ;B COUNTS # OF DIGITS
 218:	0093  C5      	                PUSH    BC
 219:	0094  44      	                LD      B,H     ;HL=10*HL+(NEW DIGIT)
 220:	0095  4D      	                LD      C,L
 221:	0096  29      	                ADD     HL,HL   ; 2*HL
 222:	0097  29      	                ADD     HL,HL   ; 4*HL
 223:	0098  09      	                ADD     HL,BC   ; 5*HL
 224:	0099  29      	                ADD     HL,HL   ;10*HL
 225:	009A  1A      	                LD      A,(DE)  ;AND (DIGIT) IS FROM
 226:	009B  13      	                INC     DE      ;STRIPPING THE ASCII
 227:	009C  E60F    	                AND     0FH     ;CODE
 228:	009E  85      	                ADD     A,L
 229:	009F  6F      	                LD      L,A
 230:	00A0  3E00    	                LD      A,0
 231:	00A2  8C      	                ADC     A,H
 232:	00A3  67      	                LD      H,A
 233:	00A4  C1      	                POP     BC
 234:	00A5  1A      	                LD      A,(DE)  ;DO THIS DIGIT AFTER
 235:	00A6  F28700  	                JP      P,TN1   ;DIGIT. S SAYS OVERFLOW
 236:			;
 237:			                                ;OUTPUT HEX NUMBER
 238:	00A9  13      	TX1:            INC     DE      ;SKIP TO NEXT HEX
 239:	00AA  1A      	                LD      A,(DE)  ;GET HEX DIGIT
 240:	00AB  FE30    	                CP      '0'     ;< '0'
 241:	00AD  D8      	                RET     C       ;ERROR
 242:	00AE  FE3A    	                CP      '9'+1   ;<= '9'
 243:	00B0  380A    	                JR      C,TX2   ;OK '0'..'9'
 244:	00B2  FE41    	                CP      'A'     ;< 'A'
 245:	00B4  D8      	                RET     C       ;ERROR, >'9' && < 'A'
 246:	00B5  E65F    	                AND     5FH     ;CONVERT ALPHA TO UPPER
 247:	00B7  FE47    	                CP      'F'+1   ;> 'F'
 248:	00B9  D0      	                RET     NC      ;ERROR
 249:	00BA  D607    	                SUB     'A'-'0'-10      ;SKIP GAP '9' -> 'A'
 250:	00BC  E60F    	TX2:            AND     0FH     ;GET HEX CODE 0..F
 251:	00BE  C5      	                PUSH    BC
 252:	00BF  47      	                LD      B,A     ;SAVE HEX CODE
 253:	00C0  3EF0    	                LD      A,0F0H  ;IF H>15
 254:	00C2  A4      	                AND     H       ;THERE IS NO ROOM
 255:	00C3  78      	                LD      A,B
 256:	00C4  C1      	                POP     BC
 257:	00C5  2009    	                JR      NZ,QHOW ;FOR NEXT DIGIT
 258:			
 259:	00C7  04      	                INC     B       ;B COUNTS # OF DIGITS
 260:	00C8  29      	                ADD     HL,HL   ;2*HL
 261:	00C9  29      	                ADD     HL,HL   ;4*HL
 262:	00CA  29      	                ADD     HL,HL   ;8*HL
 263:	00CB  29      	                ADD     HL,HL   ;16*HL
 264:	00CC  B5      	                OR      L       ;PUT HEX CODE INTO
 265:	00CD  6F      	                LD      L,A     ;THE 4 LSB OF HL
 266:	00CE  18D9    	                JR      TX1     ;DIGIT AFTER DIGIT
 267:			
 268:	00D0  D5      	QHOW:           PUSH    DE      ;*** ERROR "HOW?" ***
 269:	00D1  11E100  	AHOW:           LD      DE,HOW
 270:	00D4  C36505  	                JP      ERROR
 271:			
 272:	00D7  54696E79	TIBAS:          .DB     "TinyBASIC"
	      42415349
	      43
 273:	00E0  0D      	                .DB     CR
 274:			
 275:	00E1  484F573F	HOW:            .DB     "HOW?"
 276:	00E5  0D      	                .DB     CR
 277:			
 278:	00E6  4F4B    	OK:             .DB     "OK"
 279:	00E8  0D      	                .DB     CR
 280:			
 281:	00E9  57484154	WHAT:           .DB     "WHAT?"
	      3F
 282:	00EE  0D      	                .DB     CR
 283:			
 284:	00EF  534F5252	SORRY:          .DB     "SORRY"
	      59
 285:	00F4  0D      	                .DB     CR
 286:			
 287:			;
 288:			;*************************************************************
 289:			;
 290:			; *** ROUTC *** CHKIO ***
 291:			;
 292:			; THESE ARE THE ONLY I/O ROUTINES IN TBI.
 293:			; OUTC WILL OUTPUT THE BYTE IN A.
 294:			; IF THAT IS A CR, A LF IS ALSO SEND OUT.
 295:			; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
 296:			; ALL REGISTERS ARE RESTORED.
 297:			;
 298:			; 'CHKIO' CHECKS THE INPUT.
 299:			; IF NO INPUT, IT WILL RETURN TO THE CALLER WITH THE Z FLAG SET.
 300:			; IF THERE IS INPUT, Z FLAG IS CLEARED AND THE INPUT BYTE IS IN A.
 301:			; IF A CONTROL-C IS READ, 'CHKIO' WILL RESTART TBI
 302:			; AND DO NOT RETURN TO THE CALLER.
 303:			;
 304:			
 305:			;THIS IS AT LOC. 10
 306:			;ROUTC:         OUT     (IODATA),A      ;Out to data port
 307:			;               CP      CR      ;WAS IT CR?
 308:			;               RET     NZ      ;NO, FINISHED
 309:			;               JP      OC1     ;REST OF THIS IS AT OC1
 310:			;
 311:	00F5  3E0A    	OC1:            LD      A,LF    ;YES, WE SEND LF TOO
 312:	00F7  D7      	                RST     ROUTC   ;THIS IS RECURSIVE
 313:	00F8  3E0D    	                LD      A,CR    ;GET CR BACK IN A
 314:	00FA  C9      	                RET
 315:			
 316:	00FB  DB02    	CHKIO:          IN      A,(IOSTAT)      ;*** CHKIO ***
 317:	00FD  E601    	                AND     IO_RX_BIT       ;MASK STATUS BIT
 318:	00FF  C8      	                RET     Z       ;NOT READY, RETURN "Z"
 319:	0100  DB01    	                IN      A,(IODATA)      ;READY, READ DATA
 320:	0102  E67F    	                AND     7FH     ;MASK BIT 7 OFF
 321:	0104  FE03    	CI0:            CP      03H     ;IS IT CONTROL-C?
 322:	0106  C0      	                RET     NZ      ;NO, RETURN "NZ"
 323:	0107  1823    	                JR      WSTART  ;YES, RESTART TBI
 324:			
 325:			;
 326:			;*************************************************************
 327:			;
 328:			
 329:			;
 330:			;*************************************************************
 331:			;
 332:			; *** INIT ***
 333:			;
 334:			; PUT IO INITIALISATION HERE, E.G. FOR THE SERIAL INTERFACE
 335:			;
 336:			; *** MAIN ***
 337:			;
 338:			; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
 339:			; AND STORES IT IN THE MEMORY.
 340:			;
 341:			; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
 342:			; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
 343:			; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
 344:			; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
 345:			; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
 346:			; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
 347:			; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
 348:			; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
 349:			; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
 350:			;
 351:			; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
 352:			; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
 353:			; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
 354:			; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
 355:			;
 356:			; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
 357:			; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
 358:			; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
 359:			; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
 360:			;
 361:			; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
 362:			; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
 363:			; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
 364:			; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
 365:			;
 366:			;
 367:			;THIS IS AT LOC. 0
 368:			;CSTART:        LD      SP,STACK    ;*** COLD START ***
 369:			;               XOR     A           ;
 370:			;               JP      INIT        ;
 371:			;
 372:	0109          	INIT:
 373:	0109  210008  	                LD      HL,RAMBGN   ;SOURCE
 374:	010C  77      	                LD      (HL),A      ;CLEAR MEM
 375:	010D  110108  	                LD      DE,RAMBGN+1 ;DESTINATION
 376:	0110  01FF07  	                LD      BC,RAMSZE-1 ;BYTE COUNT
 377:	0113  EDB0    	                LDIR                ;CLR COMPLETE MEMORY
 378:	0115  11D700  	                LD      DE,TIBAS    ;COLD START MESSAGE
 379:	0118  CDF805  	                CALL    PRTSTG
 380:	011B  3EC9    	                LD      A,$C9
 381:	011D  32000F  	                LD      (USRSPC),A  ;"RET" AT USR CODE SPACE
 382:	0120  210000  	                LD      HL,CSTART   ;INIT RANDOM POINTER
 383:	0123  224A08  	                LD      (RANPNT),HL
 384:	0126  210009  	                LD      HL,TXTBGN   ;UNFILLED TEXT
 385:	0129  223608  	                LD      (TXTUNF),HL
 386:			;
 387:	012C  310009  	WSTART:         LD      SP,STACK    ;*** WARM START ***
 388:	012F  CD0E00  	                CALL    CRLF        ;AND JUMP TO HERE
 389:	0132  11E600  	                LD      DE,OK       ;DE->STRING
 390:	0135  97      	                SUB     A           ;A=0
 391:	0136  CDF805  	                CALL    PRTSTG      ;PRINT STRING UNTIL CR
 392:	0139  214001  	                LD      HL,ST2+1    ;HACK ST2+1 -> 0000
 393:	013C  223808  	                LD      (CURRNT),HL ;CURRENT->LINE # = 0
 394:	013F  210000  	ST2:            LD      HL,0000     ;
 395:	0142  224008  	                LD      (LOPVAR),HL
 396:	0145  223A08  	                LD      (STKGOS),HL
 397:	0148  3E3E    	ST3:            LD      A,'>'       ;PROMPT '>' AND
 398:	014A  CD9405  	                CALL    GETLN       ;READ A LINE
 399:	014D  D5      	                PUSH    DE          ;DE->END OF LINE
 400:	014E  11800F  	                LD      DE,BUFFER   ;DE->BEGINNING OF LINE
 401:	0151  CD7E00  	                CALL    TSTNUM      ;TEST IF IT IS A NUMBER
 402:	0154  EF      	                RST     RIGNBLK
 403:	0155  7C      	                LD      A,H         ;HL=VALUE OF THE # OR
 404:	0156  B5      	                OR      L           ;0 IF NO # WAS FOUND
 405:	0157  C1      	                POP     BC          ;BC->END OF LINE
 406:	0158  CA0007  	                JP      Z,DIRECT
 407:	015B  1B      	                DEC     DE          ;BACKUP DE AND SAVE
 408:	015C  7C      	                LD      A,H         ;VALUE OF LINE # THERE
 409:	015D  12      	                LD      (DE),A
 410:	015E  1B      	                DEC     DE
 411:	015F  7D      	                LD      A,L
 412:	0160  12      	                LD      (DE),A
 413:	0161  C5      	                PUSH    BC          ;BC,DE->BEGIN, END
 414:	0162  D5      	                PUSH    DE
 415:	0163  79      	                LD      A,C
 416:	0164  93      	                SUB     E
 417:	0165  F5      	                PUSH    AF          ;A=# OF BYTES IN LINE
 418:	0166  CDD305  	                CALL    FNDLN       ;FIND THIS LINE IN SAVE
 419:	0169  D5      	                PUSH    DE          ;AREA, DE->SAVE AREA
 420:	016A  2010    	                JR      NZ,ST4      ;NZ:NOT FOUND, INSERT
 421:	016C  D5      	                PUSH    DE          ;Z:FOUND, DELETE IT
 422:	016D  CDEE05  	                CALL    FNDNXT      ;FIND NEXT LINE
 423:			                                    ;DE->NEXT LINE
 424:	0170  C1      	                POP     BC          ;BC->LINE TO BE DELETED
 425:	0171  2A3608  	                LD      HL,(TXTUNF) ;HL->UNFILLED SAVE AREA
 426:	0174  CDA806  	                CALL    MVUP        ;MOVE UP TO DELETE
 427:	0177  60      	                LD      H,B         ;TXTUNF->UNFILLED AREA
 428:	0178  69      	                LD      L,C
 429:	0179  223608  	                LD      (TXTUNF),HL ;UPDATE
 430:	017C  C1      	ST4:            POP     BC          ;GET READY TO INSERT
 431:	017D  2A3608  	                LD      HL,(TXTUNF) ;BUT FIRST CHECK IF
 432:	0180  F1      	                POP     AF          ;THE LENGTH OF NEW LINE
 433:	0181  E5      	                PUSH    HL          ;IS 3 (LINE # AND CR)
 434:	0182  FE03    	                CP      3           ;THEN DO NOT INSERT
 435:	0184  28A6    	                JR      Z,WSTART    ;MUST CLEAR THE STACK
 436:	0186  85      	                ADD     A,L         ;COMPUTE NEW TXTUNF
 437:	0187  6F      	                LD      L,A
 438:	0188  3E00    	                LD      A,0
 439:	018A  8C      	                ADC     A,H
 440:	018B  67      	                LD      H,A         ;HL->NEW UNFILLED AREA
 441:	018C  11000F  	                LD      DE,TXTEND   ;CHECK TO SEE IF THERE
 442:	018F  E7      	                RST     RCOMP       ;COMP HL,DE - IS ENOUGH SPACE
 443:	0190  D28E05  	                JP      NC,QSORRY   ;SORRY, NO ROOM FOR IT
 444:	0193  223608  	                LD      (TXTUNF),HL ;OK, UPDATE TXTUNF
 445:	0196  D1      	                POP     DE          ;DE->OLD UNFILLED AREA
 446:	0197  CDB006  	                CALL    MVDOWN
 447:	019A  D1      	                POP     DE          ;DE->BEGIN, HL->END
 448:	019B  E1      	                POP     HL
 449:	019C  CDA806  	                CALL    MVUP        ;MOVE NEW LINE TO SAVE
 450:	019F  18A7    	                JR      ST3         ;AREA
 451:			
 452:			;*************************************************************
 453:			;
 454:			; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
 455:			; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
 456:			; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
 457:			; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
 458:			; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
 459:			;
 460:			; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'WSTART'
 461:			; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
 462:			; GO BACK TO 'WSTART'.
 463:			; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
 464:			; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
 465:			; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'WSTART', ELSE
 466:			; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
 467:			;*************************************************************
 468:			;
 469:			; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
 470:			;
 471:			; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
 472:			;
 473:			; 'STOP(CR)' GOES BACK TO 'WSTART'
 474:			;
 475:			; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
 476:			; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
 477:			; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
 478:			;
 479:			; THERE ARE 3 MORE ENTRIES IN 'RUN':
 480:			; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
 481:			; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
 482:			; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
 483:			;
 484:			; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
 485:			; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
 486:			;
 487:	01A1  CD5D05  	NEW:            CALL    ENDCHK  ;*** NEW(CR) ***
 488:	01A4  210009  	                LD      HL,TXTBGN
 489:	01A7  223608  	                LD      (TXTUNF),HL
 490:			;
 491:	01AA  CD5D05  	STOP:           CALL    ENDCHK  ;*** STOP(CR) ***
 492:	01AD  C32C01  	                JP      WSTART
 493:			
 494:	01B0  CD5D05  	RUN:            CALL    ENDCHK  ;*** RUN(CR) ***
 495:	01B3  110009  	                LD      DE,TXTBGN       ;FIRST SAVED LINE
 496:			;
 497:	01B6  210000  	RUNNXL:         LD      HL,0    ;*** RUNNXL ***
 498:	01B9  CDDB05  	                CALL    FNDLP   ;FIND WHATEVER LINE #
 499:	01BC  DA2C01  	                JP      C,WSTART ;C:PASSED TXTUNF, QUIT
 500:			;
 501:	01BF  EB      	RUNTSL:         EX      DE,HL   ;*** RUNTSL ***
 502:	01C0  223808  	                LD      (CURRNT),HL     ;SET 'CURRENT'->LINE #
 503:	01C3  EB      	                EX      DE,HL
 504:	01C4  13      	                INC     DE      ;BUMP PASS LINE #
 505:	01C5  13      	                INC     DE
 506:			;
 507:	01C6  CDFB00  	RUNSML:         CALL    CHKIO   ;*** RUNSML ***
 508:	01C9  214407  	                LD      HL,TAB2-1       ;FIND COMMAND IN TAB2
 509:	01CC  C30307  	                JP      EXEC    ;AND EXECUTE IT
 510:			
 511:	01CF  DF      	GOTO:           RST     REXPR   ;*** GOTO EXPR ***
 512:	01D0  D5      	                PUSH    DE      ;SAVE FOR ERROR ROUTINE
 513:	01D1  CD5D05  	                CALL    ENDCHK  ;MUST FIND A CR
 514:	01D4  CDD305  	                CALL    FNDLN   ;FIND THE TARGET LINE
 515:	01D7  C2D100  	                JP      NZ,AHOW ;NO SUCH LINE #
 516:	01DA  F1      	                POP     AF      ;CLEAR THE PUSH DE
 517:	01DB  18E2    	                JR      RUNTSL  ;GO DO IT
 518:			;
 519:			;*************************************************************
 520:			;
 521:			; *** LIST *** & PRINT ***
 522:			;
 523:			; LIST HAS TWO FORMS:
 524:			; 'LIST(CR)' LISTS ALL SAVED LINES
 525:			; 'LIST #(CR)' START LIST AT THIS LINE #
 526:			; YOU CAN STOP THE LISTING BY CONTROL C KEY
 527:			;
 528:			; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
 529:			; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
 530:			; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
 531:			;
 532:			; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
 533:			; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
 534:			; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
 535:			; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
 536:			; SPECIFIED, 8 POSITIONS WILL BE USED.
 537:			;
 538:			; NUMBER BASE IS SET BY PERCENT SIGN FOLLOEWED BY A NUMBER
 539:			; BETWEEN 2 and 16. VALUES ARE PRINTED AS UNSIGNED TO THIS BASE
 540:			; FOR THE REST OF THIS PRINT COMMAND UNLESS CHANGED BY
 541:			; ANOTHER BASE. IF NO BASE IS PROVIDED NUMBERS ARE SIGNED DECIMAL.
 542:			;
 543:			; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
 544:			; DOUBLE QUOTES.
 545:			;
 546:			; A BACK-ARROW (UNDERLINE) ALONE MEANS GENERATE A (CR) WITHOUT (LF).
 547:			;
 548:			; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
 549:			; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
 550:			; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
 551:			;
 552:	01DD  CD7E00  	LIST_:          CALL    TSTNUM  ;TEST IF THERE IS A #
 553:	01E0  CD5D05  	                CALL    ENDCHK  ;IF NO # WE GET A 0
 554:	01E3  CDD305  	                CALL    FNDLN   ;FIND THIS OR NEXT LINE
 555:	01E6  DA2C01  	LS1:            JP      C,WSTART ;C:PASSED TXTUNF
 556:	01E9  CD9106  	                CALL    PRTLN   ;PRINT THE LINE
 557:	01EC  CDFB00  	                CALL    CHKIO   ;STOP IF HIT CONTROL-C
 558:	01EF  CDDB05  	                CALL    FNDLP   ;FIND NEXT LINE
 559:	01F2  18F2    	                JR      LS1     ;AND LOOP BACK
 560:			
 561:	01F4  0E08    	PRINT:          LD      C,8     ;C = # OF SPACES
 562:	01F6  AF      	                XOR     A       ;DEFAULT BASE FOR PRTNUM
 563:	01F7  323508  	                LD      (PNBASE),A
 564:	01FA  CF3B06  	                TSTC     ';',PR2 ;IF NULL LIST & ";"
 565:	01FD  CD0E00  	                CALL    CRLF    ;GIVE CR-LF AND
 566:	0200  C3C601  	                JP      RUNSML  ;CONTINUE SAME LINE
 567:	0203  CF0D06  	PR2:            TSTC     CR,PR0  ;IF NULL LIST (CR)
 568:	0206  CD0E00  	                CALL    CRLF    ;ALSO GIVE CR-LF AND
 569:	0209  C3B601  	                JP      RUNNXL  ;GO TO NEXT LINE
 570:	020C  CF2304  	PR0:            TSTC     '#',PR5 ;ELSE IS IT FORMAT?
 571:	020F  DF      	                RST     REXPR   ;YES, EVALUATE EXPR.
 572:	0210  4D      	                LD      C,L     ;AND SAVE IT IN C
 573:	0211  181A    	                JR      PR3     ;LOOK FOR MORE TO PRINT
 574:	0213  CF2511  	PR5:            TSTC     '%',PR1 ;ELSE IS IT PRTNUM BASE?
 575:	0216  DF      	                RST     REXPR   ;YES, EVALUATE EXPR.
 576:	0217  7D      	                LD      A,L     ;GET THE LOW PART
 577:	0218  FE01    	                CP      1       ;EITHER 0 OR >= 2?
 578:	021A  CAD000  	                JP      Z,QHOW  ;ERROR
 579:	021D  FE11    	                CP      17      ;BASE > 16?
 580:	021F  D2D000  	                JP      NC,QHOW ;ERROR
 581:	0222  323508  	                LD      (PNBASE),A      ;IN PNBASE
 582:	0225  1806    	                JR      PR3     ;LOOK FOR MORE TO PRINT
 583:	0227  CD0306  	PR1:            CALL    QTSTG   ;OR IS IT A STRING?
 584:	022A  C33D02  	                JP      PR8     ;HACK JP!! IF NOT, MUST BE EXPR.
 585:	022D  CF2C05  	PR3:            TSTC     $2C,PR6 ;IF ",", GO FIND NEXT
 586:	0230  CD4E05  	                CALL    FIN     ;IN THE LIST.
 587:	0233  18D7    	                JR      PR0     ;LIST CONTINUES
 588:	0235  AF      	PR6:            XOR     A       ;END OF LIST REACHED
 589:	0236  323508  	                LD      (PNBASE),A      ;RESET DEFAULT BASE
 590:	0239  CD0E00  	                CALL    CRLF    ;LIST ENDS WITH CRLF
 591:	023C  F7      	                RST     RFINISH ;FINISH
 592:	023D  DF      	PR8:            RST     REXPR   ;EVALUATE THE EXPR
 593:	023E  C5      	                PUSH    BC
 594:	023F  CD3106  	                CALL    PRTNUM  ;PRINT THE VALUE
 595:	0242  C1      	                POP     BC
 596:	0243  18E8    	                JR      PR3     ;MORE TO PRINT?
 597:			;
 598:			;*************************************************************
 599:			;
 600:			; *** GOSUB *** & RETURN ***
 601:			;
 602:			; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
 603:			; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
 604:			; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
 605:			; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
 606:			; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
 607:			; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
 608:			; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
 609:			; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
 610:			; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
 611:			;
 612:			; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
 613:			; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
 614:			; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
 615:			; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
 616:			;
 617:	0245  CDD806  	GOSUB:          CALL    PUSHA   ;SAVE THE CURRENT "FOR"
 618:	0248  DF      	                RST     REXPR   ;PARAMETERS
 619:	0249  D5      	                PUSH    DE      ;AND TEXT POINTER
 620:	024A  CDD305  	                CALL    FNDLN   ;FIND THE TARGET LINE
 621:	024D  C2D100  	                JP      NZ,AHOW ;NOT THERE. SAY "HOW?"
 622:	0250  2A3808  	                LD      HL,(CURRNT)     ;FOUND IT, SAVE OLD
 623:	0253  E5      	                PUSH    HL      ;'CURRNT' OLD 'STKGOS'
 624:	0254  2A3A08  	                LD      HL,(STKGOS)
 625:	0257  E5      	                PUSH    HL
 626:	0258  210000  	                LD      HL,0    ;AND LOAD NEW ONES
 627:	025B  224008  	                LD      (LOPVAR),HL
 628:	025E  39      	                ADD     HL,SP
 629:	025F  223A08  	                LD      (STKGOS),HL
 630:	0262  C3BF01  	                JP      RUNTSL  ;THEN RUN THAT LINE
 631:			;
 632:	0265  CD5D05  	RETURN:         CALL    ENDCHK  ;THERE MUST BE A CR
 633:	0268  2A3A08  	                LD      HL,(STKGOS)     ;OLD STACK POINTER
 634:	026B  7C      	                LD      A,H     ;0 MEANS NOT EXIST
 635:	026C  B5      	                OR      L
 636:	026D  CA6105  	                JP      Z,QWHAT ;SO, WE SAY: "WHAT?"
 637:	0270  F9      	                LD      SP,HL   ;ELSE, RESTORE IT
 638:	0271  E1      	                POP     HL
 639:	0272  223A08  	                LD      (STKGOS),HL     ;AND THE OLD 'STKGOS'
 640:	0275  E1      	                POP     HL
 641:	0276  223808  	                LD      (CURRNT),HL     ;AND THE OLD 'CURRNT'
 642:	0279  D1      	                POP     DE      ;OLD TEXT POINTER
 643:	027A  CDBD06  	                CALL    POPA    ;OLD "FOR" PARAMETERS
 644:	027D  F7      	                RST     RFINISH ;AND WE ARE BACK HOME
 645:			;
 646:			;*************************************************************
 647:			;
 648:			; *** FOR *** & NEXT ***
 649:			;
 650:			; 'FOR' HAS TWO FORMS:
 651:			; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
 652:			; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
 653:			; EXP3=1.  (I.E., WITH A STEP OF +1.)
 654:			; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
 655:			; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
 656:			; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
 657:			; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
 658:			; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
 659:			; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
 660:			; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
 661:			; BEFORE THE NEW ONE OVERWRITES IT.
 662:			; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
 663:			; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
 664:			; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
 665:			; (PURGED FROM THE STACK..)
 666:			;
 667:			; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
 668:			; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
 669:			; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
 670:			; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
 671:			; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
 672:			; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
 673:			; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
 674:			; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
 675:			; IS PURGED AND EXECUTION CONTINUES.
 676:			;
 677:	027E  CDD806  	FOR:            CALL    PUSHA           ;SAVE THE OLD SAVE AREA
 678:	0281  CD3F05  	                CALL    SETVAL          ;SET THE CONTROL VAR.
 679:	0284  2B      	                DEC     HL              ;HL IS ITS ADDRESS
 680:	0285  224008  	                LD      (LOPVAR),HL     ;SAVE THAT
 681:	0288  21C107  	                LD      HL,TAB5-1       ;USE 'EXEC' TO LOOK
 682:	028B  C30307  	                JP      EXEC            ;FOR THE WORD 'TO'
 683:	028E  DF      	FR1:            RST     REXPR           ;EVALUATE THE LIMIT
 684:	028F  224408  	                LD      (LOPLMT),HL     ;SAVE THAT
 685:	0292  21C707  	                LD      HL,TAB6-1       ;USE 'EXEC' TO LOOK
 686:	0295  C30307  	                JP      EXEC            ;FOR THE WORD 'STEP'
 687:	0298  DF      	FR2:            RST     REXPR           ;FOUND IT, GET STEP
 688:	0299  1803    	                JR      FR4
 689:	029B  210100  	FR3:            LD      HL,1H           ;NOT FOUND, SET TO 1
 690:	029E  224208  	FR4:            LD      (LOPINC),HL     ;SAVE THAT TOO
 691:	02A1  2A3808  	FR5:            LD      HL,(CURRNT)     ;SAVE CURRENT LINE #
 692:	02A4  224608  	                LD      (LOPLN),HL
 693:	02A7  EB      	                EX      DE,HL           ;AND TEXT POINTER
 694:	02A8  224808  	                LD      (LOPPT),HL
 695:	02AB  010A00  	                LD      BC,0AH          ;DIG INTO STACK TO
 696:	02AE  2A4008  	                LD      HL,(LOPVAR)     ;FIND 'LOPVAR'
 697:	02B1  EB      	                EX      DE,HL
 698:	02B2  60      	                LD      H,B
 699:	02B3  68      	                LD      L,B             ;HL=0 NOW
 700:	02B4  39      	                ADD     HL,SP           ;HERE IS THE STACK
 701:	02B5  3E      	                .DB     3EH             ;HACK SKIP "ADD HL,BC"
 702:	02B6  09      	FR7:            ADD     HL,BC           ;EACH LEVEL IS 10 DEEP
 703:	02B7  7E      	                LD      A,(HL)          ;GET THAT OLD 'LOPVAR'
 704:	02B8  23      	                INC     HL
 705:	02B9  B6      	                OR      (HL)
 706:	02BA  2818    	                JR      Z,FR8           ;0 SAYS NO MORE IN IT
 707:	02BC  7E      	                LD      A,(HL)
 708:	02BD  2B      	                DEC     HL
 709:	02BE  BA      	                CP      D               ;SAME AS THIS ONE?
 710:	02BF  20F5    	                JR      NZ,FR7
 711:	02C1  7E      	                LD      A,(HL)          ;THE OTHER HALF?
 712:	02C2  BB      	                CP      E
 713:	02C3  20F1    	                JR      NZ,FR7
 714:	02C5  EB      	                EX      DE,HL           ;YES, FOUND ONE
 715:	02C6  210000  	                LD      HL,0H
 716:	02C9  39      	                ADD     HL,SP           ;TRY TO MOVE SP
 717:	02CA  44      	                LD      B,H
 718:	02CB  4D      	                LD      C,L
 719:	02CC  210A00  	                LD      HL,0AH
 720:	02CF  19      	                ADD     HL,DE
 721:	02D0  CDB006  	                CALL    MVDOWN          ;AND PURGE 10 WORDS
 722:	02D3  F9      	                LD      SP,HL           ;IN THE STACK
 723:	02D4  2A4808  	FR8:            LD      HL,(LOPPT)      ;JOB DONE, RESTORE DE
 724:	02D7  EB      	                EX      DE,HL
 725:	02D8  F7      	                RST     RFINISH         ;AND CONTINUE
 726:			;
 727:	02D9  FF      	NEXT:           RST     RTSTV           ;GET ADDRESS OF VAR.
 728:	02DA  DA6105  	                JP      C,QWHAT         ;NO VARIABLE, "WHAT?"
 729:	02DD  223C08  	                LD      (VARNXT),HL     ;YES, SAVE IT
 730:	02E0  D5      	NX0:            PUSH    DE              ;SAVE TEXT POINTER
 731:	02E1  EB      	                EX      DE,HL
 732:	02E2  2A4008  	                LD      HL,(LOPVAR)     ;GET VAR. IN 'FOR'
 733:	02E5  7C      	                LD      A,H
 734:	02E6  B5      	                OR      L               ;0 SAYS NEVER HAD ONE
 735:	02E7  CA6205  	                JP      Z,AWHAT         ;SO WE ASK: "WHAT?"
 736:	02EA  E7      	                RST     RCOMP           ;ELSE WE CHECK THEM
 737:	02EB  2809    	                JR      Z,NX3           ;OK, THEY AGREE
 738:	02ED  D1      	                POP     DE              ;NO, LET'S SEE
 739:	02EE  CDBD06  	                CALL    POPA            ;PURGE CURRENT LOOP
 740:	02F1  2A3C08  	                LD      HL,(VARNXT)     ;AND POP ONE LEVEL
 741:	02F4  18EA    	                JR      NX0             ;GO CHECK AGAIN
 742:	02F6  5E      	NX3:            LD      E,(HL)          ;COME HERE WHEN AGREED
 743:	02F7  23      	                INC     HL
 744:	02F8  56      	                LD      D,(HL)          ;DE=VALUE OF VAR.
 745:	02F9  2A4208  	                LD      HL,(LOPINC)
 746:	02FC  E5      	                PUSH    HL
 747:	02FD  7C      	                LD      A,H
 748:	02FE  AA      	                XOR     D
 749:	02FF  7A      	                LD      A,D
 750:	0300  19      	                ADD     HL,DE           ;ADD ONE STEP
 751:	0301  FA0803  	                JP      M,NX4
 752:	0304  AC      	                XOR     H
 753:	0305  FA2903  	                JP      M,NX5
 754:	0308  EB      	NX4:            EX      DE,HL
 755:	0309  2A4008  	                LD      HL,(LOPVAR)     ;PUT IT BACK
 756:	030C  73      	                LD      (HL),E
 757:	030D  23      	                INC     HL
 758:	030E  72      	                LD      (HL),D
 759:	030F  2A4408  	                LD      HL,(LOPLMT)     ;HL->LIMIT
 760:	0312  F1      	                POP     AF              ;OLD HL
 761:	0313  B7      	                OR      A
 762:	0314  F21803  	                JP      P,NX1           ;STEP > 0
 763:	0317  EB      	                EX      DE,HL           ;STEP < 0
 764:	0318  CD3705  	NX1:            CALL    CKHLDE          ;COMPARE WITH LIMIT
 765:	031B  D1      	                POP     DE              ;RESTORE TEXT POINTER
 766:	031C  380D    	                JR      C,NX2           ;OUTSIDE LIMIT
 767:	031E  2A4608  	                LD      HL,(LOPLN)      ;WITHIN LIMIT, GO
 768:	0321  223808  	                LD      (CURRNT),HL     ;BACK TO THE SAVED
 769:	0324  2A4808  	                LD      HL,(LOPPT)      ;'CURRNT' AND TEXT
 770:	0327  EB      	                EX      DE,HL           ;POINTER
 771:	0328  F7      	                RST     RFINISH
 772:	0329  E1      	NX5:            POP     HL
 773:	032A  D1      	                POP     DE
 774:	032B  CDBD06  	NX2:            CALL    POPA            ;PURGE THIS LOOP
 775:	032E  F7      	                RST     RFINISH
 776:			;
 777:			;*************************************************************
 778:			;
 779:			; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
 780:			;
 781:			; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
 782:			; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
 783:			;
 784:			; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
 785:			; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
 786:			; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
 787:			; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
 788:			; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
 789:			; EXECUTION CONTINUES AT THE NEXT LINE.
 790:			;
 791:			; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
 792:			; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
 793:			; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
 794:			; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
 795:			; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
 796:			; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
 797:			; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
 798:			; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
 799:			; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
 800:			; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
 801:			;
 802:			; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
 803:			; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
 804:			; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
 805:			; THIS IS HANDLED IN 'INPERR'.
 806:			;
 807:			; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
 808:			; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
 809:			; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
 810:			; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
 811:			; THIS IS DONE BY 'DEFLT'.
 812:			;
 813:	032F  210000  	REM:            LD      HL,0H   ;*** REM ***
 814:	0332  3E      	                .DB     3EH             ;SKIP RST, THIS IS LIKE 'IF 0'
 815:			;
 816:	0333  DF      	IF_:            RST     REXPR   ;*** IF ***
 817:	0334  7C      	                LD      A,H     ;IS THE EXPR.=0?
 818:	0335  B5      	                OR      L
 819:	0336  C2C601  	                JP      NZ,RUNSML       ;NO, CONTINUE
 820:	0339  CDF005  	                CALL    FNDSKP  ;YES, SKIP REST OF LINE
 821:	033C  D2BF01  	                JP      NC,RUNTSL       ;AND RUN THE NEXT LINE
 822:	033F  C32C01  	                JP      WSTART  ;IF NO NEXT, RE-START
 823:			;
 824:	0342  2A3E08  	INPERR:         LD      HL,(STKINP)     ;*** INPERR ***
 825:	0345  F9      	                LD      SP,HL   ;RESTORE OLD SP
 826:	0346  E1      	                POP     HL      ;AND OLD 'CURRNT'
 827:	0347  223808  	                LD      (CURRNT),HL
 828:	034A  D1      	                POP     DE      ;AND OLD TEXT POINTER
 829:	034B  D1      	                POP     DE      ;REDO INPUT
 830:			;
 831:	034C          	INPUT:          ;*** INPUT ***
 832:	034C  D5      	IP1:            PUSH    DE      ;SAVE IN CASE OF ERROR
 833:	034D  CD0306  	                CALL    QTSTG   ;IS NEXT ITEM A STRING?
 834:	0350  C35803  	                JP      IP2     ;HACK JP!! NO
 835:	0353  FF      	                RST     RTSTV   ;YES, BUT FOLLOWED BY A
 836:	0354  3839    	                JR      C,IP4   ;VARIABLE?   NO.
 837:	0356  1810    	                JR      IP3     ;YES.  INPUT VARIABLE
 838:	0358  D5      	IP2:            PUSH    DE      ;SAVE FOR 'PRTSTG'
 839:	0359  FF      	                RST     RTSTV   ;MUST BE VARIABLE NOW
 840:	035A  DA6105  	                JP      C,QWHAT ;"WHAT?" IT IS NOT?
 841:	035D  1A      	                LD      A,(DE)  ;GET READY FOR 'PRTSTG'
 842:	035E  4F      	                LD      C,A
 843:	035F  97      	                SUB     A
 844:	0360  12      	                LD      (DE),A
 845:	0361  D1      	                POP     DE
 846:	0362  CDF805  	                CALL    PRTSTG  ;PRINT STRING AS PROMPT
 847:	0365  79      	                LD      A,C     ;RESTORE TEXT
 848:	0366  1B      	                DEC     DE
 849:	0367  12      	                LD      (DE),A
 850:	0368  D5      	IP3:            PUSH    DE      ;SAVE TEXT POINTER
 851:	0369  EB      	                EX      DE,HL
 852:	036A  2A3808  	                LD      HL,(CURRNT)     ;ALSO SAVE 'CURRNT'
 853:	036D  E5      	                PUSH    HL
 854:	036E  214C03  	                LD      HL,IP1  ;A NEGATIVE NUMBER
 855:	0371  223808  	                LD      (CURRNT),HL     ;AS A FLAG
 856:	0374  210000  	                LD      HL,0H   ;SAVE SP TOO
 857:	0377  39      	                ADD     HL,SP
 858:	0378  223E08  	                LD      (STKINP),HL
 859:	037B  D5      	                PUSH    DE      ;OLD HL
 860:	037C  3E3A    	                LD      A,':'   ;PRINT THIS TOO
 861:	037E  CD9405  	                CALL    GETLN   ;AND GET A LINE
 862:	0381  11800F  	                LD      DE,BUFFER       ;POINTS TO BUFFER
 863:	0384  DF      	                RST     REXPR   ;EVALUATE INPUT
 864:			                ;NOP            ;??? CAN BE 'CALL ENDCHK'
 865:			                ;NOP
 866:			                ;NOP
 867:	0385  D1      	                POP     DE      ;OK, GET OLD HL
 868:	0386  EB      	                EX      DE,HL
 869:	0387  73      	                LD      (HL),E  ;SAVE VALUE IN VAR.
 870:	0388  23      	                INC     HL
 871:	0389  72      	                LD      (HL),D
 872:	038A  E1      	                POP     HL      ;GET OLD 'CURRNT'
 873:	038B  223808  	                LD      (CURRNT),HL
 874:	038E  D1      	                POP     DE      ;AND OLD TEXT POINTER
 875:	038F  F1      	IP4:            POP     AF      ;PURGE JUNK IN STACK
 876:	0390  CF2C02  	                TSTC     $2C,IP5 ;IS NEXT CH. ','?
 877:	0393  18B7    	                JR      IP1     ;YES, MORE ITEMS.
 878:	0395  F7      	IP5:            RST     RFINISH
 879:			;
 880:	0396  1A      	DEFLT:          LD      A,(DE)  ;***  DEFLT ***
 881:	0397  FE0D    	                CP      CR      ;EMPTY LINE IS OK
 882:	0399  2808    	                JR      Z,LT1   ;ELSE IT IS 'LET'
 883:			;
 884:	039B  CD3F05  	LET:            CALL    SETVAL  ;*** LET ***
 885:	039E  CF2C02  	                TSTC    $2C,LT1  ;SET VALUE TO VAR.
 886:	03A1  18F8    	                JR      LET     ;ITEM BY ITEM
 887:	03A3  F7      	LT1:            RST     RFINISH ;UNTIL FINISH
 888:			;
 889:			;*************************************************************
 890:			;
 891:			; *** EXPR ***
 892:			;
 893:			; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
 894:			; <EXPR>::<EXPR2>
 895:			;         <EXPR2><REL.OP.><EXPR2>
 896:			; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
 897:			; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
 898:			; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
 899:			; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
 900:			; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
 901:			; <EXPR4>::=<VARIABLE>
 902:			;           <FUNCTION>
 903:			;           (<EXPR>)
 904:			; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
 905:			; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
 906:			; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
 907:			;
 908:			;EXPR:          CALL    EXPR2   ;THIS IS AT LOC. 18
 909:			;               PUSH    HL      ;SAVE <EXPR2> VALUE
 910:			;               JP      EXPR1   ;REST OF IT AT EXPR1
 911:	03A4  21CF07  	EXPR1:          LD      HL,TAB8-1       ;LOOKUP REL.OP.
 912:	03A7  C30307  	                JP      EXEC    ;GO DO IT
 913:			;
 914:	03AA  CDD303  	XP11:           CALL    XP18    ;REL.OP.">="
 915:	03AD  D8      	                RET     C       ;NO, RETURN HL=0
 916:	03AE  6F      	                LD      L,A     ;YES, RETURN HL=1
 917:	03AF  C9      	                RET
 918:			;
 919:	03B0  CDD303  	XP12:           CALL    XP18    ;REL.OP."#" OR "!="
 920:	03B3  C8      	                RET     Z       ;FALSE, RETURN HL=0
 921:	03B4  6F      	                LD      L,A     ;TRUE, RETURN HL=1
 922:	03B5  C9      	                RET
 923:			;
 924:	03B6  CDD303  	XP13:           CALL    XP18    ;REL.OP.">"
 925:	03B9  C8      	                RET     Z       ;FALSE
 926:	03BA  D8      	                RET     C       ;ALSO FALSE, HL=0
 927:	03BB  6F      	                LD      L,A     ;TRUE, HL=1
 928:	03BC  C9      	                RET
 929:			;
 930:	03BD  CDD303  	XP14:           CALL    XP18    ;REL.OP."<="
 931:	03C0  6F      	                LD      L,A     ;SET HL=1
 932:	03C1  C8      	                RET     Z       ;REL. TRUE, RETURN
 933:	03C2  D8      	                RET     C
 934:	03C3  6C      	                LD      L,H     ;ELSE SET HL=0
 935:	03C4  C9      	                RET
 936:			;
 937:	03C5  CDD303  	XP15:           CALL    XP18    ;REL.OP."=" OR "=="
 938:	03C8  C0      	                RET     NZ      ;FALSE, RETURN HL=0
 939:	03C9  6F      	                LD      L,A     ;ELSE SET HL=1
 940:	03CA  C9      	                RET
 941:			;
 942:	03CB  CDD303  	XP16:           CALL    XP18    ;REL.OP."<"
 943:	03CE  D0      	                RET     NC      ;FALSE, RETURN HL=0
 944:	03CF  6F      	                LD      L,A     ;ELSE SET HL=1
 945:	03D0  C9      	                RET
 946:			;
 947:	03D1  E1      	XP17:           POP     HL      ;NOT .REL.OP
 948:	03D2  C9      	                RET             ;RETURN HL=<EXPR2>
 949:			;
 950:	03D3  79      	XP18:           LD      A,C     ;SUBROUTINE FOR ALL
 951:	03D4  E1      	                POP     HL      ;REL.OP.'S
 952:	03D5  C1      	                POP     BC
 953:	03D6  E5      	                PUSH    HL      ;REVERSE TOP OF STACK
 954:	03D7  C5      	                PUSH    BC
 955:	03D8  4F      	                LD      C,A
 956:	03D9  CDE803  	                CALL    EXPR2   ;GET 2ND <EXPR2>
 957:	03DC  EB      	                EX      DE,HL   ;VALUE IN DE NOW
 958:	03DD  E3      	                EX      (SP),HL ;1ST <EXPR2> IN HL
 959:	03DE  CD3705  	                CALL    CKHLDE  ;COMPARE 1ST WITH 2ND
 960:	03E1  D1      	                POP     DE      ;RESTORE TEXT POINTER
 961:	03E2  210000  	                LD      HL,0H   ;SET HL=0, A=1
 962:	03E5  3E01    	                LD      A,1
 963:	03E7  C9      	                RET
 964:			;
 965:	03E8  CF2D05  	EXPR2:          TSTC    '-',XP21 ;NEGATIVE SIGN?
 966:	03EB  210000  	                LD      HL,0H   ;YES, FAKE '0-'
 967:	03EE  1821    	                JR      XP26    ;TREAT LIKE SUBTRACT
 968:			;
 969:	03F0  CF2B00  	XP21:           TSTC    '+',XP22 ;POSITIVE SIGN? IGNORE
 970:	03F3  CD1A04  	XP22:           CALL    EXPR3   ;1ST <EXPR3>
 971:	03F6  CF2B15  	XP23:           TSTC    '+',XP25 ;ADD?
 972:	03F9  E5      	                PUSH    HL      ;YES, SAVE VALUE
 973:	03FA  CD1A04  	                CALL    EXPR3   ;GET 2ND <EXPR3>
 974:	03FD  EB      	XP24:           EX      DE,HL   ;2ND IN DE
 975:	03FE  E3      	                EX      (SP),HL ;1ST IN HL
 976:	03FF  7C      	                LD      A,H     ;COMPARE SIGN
 977:	0400  AA      	                XOR     D
 978:	0401  7A      	                LD      A,D
 979:	0402  19      	                ADD     HL,DE
 980:	0403  D1      	                POP     DE      ;RESTORE TEXT POINTER
 981:	0404  FAF603  	                JP      M,XP23  ;1ST AND 2ND SIGN DIFFER
 982:	0407  AC      	                XOR     H       ;1ST AND 2ND SIGN EQUAL
 983:	0408  F2F603  	                JP      P,XP23  ;SO IS RESULT
 984:			;
 985:	040B  C3D000  	                JP      QHOW    ;ELSE WE HAVE OVERFLOW
 986:			;
 987:	040E  CF2D7F  	XP25:           TSTC    '-',XP42 ;SUBTRACT?
 988:	0411  E5      	XP26:           PUSH    HL      ;YES, SAVE 1ST <EXPR3>
 989:	0412  CD1A04  	                CALL    EXPR3   ;GET 2ND <EXPR3>
 990:	0415  CD2205  	                CALL    CHGSGN  ;NEGATE
 991:	0418  18E3    	                JR      XP24    ;AND ADD THEM
 992:			;
 993:	041A  CD7504  	EXPR3:          CALL    EXPR4   ;GET 1ST <EXPR4>
 994:	041D  CF2A29  	XP31:           TSTC    '*',XP34 ;MULTIPLY?
 995:	0420  E5      	                PUSH    HL      ;YES, SAVE 1ST
 996:	0421  CD7504  	                CALL    EXPR4   ;AND GET 2ND <EXPR4>
 997:	0424  0600    	                LD      B,0H    ;CLEAR B FOR SIGN
 998:	0426  CD1F05  	                CALL    CHKSGN  ;CHECK SIGN
 999:	0429  E3      	                EX      (SP),HL ;1ST IN HL
1000:	042A  CD1F05  	                CALL    CHKSGN  ;CHECK SIGN OF 1ST
1001:	042D  EB      	                EX      DE,HL
1002:	042E  E3      	                EX      (SP),HL
1003:	042F  7C      	                LD      A,H     ;IS HL > 255 ?
1004:	0430  B7      	                OR      A
1005:	0431  2806    	                JR      Z,XP32  ;NO
1006:	0433  7A      	                LD      A,D     ;YES, HOW ABOUT DE
1007:	0434  B2      	                OR      D
1008:	0435  EB      	                EX      DE,HL   ;PUT SMALLER IN HL
1009:	0436  C2D100  	                JP      NZ,AHOW ;ALSO >, WILL OVERFLOW
1010:	0439  7D      	XP32:           LD      A,L     ;THIS IS DUMB
1011:	043A  210000  	                LD      HL,0H   ;CLEAR RESULT
1012:	043D  B7      	                OR      A       ;ADD AND COUNT
1013:	043E  2828    	                JR      Z,XP35
1014:	0440  19      	XP33:           ADD     HL,DE
1015:	0441  DAD100  	                JP      C,AHOW  ;OVERFLOW
1016:	0444  3D      	                DEC     A
1017:	0445  20F9    	                JR      NZ,XP33
1018:	0447  181F    	                JR      XP35    ;FINISHED
1019:			;
1020:	0449  CF2F44  	XP34:           TSTC    '/',XP42 ;DIVIDE?
1021:	044C  E5      	                PUSH    HL      ;YES, SAVE 1ST <EXPR4>
1022:	044D  CD7504  	                CALL    EXPR4   ;AND GET THE SECOND ONE
1023:	0450  0600    	                LD      B,0H    ;CLEAR B FOR SIGN
1024:	0452  CD1F05  	                CALL    CHKSGN  ;CHECK SIGN OF 2ND
1025:	0455  E3      	                EX      (SP),HL ;GET 1ST IN HL
1026:	0456  CD1F05  	                CALL    CHKSGN  ;CHECK SIGN OF 1ST
1027:	0459  EB      	                EX      DE,HL
1028:	045A  E3      	                EX      (SP),HL
1029:	045B  EB      	                EX      DE,HL
1030:	045C  7A      	                LD      A,D     ;DIVIDE BY 0?
1031:	045D  B3      	                OR      E
1032:	045E  CAD100  	                JP      Z,AHOW  ;SAY "HOW?"
1033:	0461  C5      	                PUSH    BC      ;ELSE SAVE SIGN
1034:	0462  CD0605  	                CALL    DIVIDE  ;USE SUBROUTINE
1035:	0465  60      	                LD      H,B     ;RESULT IN HL NOW
1036:	0466  69      	                LD      L,C
1037:	0467  C1      	                POP     BC      ;GET SIGN BACK
1038:	0468  D1      	XP35:           POP     DE      ;AND TEXT POINTER
1039:	0469  7C      	                LD      A,H     ;HL MUST BE +
1040:	046A  B7      	                OR      A
1041:	046B  FAD000  	                JP      M,QHOW  ;ELSE IT IS OVERFLOW
1042:	046E  78      	                LD      A,B
1043:	046F  B7      	                OR      A
1044:	0470  FC2205  	                CALL    M,CHGSGN        ;CHANGE SIGN IF NEEDED
1045:	0473  18A8    	                JR      XP31    ;LOOK FOR MORE TERMS
1046:			;
1047:	0475  219607  	EXPR4:          LD      HL,TAB4-1       ;FIND FUNCTION IN TAB4
1048:	0478  C30307  	                JP      EXEC    ;AND GO DO IT
1049:			;
1050:	047B  FF      	XP40:           RST     RTSTV   ;NO, NOT A FUNCTION
1051:	047C  3805    	                JR      C,XP41  ;NOR A VARIABLE
1052:	047E  7E      	                LD      A,(HL)  ;VARIABLE
1053:	047F  23      	                INC     HL
1054:	0480  66      	                LD      H,(HL)  ;VALUE IN HL
1055:	0481  6F      	                LD      L,A
1056:	0482  C9      	                RET
1057:			;
1058:	0483  CD7E00  	XP41:           CALL    TSTNUM  ;OR IS IT A NUMBER
1059:	0486  78      	                LD      A,B     ;# OF DIGIT
1060:	0487  B7      	                OR      A
1061:	0488  C0      	                RET     NZ      ;OK
1062:	0489  CF2805  	PARN:           TSTC    $28,XP43 ; '('
1063:	048C  DF      	                RST     REXPR   ;"(EXPR)"
1064:	048D  CF2901  	                TSTC    $29,XP43 ; ')'
1065:	0490  C9      	XP42:           RET
1066:	0491  C36105  	XP43:           JP      QWHAT   ;ELSE SAY: "WHAT?"
1067:			
1068:	0494  CD8904  	RND:            CALL    PARN    ;*** RND(EXPR) ***
1069:	0497  7C      	                LD      A,H     ;EXPR MUST BE +
1070:	0498  B7      	                OR      A
1071:	0499  FAD000  	                JP      M,QHOW
1072:	049C  B5      	                OR      L       ;AND NON-ZERO
1073:	049D  CAD000  	                JP      Z,QHOW
1074:	04A0  D5      	                PUSH    DE      ;SAVE BOTH
1075:	04A1  E5      	                PUSH    HL
1076:	04A2  2A4A08  	                LD      HL,(RANPNT)     ;GET MEMORY AS RANDOM
1077:	04A5  11EE07  	                LD      DE,LSTROM       ;NUMBER
1078:	04A8  E7      	                RST     RCOMP
1079:	04A9  3803    	                JR      C,RA1   ;WRAP AROUND IF LAST
1080:	04AB  210000  	                LD      HL,CSTART
1081:	04AE  ED5F    	RA1:            LD      A,R     ;RFSH REG GIVES TIME DEP. RANDOM
1082:	04B0  AE      	                XOR     (HL)
1083:	04B1  5F      	                LD      E,A
1084:	04B2  23      	                INC     HL
1085:	04B3  AE      	                XOR     (HL)
1086:	04B4  57      	                LD      D,A
1087:	04B5  224A08  	                LD      (RANPNT),HL
1088:	04B8  E1      	                POP     HL
1089:	04B9  EB      	                EX      DE,HL
1090:	04BA  C5      	                PUSH    BC
1091:	04BB  CD0605  	                CALL    DIVIDE  ;RND(N)=MOD(M,N)+1
1092:	04BE  C1      	                POP     BC
1093:	04BF  D1      	                POP     DE
1094:	04C0  23      	                INC     HL
1095:	04C1  C9      	                RET
1096:			
1097:	04C2  CD8904  	ABS:            CALL    PARN    ;*** ABS(EXPR) ***
1098:	04C5  1B      	                DEC     DE
1099:	04C6  CD1F05  	                CALL    CHKSGN  ;CHECK SIGN AND CHANGE IF HL < 0
1100:	04C9  13      	                INC     DE
1101:	04CA  C9      	                RET
1102:			
1103:	04CB  2A3608  	SIZE:           LD      HL,(TXTUNF)     ;*** RETURN SIZE IN HL ***
1104:	04CE  D5      	                PUSH    DE              ;GET THE NUMBER OF FREE
1105:	04CF  EB      	                EX      DE,HL           ;BYTES BETWEEN 'TXTUNF'
1106:	04D0  21000F  	                LD      HL,TXTEND       ;AND 'TXTEND'
1107:	04D3  CD1B05  	                CALL    SUBDE
1108:	04D6  D1      	                POP     DE
1109:	04D7  C9      	                RET
1110:			
1111:	04D8  CD8904  	GET:            CALL    PARN    ;*** GET(ADDR) ***
1112:	04DB  6E      	                LD      L,(HL)  ;GET CONTENT OF (HL)
1113:	04DC  2600    	                LD      H,0     ;RETURN RESULT IN HL
1114:	04DE  C9      	                RET
1115:			
1116:	04DF  CD8904  	USR:            CALL    PARN    ;*** USR(PARA) ***
1117:	04E2  C3000F  	                JP      USRSPC  ;GET para in HL and JP to prog
1118:			;                               ;There you should:
1119:			;               ...             ;    - Do the work
1120:			;               ...             ;    - Put result in HL
1121:			;               RET             ;$C9 - RET to BASIC
1122:			;                               ;DEFAULT: (USRSPC)=$C9
1123:			
1124:	04E5  210008  	RAM:            LD      HL,RAMBGN ; *** RAM *** VARIABLES 'A'..'Z'
1125:	04E8  C9      	                RET
1126:			
1127:	04E9  210009  	TXT:            LD      HL,TXTBGN ; *** TXT *** BEGIN OF TXT AREA
1128:	04EC  C9      	                RET
1129:			
1130:	04ED  21000F  	TOP:            LD      HL,TXTEND ; *** TOP *** END OF TEXT AREA = USRSPC
1131:	04F0  C9      	                RET
1132:			
1133:	04F1  DF      	PUT:            RST     REXPR   ;*** PUT ADDR, VAL1 [,VAL2, VAL3,..]
1134:	04F2  CF2C0D  	                TSTC    $2C,PT2  ; 1ST ',' SEPARATES THE VALUE(S)
1135:	04F5  E5      	                PUSH    HL      ;SAVE ADDR
1136:	04F6  DF      	PT0:            RST     REXPR   ;GET VAL IN HL
1137:	04F7  7D      	                LD      A,L     ;LOW BYTE OF VAL
1138:	04F8  E1      	                POP     HL      ;GET ADDR
1139:	04F9  77      	                LD      (HL),A  ;PUT VALUE IN RAM
1140:	04FA  CF2C04  	                TSTC    $2C,PT1 ;READY UNLESS ","
1141:	04FD  23      	                INC     HL      ;NEXT ADDR
1142:	04FE  E5      	                PUSH    HL
1143:	04FF  18F5    	                JR      PT0     ;LIST CONTINUES
1144:			;
1145:	0501  F7      	PT1:            RST     RFINISH ;READY
1146:			;
1147:	0502  C36105  	PT2:            JP      QWHAT   ;ELSE SAY: "WHAT?"
1148:			
1149:	0505  76      	HALT_:          HALT            ;HALT CPU (return to analyser)
1150:			
1151:			;
1152:			;*************************************************************
1153:			;
1154:			; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1155:			;
1156:			; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1157:			;
1158:			; 'SUBDE' SUBSTRACTS DE FROM HL
1159:			;
1160:			; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1161:			; SIGN AND FLIP SIGN OF B.
1162:			;
1163:			; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1164:			;
1165:			; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1166:			; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1167:			; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1168:			;
1169:	0506  E5      	DIVIDE:         PUSH    HL      ;*** DIVIDE ***
1170:	0507  6C      	                LD      L,H     ;DIVIDE H BY DE
1171:	0508  2600    	                LD      H,0
1172:	050A  CD1105  	                CALL    DV1
1173:	050D  41      	                LD      B,C     ;SAVE RESULT IN B
1174:	050E  7D      	                LD      A,L     ;(REMINDER+L)/DE
1175:	050F  E1      	                POP     HL
1176:	0510  67      	                LD      H,A
1177:	0511  0EFF    	DV1:            LD      C,0FFH  ;RESULT IN C
1178:	0513  0C      	DV2:            INC     C       ;DUMB ROUTINE
1179:	0514  CD1B05  	                CALL    SUBDE   ;DIVIDE BY SUBTRACT
1180:	0517  30FA    	                JR      NC,DV2  ;AND COUNT
1181:	0519  19      	                ADD     HL,DE
1182:	051A  C9      	                RET
1183:			
1184:	051B  B7      	SUBDE:          OR      A       ;CLR CY
1185:	051C  ED52    	                SBC     HL,DE
1186:	051E  C9      	                RET
1187:			
1188:	051F  7C      	CHKSGN:         LD      A,H     ;*** CHKSGN ***
1189:	0520  B7      	                OR      A       ;CHECK SIGN OF HL
1190:	0521  F0      	                RET     P       ;IF HL >=0 RETURN
1191:			;
1192:	0522  7C      	CHGSGN:         LD      A,H     ;*** CHGSGN ***
1193:	0523  B5      	                OR      L       ;CHECK VALUE OF HL
1194:	0524  C8      	                RET     Z       ;IF HL == 0 RETURN
1195:			;
1196:	0525  7C      	                LD      A,H
1197:	0526  F5      	                PUSH    AF      ;SAVE SIGN
1198:	0527  2F      	                CPL             ;CHANGE SIGN OF HL
1199:	0528  67      	                LD      H,A
1200:	0529  7D      	                LD      A,L
1201:	052A  2F      	                CPL
1202:	052B  6F      	                LD      L,A
1203:	052C  23      	                INC     HL      ;HL = -HL
1204:	052D  F1      	                POP     AF      ;GET ORIGINAL SIGN
1205:	052E  AC      	                XOR     H       ;COMPARE
1206:	052F  F2D000  	                JP      P,QHOW  ;ERROR IF SIGN UNCHANGED (HL=$8000)
1207:	0532  78      	                LD      A,B     ;AND ALSO FLIP B
1208:	0533  EE80    	                XOR     80H
1209:	0535  47      	                LD      B,A
1210:	0536  C9      	                RET
1211:			
1212:	0537  7C      	CKHLDE:         LD      A,H
1213:	0538  AA      	                XOR     D       ;SAME SIGN?
1214:	0539  F23D05  	                JP      P,CK1   ;YES, COMPARE
1215:	053C  EB      	                EX      DE,HL   ;NO, XCH AND COMP
1216:	053D  E7      	CK1:            RST     RCOMP
1217:	053E  C9      	                RET
1218:			;
1219:			;*************************************************************
1220:			;
1221:			; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1222:			;
1223:			; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1224:			; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1225:			; TO THAT VALUE.
1226:			;
1227:			; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1228:			; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1229:			; NEXT LINE AND CONTINUE FROM THERE.
1230:			;
1231:			; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1232:			; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1233:			;
1234:			; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1235:			; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1236:			; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1237:			; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1238:			; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1239:			; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1240:			; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1241:			; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1242:			; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1243:			;
1244:			; RELATED TO 'ERROR' ARE THE FOLLOWING:
1245:			; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1246:			; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1247:			; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1248:			; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1249:			;
1250:	053F  FF      	SETVAL:         RST     RTSTV   ;*** SETVAL ***
1251:	0540  381F    	                JR      C,QWHAT ;"WHAT?" NO VARIABLE
1252:	0542  E5      	                PUSH    HL      ;SAVE ADDRESS OF VAR.
1253:	0543  CF3D1B  	                TSTC    '=',QWHAT ;PASS "=" SIGN
1254:	0546  DF      	                RST     REXPR   ;EVALUATE EXPR.
1255:	0547  44      	                LD      B,H     ;VALUE IS IN BC NOW
1256:	0548  4D      	                LD      C,L
1257:	0549  E1      	                POP     HL      ;GET ADDRESS
1258:	054A  71      	                LD      (HL),C  ;SAVE VALUE
1259:	054B  23      	                INC     HL
1260:	054C  70      	                LD      (HL),B
1261:	054D  C9      	                RET
1262:			
1263:	054E  CF3B04  	FIN:            TSTC    ';',FI1 ;*** FIN ***
1264:	0551  F1      	                POP     AF      ;";", PURGE RET. ADDR.
1265:	0552  C3C601  	                JP      RUNSML  ;CONTINUE SAME LINE
1266:	0555  CF0D04  	FI1:            TSTC    CR,FI2  ;NOT ";", IS IT CR?
1267:	0558  F1      	                POP     AF      ;YES, PURGE RET. ADDR.
1268:	0559  C3B601  	                JP      RUNNXL  ;RUN NEXT LINE
1269:	055C  C9      	FI2:            RET             ;ELSE RETURN TO CALLER
1270:			
1271:	055D  EF      	ENDCHK:         RST     RIGNBLK ;IGNBLK
1272:	055E  FE0D    	                CP      CR      ;END WITH CR?
1273:	0560  C8      	                RET     Z       ;OK, ELSE SAY: "WHAT?"
1274:			;
1275:	0561  D5      	QWHAT:          PUSH    DE      ;*** QWHAT ***
1276:	0562  11E900  	AWHAT:          LD      DE,WHAT ;*** AWHAT ***
1277:	0565  97      	ERROR:          SUB     A       ;*** ERROR ***
1278:	0566  CDF805  	                CALL    PRTSTG  ;PRINT 'WHAT?', 'HOW?'
1279:	0569  D1      	                POP     DE      ;OR 'SORRY'
1280:	056A  1A      	                LD      A,(DE)  ;SAVE THE CHARACTER
1281:	056B  F5      	                PUSH    AF      ;AT WHERE OLD DE ->
1282:	056C  97      	                SUB     A       ;AND PUT A 0 THERE
1283:	056D  12      	                LD      (DE),A
1284:	056E  2A3808  	                LD      HL,(CURRNT)     ;GET CURRENT LINE #
1285:	0571  E5      	                PUSH    HL
1286:	0572  7E      	                LD      A,(HL)  ;CHECK THE VALUE
1287:	0573  23      	                INC     HL
1288:	0574  B6      	                OR      (HL)
1289:	0575  D1      	                POP     DE
1290:	0576  CA2C01  	                JP      Z,WSTART ;IF ZERO, JUST RESTART
1291:	0579  7E      	                LD      A,(HL)  ;IF NEGATIVE,
1292:	057A  B7      	                OR      A
1293:	057B  FA4203  	                JP      M,INPERR        ;REDO INPUT
1294:	057E  CD9106  	                CALL    PRTLN   ;ELSE PRINT THE LINE
1295:	0581  1B      	                DEC     DE      ;UPTO WHERE THE 0 IS
1296:	0582  F1      	                POP     AF      ;RESTORE THE CHARACTER
1297:	0583  12      	                LD      (DE),A
1298:	0584  3E3F    	                LD      A,'?'   ;PRINT A "?"
1299:	0586  D7      	                RST     ROUTC
1300:	0587  97      	                SUB     A       ;AND THE REST OF THE
1301:	0588  CDF805  	                CALL    PRTSTG  ;LINE
1302:	058B  C32C01  	                JP      WSTART  ;THEN RESTART
1303:			;
1304:	058E  D5      	QSORRY:         PUSH    DE      ;*** QSORRY ***
1305:	058F  11EF00  	ASORRY:         LD      DE,SORRY        ;*** ASORRY ***
1306:	0592  18D1    	                JR      ERROR
1307:			
1308:			;
1309:			;*************************************************************
1310:			;
1311:			; *** GETLN *** FNDLN (& FRIENDS) ***
1312:			;
1313:			; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1314:			; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1315:			; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1316:			; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1317:			; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1318:			; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1319:			; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1320:			;
1321:			; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1322:			; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1323:			; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1324:			; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1325:			; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1326:			; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1327:			; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1328:			; LINE, FLAGS ARE C & NZ.
1329:			; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1330:			; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1331:			; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1332:			; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1333:			; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1334:			; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1335:			;
1336:	0594  D7      	GETLN:          RST     ROUTC   ;*** GETLN ***
1337:	0595  11800F  	                LD      DE,BUFFER       ;PROMPT AND INIT.
1338:	0598  CDFB00  	GL1:            CALL    CHKIO   ;CHECK KEYBOARD
1339:	059B  28FB    	                JR      Z,GL1   ;NO INPUT, WAIT
1340:	059D  FE08    	                CP      BS      ;BS, DELETE LAST CHARACTER?
1341:	059F  281A    	                JR      Z,GL3   ;YES
1342:	05A1  FE7F    	                CP      DEL     ;DEL, DELETE LAST CHARACTER?
1343:	05A3  2816    	                JR      Z,GL3   ;YES
1344:	05A5  D7      	                RST     ROUTC   ;INPUT, ECHO BACK
1345:	05A6  FE0A    	                CP      LF      ;IGNORE LF
1346:	05A8  28EE    	                JR      Z,GL1
1347:	05AA  B7      	                OR      A       ;IGNORE NULL
1348:	05AB  28EB    	                JR      Z,GL1
1349:	05AD  FE18    	                CP      CAN     ;^X, DELETE THE WHOLE LINE?
1350:	05AF  281B    	                JR      Z,GL4   ;YES
1351:	05B1  12      	                LD      (DE),A  ;ELSE SAVE INPUT
1352:	05B2  13      	                INC     DE      ;AND BUMP POINTER
1353:	05B3  FE0D    	                CP      CR      ;WAS IT CR?
1354:	05B5  C8      	                RET     Z       ;YES, END OF LINE
1355:	05B6  7B      	                LD      A,E     ;ELSE MORE FREE ROOM?
1356:	05B7  FEFF    	                CP      BUFEND & 0FFH
1357:	05B9  20DD    	                JR      NZ,GL1  ;YES, GET NEXT INPUT
1358:	05BB  7B      	GL3:            LD      A,E     ;DELETE LAST CHARACTER
1359:	05BC  FE80    	                CP      BUFFER & 0FFH   ;BUT DO WE HAVE ANY?
1360:	05BE  280C    	                JR      Z,GL4   ;NO, REDO WHOLE LINE
1361:	05C0  1B      	                DEC     DE      ;YES, BACKUP POINTER
1362:	05C1  3E08    	                LD      A,BS    ;AND ECHO A BACKSPACE
1363:	05C3  D7      	                RST     ROUTC
1364:	05C4  3E20    	                LD      A,' '   ;AND ECHO A BLANK
1365:	05C6  D7      	                RST     ROUTC
1366:	05C7  3E08    	                LD      A,BS    ;AND ECHO A BACKSPACE
1367:	05C9  D7      	                RST     ROUTC
1368:	05CA  18CC    	                JR      GL1     ;GO GET NEXT INPUT
1369:	05CC  CD0E00  	GL4:            CALL    CRLF    ;REDO ENTIRE LINE
1370:	05CF  3E5E    	                LD      A,'^'   ;CR, LF AND UP-ARROW
1371:	05D1  18C1    	                JR      GETLN
1372:			;
1373:	05D3  7C      	FNDLN:          LD      A,H     ;*** FNDLN ***
1374:	05D4  B7      	                OR      A       ;CHECK SIGN OF HL
1375:	05D5  FAD000  	                JP      M,QHOW  ;IT CANNOT BE -
1376:	05D8  110009  	                LD      DE,TXTBGN       ;INIT TEXT POINTER
1377:			;
1378:	05DB          	FNDLP:          ;*** FDLNP ***
1379:	05DB  E5      	FL1:            PUSH    HL      ;SAVE LINE #
1380:	05DC  2A3608  	                LD      HL,(TXTUNF)     ;CHECK IF WE PASSED END
1381:	05DF  2B      	                DEC     HL
1382:	05E0  E7      	                RST     RCOMP
1383:	05E1  E1      	                POP     HL      ;GET LINE # BACK
1384:	05E2  D8      	                RET     C       ;C,NZ PASSED END
1385:	05E3  1A      	                LD      A,(DE)  ;WE DID NOT, GET BYTE 1
1386:	05E4  95      	                SUB     L       ;IS THIS THE LINE?
1387:	05E5  47      	                LD      B,A     ;COMPARE LOW ORDER
1388:	05E6  13      	                INC     DE
1389:	05E7  1A      	                LD      A,(DE)  ;GET BYTE 2
1390:	05E8  9C      	                SBC     A,H     ;COMPARE HIGH ORDER
1391:	05E9  3804    	                JR      C,FL2   ;NO, NOT THERE YET
1392:	05EB  1B      	                DEC     DE      ;ELSE WE EITHER FOUND
1393:	05EC  B0      	                OR      B       ;IT, OR IT IS NOT THERE
1394:	05ED  C9      	                RET     ;NC,Z:FOUND, NC,NZ:NO
1395:			;
1396:	05EE          	FNDNXT:         ;*** FNDNXT ***
1397:	05EE  13      	                INC     DE      ;FIND NEXT LINE
1398:	05EF  13      	FL2:            INC     DE      ;JUST PASSED BYTE 1 & 2
1399:			;
1400:	05F0  1A      	FNDSKP:         LD      A,(DE)  ;*** FNDSKP ***
1401:	05F1  FE0D    	                CP      CR      ;TRY TO FIND CR
1402:	05F3  20FA    	                JR      NZ,FL2  ;KEEP LOOKING
1403:	05F5  13      	                INC     DE      ;FOUND CR, SKIP OVER
1404:	05F6  18E3    	                JR      FL1     ;CHECK IF END OF TEXT
1405:			;
1406:			;*************************************************************
1407:			;
1408:			; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1409:			;
1410:			; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1411:			; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1412:			; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1413:			; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1414:			;
1415:			; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1416:			; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1417:			; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1418:			; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1419:			; HACK AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER
1420:			;      IS SKIPPED OVER (SHALL BE A "JP" INSTRUCTION).
1421:			;
1422:			; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1423:			; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1424:			; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1425:			; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1426:			; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1427:			;
1428:			; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1429:			;
1430:	05F8  47      	PRTSTG:         LD      B,A     ;*** PRTSTG ***
1431:	05F9  1A      	PS1:            LD      A,(DE)  ;GET A CHARACTER
1432:	05FA  13      	                INC     DE      ;BUMP POINTER
1433:	05FB  B8      	                CP      B       ;SAME AS OLD A?
1434:	05FC  C8      	                RET     Z       ;YES, RETURN
1435:	05FD  D7      	                RST     ROUTC   ;ELSE PRINT IT
1436:	05FE  FE0D    	                CP      CR      ;WAS IT A CR?
1437:	0600  20F7    	                JR      NZ,PS1  ;NO, NEXT
1438:	0602  C9      	                RET             ;YES, RETURN
1439:			;
1440:	0603  CF220F  	QTSTG:          TSTC    $22,QT3 ;*** QTSTG ***
1441:	0606  3E22    	                LD      A,22H   ;IT IS A '"'
1442:	0608  CDF805  	QT1:            CALL    PRTSTG  ;PRINT UNTIL ANOTHER
1443:	060B  FE0D    	QT1A:           CP      CR      ;WAS LAST ONE A CR?
1444:	060D  E1      	                POP     HL       ; HACK RETURN ADDRESS
1445:	060E  CAB601  	                JP      Z,RUNNXL ; WAS CR, RUN NEXT LINE
1446:	0611  23      	QT2:            INC     HL       ; !! SKIP 3 BYTES ON RETURN
1447:	0612  23      	                INC     HL       ; !! -> AFTER "CALL QTSTG"
1448:	0613  23      	                INC     HL       ; !!    MUST BE "JP .."
1449:	0614  E9      	                JP      (HL)     ; !! RETURN AFTER THIS "JP"
1450:			;
1451:	0615  CF2704  	QT3:            TSTC    $27,QT4 ;IS IT A "'"?
1452:	0618  3E27    	                LD      A,27H   ;YES, DO THE SAME
1453:	061A  18EC    	                JR      QT1     ;AS IN '"'
1454:			;
1455:	061C  CF5F06  	QT4:            TSTC    $5F,QT5 ;IS IT UNDERLINE?
1456:	061F  3E8D    	                LD      A,08DH  ;YES, CR WITHOUT LF
1457:	0621  D7      	                RST     ROUTC
1458:	0622  E1      	                POP     HL      ;HACK RETURN ADDRESS
1459:	0623  18EC    	                JR      QT2
1460:			;
1461:	0625  CF5E08  	QT5:            TSTC    5EH,QT6 ;RST 1, is it '^'?
1462:	0628  1A      	                LD      A,(DE)  ;CHR
1463:	0629  EE40    	                XOR     40H     ;CONVERT TO CTRL
1464:	062B  D7      	                RST     ROUTC
1465:	062C  1A      	                LD      A,(DE)  ;RESTORE CHR
1466:	062D  13      	                INC     DE
1467:	062E  18DB    	                JR      QT1A
1468:	0630  C9      	QT6:            RET             ;NONE OF ABOVE
1469:			
1470:	0631          	PRTNUM:                         ;*** PRINT NUMBER IN HL ***
1471:	0631  3A3508  	                LD      A,(PNBASE)      ;GET NUMBER BASE
1472:	0634  B7      	                OR      A
1473:	0635  2809    	                JR      Z,PN0   ;0: DEFAULT DEC
1474:	0637  FE10    	                CP      16      ;HEX NUMBER?
1475:	0639  2010    	                JR      NZ,PN1  ;NO
1476:	063B  0624    	                LD      B,'$'   ;PRINT LEADING '$'
1477:	063D  0D      	                DEC     C       ;'$' TAKES SPACE
1478:	063E  180B    	                JR      PN1     ;HEX IS UNSIGNED
1479:	0640  0600    	PN0:            LD      B,0     ;NO PREFIX YET
1480:	0642  CD1F05  	                CALL    CHKSGN  ;CHECK SIGN
1481:	0645  F24B06  	                JP      P,PN1   ;NO SIGN
1482:	0648  062D    	                LD      B,'-'   ;B=SIGN
1483:	064A  0D      	                DEC     C       ;'-' TAKES SPACE
1484:	064B  D5      	PN1:            PUSH    DE
1485:	064C  3A3508  	                LD      A,(PNBASE)
1486:	064F  B7      	                OR      A       ;DEFAULT DECIMAL?
1487:	0650  2002    	                JR      NZ,PN1A
1488:	0652  3E0A    	                LD      A,10
1489:	0654  5F      	PN1A:           LD      E,A
1490:	0655  AF      	                XOR     A
1491:	0656  57      	                LD      D,A
1492:	0657  D5      	                PUSH    DE      ;SAVE AS A FLAG
1493:	0658  0D      	                DEC     C       ;C=SPACES
1494:	0659  C5      	                PUSH    BC      ;SAVE SIGN & SPACE
1495:	065A  CD0605  	PN2:            CALL    DIVIDE  ;DIVIDE HL BY NUMBER BASE
1496:	065D  78      	                LD      A,B     ;RESULT 0?
1497:	065E  B1      	                OR      C
1498:	065F  2807    	                JR      Z,PN3   ;YES, WE GOT ALL
1499:	0661  E3      	                EX      (SP),HL ;NO, SAVE REMAINDER
1500:	0662  2D      	                DEC     L       ;AND COUNT SPACE
1501:	0663  E5      	                PUSH    HL      ;HL IS OLD BC
1502:	0664  60      	                LD      H,B     ;MOVE RESULT TO BC
1503:	0665  69      	                LD      L,C
1504:	0666  18F2    	                JR      PN2     ;AND DIVIDE AGAIN
1505:			;
1506:	0668  C1      	PN3:            POP     BC      ;WE GOT ALL DIGITS IN
1507:	0669  0D      	PN4:            DEC     C       ;THE STACK
1508:	066A  79      	                LD      A,C     ;LOOK AT SPACE COUNT
1509:	066B  B7      	                OR      A
1510:	066C  FA7406  	                JP      M,PN5   ;NO LEADING BLANKS
1511:	066F  3E20    	                LD      A,' '   ;LEADING BLANKS
1512:	0671  D7      	                RST     ROUTC
1513:	0672  18F5    	                JR      PN4     ;MORE?
1514:	0674  78      	PN5:            LD      A,B     ;PRINT SIGN OR '$'
1515:	0675  B7      	                OR      A
1516:	0676  C41000  	                CALL    NZ,ROUTC
1517:	0679  5D      	                LD      E,L     ;LAST REMAINDER IN E
1518:	067A  3A3508  	PN6:            LD      A,(PNBASE)      ;GET NUMBER BASE
1519:	067D  B7      	                OR      A       ;DEFAULT DECIMAL?
1520:	067E  2002    	                JR      NZ,PN6A
1521:	0680  3E0A    	                LD      A,10
1522:	0682  BB      	PN6A:           CP      E       ;IT IS FLAG FOR NO MORE
1523:	0683  7B      	                LD      A,E     ;CHECK DIGIT IN E
1524:	0684  D1      	                POP     DE
1525:	0685  C8      	                RET     Z       ;IF SO, RETURN
1526:	0686  FE0A    	                CP      10      ;0-9? < A hex?
1527:	0688  3802    	                JR      C,PN7   ;Skip Add 7
1528:	068A  C607    	                ADD     A,'A'-'0'-10    ;Bring it up to ASCII A-F
1529:	068C  C630    	PN7:            ADD     A,'0'   ;ELSE CONVERT TO ASCII
1530:	068E  D7      	                RST     ROUTC   ;AND PRINT THE DIGIT
1531:	068F  18E9    	                JR      PN6     ;GO BACK FOR MORE
1532:			
1533:	0691  AF      	PRTLN:          XOR     A       ;0 -> DEFAULT BASE 10 SIGNED
1534:	0692  323508  	                LD      (PNBASE),A      ;FOR PRTNUM
1535:	0695  1A      	                LD      A,(DE)
1536:	0696  6F      	                LD      L,A     ;LOW ORDER LINE #
1537:	0697  13      	                INC     DE
1538:	0698  1A      	                LD      A,(DE)  ;HIGH ORDER
1539:	0699  67      	                LD      H,A
1540:	069A  13      	                INC     DE
1541:	069B  0E04    	                LD      C,4     ;PRINT 4 DIGIT LINE #
1542:	069D  CD3106  	                CALL    PRTNUM
1543:	06A0  3E20    	                LD      A,' '   ;FOLLOWED BY A BLANK
1544:	06A2  D7      	                RST     ROUTC
1545:	06A3  97      	                SUB     A       ;AND THEN THE NEXT
1546:	06A4  CDF805  	                CALL    PRTSTG
1547:	06A7  C9      	                RET
1548:			;
1549:			;*************************************************************
1550:			;
1551:			; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1552:			;
1553:			; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1554:			; DE = HL
1555:			;
1556:			; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1557:			; UNTIL DE = BC
1558:			;
1559:			; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1560:			; STACK
1561:			;
1562:			; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1563:			; STACK
1564:			;
1565:	06A8  E7      	MVUP:           RST     RCOMP   ;*** MVUP ***
1566:	06A9  C8      	                RET     Z       ;DE = HL, RETURN
1567:	06AA  1A      	                LD      A,(DE)  ;GET ONE BYTE
1568:	06AB  02      	                LD      (BC),A  ;MOVE IT
1569:	06AC  13      	                INC     DE      ;INCREASE BOTH POINTERS
1570:	06AD  03      	                INC     BC
1571:	06AE  18F8    	                JR      MVUP    ;UNTIL DONE
1572:			;
1573:	06B0  78      	MVDOWN:         LD      A,B     ;*** MVDOWN ***
1574:	06B1  92      	                SUB     D       ;TEST IF DE = BC
1575:	06B2  2003    	                JR      NZ,MD1  ;NO, GO MOVE
1576:	06B4  79      	                LD      A,C     ;MAYBE, OTHER BYTE?
1577:	06B5  93      	                SUB     E
1578:	06B6  C8      	                RET     Z       ;YES, RETURN
1579:	06B7  1B      	MD1:            DEC     DE      ;ELSE MOVE A BYTE
1580:	06B8  2B      	                DEC     HL      ;BUT FIRST DECREASE
1581:	06B9  1A      	                LD      A,(DE)  ;BOTH POINTERS AND
1582:	06BA  77      	                LD      (HL),A  ;THEN DO IT
1583:	06BB  18F3    	                JR      MVDOWN  ;LOOP BACK
1584:			;
1585:	06BD  C1      	POPA:           POP     BC      ;BC = RETURN ADDR.
1586:	06BE  E1      	                POP     HL      ;RESTORE LOPVAR, BUT
1587:	06BF  224008  	                LD      (LOPVAR),HL     ;=0 MEANS NO MORE
1588:	06C2  7C      	                LD      A,H
1589:	06C3  B5      	                OR      L
1590:	06C4  2810    	                JR      Z,PP1   ;YEP, GO RETURN
1591:	06C6  E1      	                POP     HL      ;NOP, RESTORE OTHERS
1592:	06C7  224208  	                LD      (LOPINC),HL
1593:	06CA  E1      	                POP     HL
1594:	06CB  224408  	                LD      (LOPLMT),HL
1595:	06CE  E1      	                POP     HL
1596:	06CF  224608  	                LD      (LOPLN),HL
1597:	06D2  E1      	                POP     HL
1598:	06D3  224808  	                LD      (LOPPT),HL
1599:	06D6  C5      	PP1:            PUSH    BC      ;BC = RETURN ADDR.
1600:	06D7  C9      	                RET
1601:			;
1602:	06D8  214C08  	PUSHA:          LD      HL,STKLMT       ;*** PUSHA ***
1603:	06DB  CD2205  	                CALL    CHGSGN
1604:	06DE  C1      	                POP     BC      ;BC=RETURN ADDRESS
1605:	06DF  39      	                ADD     HL,SP   ;IS STACK NEAR THE TOP?
1606:	06E0  D28E05  	                JP      NC,QSORRY       ;YES, SORRY FOR THAT
1607:	06E3  2A4008  	                LD      HL,(LOPVAR)     ;ELSE SAVE LOOP VAR'S
1608:	06E6  7C      	                LD      A,H     ;BUT IF LOPVAR IS 0
1609:	06E7  B5      	                OR      L       ;THAT WILL BE ALL
1610:	06E8  2813    	                JR      Z,PU1
1611:	06EA  2A4808  	                LD      HL,(LOPPT)      ;ELSE, MORE TO SAVE
1612:	06ED  E5      	                PUSH    HL
1613:	06EE  2A4608  	                LD      HL,(LOPLN)
1614:	06F1  E5      	                PUSH    HL
1615:	06F2  2A4408  	                LD      HL,(LOPLMT)
1616:	06F5  E5      	                PUSH    HL
1617:	06F6  2A4208  	                LD      HL,(LOPINC)
1618:	06F9  E5      	                PUSH    HL
1619:	06FA  2A4008  	                LD      HL,(LOPVAR)
1620:	06FD  E5      	PU1:            PUSH    HL
1621:	06FE  C5      	                PUSH    BC      ;BC = RETURN ADDR.
1622:	06FF  C9      	                RET
1623:			
1624:			;*************************************************************
1625:			;
1626:			; *** DIRECT *** EXEC *** TABLES ***
1627:			;
1628:			; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1629:			; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1630:			; OF CODE ACCORDING TO THE TABLE.
1631:			;
1632:			; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1633:			; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1634:			; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1635:			; ALL DIRECT AND STATEMENT COMMANDS.
1636:			;
1637:			; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1638:			; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1639:			; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1640:			;
1641:			
1642:	0700  213407  	DIRECT:         LD      HL,TAB1-1       ;*** DIRECT ***
1643:			;
1644:	0703          	EXEC:           ;*** EXEC ***
1645:	0703  EF      	EX0:            RST     RIGNBLK ;IGNORE LEADING BLANKS
1646:	0704  D5      	                PUSH    DE      ;SAVE POINTER
1647:	0705  1A      	EX1:            LD      A,(DE)  ;IF FOUND '.' IN STRING
1648:	0706  13      	                INC     DE      ;BEFORE ANY MISMATCH
1649:	0707  FE2E    	                CP      2EH     ;WE DECLARE A MATCH
1650:	0709  281C    	                JR      Z,EX3
1651:	070B  FE61    	                CP      'a'     ;< 'a' ?
1652:	070D  3806    	                JR      C,EXN   ;NO ALPHA CHAR
1653:	070F  FE7B    	                CP      'z'+1   ;> 'z'
1654:	0711  3002    	                JR      NC,EXN  ;NO ALPHA CHAR
1655:	0713  E65F    	                AND     5FH     ;MASK LOWER CASE TO UPPER CASE
1656:	0715          	EXN:
1657:	0715  23      	                INC     HL      ;HL->TABLE
1658:	0716  BE      	                CP      (HL)    ;IF MATCH, TEST NEXT
1659:	0717  28EC    	                JR      Z,EX1
1660:	0719  3E7F    	                LD      A,07FH  ;ELSE SEE IF BIT 7
1661:	071B  1B      	                DEC     DE      ;OF TABLE IS SET, WHICH
1662:	071C  BE      	                CP      (HL)    ;IS THE JUMP ADDR. (HI)
1663:	071D  380E    	                JR      C,EX5   ;C:YES, MATCHED
1664:	071F  23      	EX2:            INC     HL      ;NC:NO, FIND JUMP ADDR.
1665:	0720  BE      	                CP      (HL)
1666:	0721  30FC    	                JR      NC,EX2
1667:	0723  23      	                INC     HL      ;BUMP TO NEXT TAB. ITEM
1668:	0724  D1      	                POP     DE      ;RESTORE STRING POINTER
1669:	0725  18DC    	                JR      EX0     ;TEST AGAINST NEXT ITEM
1670:	0727  3E7F    	EX3:            LD      A,07FH  ;PARTIAL MATCH, FIND
1671:	0729  23      	EX4:            INC     HL      ;JUMP ADDR., WHICH IS
1672:	072A  BE      	                CP      (HL)    ;FLAGGED BY BIT 7
1673:	072B  30FC    	                JR      NC,EX4
1674:	072D  7E      	EX5:            LD      A,(HL)  ;LOAD HL WITH THE JUMP
1675:	072E  23      	                INC     HL      ;ADDRESS FROM THE TABLE
1676:	072F  6E      	                LD      L,(HL)
1677:			                                ;ADDRESSES ARE BIG-ENDIAN
1678:			                                ;WITH MSB SET to 1
1679:	0001          	                .IF      $ < 8000H
1680:	0730  E67F    	                AND     7FH     ;MASK OFF HIGH ADDRESS BIT
1681:			                .ENDIF
1682:	0732  67      	                LD      H,A
1683:	0733  F1      	                POP     AF      ;CLEAN UP THE GARBAGE
1684:	0734  E9      	                JP      (HL)    ;AND WE GO DO IT
1685:			;
1686:			
1687:			; THE TABLES CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1688:			; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1689:			; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1690:			; BYTE SET TO 1.
1691:			; This is done by the macro 'DWA'.
1692:			; If the program is executed from an address < 0x8000
1693:			; take care to mask this bit in program part 'EXEC'.
1694:			;
1695:			; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.
1696:			; IF THE STRING DOES NOT MATCH ANY OF THE OTHER ITEMS,
1697:			; IT WILL MATCH THIS NULL ITEM AS DEFAULT.
1698:			
1699:			;
1700:	0735          	TAB1:           ;DIRECT ONLY COMMANDS
1701:	0735  4C495354	                .DB     "LIST"
1702:	0739  81DD    	                DWA     LIST_
1703:	073B  52554E  	                .DB     "RUN"
1704:	073E  81B0    	                DWA     RUN
1705:	0740  4E4557  	                .DB     "NEW"
1706:	0743  81A1    	                DWA     NEW
1707:			;
1708:	0745          	TAB2:           ;DIRECT OR PROGRAM STATEMENT
1709:	0745  4E455854	                .DB     "NEXT"
1710:	0749  82D9    	                DWA     NEXT
1711:	074B  4C4554  	                .DB     "LET"           ; can be omitted
1712:	074E  839B    	                DWA     LET
1713:	0750  4946    	                .DB     "IF"
1714:	0752  8333    	                DWA     IF_
1715:	0754  474F544F	                .DB     "GOTO"
1716:	0758  81CF    	                DWA     GOTO
1717:	075A  474F5355	                .DB     "GOSUB"
	      42
1718:	075F  8245    	                DWA     GOSUB
1719:	0761  52455455	                .DB     "RETURN"
	      524E
1720:	0767  8265    	                DWA     RETURN
1721:	0769  52454D  	                .DB     "REM"
1722:	076C  832F    	                DWA     REM
1723:	076E  464F52  	                .DB     "FOR"
1724:	0771  827E    	                DWA     FOR
1725:	0773  494E5055	                .DB     "INPUT"         ; wait for KBD input
	      54
1726:	0778  834C    	                DWA     INPUT
1727:	077A  5052494E	                .DB     "PRINT"
	      54
1728:	077F  81F4    	                DWA     PRINT
1729:	0781  3F      	                .DB     "?"             ; short for PRINT
1730:	0782  81F4    	                DWA     PRINT
1731:	0784  505554  	                .DB     "PUT"           ; PUT ADDR, VAL, VAL,...
1732:	0787  84F1    	                DWA     PUT
1733:	0789  53544F50	                .DB     "STOP"          ; warm start
1734:	078D  81AA    	                DWA     STOP
1735:	078F  48414C54	                .DB     "HALT"          ; HALT CPU (return to analyser)
1736:	0793  8505    	                DWA     HALT_
1737:	0795  8396    	                DWA     DEFLT           ;END OF LIST
1738:			;
1739:	0797          	TAB4:           ;FUNCTIONS AND CONSTANTS
1740:	0797  524E44  	                .DB     "RND"           ;funct RND(RANGE)
1741:	079A  8494    	                DWA     RND
1742:	079C  414253  	                .DB     "ABS"           ;funct ABS(VALUE)
1743:	079F  84C2    	                DWA     ABS
1744:	07A1  474554  	                .DB     "GET"           ;funct GET(ADR) get byte from memory
1745:	07A4  84D8    	                DWA     GET
1746:	07A6  555352  	                .DB     "USR"           ;funct USR(PARA) call usr funct at TOP
1747:	07A9  84DF    	                DWA     USR                ; and return a result in HL
1748:	07AB  53495A45	                .DB     "SIZE"          ;const SIZE - no parantesis, get free mem
1749:	07AF  84CB    	                DWA     SIZE
1750:	07B1  52414D  	                .DB     "RAM"           ;const RAM - no par., get RAM begin = 'A'..'Z'
1751:	07B4  84E5    	                DWA     RAM
1752:	07B6  545854  	                .DB     "TXT"           ;const TXT - no par., get TEXT begin
1753:	07B9  84E9    	                DWA     TXT
1754:	07BB  544F50  	                .DB     "TOP"           ;const TOP - no par., get TEXT TOP = USRSPC
1755:	07BE  84ED    	                DWA     TOP
1756:	07C0  847B    	                DWA     XP40            ;END OF LIST
1757:			;
1758:	07C2          	TAB5:           ;"TO" IN "FOR"
1759:	07C2  544F    	                .DB     "TO"
1760:	07C4  828E    	                DWA     FR1
1761:	07C6  8561    	                DWA     QWHAT           ;END OF LIST
1762:			;
1763:	07C8          	TAB6:           ;"STEP" IN "FOR"
1764:	07C8  53544550	                .DB     "STEP"
1765:	07CC  8298    	                DWA     FR2
1766:	07CE  829B    	                DWA     FR3             ;END OF LIST
1767:			;
1768:	07D0          	TAB8:           ;RELATION OPERATORS
1769:	07D0  3E3D    	                .DB     ">="
1770:	07D2  83AA    	                DWA     XP11
1771:	07D4  213D    	                .DB     "!="
1772:	07D6  83B0    	                DWA     XP12
1773:	07D8  23      	                .DB     "#"
1774:	07D9  83B0    	                DWA     XP12
1775:	07DB  3E      	                .DB     ">"
1776:	07DC  83B6    	                DWA     XP13
1777:	07DE  3D3D    	                .DB     "=="
1778:	07E0  83C5    	                DWA     XP15
1779:	07E2  3D      	                .DB     "="
1780:	07E3  83C5    	                DWA     XP15
1781:	07E5  3C3D    	                .DB     "<="
1782:	07E7  83BD    	                DWA     XP14
1783:	07E9  3C      	                .DB     "<"
1784:	07EA  83CB    	                DWA     XP16
1785:	07EC  83D1    	                DWA     XP17            ;END OF REL OPERATOR LIST
1786:			
1787:			;
1788:	07EE          	LSTROM:                                 ;ALL ABOVE CAN BE ROM
1789:			
1790:			;
1791:			; CHECK THAT THE PROGRAM DOES NOT EXCEED ROM SIZE
1792:			;
1793:	0001          	                .ASSERT $ <= RAMBGN
1794:			
1795:			
1796:	07EE ..07FF 00	                .DC     RAMBGN-$,$00    ;fill with $00 until RAMBGN
1797:			;
1798:			;
1799:			;*************************************************************
1800:			
1801:	0800          	                .ORG    RAMBGN          ;HERE DOWN MUST BE RAM
1802:			;
1803:			;*************************************************************
1804:			;
1805:			
1806:	0800          	VARBGN:         .DS     2*26            ;VARIABLES 'A'..'Z'
1807:	0834          	OCSW:           .DS     1               ;SWITCH FOR OUTPUT
1808:	0835          	PNBASE:         .DS     1               ;BASE FOR PRTNUM
1809:	0836          	TXTUNF:         .DS     2               ;->UNFILLED TEXT AREA
1810:	0838          	CURRNT:         .DS     2               ;POINTS TO CURRENT LINE
1811:	083A          	STKGOS:         .DS     2               ;SAVES SP IN 'GOSUB'
1812:	083C          	VARNXT:         .DS     2               ;TEMP STORAGE
1813:	083E          	STKINP:         .DS     2               ;SAVES SP IN 'INPUT'
1814:	0840          	LOPVAR:         .DS     2               ;'FOR' LOOP SAVE AREA
1815:	0842          	LOPINC:         .DS     2               ;INCREMENT
1816:	0844          	LOPLMT:         .DS     2               ;LIMIT
1817:	0846          	LOPLN:          .DS     2               ;LINE NUMBER
1818:	0848          	LOPPT:          .DS     2               ;TEXT POINTER
1819:	084A          	RANPNT:         .DS     2               ;RANDOM NUMBER POINTER
1820:	084C          	STKLMT:         .EQU    $               ;LIMIT FOR STACK
1821:			
1822:	0900          	                .ORG    RAMBGN+$100
1823:			;
1824:	0900          	STACK:                                  ;STACK STARTS HERE AND GROWS DOWN
1825:			
1826:	0900          	TXTBGN:                                 ;TEXT STARTS HERE AND GROWS UP
1827:			;
1828:			
1829:	0F00          	                .ORG    RAMBGN+RAMSZE-$100
1830:	0F00          	TXTEND:                                 ;TEXT SAVE AREA ENDS
1831:			;
1832:			                                        ;VARIABLES @(0), @(1), @(2)
1833:			                                        ;... stored top-down
1834:			                                        ;i.e. &@(i) = TXTEND-2-2*i
1835:			;
1836:	0F00          	USRSPC:         .DS     128
1837:			
1838:	0F80          	BUFFER:         .DS     127             ;INPUT BUFFER
1839:	0FFF          	BUFEND:         .DS     1               ;BUFFER END
1840:			
1841:	1000          	                .END



Statistics:

     4	passes
     0	jr promotions
   225	symbols
  2048	bytes

    64	macro calls
   205	macro bytes
     0	invented symbols



Symbol Table:

ABS              4C2      1218
AHOW            D1        209
ASORRY           58F      1423
AWHAT            562      1378
BS             =08        8
BUFEND           FFF      4095
BUFFER           F80      3968
CAN            =18        24
CHGSGN           522      1314
CHKIO           FB        251
CHKSGN           51F      1311
CI0              104      260
CK1              53D      1341
CKHLDE           537      1335
CR             =0D        13
CRLF            0E        14
CSTART          00        0
CURRNT           838      2104
DEFLT            396      918
DEL            =7F        127
DIRECT           700      1792
DIVIDE           506      1286
DV1              511      1297
DV2              513      1299
ENDCHK           55D      1373
ERROR            565      1381
EX0              703      1795
EX1              705      1797
EX2              71F      1823
EX3              727      1831
EX4              729      1833
EX5              72D      1837
EXEC             703      1795
EXN              715      1813
EXPR1            3A4      932
EXPR2            3E8      1000
EXPR3            41A      1050
EXPR4            475      1141
FI1              555      1365
FI2              55C      1372
FIN              54E      1358
FL1              5DB      1499
FL2              5EF      1519
FNDLN            5D3      1491
FNDLP            5DB      1499
FNDNXT           5EE      1518
FNDSKP           5F0      1520
FOR              27E      638
FR1              28E      654
FR2              298      664
FR3              29B      667
FR4              29E      670
FR5              2A1      673
FR7              2B6      694
FR8              2D4      724
GET              4D8      1240
GETLN            594      1428
GL1              598      1432
GL3              5BB      1467
GL4              5CC      1484
GOSUB            245      581
GOTO             1CF      463
HALT_            505      1285
HOW             E1        225
IF_              333      819
INIT             109      265
INPERR           342      834
INPUT            34C      844
IODATA         =01        1
IOSTAT         =02        2
IO_RX_BIT      =01        1
IP1              34C      844
IP2              358      856
IP3              368      872
IP4              38F      911
IP5              395      917
LET              39B      923
LF             =0A        10
LIST_            1DD      477
LOPINC           842      2114
LOPLMT           844      2116
LOPLN            846      2118
LOPPT            848      2120
LOPVAR           840      2112
LS1              1E6      486
LSTROM           7EE      2030
LT1              3A3      931
MD1              6B7      1719
MVDOWN           6B0      1712
MVUP             6A8      1704
NEW              1A1      417
NEXT             2D9      729
NX0              2E0      736
NX1              318      792
NX2              32B      811
NX3              2F6      758
NX4              308      776
NX5              329      809
OC1             F5        245
OCSW             834      2100
OK              E6        230
PARN             489      1161
PN0              640      1600
PN1              64B      1611
PN1A             654      1620
PN2              65A      1626
PN3              668      1640
PN4              669      1641
PN5              674      1652
PN6              67A      1658
PN6A             682      1666
PN7              68C      1676
PNBASE           835      2101
POPA             6BD      1725
PP1              6D6      1750
PR0              20C      524
PR1              227      551
PR2              203      515
PR3              22D      557
PR5              213      531
PR6              235      565
PR8              23D      573
PRINT            1F4      500
PRTLN            691      1681
PRTNUM           631      1585
PRTSTG           5F8      1528
PS1              5F9      1529
PT0              4F6      1270
PT1              501      1281
PT2              502      1282
PU1              6FD      1789
PUSHA            6D8      1752
PUT              4F1      1265
QHOW            D0        208
QSORRY           58E      1422
QT1              608      1544
QT1A             60B      1547
QT2              611      1553
QT3              615      1557
QT4              61C      1564
QT5              625      1573
QT6              630      1584
QTSTG            603      1539
QWHAT            561      1377
RA1              4AE      1198
RAM              4E5      1253
RAMBGN         = 800      2048
RAMSZE         = 800      2048
RANPNT           84A      2122
RCOMP           20        32
REM              32F      815
RETURN           265      613
REXPR           18        24
RFINISH         30        48
RIGNBLK         28        40
RND              494      1172
ROMBGN         =00        0
ROUTC           10        16
RTSTC           08        8
RTSTV           38        56
RUN              1B0      432
RUNNXL           1B6      438
RUNSML           1C6      454
RUNTSL           1BF      447
SETVAL           53F      1343
SIZE             4CB      1227
SORRY           EF        239
ST2              13F      319
ST3              148      328
ST4              17C      380
STACK            900      2304
STKGOS           83A      2106
STKINP           83E      2110
STKLMT         = 84C      2124
STOP             1AA      426
SUBDE            51B      1307
TAB1             735      1845
TAB2             745      1861
TAB4             797      1943
TAB5             7C2      1986
TAB6             7C8      1992
TAB8             7D0      2000
TC1             70        112
TC2             7A        122
TIBAS           D7        215
TN1             87        135
TOP              4ED      1261
TSTNUM          7E        126
TV1             5A        90
TV2             60        96
TX1             A9        169
TX2             BC        188
TXT              4E9      1257
TXTBGN           900      2304
TXTEND           F00      3840
TXTUNF           836      2102
USR              4DF      1247
USRSPC           F00      3840
VARBGN           800      2048
VARNXT           83C      2108
WHAT            E9        233
WSTART           12C      300
XP11             3AA      938
XP12             3B0      944
XP13             3B6      950
XP14             3BD      957
XP15             3C5      965
XP16             3CB      971
XP17             3D1      977
XP18             3D3      979
XP21             3F0      1008
XP22             3F3      1011
XP23             3F6      1014
XP24             3FD      1021
XP25             40E      1038
XP26             411      1041
XP31             41D      1053
XP32             439      1081
XP33             440      1088
XP34             449      1097
XP35             468      1128
XP40             47B      1147
XP41             483      1155
XP42             490      1168
XP43             491      1169
