   1:			; Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
   2:			; Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
   3:			; Status bit for read in CHKIO changed to 0x02
   4:			; Status bit for write in OUTC (actually OC3) changed to 0x01
   5:			; Changed UART initialization parameters in INIT
   6:			; Changed ORG statements at end of file to match system with 2K RAM
   7:			;
   8:			; 2024-10-11 Ho-Ro:
   9:			; Automatically converted from 8080 syntax to Z80 syntax:
  10:			; https://hc-ddr.hucki.net/wiki/doku.php/cpm/8080_z80
  11:			; Assembler: uz80as for Z80 as well as i8080 (uz80as --target=i8080)
  12:			; Modified for use with Z80 dongle simulator
  13:			; UART data port 1
  14:			; UART status port 2
  15:			; New:
  16:			; Case insensitive input
  17:			; PRINT modifier for hex out: PRINT %16,..
  18:			; Hex numbers: $xxxx
  19:			; 2024-10-13 Ho-Ro:
  20:			; build ROM version (2K ROM / 6.5K RAM) and RAM version (2K prog RAM / 2K free RAM)
  21:			; add command "BYE" (halts Z80, returns to dongle analyser program)
  22:			; 2024-10-15 Ho-Ro:
  23:			; PRINT modifier %nn switches to unsigned number format, e.g.:
  24:			; PRINT %10,$FFFF -> 65535
  25:			; 2024-10-17 Ho-Ro:
  26:			; PUT ADDR, VAL, VAL, VAL,...
  27:			; constants RAM (TXTBGN), TOP (TXTEND) and SIZE (TXTEND-TXTUNF)
  28:			; function USR(para) that calls machine code at TOP (128 bytes free)
  29:			; with parameter in HL, returning the result in HL, default is RET at TOP
  30:			; Changed to the more authentic zmac syntax (https://github.com/gp48k/zmac)
  31:			; 2024-10-30 Ho-Ro:
  32:			; add operator '|' and '&'; remove RAM and TXT; 2044 bytes
  33:			; 2024-11-03 Ho-Ro:
  34:			; replace JP -> JR, add function CALL(ADR), add char constant 'x', 2047 bytes
  35:			; *************************************************************
  36:			;
  37:			;                 TINY BASIC FOR INTEL 8080
  38:			;                       VERSION 2.0
  39:			;                     BY LI-CHEN WANG
  40:			;                  MODIFIED AND TRANSLATED
  41:			;                    TO INTEL MNEMONICS
  42:			;                     BY ROGER RAUSKOLB
  43:			;                      10 OCTOBER,1976
  44:			;                        @COPYLEFT
  45:			;                   ALL WRONGS RESERVED
  46:			;
  47:			; *************************************************************
  48:			;
  49:			; *** ZERO PAGE SUBROUTINES ***
  50:			;
  51:			; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
  52:			; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
  53:			; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
  54:			; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
  55:			; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
  56:			; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
  57:			; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
  58:			; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
  59:			;
  60:			
  61:			                .Z80
  62:			
  63:			; Memory map
  64:	0000          	ROMBGN:         .EQU    $0000           ; Execution must start here
  65:	0800          	RAMBGN:         .EQU    $0800           ; 2K ROM
  66:			
  67:	0000          	                .IFDEF  MAKE_ROM
  70:			                .ELSE
  71:			; 2K CODE IN RAM & 2K DATA IN RAM AS TEST VERSION
  72:	0800          	RAMSZE:         .EQU    $0800
  73:			                .ENDIF
  74:			
  75:			; IO map
  76:	0001          	IODATA:         .EQU    1
  77:	0002          	IOSTAT:         .EQU    2
  78:	0001          	IO_RX_BIT:      .EQU    $01
  79:			
  80:			; Control character
  81:	0008          	BS:             .EQU    $08             ; ^H, BACKSPACE
  82:	000D          	CR:             .EQU    $0D             ; ^M, CARRIAGE RETURN
  83:	000A          	LF:             .EQU    $0A             ; ^J, LINE FEED
  84:	0018          	CAN:            .EQU    $18             ; ^X, CANCEL
  85:	007F          	DEL:            .EQU    $7F             ; DELETE
  86:			
  87:			
  88:			; Store a label address as BIG endian with bit A15 set
  89:			
  90:			DWA             .MACRO   LABEL
  91:			                .DB     HIGH LABEL | $80
  92:			                .DB     LOW LABEL
  93:			                .ENDM
  94:			
  95:			; if CHAR = A THEN JUMP RELATIVE TO LABEL
  96:			
  97:			TSTC            .MACRO   CHAR,LABEL
  98:			                RST     RTSTC
  99:			                .DB     CHAR
 100:			                .DB     LABEL-$-1
 101:			                .ENDM
 102:			
 103:			
 104:	0000          	                .ORG    ROMBGN
 105:			
 106:	0000  310009  	CSTART:         LD      SP,STACK        ; *** COLD START ***
 107:	0003  AF      	                XOR     A               ; must be 2 byte
 108:	0004  C31101  	                JP      INIT            ; as delimiter for PRTSTG
 109:	0007  4C      	                .DB     "L"             ; FILL ONE BYTE
 110:			
 111:			
 112:	0008  E3      	RTSTC:          EX      (SP),HL         ; *** RST 1 @ $0008 ***
 113:	0009  EF      	                RST     RIGNBLK         ; IGNORE BLANKS AND
 114:	000A  BE      	                CP      (HL)            ; TEST CHARACTER
 115:	000B  23      	                INC     HL              ; COMPARE THE FOLLOWING BYTE
 116:	000C  1861    	                JR      TC1             ; REST OF THIS IS AT TC1
 117:			
 118:			
 119:	000E  3E0D    	CRLF:           LD      A,CR            ; *** CRLF ***
 120:			                                        ; *** RST 2 @ $0010 ***
 121:	0010  D301    	ROUTC:          OUT     (IODATA),A      ; Out to data port
 122:	0012  FE0D    	                CP      CR              ; WAS IT CR?
 123:	0014  C0      	                RET     NZ              ; NO, FINISHED
 124:	0015  C3FD00  	                JP      OC1             ; REST OF THIS IS AT OC1
 125:			
 126:			
 127:	0018  CDEB03  	REXPR:          CALL    EXPR2           ; *** RST 3 @ $0018 ***
 128:	001B  E5      	                PUSH    HL              ; EVALUATE AN EXPRESSION
 129:	001C  C3A703  	                JP      EXPR1           ; REST OF IT AT EXPR1
 130:	001F  43      	                .DB     "C"             ; FILL ONE BYTE
 131:			
 132:			
 133:	0020  7C      	RCOMP:          LD      A,H             ; *** RST 4 @ $0020 ***
 134:	0021  BA      	                CP      D               ; COMPARE HL WITH DE
 135:	0022  C0      	                RET     NZ              ; RETURN CORRECT C AND
 136:	0023  7D      	                LD      A,L             ; Z FLAGS
 137:	0024  BB      	                CP      E               ; BUT OLD A IS LOST
 138:	0025  C9      	                RET
 139:	0026  5741    	                .DB     "WA"            ; FILL TWO BYTES
 140:			
 141:			
 142:	0028  1A      	RIGNBLK:        LD      A,(DE)          ; *** RST 5 @ $0028 ***
 143:	0029  FE20    	                CP      20H             ; IGNORE BLANKS
 144:	002B  C0      	                RET     NZ              ; IN TEXT (WHERE DE->)
 145:	002C  13      	                INC     DE              ; AND RETURN THE FIRST
 146:	002D  18F9    	                JR      RIGNBLK         ; NON-BLANK CHAR. IN A
 147:	002F  4E      	                .DB     "N"             ; FILL ONE BYTE
 148:			
 149:			
 150:	0030  F1      	RFINISH:        POP     AF              ; *** RST 6 @ $0030 ***
 151:	0031  CD7005  	                CALL    FIN             ; CHECK END OF COMMAND
 152:	0034  C38305  	                JP      QWHAT           ; PRINT "WHAT?" IF WRONG
 153:	0037  47      	                .DB     "G"             ; FILL ONE BYTE
 154:			
 155:			
 156:	0038  EF      	RTSTV:          RST     RIGNBLK         ; *** RST 7 @ $0038 ***
 157:	0039  D640    	                SUB     '@'             ; TEST VARIABLES
 158:	003B  D8      	                RET     C               ; C: < '@', NOT A VARIABLE
 159:	003C  201B    	                JR      NZ,TV1          ; NZ: NOT THE '@' ARRAY
 160:			;
 161:	003E  13      	                INC     DE              ; IT IS THE "@" ARRAY
 162:	003F  CDB004  	                CALL    PARN            ; @ SHOULD BE FOLLOWED
 163:	0042  29      	                ADD     HL,HL           ; BY (EXPR) AS ITS INDEX
 164:	0043  DADE00  	                JP      C,QHOW          ; IS INDEX TOO BIG (>0x7FFF)?
 165:	0046  23      	                INC     HL              ; ADD TWO BYTES
 166:	0047  23      	                INC     HL              ; FOR @(0)
 167:	0048  D5      	                PUSH    DE              ; WILL IT OVERWRITE
 168:	0049  EB      	                EX      DE,HL           ; TEXT?
 169:	004A  CDF204  	                CALL    SIZE            ; FIND SIZE OF FREE RAM
 170:	004D  E7      	                RST     RCOMP           ; AND CHECK THAT
 171:	004E  DAB105  	                JP      C,ASORRY        ; IF SO, SAY "SORRY"
 172:	0051  21000F  	                LD      HL,TXTEND       ; IF NOT GET ADDRESS
 173:	0054  CD3D05  	                CALL    SUBDE           ; OF @(EXPR) AND PUT IT
 174:	0057  D1      	                POP     DE              ; IN HL (top-down from TXTEND)
 175:	0058  C9      	                RET                     ; C FLAG IS CLEARED
 176:			;
 177:			                                        ; VARIABLES 'A'..'Z'
 178:	0059  FE21    	TV1:            CP      21H             ; >='a'?
 179:	005B  3802    	                JR      C,TV2           ; NO
 180:	005D  D620    	                SUB     20H             ; MAKE UPPER CASE
 181:	005F  FE1B    	TV2:            CP      1BH             ; <='Z'
 182:	0061  3F      	                CCF                     ; IF NOT RETURN C FLAG
 183:	0062  D8      	                RET     C
 184:	0063  13      	                INC     DE              ; IT IS 'A'=1 THROUGH 'Z'=26
 185:	0064  21FE07  	                LD      HL,VARBGN-2     ; COMPUTE ADDRESS OF
 186:	0067  07      	                RLCA                    ; THAT VARIABLE
 187:	0068  85      	                ADD     A,L             ; AND RETURN IT IN HL
 188:	0069  6F      	                LD      L,A             ; WITH C FLAG CLEARED
 189:	006A  3E00    	                LD      A,0
 190:	006C  8C      	                ADC     A,H
 191:	006D  67      	                LD      H,A
 192:	006E  C9      	                RET
 193:			
 194:			; TSTC:         EX      (SP),HL         ; *** TSTC OR RST 1 ***
 195:			;               RST     RIGNBLK         ; THIS IS AT LOC. 8
 196:			;               CMP     (HL)            ; AND THEN JUMP HERE
 197:			;               INC     HL              ; COMPARE THE FOLLOWING BYTE
 198:			;               JR      TC1             ; REST OF THIS IS AT TC1
 199:			;
 200:	006F  2807    	TC1:            JR      Z,TC2           ; FOLLOWS THE RST INST.
 201:	0071  C5      	                PUSH    BC              ; WITH THE TEXT (DE->)
 202:	0072  4E      	                LD      C,(HL)          ; IF NOT =, ADD THE 2ND
 203:	0073  0600    	                LD      B,0             ; BYTE THAT FOLLOWS THE
 204:	0075  09      	                ADD     HL,BC           ; RST TO THE OLD PC
 205:	0076  C1      	                POP     BC              ; I.E., DO A RELATIVE
 206:	0077  1B      	                DEC     DE              ; JUMP IF NOT =
 207:	0078  13      	TC2:            INC     DE              ; IF =, SKIP THOSE BYTES
 208:	0079  23      	                INC     HL              ; AND CONTINUE
 209:	007A  E3      	                EX      (SP),HL
 210:	007B  C9      	                RET
 211:			
 212:	007C  210000  	TSTNUM:         LD      HL,0            ; *** TSTNUM ***
 213:	007F  44      	                LD      B,H             ; TEST IF THE TEXT IS A NUMBER
 214:	0080  EF      	                RST     RIGNBLK         ; Skip spaces
 215:	0081  FE24    	                CP      '$'             ; HEX NUMBER?
 216:	0083  2832    	                JR      Z,TX1           ; YES
 217:	0085  FE27    	                CP      "'"             ; Is it a char constant?
 218:	0087  200C    	                JR      NZ,TN1          ; No, check if normal number
 219:	0089  13      	                INC     DE              ; Skip "'"
 220:	008A  1A      	                LD      A,(DE)          ; Get one char
 221:	008B  6F      	                LD      L,A             ;
 222:	008C  13      	                INC     DE              ; Skip the char
 223:	008D  1A      	                LD      A,(DE)
 224:	008E  FE27    	                CP      "'"             ; Closing "'"?
 225:	0090  205F    	                JR      NZ,WHAT         ; No -> syntax error
 226:	0092  13      	                INC     DE              ; Skip the "'"
 227:	0093  04      	                INC     B               ; Min. 1 digit
 228:	0094  C9      	                RET
 229:	0095  FE30    	TN1:            CP      '0'             ; IF NOT, RETURN 0 IN
 230:	0097  D8      	                RET     C               ; B AND HL
 231:	0098  FE3A    	                CP      '9'+1           ; IF NUMBERS, CONVERT
 232:	009A  D0      	                RET     NC              ; TO BINARY IN HL AND
 233:	009B  3EF0    	                LD      A,0F0H          ; SET B TO # OF DIGITS
 234:	009D  A4      	                AND     H               ; IF H>15, THERE IS NO
 235:	009E  203E    	                JR      NZ,QHOW         ; ROOM FOR NEXT DIGIT
 236:	00A0  04      	                INC     B               ; B COUNTS # OF DIGITS
 237:	00A1  C5      	                PUSH    BC
 238:	00A2  44      	                LD      B,H             ; HL=10*HL+(NEW DIGIT)
 239:	00A3  4D      	                LD      C,L
 240:	00A4  29      	                ADD     HL,HL           ; 2*HL
 241:	00A5  29      	                ADD     HL,HL           ; 4*HL
 242:	00A6  09      	                ADD     HL,BC           ; 5*HL
 243:	00A7  29      	                ADD     HL,HL           ; 10*HL
 244:	00A8  1A      	                LD      A,(DE)          ; AND (DIGIT) IS FROM
 245:	00A9  13      	                INC     DE              ; STRIPPING THE ASCII
 246:	00AA  E60F    	                AND     0FH             ; CODE
 247:	00AC  85      	                ADD     A,L
 248:	00AD  6F      	                LD      L,A
 249:	00AE  3E00    	                LD      A,0
 250:	00B0  8C      	                ADC     A,H
 251:	00B1  67      	                LD      H,A
 252:	00B2  C1      	                POP     BC
 253:	00B3  1A      	                LD      A,(DE)          ; DO THIS DIGIT AFTER
 254:	00B4  F29500  	                JP      P,TN1           ; DIGIT. S SAYS OVERFLOW
 255:			;
 256:			                                        ; OUTPUT HEX NUMBER
 257:	00B7  13      	TX1:            INC     DE              ; SKIP TO NEXT HEX
 258:	00B8  1A      	                LD      A,(DE)          ; GET HEX DIGIT
 259:	00B9  FE30    	                CP      '0'             ; < '0'
 260:	00BB  D8      	                RET     C               ; ERROR
 261:	00BC  FE3A    	                CP      '9'+1           ; <= '9'
 262:	00BE  380A    	                JR      C,TX2           ; OK '0'..'9'
 263:	00C0  FE41    	                CP      'A'             ; < 'A'
 264:	00C2  D8      	                RET     C               ; ERROR, >'9' && < 'A'
 265:	00C3  E65F    	                AND     5FH             ; CONVERT ALPHA TO UPPER
 266:	00C5  FE47    	                CP      'F'+1           ; > 'F'
 267:	00C7  D0      	                RET     NC              ; ERROR
 268:	00C8  D607    	                SUB     'A'-'0'-10      ; SKIP GAP '9' -> 'A'
 269:	00CA  E60F    	TX2:            AND     0FH             ; GET HEX CODE 0..F
 270:	00CC  C5      	                PUSH    BC
 271:	00CD  47      	                LD      B,A             ; SAVE HEX CODE
 272:	00CE  3EF0    	                LD      A,0F0H          ; IF H>15
 273:	00D0  A4      	                AND     H               ; THERE IS NO ROOM
 274:	00D1  78      	                LD      A,B
 275:	00D2  C1      	                POP     BC
 276:	00D3  2009    	                JR      NZ,QHOW         ; FOR NEXT DIGIT
 277:			
 278:	00D5  04      	                INC     B               ; B COUNTS # OF DIGITS
 279:	00D6  29      	                ADD     HL,HL           ; 2*HL
 280:	00D7  29      	                ADD     HL,HL           ; 4*HL
 281:	00D8  29      	                ADD     HL,HL           ; 8*HL
 282:	00D9  29      	                ADD     HL,HL           ; 16*HL
 283:	00DA  B5      	                OR      L               ; PUT HEX CODE INTO
 284:	00DB  6F      	                LD      L,A             ; THE 4 LSB OF HL
 285:	00DC  18D9    	                JR      TX1             ; DIGIT AFTER DIGIT
 286:			
 287:	00DE  D5      	QHOW:           PUSH    DE              ; *** ERROR "HOW?" ***
 288:	00DF  11E900  	AHOW:           LD      DE,HOW
 289:	00E2  C38705  	                JP      ERROR
 290:			
 291:	00E5  544232  	TIBAS:          .DB     "TB2"; "TinyBASIC2"
 292:	00E8  0D      	                .DB     CR
 293:			
 294:	00E9  484F573F	HOW:            .DB     "HOW?"
 295:	00ED  0D      	                .DB     CR
 296:			
 297:	00EE  4F4B    	OK:             .DB     "OK"
 298:	00F0  0D      	                .DB     CR
 299:			
 300:	00F1  57484154	WHAT:           .DB     "WHAT?"
	      3F
 301:	00F6  0D      	                .DB     CR
 302:			
 303:	00F7  534F5252	SORRY:          .DB     "SORRY"
	      59
 304:	00FC  0D      	                .DB     CR
 305:			
 306:			;
 307:			; *************************************************************
 308:			;
 309:			; *** ROUTC *** CHKIO ***
 310:			;
 311:			; THESE ARE THE ONLY I/O ROUTINES IN TBI.
 312:			; OUTC WILL OUTPUT THE BYTE IN A.
 313:			; IF THAT IS A CR, A LF IS ALSO SEND OUT.
 314:			; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
 315:			; ALL REGISTERS ARE RESTORED.
 316:			;
 317:			; 'CHKIO' CHECKS THE INPUT.
 318:			; IF NO INPUT, IT WILL RETURN TO THE CALLER WITH THE Z FLAG SET.
 319:			; IF THERE IS INPUT, Z FLAG IS CLEARED AND THE INPUT BYTE IS IN A.
 320:			; IF A CONTROL-C IS READ, 'CHKIO' WILL RESTART TBI
 321:			; AND DO NOT RETURN TO THE CALLER.
 322:			;
 323:			
 324:			; THIS IS AT LOC. 10
 325:			; ROUTC:        OUT     (IODATA),A      ; Out to data port
 326:			;               CP      CR              ; WAS IT CR?
 327:			;               RET     NZ              ; NO, FINISHED
 328:			;               JP      OC1             ; REST OF THIS IS AT OC1
 329:			;
 330:	00FD  3E0A    	OC1:            LD      A,LF            ; YES, WE SEND LF TOO
 331:	00FF  D7      	                RST     ROUTC           ; THIS IS RECURSIVE
 332:	0100  3E0D    	                LD      A,CR            ; GET CR BACK IN A
 333:	0102  C9      	                RET
 334:			
 335:	0103  DB02    	CHKIO:          IN      A,(IOSTAT)      ; *** CHKIO ***
 336:	0105  E601    	                AND     IO_RX_BIT       ; MASK STATUS BIT
 337:	0107  C8      	                RET     Z               ; NOT READY, RETURN "Z"
 338:	0108  DB01    	                IN      A,(IODATA)      ; READY, READ DATA
 339:	010A  E67F    	                AND     7FH             ; MASK BIT 7 OFF
 340:	010C  FE03    	CI0:            CP      03H             ; IS IT CONTROL-C?
 341:	010E  C0      	                RET     NZ              ; NO, RETURN "NZ"
 342:	010F  1823    	                JR      WSTART          ; YES, RESTART TBI
 343:			
 344:			;
 345:			; *************************************************************
 346:			;
 347:			
 348:			;
 349:			; *************************************************************
 350:			;
 351:			; *** INIT ***
 352:			;
 353:			; PUT IO INITIALISATION HERE, E.G. FOR THE SERIAL INTERFACE
 354:			;
 355:			; *** MAIN ***
 356:			;
 357:			; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
 358:			; AND STORES IT IN THE MEMORY.
 359:			;
 360:			; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
 361:			; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
 362:			; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
 363:			; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
 364:			; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
 365:			; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
 366:			; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
 367:			; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
 368:			; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
 369:			;
 370:			; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
 371:			; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
 372:			; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
 373:			; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
 374:			;
 375:			; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
 376:			; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
 377:			; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
 378:			; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
 379:			;
 380:			; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
 381:			; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
 382:			; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
 383:			; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
 384:			;
 385:			;
 386:			                                        ; THIS IS AT LOC. 0
 387:			; CSTART:       LD      SP,STACK        ; *** COLD START ***
 388:			;               XOR     A               ;
 389:			;               JP      INIT            ;
 390:			;
 391:	0111          	INIT:
 392:	0111  210008  	                LD      HL,RAMBGN       ; SOURCE
 393:	0114  77      	                LD      (HL),A          ; CLEAR MEM
 394:	0115  110108  	                LD      DE,RAMBGN+1     ; DESTINATION
 395:	0118  01FF07  	                LD      BC,RAMSZE-1     ; BYTE COUNT
 396:	011B  EDB0    	                LDIR                    ; CLR COMPLETE MEMORY
 397:	011D  11E500  	                LD      DE,TIBAS        ; COLD START MESSAGE
 398:	0120  CD1A06  	                CALL    PRTSTG
 399:	0123  3EC9    	                LD      A,$C9
 400:	0125  32000F  	                LD      (USRSPC),A      ; "RET" AT USR CODE SPACE
 401:	0128  210000  	                LD      HL,CSTART       ; INIT RANDOM POINTER
 402:	012B  224A08  	                LD      (RANPNT),HL
 403:	012E  210009  	                LD      HL,TXTBGN       ; UNFILLED TEXT
 404:	0131  223608  	                LD      (TXTUNF),HL
 405:			;
 406:	0134  310009  	WSTART:         LD      SP,STACK        ; *** WARM START ***
 407:	0137  CD0E00  	                CALL    CRLF            ; AND JUMP TO HERE
 408:	013A  11EE00  	                LD      DE,OK           ; DE->STRING
 409:	013D  97      	                SUB     A               ; A=0
 410:	013E  CD1A06  	                CALL    PRTSTG          ; PRINT STRING UNTIL CR
 411:	0141  214801  	                LD      HL,ST2+1        ; HACK ST2+1 -> 0000
 412:	0144  223808  	                LD      (CURRNT),HL     ; CURRENT->LINE # = 0
 413:	0147  210000  	ST2:            LD      HL,0000         ; <- ST2+1
 414:	014A  224008  	                LD      (LOPVAR),HL
 415:	014D  223A08  	                LD      (STKGOS),HL
 416:	0150  3E3E    	ST3:            LD      A,'>'           ; PROMPT '>' AND
 417:	0152  CDB605  	                CALL    GETLN           ; READ A LINE
 418:	0155  D5      	                PUSH    DE              ; DE->END OF LINE
 419:	0156  11800F  	                LD      DE,BUFFER       ; DE->BEGINNING OF LINE
 420:	0159  CD7C00  	                CALL    TSTNUM          ; TEST IF IT IS A NUMBER
 421:	015C  EF      	                RST     RIGNBLK
 422:	015D  7C      	                LD      A,H             ; HL=VALUE OF THE # OR
 423:	015E  B5      	                OR      L               ; 0 IF NO # WAS FOUND
 424:	015F  C1      	                POP     BC              ; BC->END OF LINE
 425:	0160  CA1A07  	                JP      Z,DIRECT
 426:	0163  1B      	                DEC     DE              ; BACKUP DE AND SAVE
 427:	0164  7C      	                LD      A,H             ; VALUE OF LINE # THERE
 428:	0165  12      	                LD      (DE),A
 429:	0166  1B      	                DEC     DE
 430:	0167  7D      	                LD      A,L
 431:	0168  12      	                LD      (DE),A
 432:	0169  C5      	                PUSH    BC              ; BC,DE->BEGIN, END
 433:	016A  D5      	                PUSH    DE
 434:	016B  79      	                LD      A,C
 435:	016C  93      	                SUB     E
 436:	016D  F5      	                PUSH    AF              ; A=# OF BYTES IN LINE
 437:	016E  CDF505  	                CALL    FNDLN           ; FIND THIS LINE IN SAVE
 438:	0171  D5      	                PUSH    DE              ; AREA, DE->SAVE AREA
 439:	0172  2010    	                JR      NZ,ST4          ; NZ:NOT FOUND, INSERT
 440:	0174  D5      	                PUSH    DE              ; Z:FOUND, DELETE IT
 441:	0175  CD1006  	                CALL    FNDNXT          ; FIND NEXT LINE
 442:			                                        ; DE->NEXT LINE
 443:	0178  C1      	                POP     BC              ; BC->LINE TO BE DELETED
 444:	0179  2A3608  	                LD      HL,(TXTUNF)     ; HL->UNFILLED SAVE AREA
 445:	017C  CDC206  	                CALL    MVUP            ; MOVE UP TO DELETE
 446:	017F  60      	                LD      H,B             ; TXTUNF->UNFILLED AREA
 447:	0180  69      	                LD      L,C
 448:	0181  223608  	                LD      (TXTUNF),HL     ; UPDATE
 449:	0184  C1      	ST4:            POP     BC              ; GET READY TO INSERT
 450:	0185  2A3608  	                LD      HL,(TXTUNF)     ; BUT FIRST CHECK IF
 451:	0188  F1      	                POP     AF              ; THE LENGTH OF NEW LINE
 452:	0189  E5      	                PUSH    HL              ; IS 3 (LINE # AND CR)
 453:	018A  FE03    	                CP      3               ; THEN DO NOT INSERT
 454:	018C  28A6    	                JR      Z,WSTART        ; MUST CLEAR THE STACK
 455:	018E  85      	                ADD     A,L             ; COMPUTE NEW TXTUNF
 456:	018F  6F      	                LD      L,A
 457:	0190  3E00    	                LD      A,0
 458:	0192  8C      	                ADC     A,H
 459:	0193  67      	                LD      H,A             ; HL->NEW UNFILLED AREA
 460:	0194  11000F  	                LD      DE,TXTEND       ; CHECK TO SEE IF THERE
 461:	0197  E7      	                RST     RCOMP           ; COMP HL,DE - IS ENOUGH SPACE
 462:	0198  D2B005  	                JP      NC,QSORRY       ; SORRY, NO ROOM FOR IT
 463:	019B  223608  	                LD      (TXTUNF),HL     ; OK, UPDATE TXTUNF
 464:	019E  D1      	                POP     DE              ; DE->OLD UNFILLED AREA
 465:	019F  CDCA06  	                CALL    MVDOWN
 466:	01A2  D1      	                POP     DE              ; DE->BEGIN, HL->END
 467:	01A3  E1      	                POP     HL
 468:	01A4  CDC206  	                CALL    MVUP            ; MOVE NEW LINE TO SAVE
 469:	01A7  18A7    	                JR      ST3             ; AREA
 470:			
 471:			; *************************************************************
 472:			;
 473:			; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
 474:			; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
 475:			; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
 476:			; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
 477:			; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
 478:			;
 479:			; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'WSTART'
 480:			; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
 481:			; GO BACK TO 'WSTART'.
 482:			; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
 483:			; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
 484:			; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'WSTART', ELSE
 485:			; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
 486:			; *************************************************************
 487:			;
 488:			; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
 489:			;
 490:			; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
 491:			;
 492:			; 'STOP(CR)' GOES BACK TO 'WSTART'
 493:			;
 494:			; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
 495:			; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
 496:			; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
 497:			;
 498:			; THERE ARE 3 MORE ENTRIES IN 'RUN':
 499:			; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
 500:			; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
 501:			; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
 502:			;
 503:			; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
 504:			; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
 505:			;
 506:	01A9  CD7F05  	NEW:            CALL    ENDCHK          ; *** NEW(CR) ***
 507:	01AC  210009  	                LD      HL,TXTBGN
 508:	01AF  223608  	                LD      (TXTUNF),HL
 509:			;
 510:	01B2  CD7F05  	STOP:           CALL    ENDCHK          ; *** STOP(CR) ***
 511:	01B5  C33401  	                JP      WSTART
 512:			
 513:	01B8  CD7F05  	RUN:            CALL    ENDCHK          ; *** RUN(CR) ***
 514:	01BB  110009  	                LD      DE,TXTBGN       ; FIRST SAVED LINE
 515:			;
 516:	01BE  210000  	RUNNXL:         LD      HL,0            ; *** RUNNXL ***
 517:	01C1  CDFD05  	                CALL    FNDLP           ; FIND WHATEVER LINE #
 518:	01C4  DA3401  	                JP      C,WSTART        ; C:PASSED TXTUNF, QUIT
 519:			;
 520:	01C7  EB      	RUNTSL:         EX      DE,HL           ; *** RUNTSL ***
 521:	01C8  223808  	                LD      (CURRNT),HL     ; SET 'CURRENT'->LINE #
 522:	01CB  EB      	                EX      DE,HL
 523:	01CC  13      	                INC     DE              ; BUMP PASS LINE #
 524:	01CD  13      	                INC     DE
 525:			;
 526:	01CE  CD0301  	RUNSML:         CALL    CHKIO           ; *** RUNSML ***
 527:	01D1  215E07  	                LD      HL,TAB2-1       ; FIND COMMAND IN TAB2
 528:	01D4  C31D07  	                JP      EXEC            ; AND EXECUTE IT
 529:			
 530:	01D7  DF      	GOTO:           RST     REXPR           ; *** GOTO EXPR ***
 531:	01D8  D5      	                PUSH    DE              ; SAVE FOR ERROR ROUTINE
 532:	01D9  CD7F05  	                CALL    ENDCHK          ; MUST FIND A CR
 533:	01DC  CDF505  	                CALL    FNDLN           ; FIND THE TARGET LINE
 534:	01DF  C2DF00  	                JP      NZ,AHOW         ; NO SUCH LINE #
 535:	01E2  F1      	                POP     AF              ; CLEAR THE PUSH DE
 536:	01E3  18E2    	                JR      RUNTSL          ; GO DO IT
 537:			;
 538:			; *************************************************************
 539:			;
 540:			; *** LIST *** & PRINT ***
 541:			;
 542:			; LIST HAS TWO FORMS:
 543:			; 'LIST(CR)' LISTS ALL SAVED LINES
 544:			; 'LIST #(CR)' START LIST AT THIS LINE #
 545:			; YOU CAN STOP THE LISTING BY CONTROL C KEY
 546:			;
 547:			; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
 548:			; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
 549:			; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
 550:			;
 551:			; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
 552:			; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
 553:			; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
 554:			; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
 555:			; SPECIFIED, 8 POSITIONS WILL BE USED.
 556:			;
 557:			; NUMBER BASE IS SET BY PERCENT SIGN FOLLOEWED BY A NUMBER
 558:			; BETWEEN 2 and 16. VALUES ARE PRINTED AS UNSIGNED TO THIS BASE
 559:			; FOR THE REST OF THIS PRINT COMMAND UNLESS CHANGED BY
 560:			; ANOTHER BASE. IF NO BASE IS PROVIDED NUMBERS ARE SIGNED DECIMAL.
 561:			;
 562:			; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
 563:			; DOUBLE QUOTES.
 564:			;
 565:			; A BACK-ARROW (UNDERLINE) ALONE MEANS GENERATE A (CR) WITHOUT (LF).
 566:			;
 567:			; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
 568:			; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
 569:			; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
 570:			;
 571:	01E5  CD7C00  	LIST:           CALL    TSTNUM          ; TEST IF THERE IS A #
 572:	01E8  CD7F05  	                CALL    ENDCHK          ; IF NO # WE GET A 0
 573:	01EB  CDF505  	                CALL    FNDLN           ; FIND THIS OR NEXT LINE
 574:	01EE  DA3401  	LS1:            JP      C,WSTART        ; C:PASSED TXTUNF
 575:	01F1  CDAB06  	                CALL    PRTLN           ; PRINT THE LINE
 576:	01F4  CD0301  	                CALL    CHKIO           ; STOP IF HIT CONTROL-C
 577:	01F7  CDFD05  	                CALL    FNDLP           ; FIND NEXT LINE
 578:	01FA  18F2    	                JR      LS1             ; AND LOOP BACK
 579:			
 580:	01FC  AF      	PRINT:          XOR     A               ; DEFAULT BASE FOR PRTNUM
 581:	01FD  323508  	                LD      (PNBASE),A
 582:	0200  0E08    	                LD      C,8             ; C = # OF SPACES
 583:	0202  CF3B05  	                TSTC    ';',PR2         ; IF NULL LIST & ";"
 584:	0205  CD0E00  	                CALL    CRLF            ; GIVE CR-LF AND
 585:	0208  18C4    	                JR      RUNSML          ; CONTINUE SAME LINE
 586:	020A  CF0D05  	PR2:            TSTC    CR,PR0          ; IF NULL LIST (CR)
 587:	020D  CD0E00  	                CALL    CRLF            ; ALSO GIVE CR-LF AND
 588:	0210  18AC    	                JR      RUNNXL          ; GO TO NEXT LINE
 589:	0212  CF2304  	PR0:            TSTC    '#',PR5         ; ELSE IS IT FORMAT?
 590:	0215  DF      	                RST     REXPR           ; YES, EVALUATE EXPR.
 591:	0216  4D      	                LD      C,L             ; AND SAVE IT IN C
 592:	0217  1819    	                JR      PR3             ; LOOK FOR MORE TO PRINT
 593:	0219  CF2511  	PR5:            TSTC    '%',PR1         ; ELSE IS IT PRTNUM BASE?
 594:	021C  DF      	                RST     REXPR           ; YES, EVALUATE EXPR.
 595:	021D  7D      	                LD      A,L             ; GET THE LOW PART
 596:	021E  FE01    	                CP      1               ; EITHER 0 OR >= 2?
 597:	0220  CADE00  	                JP      Z,QHOW          ; ERROR
 598:	0223  FE11    	                CP      17              ; BASE > 16?
 599:	0225  D2DE00  	                JP      NC,QHOW         ; ERROR
 600:	0228  323508  	                LD      (PNBASE),A      ; IN PNBASE
 601:	022B  1805    	                JR      PR3             ; LOOK FOR MORE TO PRINT
 602:	022D  CD2506  	PR1:            CALL    QTSTG           ; OR IS IT A STRING?
 603:	0230  1810    	                JR      PR8             ; HACK JR!! IF NOT, MUST BE EXPR.
 604:	0232  CF2C05  	PR3:            TSTC    $2C,PR6         ; IF ",", GO FIND NEXT
 605:	0235  CD7005  	                CALL    FIN             ; IN THE LIST.
 606:	0238  18D8    	                JR      PR0             ; LIST CONTINUES
 607:	023A  AF      	PR6:            XOR     A               ; END OF LIST REACHED
 608:	023B  323508  	                LD      (PNBASE),A      ; RESET DEFAULT BASE
 609:	023E  CD0E00  	                CALL    CRLF            ; LIST ENDS WITH CRLF
 610:	0241  F7      	                RST     RFINISH         ; FINISH
 611:	0242  DF      	PR8:            RST     REXPR           ; EVALUATE THE EXPR
 612:	0243  C5      	                PUSH    BC
 613:	0244  CD4B06  	                CALL    PRTNUM          ; PRINT THE VALUE
 614:	0247  C1      	                POP     BC
 615:	0248  18E8    	                JR      PR3             ; MORE TO PRINT?
 616:			;
 617:			; *************************************************************
 618:			;
 619:			; *** GOSUB *** & RETURN ***
 620:			;
 621:			; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
 622:			; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
 623:			; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
 624:			; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
 625:			; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
 626:			; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
 627:			; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
 628:			; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
 629:			; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
 630:			;
 631:			; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
 632:			; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
 633:			; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
 634:			; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
 635:			;
 636:	024A  CDF206  	GOSUB:          CALL    PUSHA           ; SAVE THE CURRENT "FOR"
 637:	024D  DF      	                RST     REXPR           ; PARAMETERS
 638:	024E  D5      	                PUSH    DE              ; AND TEXT POINTER
 639:	024F  CDF505  	                CALL    FNDLN           ; FIND THE TARGET LINE
 640:	0252  C2DF00  	                JP      NZ,AHOW         ; NOT THERE. SAY "HOW?"
 641:	0255  2A3808  	                LD      HL,(CURRNT)     ; FOUND IT, SAVE OLD
 642:	0258  E5      	                PUSH    HL              ; 'CURRNT' OLD 'STKGOS'
 643:	0259  2A3A08  	                LD      HL,(STKGOS)
 644:	025C  E5      	                PUSH    HL
 645:	025D  ED62    	                SBC     HL,HL           ; CY=0, shorter than LD HL,0
 646:	025F  224008  	                LD      (LOPVAR),HL     ; LOAD NEW ONES
 647:	0262  39      	                ADD     HL,SP
 648:	0263  223A08  	                LD      (STKGOS),HL
 649:	0266  C3C701  	                JP      RUNTSL          ; THEN RUN THAT LINE
 650:			;
 651:	0269  CD7F05  	RETURN:         CALL    ENDCHK          ; THERE MUST BE A CR
 652:	026C  2A3A08  	                LD      HL,(STKGOS)     ; OLD STACK POINTER
 653:	026F  7C      	                LD      A,H             ; 0 MEANS NOT EXIST
 654:	0270  B5      	                OR      L
 655:	0271  CA8305  	                JP      Z,QWHAT         ; SO, WE SAY: "WHAT?"
 656:	0274  F9      	                LD      SP,HL           ; ELSE, RESTORE IT
 657:	0275  E1      	                POP     HL
 658:	0276  223A08  	                LD      (STKGOS),HL     ; AND THE OLD 'STKGOS'
 659:	0279  E1      	                POP     HL
 660:	027A  223808  	                LD      (CURRNT),HL     ; AND THE OLD 'CURRNT'
 661:	027D  D1      	                POP     DE              ; OLD TEXT POINTER
 662:	027E  CDD706  	                CALL    POPA            ; OLD "FOR" PARAMETERS
 663:	0281  F7      	                RST     RFINISH         ; AND WE ARE BACK HOME
 664:			;
 665:			; *************************************************************
 666:			;
 667:			; *** FOR *** & NEXT ***
 668:			;
 669:			; 'FOR' HAS TWO FORMS:
 670:			; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
 671:			; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
 672:			; EXP3=1.  (I.E., WITH A STEP OF +1.)
 673:			; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
 674:			; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
 675:			; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
 676:			; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
 677:			; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
 678:			; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
 679:			; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
 680:			; BEFORE THE NEW ONE OVERWRITES IT.
 681:			; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
 682:			; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
 683:			; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
 684:			; (PURGED FROM THE STACK..)
 685:			;
 686:			; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
 687:			; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
 688:			; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
 689:			; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
 690:			; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
 691:			; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
 692:			; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
 693:			; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
 694:			; IS PURGED AND EXECUTION CONTINUES.
 695:			;
 696:	0282  CDF206  	FOR:            CALL    PUSHA           ; SAVE THE OLD SAVE AREA
 697:	0285  CD6105  	                CALL    SETVAL          ; SET THE CONTROL VAR.
 698:	0288  2B      	                DEC     HL              ; HL IS ITS ADDRESS
 699:	0289  224008  	                LD      (LOPVAR),HL     ; SAVE THAT
 700:	028C  21D607  	                LD      HL,TAB5-1       ; USE 'EXEC' TO LOOK
 701:	028F  C31D07  	                JP      EXEC            ; FOR THE WORD 'TO'
 702:	0292  DF      	FR1:            RST     REXPR           ; EVALUATE THE LIMIT
 703:	0293  224408  	                LD      (LOPLMT),HL     ; SAVE THAT
 704:	0296  21DC07  	                LD      HL,TAB6-1       ; USE 'EXEC' TO LOOK
 705:	0299  C31D07  	                JP      EXEC            ; FOR THE WORD 'STEP'
 706:	029C  DF      	FR2:            RST     REXPR           ; FOUND IT, GET STEP
 707:	029D  1803    	                JR      FR4
 708:	029F  210100  	FR3:            LD      HL,1H           ; NOT FOUND, SET TO 1
 709:	02A2  224208  	FR4:            LD      (LOPINC),HL     ; SAVE THAT TOO
 710:	02A5  2A3808  	FR5:            LD      HL,(CURRNT)     ; SAVE CURRENT LINE #
 711:	02A8  224608  	                LD      (LOPLN),HL
 712:	02AB  EB      	                EX      DE,HL           ; AND TEXT POINTER
 713:	02AC  224808  	                LD      (LOPPT),HL
 714:	02AF  010A00  	                LD      BC,0AH          ; DIG INTO STACK TO
 715:	02B2  2A4008  	                LD      HL,(LOPVAR)     ; FIND 'LOPVAR'
 716:	02B5  EB      	                EX      DE,HL
 717:	02B6  60      	                LD      H,B
 718:	02B7  68      	                LD      L,B             ; HL=0 NOW
 719:	02B8  39      	                ADD     HL,SP           ; HERE IS THE STACK
 720:	02B9  3E      	                .DB     3EH             ; HACK SKIP "ADD HL,BC"
 721:	02BA  09      	FR7:            ADD     HL,BC           ; EACH LEVEL IS 10 DEEP
 722:	02BB  7E      	                LD      A,(HL)          ; GET THAT OLD 'LOPVAR'
 723:	02BC  23      	                INC     HL
 724:	02BD  B6      	                OR      (HL)
 725:	02BE  2818    	                JR      Z,FR8           ; 0 SAYS NO MORE IN IT
 726:	02C0  7E      	                LD      A,(HL)
 727:	02C1  2B      	                DEC     HL
 728:	02C2  BA      	                CP      D               ; SAME AS THIS ONE?
 729:	02C3  20F5    	                JR      NZ,FR7
 730:	02C5  7E      	                LD      A,(HL)          ; THE OTHER HALF?
 731:	02C6  BB      	                CP      E
 732:	02C7  20F1    	                JR      NZ,FR7
 733:	02C9  EB      	                EX      DE,HL           ; YES, FOUND ONE
 734:	02CA  210000  	                LD      HL,0H
 735:	02CD  39      	                ADD     HL,SP           ; TRY TO MOVE SP
 736:	02CE  44      	                LD      B,H
 737:	02CF  4D      	                LD      C,L
 738:	02D0  210A00  	                LD      HL,0AH
 739:	02D3  19      	                ADD     HL,DE
 740:	02D4  CDCA06  	                CALL    MVDOWN          ; AND PURGE 10 WORDS
 741:	02D7  F9      	                LD      SP,HL           ; IN THE STACK
 742:	02D8  2A4808  	FR8:            LD      HL,(LOPPT)      ; JOB DONE, RESTORE DE
 743:	02DB  EB      	                EX      DE,HL
 744:	02DC  F7      	                RST     RFINISH         ; AND CONTINUE
 745:			;
 746:	02DD  FF      	NEXT:           RST     RTSTV           ; GET ADDRESS OF VAR.
 747:	02DE  DA8305  	                JP      C,QWHAT         ; NO VARIABLE, "WHAT?"
 748:	02E1  223C08  	                LD      (VARNXT),HL     ; YES, SAVE IT
 749:	02E4  D5      	NX0:            PUSH    DE              ; SAVE TEXT POINTER
 750:	02E5  EB      	                EX      DE,HL
 751:	02E6  2A4008  	                LD      HL,(LOPVAR)     ; GET VAR. IN 'FOR'
 752:	02E9  7C      	                LD      A,H
 753:	02EA  B5      	                OR      L               ; 0 SAYS NEVER HAD ONE
 754:	02EB  CA8405  	                JP      Z,AWHAT         ; SO WE ASK: "WHAT?"
 755:	02EE  E7      	                RST     RCOMP           ; ELSE WE CHECK THEM
 756:	02EF  2809    	                JR      Z,NX3           ; OK, THEY AGREE
 757:	02F1  D1      	                POP     DE              ; NO, LET'S SEE
 758:	02F2  CDD706  	                CALL    POPA            ; PURGE CURRENT LOOP
 759:	02F5  2A3C08  	                LD      HL,(VARNXT)     ; AND POP ONE LEVEL
 760:	02F8  18EA    	                JR      NX0             ; GO CHECK AGAIN
 761:	02FA  5E      	NX3:            LD      E,(HL)          ; COME HERE WHEN AGREED
 762:	02FB  23      	                INC     HL
 763:	02FC  56      	                LD      D,(HL)          ; DE=VALUE OF VAR.
 764:	02FD  2A4208  	                LD      HL,(LOPINC)
 765:	0300  E5      	                PUSH    HL
 766:	0301  7C      	                LD      A,H
 767:	0302  AA      	                XOR     D
 768:	0303  7A      	                LD      A,D
 769:	0304  19      	                ADD     HL,DE           ; ADD ONE STEP
 770:	0305  FA0C03  	                JP      M,NX4
 771:	0308  AC      	                XOR     H
 772:	0309  FA2D03  	                JP      M,NX5
 773:	030C  EB      	NX4:            EX      DE,HL
 774:	030D  2A4008  	                LD      HL,(LOPVAR)     ; PUT IT BACK
 775:	0310  73      	                LD      (HL),E
 776:	0311  23      	                INC     HL
 777:	0312  72      	                LD      (HL),D
 778:	0313  2A4408  	                LD      HL,(LOPLMT)     ; HL->LIMIT
 779:	0316  F1      	                POP     AF              ; OLD HL
 780:	0317  B7      	                OR      A
 781:	0318  F21C03  	                JP      P,NX1           ; STEP > 0
 782:	031B  EB      	                EX      DE,HL           ; STEP < 0
 783:	031C  CD5905  	NX1:            CALL    CKHLDE          ; COMPARE WITH LIMIT
 784:	031F  D1      	                POP     DE              ; RESTORE TEXT POINTER
 785:	0320  380D    	                JR      C,NX2           ; OUTSIDE LIMIT
 786:	0322  2A4608  	                LD      HL,(LOPLN)      ; WITHIN LIMIT, GO
 787:	0325  223808  	                LD      (CURRNT),HL     ; BACK TO THE SAVED
 788:	0328  2A4808  	                LD      HL,(LOPPT)      ; 'CURRNT' AND TEXT
 789:	032B  EB      	                EX      DE,HL           ; POINTER
 790:	032C  F7      	                RST     RFINISH
 791:	032D  E1      	NX5:            POP     HL
 792:	032E  D1      	                POP     DE
 793:	032F  CDD706  	NX2:            CALL    POPA            ; PURGE THIS LOOP
 794:	0332  F7      	                RST     RFINISH
 795:			;
 796:			; *************************************************************
 797:			;
 798:			; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
 799:			;
 800:			; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
 801:			; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
 802:			;
 803:			; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
 804:			; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
 805:			; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
 806:			; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
 807:			; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
 808:			; EXECUTION CONTINUES AT THE NEXT LINE.
 809:			;
 810:			; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
 811:			; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
 812:			; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
 813:			; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
 814:			; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
 815:			; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
 816:			; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
 817:			; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
 818:			; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
 819:			; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
 820:			;
 821:			; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
 822:			; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
 823:			; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
 824:			; THIS IS HANDLED IN 'INPERR'.
 825:			;
 826:			; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
 827:			; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
 828:			; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
 829:			; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
 830:			; THIS IS DONE BY 'DEFLT'.
 831:			;
 832:	0333  210000  	REM:            LD      HL,0H           ; *** REM ***
 833:	0336  3E      	                .DB     3EH             ; SKIP RST, THIS IS LIKE 'IF 0'
 834:			;
 835:	0337  DF      	IF_:            RST     REXPR           ; *** IF ***
 836:	0338  7C      	                LD      A,H             ; IS THE EXPR.=0?
 837:	0339  B5      	                OR      L
 838:	033A  C2CE01  	                JP      NZ,RUNSML       ; NO, CONTINUE
 839:	033D  CD1206  	                CALL    FNDSKP          ; YES, SKIP REST OF LINE
 840:	0340  D2C701  	                JP      NC,RUNTSL       ; AND RUN THE NEXT LINE
 841:	0343  C33401  	                JP      WSTART          ; IF NO NEXT, RE-START
 842:			;
 843:	0346  2A3E08  	INPERR:         LD      HL,(STKINP)     ; *** INPERR ***
 844:	0349  F9      	                LD      SP,HL           ; RESTORE OLD SP
 845:	034A  E1      	                POP     HL              ; AND OLD 'CURRNT'
 846:	034B  223808  	                LD      (CURRNT),HL
 847:	034E  D1      	                POP     DE              ; AND OLD TEXT POINTER
 848:	034F  D1      	                POP     DE              ; REDO INPUT
 849:			;
 850:	0350          	INPUT:                                  ; *** INPUT ***
 851:	0350  D5      	IP1:            PUSH    DE              ; SAVE IN CASE OF ERROR
 852:	0351  CD2506  	                CALL    QTSTG           ; IS NEXT ITEM A STRING?
 853:	0354  1805    	                JR      IP2             ; HACK JR!! NO
 854:	0356  FF      	                RST     RTSTV           ; YES, BUT FOLLOWED BY A
 855:	0357  3839    	                JR      C,IP4           ; VARIABLE?   NO.
 856:	0359  1810    	                JR      IP3             ; YES.  INPUT VARIABLE
 857:	035B  D5      	IP2:            PUSH    DE              ; SAVE FOR 'PRTSTG'
 858:	035C  FF      	                RST     RTSTV           ; MUST BE VARIABLE NOW
 859:	035D  DA8305  	                JP      C,QWHAT         ; "WHAT?" IT IS NOT?
 860:	0360  1A      	                LD      A,(DE)          ; GET READY FOR 'PRTSTG'
 861:	0361  4F      	                LD      C,A
 862:	0362  97      	                SUB     A
 863:	0363  12      	                LD      (DE),A
 864:	0364  D1      	                POP     DE
 865:	0365  CD1A06  	                CALL    PRTSTG          ; PRINT STRING AS PROMPT
 866:	0368  79      	                LD      A,C             ; RESTORE TEXT
 867:	0369  1B      	                DEC     DE
 868:	036A  12      	                LD      (DE),A
 869:	036B  D5      	IP3:            PUSH    DE              ; SAVE TEXT POINTER
 870:	036C  EB      	                EX      DE,HL
 871:	036D  2A3808  	                LD      HL,(CURRNT)     ; ALSO SAVE 'CURRNT'
 872:	0370  E5      	                PUSH    HL
 873:	0371  215003  	                LD      HL,IP1          ; A NEGATIVE NUMBER
 874:	0374  223808  	                LD      (CURRNT),HL     ; AS A FLAG
 875:	0377  210000  	                LD      HL,0H           ; SAVE SP TOO
 876:	037A  39      	                ADD     HL,SP
 877:	037B  223E08  	                LD      (STKINP),HL
 878:	037E  D5      	                PUSH    DE              ; OLD HL
 879:	037F  3E3A    	                LD      A,':'           ; PRINT THIS TOO
 880:	0381  CDB605  	                CALL    GETLN           ; AND GET A LINE
 881:	0384  11800F  	                LD      DE,BUFFER       ; POINTS TO BUFFER
 882:	0387  DF      	                RST     REXPR           ; EVALUATE INPUT
 883:			                                        ; NOP            ;??? CAN BE 'CALL ENDCHK'
 884:			                                        ; NOP
 885:			                                        ; NOP
 886:	0388  D1      	                POP     DE              ; OK, GET OLD HL
 887:	0389  EB      	                EX      DE,HL
 888:	038A  73      	                LD      (HL),E          ; SAVE VALUE IN VAR.
 889:	038B  23      	                INC     HL
 890:	038C  72      	                LD      (HL),D
 891:	038D  E1      	                POP     HL              ; GET OLD 'CURRNT'
 892:	038E  223808  	                LD      (CURRNT),HL
 893:	0391  D1      	                POP     DE              ; AND OLD TEXT POINTER
 894:	0392  F1      	IP4:            POP     AF              ; PURGE JUNK IN STACK
 895:	0393  CF2C02  	                TSTC    $2C,IP5         ; IS NEXT CH. ','?
 896:	0396  18B8    	                JR      IP1             ; YES, MORE ITEMS.
 897:	0398  F7      	IP5:            RST     RFINISH
 898:			;
 899:	0399  1A      	DEFLT:          LD      A,(DE)          ; ***  DEFLT ***
 900:	039A  FE0D    	                CP      CR              ; EMPTY LINE IS OK
 901:	039C  2808    	                JR      Z,LT1           ; ELSE IT IS 'LET'
 902:			;
 903:	039E  CD6105  	LET:            CALL    SETVAL          ; *** LET ***
 904:	03A1  CF2C02  	                TSTC    $2C,LT1         ; SET VALUE TO VAR.
 905:	03A4  18F8    	                JR      LET             ; ITEM BY ITEM
 906:	03A6  F7      	LT1:            RST     RFINISH         ; UNTIL FINISH
 907:			;
 908:			; *************************************************************
 909:			;
 910:			; *** EXPR ***
 911:			;
 912:			; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
 913:			; <EXPR>::<EXPR2>
 914:			;         <EXPR2><REL.OP.><EXPR2>
 915:			; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
 916:			; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
 917:			; <EXPR2>::=(+ OR -)<EXPR3>(+ OR - OR |<EXPR3>)(....)
 918:			; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
 919:			; <EXPR3>::=<EXPR4>(* OR / OR &<EXPR4>)(....)
 920:			; <EXPR4>::=<VARIABLE>
 921:			;           <FUNCTION>
 922:			;           (<EXPR>)
 923:			; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
 924:			; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
 925:			; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
 926:			;
 927:			; EXPR:         CALL    EXPR2           ; THIS IS AT LOC. 18
 928:			;               PUSH    HL              ; SAVE <EXPR2> VALUE
 929:			;               JP      EXPR1           ; REST OF IT AT EXPR1
 930:			;
 931:	03A7  21E407  	EXPR1:          LD      HL,TAB8-1       ; LOOKUP REL.OP.
 932:	03AA  C31D07  	                JP      EXEC            ; GO DO IT
 933:			;
 934:	03AD  CDD603  	XPEQ:           CALL    XP18            ; REL.OP."="
 935:	03B0  C0      	                RET     NZ              ; FALSE, RETURN HL=0
 936:	03B1  6F      	                LD      L,A             ; ELSE SET HL=1
 937:	03B2  C9      	                RET
 938:			;
 939:	03B3  CDD603  	XPNE:           CALL    XP18            ; REL.OP."#" OR "<>"
 940:	03B6  C8      	                RET     Z               ; FALSE, RETURN HL=0
 941:	03B7  6F      	                LD      L,A             ; TRUE, RETURN HL=1
 942:	03B8  C9      	                RET
 943:			;
 944:	03B9  CDD603  	XPLE:           CALL    XP18            ; REL.OP."<="
 945:	03BC  6F      	                LD      L,A             ; SET HL=1
 946:	03BD  C8      	                RET     Z               ; REL. TRUE, RETURN
 947:	03BE  D8      	                RET     C
 948:	03BF  6C      	                LD      L,H             ; ELSE SET HL=0
 949:	03C0  C9      	                RET
 950:			;
 951:	03C1  CDD603  	XPLT:           CALL    XP18            ; REL.OP."<"
 952:	03C4  D0      	                RET     NC              ; FALSE, RETURN HL=0
 953:	03C5  6F      	                LD      L,A             ; ELSE SET HL=1
 954:	03C6  C9      	                RET
 955:			;
 956:	03C7  CDD603  	XPGE:           CALL    XP18            ; REL.OP.">="
 957:	03CA  D8      	                RET     C               ; NO, RETURN HL=0
 958:	03CB  6F      	                LD      L,A             ; YES, RETURN HL=1
 959:	03CC  C9      	                RET
 960:			;
 961:	03CD  CDD603  	XPGT:           CALL    XP18            ; REL.OP.">"
 962:	03D0  C8      	                RET     Z               ; FALSE
 963:	03D1  D8      	                RET     C               ; ALSO FALSE, HL=0
 964:	03D2  6F      	                LD      L,A             ; TRUE, HL=1
 965:	03D3  C9      	                RET
 966:			;
 967:	03D4  E1      	XP17:           POP     HL              ; NOT .REL.OP
 968:	03D5  C9      	                RET                     ; RETURN HL=<EXPR2>
 969:			;
 970:	03D6  79      	XP18:           LD      A,C             ; SUBROUTINE FOR ALL
 971:	03D7  E1      	                POP     HL              ; REL.OP.'S
 972:	03D8  C1      	                POP     BC
 973:	03D9  E5      	                PUSH    HL              ; REVERSE TOP OF STACK
 974:	03DA  C5      	                PUSH    BC
 975:	03DB  4F      	                LD      C,A
 976:	03DC  CDEB03  	                CALL    EXPR2           ; GET 2ND <EXPR2>
 977:	03DF  EB      	                EX      DE,HL           ; VALUE IN DE NOW
 978:	03E0  E3      	                EX      (SP),HL         ; 1ST <EXPR2> IN HL
 979:	03E1  CD5905  	                CALL    CKHLDE          ; COMPARE 1ST WITH 2ND
 980:	03E4  D1      	                POP     DE              ; RESTORE TEXT POINTER
 981:	03E5  210000  	                LD      HL,0H           ; SET HL=0, A=1
 982:	03E8  3E01    	                LD      A,1
 983:	03EA  C9      	                RET
 984:			;
 985:	03EB  CF2D05  	EXPR2:          TSTC    '-',XP21        ; NEGATIVE SIGN?
 986:	03EE  210000  	                LD      HL,0H           ; YES, FAKE '0-'
 987:	03F1  1821    	                JR      XP26            ; TREAT LIKE SUBTRACT
 988:			;
 989:	03F3  CF2B00  	XP21:           TSTC    '+',XP22        ; POSITIVE SIGN? IGNORE
 990:	03F6  CD2F04  	XP22:           CALL    EXPR3           ; 1ST <EXPR3>
 991:	03F9  CF2B15  	XP23:           TSTC    '+',XP25        ; ADD?
 992:	03FC  E5      	                PUSH    HL              ; YES, SAVE VALUE
 993:	03FD  CD2F04  	                CALL    EXPR3           ; GET 2ND <EXPR3>
 994:	0400  EB      	XP24:           EX      DE,HL           ; 2ND IN DE
 995:	0401  E3      	                EX      (SP),HL         ; 1ST IN HL
 996:	0402  7C      	                LD      A,H             ; COMPARE SIGN
 997:	0403  AA      	                XOR     D
 998:	0404  7A      	                LD      A,D
 999:	0405  19      	                ADD     HL,DE
1000:	0406  D1      	                POP     DE              ; RESTORE TEXT POINTER
1001:	0407  FAF903  	                JP      M,XP23          ; 1ST AND 2ND SIGN DIFFER
1002:	040A  AC      	                XOR     H               ; 1ST AND 2ND SIGN EQUAL
1003:	040B  F2F903  	                JP      P,XP23          ; SO IS RESULT
1004:			;
1005:	040E  C3DE00  	                JP      QHOW            ; ELSE WE HAVE OVERFLOW
1006:			;
1007:	0411  CF2D09  	XP25:           TSTC    '-',XP27        ; SUBTRACT?
1008:	0414  E5      	XP26:           PUSH    HL              ; YES, SAVE 1ST <EXPR3>
1009:	0415  CD2F04  	                CALL    EXPR3           ; GET 2ND <EXPR3>
1010:	0418  CD4405  	                CALL    CHGSGN          ; NEGATE
1011:	041B  18E3    	                JR      XP24            ; AND ADD THEM
1012:			
1013:	041D  CF7C97  	XP27:           TSTC    '|',XP42        ; OR?
1014:	0420  E5      	                PUSH    HL              ; YES, SAVE 1ST <EXPR3>
1015:	0421  CD2F04  	                CALL    EXPR3           ; GET 2ND <EXPR3>
1016:	0424  EB      	                EX      DE,HL           ; 2ND IN DE
1017:	0425  E3      	                EX      (SP),HL         ; 1ST IN HL
1018:	0426  7C      	                LD      A,H             ; HL = HL & DE
1019:	0427  B2      	                OR      D
1020:	0428  67      	                LD      H,A
1021:	0429  7D      	                LD      A,L
1022:	042A  B3      	                OR      E
1023:	042B  6F      	                LD      L,A
1024:	042C  D1      	                POP     DE              ; RESTORE TEXT POINTER
1025:	042D  18CA    	                JR      XP23            ; LOOK FOR MORE TERMS
1026:			;
1027:	042F  CD9C04  	EXPR3:          CALL    EXPR4           ; GET 1ST <EXPR4>
1028:	0432  CF2A29  	XP31:           TSTC    '*',XP34        ; MULTIPLY?
1029:	0435  E5      	                PUSH    HL              ; YES, SAVE 1ST
1030:	0436  CD9C04  	                CALL    EXPR4           ; AND GET 2ND <EXPR4>
1031:	0439  0600    	                LD      B,0H            ; CLEAR B FOR SIGN
1032:	043B  CD4105  	                CALL    CHKSGN          ; CHECK SIGN
1033:	043E  E3      	                EX      (SP),HL         ; 1ST IN HL
1034:	043F  CD4105  	                CALL    CHKSGN          ; CHECK SIGN OF 1ST
1035:	0442  EB      	                EX      DE,HL
1036:	0443  E3      	                EX      (SP),HL
1037:	0444  7C      	                LD      A,H             ; IS HL > 255 ?
1038:	0445  B7      	                OR      A
1039:	0446  2806    	                JR      Z,XP32          ; NO
1040:	0448  7A      	                LD      A,D             ; YES, HOW ABOUT DE
1041:	0449  B2      	                OR      D
1042:	044A  EB      	                EX      DE,HL           ; PUT SMALLER IN HL
1043:	044B  C2DF00  	                JP      NZ,AHOW         ; ALSO >, WILL OVERFLOW
1044:	044E  7D      	XP32:           LD      A,L             ; THIS IS DUMB
1045:	044F  210000  	                LD      HL,0H           ; CLEAR RESULT
1046:	0452  B7      	                OR      A               ; ADD AND COUNT
1047:	0453  2828    	                JR      Z,XP35
1048:	0455  19      	XP33:           ADD     HL,DE
1049:	0456  DADF00  	                JP      C,AHOW          ; OVERFLOW
1050:	0459  3D      	                DEC     A
1051:	045A  20F9    	                JR      NZ,XP33
1052:	045C  181F    	                JR      XP35            ; FINISHED
1053:			;
1054:	045E  CF2F29  	XP34:           TSTC    '/',XP36        ; DIVIDE?
1055:	0461  E5      	                PUSH    HL              ; YES, SAVE 1ST <EXPR4>
1056:	0462  CD9C04  	                CALL    EXPR4           ; AND GET THE SECOND ONE
1057:	0465  0600    	                LD      B,0H            ; CLEAR B FOR SIGN
1058:	0467  CD4105  	                CALL    CHKSGN          ; CHECK SIGN OF 2ND
1059:	046A  E3      	                EX      (SP),HL         ; GET 1ST IN HL
1060:	046B  CD4105  	                CALL    CHKSGN          ; CHECK SIGN OF 1ST
1061:	046E  EB      	                EX      DE,HL
1062:	046F  E3      	                EX      (SP),HL
1063:	0470  EB      	                EX      DE,HL
1064:	0471  7A      	                LD      A,D             ; DIVIDE BY 0?
1065:	0472  B3      	                OR      E
1066:	0473  CADF00  	                JP      Z,AHOW          ; SAY "HOW?"
1067:	0476  C5      	                PUSH    BC              ; ELSE SAVE SIGN
1068:	0477  CD2805  	                CALL    DIVIDE          ; USE SUBROUTINE
1069:	047A  60      	                LD      H,B             ; RESULT IN HL NOW
1070:	047B  69      	                LD      L,C
1071:	047C  C1      	                POP     BC              ; GET SIGN BACK
1072:	047D  D1      	XP35:           POP     DE              ; AND TEXT POINTER
1073:	047E  7C      	                LD      A,H             ; HL MUST BE +
1074:	047F  B7      	                OR      A
1075:	0480  FADE00  	                JP      M,QHOW          ; ELSE IT IS OVERFLOW
1076:	0483  78      	                LD      A,B
1077:	0484  B7      	                OR      A
1078:	0485  FC4405  	                CALL    M,CHGSGN        ; CHANGE SIGN IF NEEDED
1079:	0488  18A8    	                JR      XP31            ; LOOK FOR MORE TERMS
1080:			;
1081:	048A  CF262A  	XP36:           TSTC    '&',XP42        ; AND?
1082:	048D  E5      	                PUSH    HL              ; YES, SAVE 1ST <EXPR4>
1083:	048E  CD9C04  	                CALL    EXPR4           ; AND GET THE SECOND ONE
1084:	0491  EB      	                EX      DE,HL           ; 2ND IN DE
1085:	0492  E3      	                EX      (SP),HL         ; 1ST IN HL
1086:	0493  7C      	                LD      A,H             ; HL = HL & DE
1087:	0494  A2      	                AND     D
1088:	0495  67      	                LD      H,A
1089:	0496  7D      	                LD      A,L
1090:	0497  A3      	                AND     E
1091:	0498  6F      	                LD      L,A
1092:	0499  D1      	                POP     DE              ; RESTORE TEXT POINTER
1093:	049A  1896    	                JR      XP31            ; LOOK FOR MORE TERMS
1094:			
1095:			;
1096:	049C  21AF07  	EXPR4:          LD      HL,TAB4-1       ; FIND FUNCTION IN TAB4
1097:	049F  C31D07  	                JP      EXEC            ; AND GO DO IT
1098:			;
1099:	04A2  FF      	XP40:           RST     RTSTV           ; NO, NOT A FUNCTION
1100:	04A3  3805    	                JR      C,XP41          ; NOR A VARIABLE
1101:	04A5  7E      	                LD      A,(HL)          ; VARIABLE
1102:	04A6  23      	                INC     HL
1103:	04A7  66      	                LD      H,(HL)          ; VALUE IN HL
1104:	04A8  6F      	                LD      L,A
1105:	04A9  C9      	                RET
1106:			;
1107:	04AA  CD7C00  	XP41:           CALL    TSTNUM          ; OR IS IT A NUMBER
1108:	04AD  78      	                LD      A,B             ; # OF DIGIT
1109:	04AE  B7      	                OR      A
1110:	04AF  C0      	                RET     NZ              ; OK
1111:	04B0  CF2805  	PARN:           TSTC    $28,XP43        ; '('
1112:	04B3  DF      	                RST     REXPR           ; "(EXPR)"
1113:	04B4  CF2901  	                TSTC    $29,XP43        ; ')'
1114:	04B7  C9      	XP42:           RET
1115:	04B8  C38305  	XP43:           JP      QWHAT           ; ELSE SAY: "WHAT?"
1116:			
1117:	04BB  CDB004  	RND:            CALL    PARN            ; *** RND(EXPR) ***
1118:	04BE  7C      	                LD      A,H             ; EXPR MUST BE +
1119:	04BF  B7      	                OR      A
1120:	04C0  FADE00  	                JP      M,QHOW
1121:	04C3  B5      	                OR      L               ; AND NON-ZERO
1122:	04C4  CADE00  	                JP      Z,QHOW
1123:	04C7  D5      	                PUSH    DE              ; SAVE BOTH
1124:	04C8  E5      	                PUSH    HL
1125:	04C9  2A4A08  	                LD      HL,(RANPNT)     ; GET MEMORY AS RANDOM
1126:	04CC  11FF07  	                LD      DE,LSTROM       ; NUMBER
1127:	04CF  E7      	                RST     RCOMP
1128:	04D0  3803    	                JR      C,RA1           ; WRAP AROUND IF LAST
1129:	04D2  210000  	                LD      HL,CSTART
1130:	04D5  ED5F    	RA1:            LD      A,R             ; RFSH REG GIVES TIME DEP. RANDOM
1131:	04D7  AE      	                XOR     (HL)
1132:	04D8  5F      	                LD      E,A
1133:	04D9  23      	                INC     HL
1134:	04DA  AE      	                XOR     (HL)
1135:	04DB  57      	                LD      D,A
1136:	04DC  224A08  	                LD      (RANPNT),HL
1137:	04DF  E1      	                POP     HL
1138:	04E0  EB      	                EX      DE,HL
1139:	04E1  C5      	                PUSH    BC
1140:	04E2  CD2805  	                CALL    DIVIDE          ; RND(N)=MOD(M,N)+1
1141:	04E5  C1      	                POP     BC
1142:	04E6  D1      	                POP     DE
1143:	04E7  23      	                INC     HL
1144:	04E8  C9      	                RET
1145:			
1146:	04E9  CDB004  	ABS:            CALL    PARN            ; *** ABS(EXPR) ***
1147:	04EC  1B      	                DEC     DE
1148:	04ED  CD4105  	                CALL    CHKSGN          ; CHECK SIGN AND CHANGE IF HL < 0
1149:	04F0  13      	                INC     DE
1150:	04F1  C9      	                RET
1151:			
1152:	04F2  2A3608  	SIZE:           LD      HL,(TXTUNF)     ; *** RETURN SIZE IN HL ***
1153:	04F5  D5      	                PUSH    DE              ; GET THE NUMBER OF FREE
1154:	04F6  EB      	                EX      DE,HL           ; BYTES BETWEEN 'TXTUNF'
1155:	04F7  21000F  	                LD      HL,TXTEND       ; AND 'TXTEND'
1156:	04FA  CD3D05  	                CALL    SUBDE
1157:	04FD  D1      	                POP     DE
1158:	04FE  C9      	                RET
1159:			
1160:	04FF  CDB004  	GET:            CALL    PARN            ; *** GET(ADDR) ***
1161:	0502  6E      	                LD      L,(HL)          ; GET CONTENT OF (HL)
1162:	0503  2600    	                LD      H,0             ; RETURN RESULT IN HL
1163:	0505  C9      	                RET
1164:			
1165:	0506  CDB004  	USR:            CALL    PARN            ; *** USR(PARA) ***
1166:	0509  C3000F  	                JP      USRSPC          ; GET para in HL and JP to prog
1167:			;                                       ; There you should:
1168:			;               ...                     ;   - Do the work
1169:			;               ...                     ;   - Put result in HL
1170:			;               RET                     ; $C9 - RET to BASIC
1171:			;                                       ; DEFAULT: (USRSPC)=$C9
1172:			
1173:	050C  CDB004  	CALL:           CALL    PARN            ; *** CALL(ADR) ***
1174:	050F  E9      	                JP      (HL)            ; Get address in HL and jump there
1175:			                                        ; Return value in HL
1176:			
1177:	0510  21000F  	TOP:            LD      HL,TXTEND       ; *** TOP *** END OF TEXT AREA = USRSPC
1178:	0513  C9      	                RET
1179:			
1180:	0514  DF      	PUT:            RST     REXPR           ; *** PUT ADDR, VAL1 [,VAL2, VAL3,..]
1181:	0515  CF2C0D  	                TSTC    $2C,PT2         ; 1ST ',' SEPARATES THE VALUE(S)
1182:	0518  E5      	                PUSH    HL              ; SAVE ADDR
1183:	0519  DF      	PT0:            RST     REXPR           ; GET VAL IN HL
1184:	051A  7D      	                LD      A,L             ; LOW BYTE OF VAL
1185:	051B  E1      	                POP     HL              ; GET ADDR
1186:	051C  77      	                LD      (HL),A          ; PUT VALUE IN RAM
1187:	051D  CF2C04  	                TSTC    $2C,PT1         ; READY UNLESS ","
1188:	0520  23      	                INC     HL              ; NEXT ADDR
1189:	0521  E5      	                PUSH    HL
1190:	0522  18F5    	                JR      PT0             ; LIST CONTINUES
1191:			;
1192:	0524  F7      	PT1:            RST     RFINISH         ; READY
1193:			;
1194:	0525  185C    	PT2:            JR      QWHAT           ; ELSE SAY: "WHAT?"
1195:			
1196:	0527  76      	BYE:            HALT                    ; HALT CPU (return to analyser)
1197:			
1198:			;
1199:			; *************************************************************
1200:			;
1201:			; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1202:			;
1203:			; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1204:			;
1205:			; 'SUBDE' SUBSTRACTS DE FROM HL
1206:			;
1207:			; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1208:			; SIGN AND FLIP SIGN OF B.
1209:			;
1210:			; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1211:			;
1212:			; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1213:			; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1214:			; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1215:			;
1216:	0528  E5      	DIVIDE:         PUSH    HL              ; *** DIVIDE ***
1217:	0529  6C      	                LD      L,H             ; DIVIDE H BY DE
1218:	052A  2600    	                LD      H,0
1219:	052C  CD3305  	                CALL    DV1
1220:	052F  41      	                LD      B,C             ; SAVE RESULT IN B
1221:	0530  7D      	                LD      A,L             ; (REMINDER+L)/DE
1222:	0531  E1      	                POP     HL
1223:	0532  67      	                LD      H,A
1224:	0533  0EFF    	DV1:            LD      C,0FFH          ; RESULT IN C
1225:	0535  0C      	DV2:            INC     C               ; DUMB ROUTINE
1226:	0536  CD3D05  	                CALL    SUBDE           ; DIVIDE BY SUBTRACT
1227:	0539  30FA    	                JR      NC,DV2          ; AND COUNT
1228:	053B  19      	                ADD     HL,DE
1229:	053C  C9      	                RET
1230:			
1231:	053D  B7      	SUBDE:          OR      A               ; CLR CY
1232:	053E  ED52    	                SBC     HL,DE
1233:	0540  C9      	                RET
1234:			
1235:	0541  7C      	CHKSGN:         LD      A,H             ; *** CHKSGN ***
1236:	0542  B7      	                OR      A               ; CHECK SIGN OF HL
1237:	0543  F0      	                RET     P               ; IF HL >=0 RETURN
1238:			;
1239:	0544  7C      	CHGSGN:         LD      A,H             ; *** CHGSGN ***
1240:	0545  B5      	                OR      L               ; CHECK VALUE OF HL
1241:	0546  C8      	                RET     Z               ; IF HL == 0 RETURN
1242:			;
1243:	0547  7C      	                LD      A,H
1244:	0548  F5      	                PUSH    AF              ; SAVE SIGN
1245:	0549  2F      	                CPL                     ; CHANGE SIGN OF HL
1246:	054A  67      	                LD      H,A
1247:	054B  7D      	                LD      A,L
1248:	054C  2F      	                CPL
1249:	054D  6F      	                LD      L,A
1250:	054E  23      	                INC     HL              ; HL = -HL
1251:	054F  F1      	                POP     AF              ; GET ORIGINAL SIGN
1252:	0550  AC      	                XOR     H               ; COMPARE
1253:	0551  F2DE00  	                JP      P,QHOW          ; ERROR IF SIGN UNCHANGED (HL=$8000)
1254:	0554  78      	                LD      A,B             ; AND ALSO FLIP B
1255:	0555  EE80    	                XOR     80H
1256:	0557  47      	                LD      B,A
1257:	0558  C9      	                RET
1258:			
1259:	0559  7C      	CKHLDE:         LD      A,H
1260:	055A  AA      	                XOR     D               ; SAME SIGN?
1261:	055B  F25F05  	                JP      P,CK1           ; YES, COMPARE
1262:	055E  EB      	                EX      DE,HL           ; NO, XCH AND COMP
1263:	055F  E7      	CK1:            RST     RCOMP
1264:	0560  C9      	                RET
1265:			;
1266:			; *************************************************************
1267:			;
1268:			; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1269:			;
1270:			; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1271:			; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1272:			; TO THAT VALUE.
1273:			;
1274:			; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1275:			; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1276:			; NEXT LINE AND CONTINUE FROM THERE.
1277:			;
1278:			; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1279:			; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1280:			;
1281:			; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1282:			; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1283:			; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1284:			; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1285:			; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1286:			; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1287:			; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1288:			; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1289:			; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1290:			;
1291:			; RELATED TO 'ERROR' ARE THE FOLLOWING:
1292:			; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1293:			; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1294:			; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1295:			; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1296:			;
1297:	0561  FF      	SETVAL:         RST     RTSTV           ; *** SETVAL ***
1298:	0562  381F    	                JR      C,QWHAT         ; "WHAT?" NO VARIABLE
1299:	0564  E5      	                PUSH    HL              ; SAVE ADDRESS OF VAR.
1300:	0565  CF3D1B  	                TSTC    '=',QWHAT       ; PASS "=" SIGN
1301:	0568  DF      	                RST     REXPR           ; EVALUATE EXPR.
1302:	0569  44      	                LD      B,H             ; VALUE IS IN BC NOW
1303:	056A  4D      	                LD      C,L
1304:	056B  E1      	                POP     HL              ; GET ADDRESS
1305:	056C  71      	                LD      (HL),C          ; SAVE VALUE
1306:	056D  23      	                INC     HL
1307:	056E  70      	                LD      (HL),B
1308:	056F  C9      	                RET
1309:			
1310:	0570  CF3B04  	FIN:            TSTC    ';',FI1         ; *** FIN ***
1311:	0573  F1      	                POP     AF              ; ";", PURGE RET. ADDR.
1312:	0574  C3CE01  	                JP      RUNSML          ; CONTINUE SAME LINE
1313:	0577  CF0D04  	FI1:            TSTC    CR,FI2          ; NOT ";", IS IT CR?
1314:	057A  F1      	                POP     AF              ; YES, PURGE RET. ADDR.
1315:	057B  C3BE01  	                JP      RUNNXL          ; RUN NEXT LINE
1316:	057E  C9      	FI2:            RET                     ; ELSE RETURN TO CALLER
1317:			
1318:	057F  EF      	ENDCHK:         RST     RIGNBLK         ; IGNBLK
1319:	0580  FE0D    	                CP      CR              ; END WITH CR?
1320:	0582  C8      	                RET     Z               ; OK, ELSE SAY: "WHAT?"
1321:			;
1322:	0583  D5      	QWHAT:          PUSH    DE              ; *** QWHAT ***
1323:	0584  11F100  	AWHAT:          LD      DE,WHAT         ; *** AWHAT ***
1324:	0587  97      	ERROR:          SUB     A               ; *** ERROR ***
1325:	0588  CD1A06  	                CALL    PRTSTG          ; PRINT 'WHAT?', 'HOW?'
1326:	058B  D1      	                POP     DE              ; OR 'SORRY'
1327:	058C  1A      	                LD      A,(DE)          ; SAVE THE CHARACTER
1328:	058D  F5      	                PUSH    AF              ; AT WHERE OLD DE ->
1329:	058E  97      	                SUB     A               ; AND PUT A 0 THERE
1330:	058F  12      	                LD      (DE),A
1331:	0590  2A3808  	                LD      HL,(CURRNT)     ; GET CURRENT LINE #
1332:	0593  E5      	                PUSH    HL
1333:	0594  7E      	                LD      A,(HL)          ; CHECK THE VALUE
1334:	0595  23      	                INC     HL
1335:	0596  B6      	                OR      (HL)
1336:	0597  D1      	                POP     DE
1337:	0598  CA3401  	                JP      Z,WSTART        ; IF ZERO, JUST RESTART
1338:	059B  7E      	                LD      A,(HL)          ; IF NEGATIVE,
1339:	059C  B7      	                OR      A
1340:	059D  FA4603  	                JP      M,INPERR        ; REDO INPUT
1341:	05A0  CDAB06  	                CALL    PRTLN           ; ELSE PRINT THE LINE
1342:	05A3  1B      	                DEC     DE              ; UPTO WHERE THE 0 IS
1343:	05A4  F1      	                POP     AF              ; RESTORE THE CHARACTER
1344:	05A5  12      	                LD      (DE),A
1345:	05A6  3E3F    	                LD      A,'?'           ; PRINT A "?"
1346:	05A8  D7      	                RST     ROUTC
1347:	05A9  97      	                SUB     A               ; AND THE REST OF THE
1348:	05AA  CD1A06  	                CALL    PRTSTG          ; LINE
1349:	05AD  C33401  	                JP      WSTART          ; THEN RESTART
1350:			;
1351:	05B0  D5      	QSORRY:         PUSH    DE              ; *** QSORRY ***
1352:	05B1  11F700  	ASORRY:         LD      DE,SORRY        ; *** ASORRY ***
1353:	05B4  18D1    	                JR      ERROR
1354:			
1355:			;
1356:			; *************************************************************
1357:			;
1358:			; *** GETLN *** FNDLN (& FRIENDS) ***
1359:			;
1360:			; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1361:			; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1362:			; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1363:			; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1364:			; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1365:			; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1366:			; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1367:			;
1368:			; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1369:			; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1370:			; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1371:			; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1372:			; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1373:			; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1374:			; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1375:			; LINE, FLAGS ARE C & NZ.
1376:			; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1377:			; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1378:			; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1379:			; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1380:			; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1381:			; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1382:			;
1383:	05B6  D7      	GETLN:          RST     ROUTC           ; *** GETLN ***
1384:	05B7  11800F  	                LD      DE,BUFFER       ; PROMPT AND INIT.
1385:	05BA  CD0301  	GL1:            CALL    CHKIO           ; CHECK KEYBOARD
1386:	05BD  28FB    	                JR      Z,GL1           ; NO INPUT, WAIT
1387:	05BF  FE08    	                CP      BS              ; BS, DELETE LAST CHARACTER?
1388:	05C1  281A    	                JR      Z,GL3           ; YES
1389:	05C3  FE7F    	                CP      DEL             ; DEL, DELETE LAST CHARACTER?
1390:	05C5  2816    	                JR      Z,GL3           ; YES
1391:	05C7  D7      	                RST     ROUTC           ; INPUT, ECHO BACK
1392:	05C8  FE0A    	                CP      LF              ; IGNORE LF
1393:	05CA  28EE    	                JR      Z,GL1
1394:	05CC  B7      	                OR      A               ; IGNORE NULL
1395:	05CD  28EB    	                JR      Z,GL1
1396:	05CF  FE18    	                CP      CAN             ; ^X, DELETE THE WHOLE LINE?
1397:	05D1  281B    	                JR      Z,GL4           ; YES
1398:	05D3  12      	                LD      (DE),A          ; ELSE SAVE INPUT
1399:	05D4  13      	                INC     DE              ; AND BUMP POINTER
1400:	05D5  FE0D    	                CP      CR              ; WAS IT CR?
1401:	05D7  C8      	                RET     Z               ; YES, END OF LINE
1402:	05D8  7B      	                LD      A,E             ; ELSE MORE FREE ROOM?
1403:	05D9  FEFF    	                CP      BUFEND & 0FFH
1404:	05DB  20DD    	                JR      NZ,GL1          ; YES, GET NEXT INPUT
1405:	05DD  7B      	GL3:            LD      A,E             ; DELETE LAST CHARACTER
1406:	05DE  FE80    	                CP      BUFFER & 0FFH   ; BUT DO WE HAVE ANY?
1407:	05E0  280C    	                JR      Z,GL4           ; NO, REDO WHOLE LINE
1408:	05E2  1B      	                DEC     DE              ; YES, BACKUP POINTER
1409:	05E3  3E08    	                LD      A,BS            ; AND ECHO A BACKSPACE
1410:	05E5  D7      	                RST     ROUTC
1411:	05E6  3E20    	                LD      A,' '           ; AND ECHO A BLANK
1412:	05E8  D7      	                RST     ROUTC
1413:	05E9  3E08    	                LD      A,BS            ; AND ECHO A BACKSPACE
1414:	05EB  D7      	                RST     ROUTC
1415:	05EC  18CC    	                JR      GL1             ; GO GET NEXT INPUT
1416:	05EE  CD0E00  	GL4:            CALL    CRLF            ; REDO ENTIRE LINE
1417:	05F1  3E5E    	                LD      A,'^'           ; CR, LF AND UP-ARROW
1418:	05F3  18C1    	                JR      GETLN
1419:			;
1420:	05F5  7C      	FNDLN:          LD      A,H             ; *** FNDLN ***
1421:	05F6  B7      	                OR      A               ; CHECK SIGN OF HL
1422:	05F7  FADE00  	                JP      M,QHOW          ; IT CANNOT BE -
1423:	05FA  110009  	                LD      DE,TXTBGN       ; INIT TEXT POINTER
1424:			;
1425:	05FD          	FNDLP:                                  ; *** FDLNP ***
1426:	05FD  E5      	FL1:            PUSH    HL              ; SAVE LINE #
1427:	05FE  2A3608  	                LD      HL,(TXTUNF)     ; CHECK IF WE PASSED END
1428:	0601  2B      	                DEC     HL
1429:	0602  E7      	                RST     RCOMP
1430:	0603  E1      	                POP     HL              ; GET LINE # BACK
1431:	0604  D8      	                RET     C               ; C,NZ PASSED END
1432:	0605  1A      	                LD      A,(DE)          ; WE DID NOT, GET BYTE 1
1433:	0606  95      	                SUB     L               ; IS THIS THE LINE?
1434:	0607  47      	                LD      B,A             ; COMPARE LOW ORDER
1435:	0608  13      	                INC     DE
1436:	0609  1A      	                LD      A,(DE)          ; GET BYTE 2
1437:	060A  9C      	                SBC     A,H             ; COMPARE HIGH ORDER
1438:	060B  3804    	                JR      C,FL2           ; NO, NOT THERE YET
1439:	060D  1B      	                DEC     DE              ; ELSE WE EITHER FOUND
1440:	060E  B0      	                OR      B               ; IT, OR IT IS NOT THERE
1441:	060F  C9      	                RET                     ; NC,Z:FOUND, NC,NZ:NO
1442:			;
1443:	0610          	FNDNXT:                                 ; *** FNDNXT ***
1444:	0610  13      	                INC     DE              ; FIND NEXT LINE
1445:	0611  13      	FL2:            INC     DE              ; JUST PASSED BYTE 1 & 2
1446:			;
1447:	0612  1A      	FNDSKP:         LD      A,(DE)          ; *** FNDSKP ***
1448:	0613  FE0D    	                CP      CR              ; TRY TO FIND CR
1449:	0615  20FA    	                JR      NZ,FL2          ; KEEP LOOKING
1450:	0617  13      	                INC     DE              ; FOUND CR, SKIP OVER
1451:	0618  18E3    	                JR      FL1             ; CHECK IF END OF TEXT
1452:			;
1453:			; *************************************************************
1454:			;
1455:			; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1456:			;
1457:			; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1458:			; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1459:			; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1460:			; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1461:			;
1462:			; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1463:			; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1464:			; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1465:			; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1466:			; HACK AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER
1467:			;      IS SKIPPED OVER (SHALL BE A "JP" INSTRUCTION).
1468:			;
1469:			; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1470:			; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1471:			; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1472:			; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1473:			; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1474:			;
1475:			; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1476:			;
1477:	061A  47      	PRTSTG:         LD      B,A             ; *** PRTSTG ***
1478:	061B  1A      	PS1:            LD      A,(DE)          ; GET A CHARACTER
1479:	061C  13      	                INC     DE              ; BUMP POINTER
1480:	061D  B8      	                CP      B               ; SAME AS OLD A?
1481:	061E  C8      	                RET     Z               ; YES, RETURN
1482:	061F  D7      	                RST     ROUTC           ; ELSE PRINT IT
1483:	0620  FE0D    	                CP      CR              ; WAS IT A CR?
1484:	0622  20F7    	                JR      NZ,PS1          ; NO, NEXT
1485:	0624  C9      	                RET                     ; YES, RETURN
1486:			;
1487:	0625  CF220E  	QTSTG:          TSTC    $22,QT4         ; *** QTSTG ***
1488:	0628  3E22    	                LD      A,22H           ; IT IS A '"'
1489:	062A  CD1A06  	QT1:            CALL    PRTSTG          ; PRINT UNTIL ANOTHER
1490:	062D  FE0D    	QT1A:           CP      CR              ; WAS LAST ONE A CR?
1491:	062F  E1      	                POP     HL              ; HACK RETURN ADDRESS
1492:	0630  CABE01  	                JP      Z,RUNNXL        ; WAS CR, RUN NEXT LINE
1493:	0633  23      	QT2:            INC     HL              ; !! -> AFTER "CALL QTSTG"
1494:	0634  23      	                INC     HL              ; !!    MUST BE "JR .."
1495:	0635  E9      	                JP      (HL)            ; !! RETURN AFTER THIS "JR"
1496:			;
1497:			;QT3:            TSTC    $27,QT4         ; IS IT A "'"?
1498:			;                LD      A,27H           ; YES, DO THE SAME
1499:			;                JR      QT1             ; AS IN '"'
1500:			;
1501:	0636  CF5F06  	QT4:            TSTC    $5F,QT5         ; IS IT UNDERLINE?
1502:	0639  3E8D    	                LD      A,08DH          ; YES, CR WITHOUT LF
1503:	063B  D7      	                RST     ROUTC
1504:	063C  E1      	                POP     HL              ; HACK RETURN ADDRESS
1505:	063D  18F4    	                JR      QT2
1506:			;
1507:	063F  CF5E08  	QT5:            TSTC    5EH,QT6         ; RST 1, is it '^'?
1508:	0642  1A      	                LD      A,(DE)          ; CHR
1509:	0643  EE40    	                XOR     40H             ; CONVERT TO CTRL
1510:	0645  D7      	                RST     ROUTC
1511:	0646  1A      	                LD      A,(DE)          ; RESTORE CHR
1512:	0647  13      	                INC     DE
1513:	0648  18E3    	                JR      QT1A
1514:	064A  C9      	QT6:            RET                     ; NONE OF ABOVE
1515:			
1516:	064B          	PRTNUM:                                 ; *** PRINT NUMBER IN HL ***
1517:	064B  3A3508  	                LD      A,(PNBASE)      ; GET NUMBER BASE
1518:	064E  B7      	                OR      A
1519:	064F  2809    	                JR      Z,PN0           ; 0: DEFAULT DEC
1520:	0651  FE10    	                CP      16              ; HEX NUMBER?
1521:	0653  2010    	                JR      NZ,PN1          ; NO
1522:	0655  0624    	                LD      B,'$'           ; PRINT LEADING '$'
1523:	0657  0D      	                DEC     C               ; '$' TAKES SPACE
1524:	0658  180B    	                JR      PN1             ; HEX IS UNSIGNED
1525:	065A  0600    	PN0:            LD      B,0             ; NO PREFIX YET
1526:	065C  CD4105  	                CALL    CHKSGN          ; CHECK SIGN
1527:	065F  F26506  	                JP      P,PN1           ; NO SIGN
1528:	0662  062D    	                LD      B,'-'           ; B=SIGN
1529:	0664  0D      	                DEC     C               ; '-' TAKES SPACE
1530:	0665  D5      	PN1:            PUSH    DE
1531:	0666  3A3508  	                LD      A,(PNBASE)
1532:	0669  B7      	                OR      A               ; DEFAULT DECIMAL?
1533:	066A  2002    	                JR      NZ,PN1A
1534:	066C  3E0A    	                LD      A,10
1535:	066E  5F      	PN1A:           LD      E,A
1536:	066F  AF      	                XOR     A
1537:	0670  57      	                LD      D,A
1538:	0671  D5      	                PUSH    DE              ; SAVE AS A FLAG
1539:	0672  0D      	                DEC     C               ; C=SPACES
1540:	0673  C5      	                PUSH    BC              ; SAVE SIGN & SPACE
1541:	0674  CD2805  	PN2:            CALL    DIVIDE          ; DIVIDE HL BY NUMBER BASE
1542:	0677  78      	                LD      A,B             ; RESULT 0?
1543:	0678  B1      	                OR      C
1544:	0679  2807    	                JR      Z,PN3           ; YES, WE GOT ALL
1545:	067B  E3      	                EX      (SP),HL         ; NO, SAVE REMAINDER
1546:	067C  2D      	                DEC     L               ; AND COUNT SPACE
1547:	067D  E5      	                PUSH    HL              ; HL IS OLD BC
1548:	067E  60      	                LD      H,B             ; MOVE RESULT TO BC
1549:	067F  69      	                LD      L,C
1550:	0680  18F2    	                JR      PN2             ; AND DIVIDE AGAIN
1551:			;
1552:	0682  C1      	PN3:            POP     BC              ; WE GOT ALL DIGITS IN
1553:	0683  0D      	PN4:            DEC     C               ; THE STACK
1554:	0684  79      	                LD      A,C             ; LOOK AT SPACE COUNT
1555:	0685  B7      	                OR      A
1556:	0686  FA8E06  	                JP      M,PN5           ; NO LEADING BLANKS
1557:	0689  3E20    	                LD      A,' '           ; LEADING BLANKS
1558:	068B  D7      	                RST     ROUTC
1559:	068C  18F5    	                JR      PN4             ; MORE?
1560:	068E  78      	PN5:            LD      A,B             ; PRINT SIGN OR '$'
1561:	068F  B7      	                OR      A
1562:	0690  C41000  	                CALL    NZ,ROUTC
1563:	0693  5D      	                LD      E,L             ; LAST REMAINDER IN E
1564:	0694  3A3508  	PN6:            LD      A,(PNBASE)      ; GET NUMBER BASE
1565:	0697  B7      	                OR      A               ; DEFAULT DECIMAL?
1566:	0698  2002    	                JR      NZ,PN6A
1567:	069A  3E0A    	                LD      A,10
1568:	069C  BB      	PN6A:           CP      E               ; IT IS FLAG FOR NO MORE
1569:	069D  7B      	                LD      A,E             ; CHECK DIGIT IN E
1570:	069E  D1      	                POP     DE
1571:	069F  C8      	                RET     Z               ; IF SO, RETURN
1572:	06A0  FE0A    	                CP      10              ; 0-9? < A hex?
1573:	06A2  3802    	                JR      C,PN7           ; Skip Add 7
1574:	06A4  C607    	                ADD     A,'A'-'0'-10    ; Bring it up to ASCII A-F
1575:	06A6  C630    	PN7:            ADD     A,'0'           ; ELSE CONVERT TO ASCII
1576:	06A8  D7      	                RST     ROUTC           ; AND PRINT THE DIGIT
1577:	06A9  18E9    	                JR      PN6             ; GO BACK FOR MORE
1578:			
1579:	06AB  AF      	PRTLN:          XOR     A               ; 0 -> DEFAULT BASE 10 SIGNED
1580:	06AC  323508  	                LD      (PNBASE),A      ; FOR PRTNUM
1581:	06AF  1A      	                LD      A,(DE)
1582:	06B0  6F      	                LD      L,A             ; LOW ORDER LINE #
1583:	06B1  13      	                INC     DE
1584:	06B2  1A      	                LD      A,(DE)          ; HIGH ORDER
1585:	06B3  67      	                LD      H,A
1586:	06B4  13      	                INC     DE
1587:	06B5  0E04    	                LD      C,4             ; PRINT 4 DIGIT LINE #
1588:	06B7  CD4B06  	                CALL    PRTNUM
1589:	06BA  3E20    	                LD      A,' '           ; FOLLOWED BY A BLANK
1590:	06BC  D7      	                RST     ROUTC
1591:	06BD  97      	                SUB     A               ; AND THEN THE NEXT
1592:	06BE  CD1A06  	                CALL    PRTSTG
1593:	06C1  C9      	                RET
1594:			;
1595:			; *************************************************************
1596:			;
1597:			; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1598:			;
1599:			; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1600:			; DE = HL
1601:			;
1602:			; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1603:			; UNTIL DE = BC
1604:			;
1605:			; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1606:			; STACK
1607:			;
1608:			; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1609:			; STACK
1610:			;
1611:	06C2  E7      	MVUP:           RST     RCOMP           ; *** MVUP ***
1612:	06C3  C8      	                RET     Z               ; DE = HL, RETURN
1613:	06C4  1A      	                LD      A,(DE)          ; GET ONE BYTE
1614:	06C5  02      	                LD      (BC),A          ; MOVE IT
1615:	06C6  13      	                INC     DE              ; INCREASE BOTH POINTERS
1616:	06C7  03      	                INC     BC
1617:	06C8  18F8    	                JR      MVUP            ; UNTIL DONE
1618:			;
1619:	06CA  78      	MVDOWN:         LD      A,B             ; *** MVDOWN ***
1620:	06CB  92      	                SUB     D               ; TEST IF DE = BC
1621:	06CC  2003    	                JR      NZ,MD1          ; NO, GO MOVE
1622:	06CE  79      	                LD      A,C             ; MAYBE, OTHER BYTE?
1623:	06CF  93      	                SUB     E
1624:	06D0  C8      	                RET     Z               ; YES, RETURN
1625:	06D1  1B      	MD1:            DEC     DE              ; ELSE MOVE A BYTE
1626:	06D2  2B      	                DEC     HL              ; BUT FIRST DECREASE
1627:	06D3  1A      	                LD      A,(DE)          ; BOTH POINTERS AND
1628:	06D4  77      	                LD      (HL),A          ; THEN DO IT
1629:	06D5  18F3    	                JR      MVDOWN          ; LOOP BACK
1630:			;
1631:	06D7  C1      	POPA:           POP     BC              ; BC = RETURN ADDR.
1632:	06D8  E1      	                POP     HL              ; RESTORE LOPVAR, BUT
1633:	06D9  224008  	                LD      (LOPVAR),HL     ; =0 MEANS NO MORE
1634:	06DC  7C      	                LD      A,H
1635:	06DD  B5      	                OR      L
1636:	06DE  2810    	                JR      Z,PP1           ; YEP, GO RETURN
1637:	06E0  E1      	                POP     HL              ; NOP, RESTORE OTHERS
1638:	06E1  224208  	                LD      (LOPINC),HL
1639:	06E4  E1      	                POP     HL
1640:	06E5  224408  	                LD      (LOPLMT),HL
1641:	06E8  E1      	                POP     HL
1642:	06E9  224608  	                LD      (LOPLN),HL
1643:	06EC  E1      	                POP     HL
1644:	06ED  224808  	                LD      (LOPPT),HL
1645:	06F0  C5      	PP1:            PUSH    BC              ; BC = RETURN ADDR.
1646:	06F1  C9      	                RET
1647:			;
1648:	06F2  214C08  	PUSHA:          LD      HL,STKLMT       ; *** PUSHA ***
1649:	06F5  CD4405  	                CALL    CHGSGN
1650:	06F8  C1      	                POP     BC              ; BC=RETURN ADDRESS
1651:	06F9  39      	                ADD     HL,SP           ; IS STACK NEAR THE TOP?
1652:	06FA  D2B005  	                JP      NC,QSORRY       ; YES, SORRY FOR THAT
1653:	06FD  2A4008  	                LD      HL,(LOPVAR)     ; ELSE SAVE LOOP VAR'S
1654:	0700  7C      	                LD      A,H             ; BUT IF LOPVAR IS 0
1655:	0701  B5      	                OR      L               ; THAT WILL BE ALL
1656:	0702  2813    	                JR      Z,PU1
1657:	0704  2A4808  	                LD      HL,(LOPPT)      ; ELSE, MORE TO SAVE
1658:	0707  E5      	                PUSH    HL
1659:	0708  2A4608  	                LD      HL,(LOPLN)
1660:	070B  E5      	                PUSH    HL
1661:	070C  2A4408  	                LD      HL,(LOPLMT)
1662:	070F  E5      	                PUSH    HL
1663:	0710  2A4208  	                LD      HL,(LOPINC)
1664:	0713  E5      	                PUSH    HL
1665:	0714  2A4008  	                LD      HL,(LOPVAR)
1666:	0717  E5      	PU1:            PUSH    HL
1667:	0718  C5      	                PUSH    BC              ; BC = RETURN ADDR.
1668:	0719  C9      	                RET
1669:			
1670:			; *************************************************************
1671:			;
1672:			; *** DIRECT *** EXEC *** TABLES ***
1673:			;
1674:			; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1675:			; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1676:			; OF CODE ACCORDING TO THE TABLE.
1677:			;
1678:			; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1679:			; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1680:			; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1681:			; ALL DIRECT AND STATEMENT COMMANDS.
1682:			;
1683:			; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1684:			; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1685:			; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1686:			;
1687:			
1688:	071A  214E07  	DIRECT:         LD      HL,TAB1-1       ; *** DIRECT ***
1689:			;
1690:	071D          	EXEC:                                   ; *** EXEC ***
1691:	071D  EF      	EX0:            RST     RIGNBLK         ; IGNORE LEADING BLANKS
1692:	071E  D5      	                PUSH    DE              ; SAVE POINTER
1693:	071F  1A      	EX1:            LD      A,(DE)          ; IF FOUND '.' IN STRING
1694:	0720  13      	                INC     DE              ; BEFORE ANY MISMATCH
1695:	0721  FE2E    	                CP      2EH             ; WE DECLARE A MATCH
1696:	0723  281C    	                JR      Z,EX3
1697:	0725  FE61    	                CP      'a'             ; < 'a' ?
1698:	0727  3806    	                JR      C,EXN           ; NO ALPHA CHAR
1699:	0729  FE7B    	                CP      'z'+1           ; > 'z'
1700:	072B  3002    	                JR      NC,EXN          ; NO ALPHA CHAR
1701:	072D  E65F    	                AND     5FH             ; MASK LOWER CASE TO UPPER CASE
1702:	072F          	EXN:
1703:	072F  23      	                INC     HL              ; HL->TABLE
1704:	0730  BE      	                CP      (HL)            ; IF MATCH, TEST NEXT
1705:	0731  28EC    	                JR      Z,EX1
1706:	0733  3E7F    	                LD      A,07FH          ; ELSE SEE IF BIT 7
1707:	0735  1B      	                DEC     DE              ; OF TABLE IS SET, WHICH
1708:	0736  BE      	                CP      (HL)            ; IS THE JUMP ADDR. (HI)
1709:	0737  380E    	                JR      C,EX5           ; C:YES, MATCHED
1710:	0739  23      	EX2:            INC     HL              ; NC:NO, FIND JUMP ADDR.
1711:	073A  BE      	                CP      (HL)
1712:	073B  30FC    	                JR      NC,EX2
1713:	073D  23      	                INC     HL              ; BUMP TO NEXT TAB. ITEM
1714:	073E  D1      	                POP     DE              ; RESTORE STRING POINTER
1715:	073F  18DC    	                JR      EX0             ; TEST AGAINST NEXT ITEM
1716:	0741  3E7F    	EX3:            LD      A,07FH          ; PARTIAL MATCH, FIND
1717:	0743  23      	EX4:            INC     HL              ; JUMP ADDR., WHICH IS
1718:	0744  BE      	                CP      (HL)            ; FLAGGED BY BIT 7
1719:	0745  30FC    	                JR      NC,EX4
1720:	0747  7E      	EX5:            LD      A,(HL)          ; LOAD HL WITH THE JUMP
1721:	0748  23      	                INC     HL              ; ADDRESS FROM THE TABLE
1722:	0749  6E      	                LD      L,(HL)
1723:			                                        ; ADDRESSES ARE BIG-ENDIAN
1724:			                                        ; WITH MSB SET to 1
1725:	0001          	                .IF     $ < 8000H
1726:	074A  E67F    	                AND     7FH             ; MASK OFF HIGH ADDRESS BIT
1727:			                .ENDIF
1728:	074C  67      	                LD      H,A
1729:	074D  F1      	                POP     AF              ; CLEAN UP THE GARBAGE
1730:	074E  E9      	                JP      (HL)            ; AND WE GO DO IT
1731:			;
1732:			
1733:			; THE TABLES CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM IS:
1734:			; - A STRING OF 7 BIT ASCII CHARACTERS
1735:			;   The string shall be defined with ".ASCII" to allow
1736:			;   the creation of the command list document "token.txt"
1737:			; - A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF HIGH BYTE SET.
1738:			;   This is done by the macro 'DWA'.
1739:			; If the program is executed from an address < 0x8000
1740:			; take care to mask this bit in program part 'EXEC'.
1741:			;
1742:			; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.
1743:			; IF THE STRING DOES NOT MATCH ANY OF THE OTHER ITEMS,
1744:			; IT WILL MATCH THIS NULL ITEM AS DEFAULT.
1745:			
1746:			;
1747:	074F          	TAB1:                                   ; DIRECT ONLY COMMANDS
1748:	074F  4C495354	                .ASCII  "LIST"          ; List program code (DIRECT ONLY)
1749:	0753  81E5    	                DWA     LIST
1750:	0755  52554E  	                .ASCII  "RUN"           ; Execute program (DIRECT ONLY)
1751:	0758  81B8    	                DWA     RUN
1752:	075A  4E4557  	                .ASCII  "NEW"           ; Clear program code (DIRECT ONLY)
1753:	075D  81A9    	                DWA     NEW
1754:			;
1755:	075F          	TAB2:                                   ; DIRECT OR PROGRAM STATEMENT
1756:	075F  4E455854	                .ASCII  "NEXT"          ; Next loop iteration
1757:	0763  82DD    	                DWA     NEXT
1758:	0765  4C4554  	                .ASCII  "LET"           ; Variable assignment, can be omitted
1759:	0768  839E    	                DWA     LET
1760:	076A  4946    	                .ASCII  "IF"            ; Test condition
1761:	076C  8337    	                DWA     IF_
1762:	076E  474F544F	                .ASCII  "GOTO"          ; Go to program line
1763:	0772  81D7    	                DWA     GOTO
1764:	0774  474F5355	                .ASCII  "GOSUB"         ; Call subroutine
	      42
1765:	0779  824A    	                DWA     GOSUB
1766:	077B  52455455	                .ASCII  "RETURN"        ; Return from subroutine
	      524E
1767:	0781  8269    	                DWA     RETURN
1768:	0783  52454D  	                .ASCII  "REM"           ; Remark, ignore rest of line
1769:	0786  8333    	                DWA     REM
1770:	0788  464F52  	                .ASCII  "FOR"           ; Start a program loop
1771:	078B  8282    	                DWA     FOR
1772:	078D  494E5055	                .ASCII  "INPUT"         ; Wait for KBD input
	      54
1773:	0792  8350    	                DWA     INPUT
1774:	0794  5052494E	                .ASCII  "PRINT"         ; Output values
	      54
1775:	0799  81FC    	                DWA     PRINT
1776:	079B  3F      	                .ASCII  "?"             ; Short for PRINT
1777:	079C  81FC    	                DWA     PRINT
1778:	079E  505554  	                .ASCII  "PUT"           ; PUT ADDR, VAL, VAL,... put VAL.. into RAM at ADR++
1779:	07A1  8514    	                DWA     PUT
1780:	07A3  53544F50	                .ASCII  "STOP"          ; Warm start
1781:	07A7  81B2    	                DWA     STOP
1782:	07A9  425945  	                .ASCII  "BYE"           ; HALT Z80 CPU (return to analyser)
1783:	07AC  8527    	                DWA     BYE
1784:	07AE  8399    	                DWA     DEFLT           ; END OF LIST
1785:			;
1786:	07B0          	TAB4:                                   ; FUNCTIONS AND CONSTANTS
1787:	07B0  524E44  	                .ASCII  "RND"           ; Function RND(RANGE), get random [0..RANGE[
1788:	07B3  84BB    	                DWA     RND
1789:	07B5  414253  	                .ASCII  "ABS"           ; Function ABS(ARG), return absolute value of ARG
1790:	07B8  84E9    	                DWA     ABS
1791:	07BA  474554  	                .ASCII  "GET"           ; Function GET(ADR), get byte from memory at ADR
1792:	07BD  84FF    	                DWA     GET
1793:	07BF  555352  	                .ASCII  "USR"           ; Function USR(ARG), call function at TOP, return HL
1794:	07C2  8506    	                DWA     USR
1795:	07C4  43414C4C	                .ASCII  "CALL"          ; Function CALL(ADR), call opcode at ADR
1796:	07C8  850C    	                DWA     CALL
1797:	07CA  53495A45	                .ASCII  "SIZE"          ; Constant SIZE, get size of free memory
1798:	07CE  84F2    	                DWA     SIZE
1799:	07D0  544F50  	                .ASCII  "TOP"           ; Constant TOP, get address of TEXT TOP = USRSPC
1800:	07D3  8510    	                DWA     TOP
1801:	07D5  84A2    	                DWA     XP40            ; END OF LIST
1802:			;
1803:	07D7          	TAB5:                                   ; "TO" IN "FOR"
1804:	07D7  544F    	                .ASCII  "TO"            ; Final value of loop counter
1805:	07D9  8292    	                DWA     FR1
1806:	07DB  8583    	                DWA     QWHAT           ; END OF LIST
1807:			;
1808:	07DD          	TAB6:                                   ; "STEP" IN "FOR"
1809:	07DD  53544550	                .ASCII  "STEP"          ; Increment value for loop counter
1810:	07E1  829C    	                DWA     FR2
1811:	07E3  829F    	                DWA     FR3             ; END OF LIST
1812:			;
1813:	07E5          	TAB8:                                   ; RELATION OPERATORS
1814:	07E5  3D      	                .ASCII  "="             ; Operator equal
1815:	07E6  83AD    	                DWA     XPEQ
1816:	07E8  23      	                .ASCII  "#"             ; Operator not equal
1817:	07E9  83B3    	                DWA     XPNE
1818:	07EB  3C3E    	                .ASCII  "<>"            ; Operator not equal
1819:	07ED  83B3    	                DWA     XPNE
1820:	07EF  3C3D    	                .ASCII  "<="            ; Operator less or equal
1821:	07F1  83B9    	                DWA     XPLE
1822:	07F3  3C      	                .ASCII  "<"             ; Operator less than
1823:	07F4  83C1    	                DWA     XPLT
1824:	07F6  3E3D    	                .ASCII  ">="            ; Operator greater or equal
1825:	07F8  83C7    	                DWA     XPGE
1826:	07FA  3E      	                .ASCII  ">"             ; Operator greater than
1827:	07FB  83CD    	                DWA     XPGT
1828:	07FD  83D4    	                DWA     XP17            ; END OF REL OPERATOR LIST
1829:			
1830:			;
1831:	07FF          	LSTROM:                                 ; ALL ABOVE CAN BE ROM
1832:			
1833:			;
1834:			; CHECK THAT THE PROGRAM DOES NOT EXCEED ROM SIZE
1835:			;
1836:	0001          	                .ASSERT $ <= RAMBGN
1837:			
1838:			
1839:	07FF ..07FF 00	                .DC     RAMBGN-$,$00    ; fill with $00 until RAMBGN
1840:			;
1841:			;
1842:			; *************************************************************
1843:			
1844:	0800          	                .ORG    RAMBGN          ; HERE DOWN MUST BE RAM
1845:			;
1846:			; *************************************************************
1847:			;
1848:			
1849:	0800          	VARBGN:         .DS     2*26            ; VARIABLES 'A'..'Z'
1850:	0834          	OCSW:           .DS     1               ; SWITCH FOR OUTPUT
1851:	0835          	PNBASE:         .DS     1               ; BASE FOR PRTNUM
1852:	0836          	TXTUNF:         .DS     2               ; ->UNFILLED TEXT AREA
1853:	0838          	CURRNT:         .DS     2               ; POINTS TO CURRENT LINE
1854:	083A          	STKGOS:         .DS     2               ; SAVES SP IN 'GOSUB'
1855:	083C          	VARNXT:         .DS     2               ; TEMP STORAGE
1856:	083E          	STKINP:         .DS     2               ; SAVES SP IN 'INPUT'
1857:	0840          	LOPVAR:         .DS     2               ; 'FOR' LOOP SAVE AREA
1858:	0842          	LOPINC:         .DS     2               ; INCREMENT
1859:	0844          	LOPLMT:         .DS     2               ; LIMIT
1860:	0846          	LOPLN:          .DS     2               ; LINE NUMBER
1861:	0848          	LOPPT:          .DS     2               ; TEXT POINTER
1862:	084A          	RANPNT:         .DS     2               ; RANDOM NUMBER POINTER
1863:	084C          	STKLMT:         .EQU    $               ; LIMIT FOR STACK
1864:			
1865:	0900          	                .ORG    RAMBGN+$100
1866:			;
1867:	0900          	STACK:                                  ; STACK STARTS HERE AND GROWS DOWN
1868:			
1869:	0900          	TXTBGN:                                 ; TEXT STARTS HERE AND GROWS UP
1870:			;
1871:			
1872:	0F00          	                .ORG    RAMBGN+RAMSZE-$100
1873:	0F00          	TXTEND:                                 ; TEXT SAVE AREA ENDS
1874:			;
1875:			                                        ; VARIABLES @(0), @(1), @(2)
1876:			                                        ; ... stored top-down
1877:			                                        ; i.e. &@(i) = TXTEND-2-2*i
1878:			;
1879:	0F00          	USRSPC:         .DS     128
1880:			
1881:	0F80          	BUFFER:         .DS     127             ; INPUT BUFFER
1882:	0FFF          	BUFEND:         .DS     1               ; BUFFER END
1883:			
1884:	1000          	                .END



Statistics:

     4	passes
     0	jr promotions
   225	symbols
  2048	bytes

    63	macro calls
   203	macro bytes
     0	invented symbols



Symbol Table:

ABS              4E9      1257
AHOW            DF        223
ASORRY           5B1      1457
AWHAT            584      1412
BS             =08        8
BUFEND           FFF      4095
BUFFER           F80      3968
BYE              527      1319
CALL             50C      1292
CAN            =18        24
CHGSGN           544      1348
CHKIO            103      259
CHKSGN           541      1345
CI0              10C      268
CK1              55F      1375
CKHLDE           559      1369
CR             =0D        13
CRLF            0E        14
CSTART          00        0
CURRNT           838      2104
DEFLT            399      921
DEL            =7F        127
DIRECT           71A      1818
DIVIDE           528      1320
DV1              533      1331
DV2              535      1333
ENDCHK           57F      1407
ERROR            587      1415
EX0              71D      1821
EX1              71F      1823
EX2              739      1849
EX3              741      1857
EX4              743      1859
EX5              747      1863
EXEC             71D      1821
EXN              72F      1839
EXPR1            3A7      935
EXPR2            3EB      1003
EXPR3            42F      1071
EXPR4            49C      1180
FI1              577      1399
FI2              57E      1406
FIN              570      1392
FL1              5FD      1533
FL2              611      1553
FNDLN            5F5      1525
FNDLP            5FD      1533
FNDNXT           610      1552
FNDSKP           612      1554
FOR              282      642
FR1              292      658
FR2              29C      668
FR3              29F      671
FR4              2A2      674
FR5              2A5      677
FR7              2BA      698
FR8              2D8      728
GET              4FF      1279
GETLN            5B6      1462
GL1              5BA      1466
GL3              5DD      1501
GL4              5EE      1518
GOSUB            24A      586
GOTO             1D7      471
HOW             E9        233
IF_              337      823
INIT             111      273
INPERR           346      838
INPUT            350      848
IODATA         =01        1
IOSTAT         =02        2
IO_RX_BIT      =01        1
IP1              350      848
IP2              35B      859
IP3              36B      875
IP4              392      914
IP5              398      920
LET              39E      926
LF             =0A        10
LIST             1E5      485
LOPINC           842      2114
LOPLMT           844      2116
LOPLN            846      2118
LOPPT            848      2120
LOPVAR           840      2112
LS1              1EE      494
LSTROM           7FF      2047
LT1              3A6      934
MD1              6D1      1745
MVDOWN           6CA      1738
MVUP             6C2      1730
NEW              1A9      425
NEXT             2DD      733
NX0              2E4      740
NX1              31C      796
NX2              32F      815
NX3              2FA      762
NX4              30C      780
NX5              32D      813
OC1             FD        253
OCSW             834      2100
OK              EE        238
PARN             4B0      1200
PN0              65A      1626
PN1              665      1637
PN1A             66E      1646
PN2              674      1652
PN3              682      1666
PN4              683      1667
PN5              68E      1678
PN6              694      1684
PN6A             69C      1692
PN7              6A6      1702
PNBASE           835      2101
POPA             6D7      1751
PP1              6F0      1776
PR0              212      530
PR1              22D      557
PR2              20A      522
PR3              232      562
PR5              219      537
PR6              23A      570
PR8              242      578
PRINT            1FC      508
PRTLN            6AB      1707
PRTNUM           64B      1611
PRTSTG           61A      1562
PS1              61B      1563
PT0              519      1305
PT1              524      1316
PT2              525      1317
PU1              717      1815
PUSHA            6F2      1778
PUT              514      1300
QHOW            DE        222
QSORRY           5B0      1456
QT1              62A      1578
QT1A             62D      1581
QT2              633      1587
QT4              636      1590
QT5              63F      1599
QT6              64A      1610
QTSTG            625      1573
QWHAT            583      1411
RA1              4D5      1237
RAMBGN         = 800      2048
RAMSZE         = 800      2048
RANPNT           84A      2122
RCOMP           20        32
REM              333      819
RETURN           269      617
REXPR           18        24
RFINISH         30        48
RIGNBLK         28        40
RND              4BB      1211
ROMBGN         =00        0
ROUTC           10        16
RTSTC           08        8
RTSTV           38        56
RUN              1B8      440
RUNNXL           1BE      446
RUNSML           1CE      462
RUNTSL           1C7      455
SETVAL           561      1377
SIZE             4F2      1266
SORRY           F7        247
ST2              147      327
ST3              150      336
ST4              184      388
STACK            900      2304
STKGOS           83A      2106
STKINP           83E      2110
STKLMT         = 84C      2124
STOP             1B2      434
SUBDE            53D      1341
TAB1             74F      1871
TAB2             75F      1887
TAB4             7B0      1968
TAB5             7D7      2007
TAB6             7DD      2013
TAB8             7E5      2021
TC1             6F        111
TC2             78        120
TIBAS           E5        229
TN1             95        149
TOP              510      1296
TSTNUM          7C        124
TV1             59        89
TV2             5F        95
TX1             B7        183
TX2             CA        202
TXTBGN           900      2304
TXTEND           F00      3840
TXTUNF           836      2102
USR              506      1286
USRSPC           F00      3840
VARBGN           800      2048
VARNXT           83C      2108
WHAT            F1        241
WSTART           134      308
XP17             3D4      980
XP18             3D6      982
XP21             3F3      1011
XP22             3F6      1014
XP23             3F9      1017
XP24             400      1024
XP25             411      1041
XP26             414      1044
XP27             41D      1053
XP31             432      1074
XP32             44E      1102
XP33             455      1109
XP34             45E      1118
XP35             47D      1149
XP36             48A      1162
XP40             4A2      1186
XP41             4AA      1194
XP42             4B7      1207
XP43             4B8      1208
XPEQ             3AD      941
XPGE             3C7      967
XPGT             3CD      973
XPLE             3B9      953
XPLT             3C1      961
XPNE             3B3      947
