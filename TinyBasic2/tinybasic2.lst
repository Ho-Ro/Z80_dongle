0001   0000             ;Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
0002   0000             ;Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
0003   0000             ;Status bit for read in CHKIO changed to 0x02
0004   0000             ;Status bit for write in OUTC (actually OC3) changed to 0x01
0005   0000             ;Changed UART initialization parameters in INIT
0006   0000             ;Changed ORG statements at end of file to match system with 2K RAM
0007   0000             ;*************************************************************
0008   0000             ; 
0009   0000             ;                 TINY BASIC FOR INTEL 8080
0010   0000             ;                       VERSION 2.0
0011   0000             ;                     BY LI-CHEN WANG
0012   0000             ;                  MODIFIED AND TRANSLATED
0013   0000             ;                    TO INTEL MNEMONICS
0014   0000             ;                     BY ROGER RAUSKOLB
0015   0000             ;                      10 OCTOBER,1976
0016   0000             ;                        @COPYLEFT
0017   0000             ;                   ALL WRONGS RESERVED
0018   0000             ; 
0019   0000             ;*************************************************************
0020   0000             ; 
0021   0000             ; *** ZERO PAGE SUBROUTINES ***
0022   0000             ; 
0023   0000             ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
0024   0000             ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
0025   0000             ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
0026   0000             ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
0027   0000             ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
0028   0000             ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
0029   0000             ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
0030   0000             ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
0031   0000             ; 
0032   0000             
0033   0000             ;DWA     MACRO WHERE
0034   0000             ;        DB   (WHERE SHR 8) + 128
0035   0000             ;        DB   WHERE AND 0FFH
0036   0000             ;        ENDM
0037   0000             ;
0038   0000             
0039   0000             ; Memory map
0040   0000             ROMBGN  .EQU $0000      ; Execution must start here
0041   0000             RAMBGN  .EQU $0800      ; 2K ROM
0042   0000             RAMSZE  .EQU $0800      ; 2K RAM
0043   0000             
0044   0000             ; IO map
0045   0000             IODATA  .EQU 1
0046   0000             IOSTAT  .EQU 2
0047   0000             
0048   0000             ; Control character
0049   0000             BS      .EQU 08H        ; ^H, BACKSPACE
0050   0000             CR      .EQU 0DH        ; ^M, CARRIAGE RETURN
0051   0000             LF      .EQU 0AH        ; ^J, LINE FEED
0052   0000             CAN     .EQU 18H        ; ^X, CANCEL
0053   0000             DEL     .EQU 7FH        ; DELETE
0054   0000             
0055   0000             ; Store a label address as BIG endian with bit A15 set
0056   0000             #DEFINE DWA(LABEL) .DB (LABEL >> 8) | $80 \ .DB (LABEL & $FF)
0057   0000             
0058   0000             ; if CHAR != A then jump relative to LABEL
0059   0000             #DEFINE TSTC(CHAR,LABEL) RST RTSTC \ .DB CHAR \ .DB LABEL-$-1
0060   0000             
0061   0000             
0062   0000                     .ORG ROMBGN
0063   0000             
0064   0000 31 00 10    START:  LXI  SP,STACK                   ;*** COLD START ***
0065   0003 3E FF               MVI  A,0FFH
0066   0005 C3 94 06            JMP  INIT
0067   0008             
0068   0008             RTSTC  .EQU 1                          ;*** RST 1 @ $0008 ***
0069   0008 E3                  XTHL
0070   0009 EF                  RST  RIGNBLK                    ;IGNORE BLANKS AND
0071   000A BE                  CMP  M                          ;TEST CHARACTER
0072   000B C3 6F 00            JMP  TC1                        ;REST OF THIS IS AT TC1
0073   000E             
0074   000E 3E 0D       CRLF:   MVI  A,CR                       ;*** CRLF ***
0075   0010             ;
0076   0010             ROUTC   .EQU 2                          ;*** RST 2 @ $0010 ***
0077   0010 F5          OUTC:   PUSH PSW
0078   0011 3A 00 08            LDA  OCSW                       ;PRINT CHARACTER ONLY
0079   0014 B7                  ORA  A                          ;IF OCSW SWITCH IS ON
0080   0015 C3 B6 06            JMP  OC2                        ;REST OF THIS IS AT OC2
0081   0018             
0082   0018             REXPR   .EQU 3                          ;*** RST 3 @ $0018 ***
0083   0018 CD 8A 03            CALL EXPR2
0084   001B E5                  PUSH H                          ;EVALUATE AN EXPRESSION
0085   001C C3 46 03            JMP  EXPR1                      ;REST OF IT AT EXPR1
0086   001F 57                  .DB  "W"
0087   0020             
0088   0020             RCOMP   .EQU 4                          ;*** RST 4 @ $0020 ***
0089   0020 7C                  MOV  A,H
0090   0021 BA                  CMP  D                          ;COMPARE HL WITH DE
0091   0022 C0                  RNZ                             ;RETURN CORRECT C AND
0092   0023 7D                  MOV  A,L                        ;Z FLAGS
0093   0024 BB                  CMP  E                          ;BUT OLD A IS LOST
0094   0025 C9                  RET
0095   0026 41 4E               .DB  "AN"
0096   0028             
0097   0028             RIGNBLK .EQU 5                          ;*** RST 5 @ $0028 ***
0098   0028 1A          SS1:    LDAX D
0099   0029 FE 20               CPI  20H                        ;IGNORE BLANKS
0100   002B C0                  RNZ                             ;IN TEXT (WHERE DE->)
0101   002C 13                  INX  D                          ;AND RETURN THE FIRST
0102   002D C3 28 00            JMP  SS1                        ;NON-BLANK CHAR. IN A
0103   0030             
0104   0030             RFINISH .EQU 6                          ;*** RST 6 @ $0030 ***
0105   0030 F1                  POP  PSW
0106   0031 CD DE 04            CALL FIN                        ;CHECK END OF COMMAND
0107   0034 C3 F1 04            JMP  QWHAT                      ;PRINT "WHAT?" IF WRONG
0108   0037 47                  .DB  "G"
0109   0038             
0110   0038             RTSTV   .EQU 7                          ;*** RST 7 @ $0038 ***
0111   0038 EF                  RST  RIGNBLK                    ;IGNBLK
0112   0039 D6 40               SUI  40H                        ;TEST VARIABLES
0113   003B D8                  RC                              ;C:NOT A VARIABLE
0114   003C C2 58 00            JNZ  TV1                        ;NOT "@" ARRAY
0115   003F 13                  INX  D                          ;IT IS THE "@" ARRAY
0116   0040 CD 33 04            CALL PARN                       ;@ SHOULD BE FOLLOWED
0117   0043 29                  DAD  H                          ;BY (EXPR) AS ITS INDEX
0118   0044 DA A6 00            JC   QHOW                       ;IS INDEX TOO BIG (>0x7FFF)?
0119   0047 D5                  PUSH D                          ;WILL IT OVERWRITE
0120   0048 EB                  XCHG                            ;TEXT?
0121   0049 CD 72 04            CALL SIZE                       ;FIND SIZE OF FREE
0122   004C E7                  RST  RCOMP                      ;AND CHECK THAT
0123   004D DA 1F 05            JC   ASORRY                     ;IF SO, SAY "SORRY"
0124   0050 21 00 0F            LXI  H,VARBGN                   ;IF NOT GET ADDRESS
0125   0053 CD A7 04            CALL SUBDE                      ;OF @(EXPR) AND PUT IT
0126   0056 D1                  POP  D                          ;IN HL
0127   0057 C9                  RET                             ;C FLAG IS CLEARED
0128   0058             ;
0129   0058 FE 21       TV1:    CPI  21H                        ;>='a'?
0130   005A DA 5F 00            JC   TV2                        ;NO
0131   005D D6 20               SUI  20H                        ;MAKE UPPER CASE
0132   005F FE 1B       TV2:    CPI  1BH                        ;NOT @, IS IT A TO Z?
0133   0061 3F                  CMC                             ;IF NOT RETURN C FLAG
0134   0062 D8                  RC
0135   0063 13                  INX  D                          ;IF A THROUGH Z
0136   0064 21 00 0F            LXI  H,VARBGN                   ;COMPUTE ADDRESS OF
0137   0067 07                  RLC                             ;THAT VARIABLE
0138   0068 85                  ADD  L                          ;AND RETURN IT IN HL
0139   0069 6F                  MOV  L,A                        ;WITH C FLAG CLEARED
0140   006A 3E 00               MVI  A,0
0141   006C 8C                  ADC  H
0142   006D 67                  MOV  H,A
0143   006E C9                  RET
0144   006F             
0145   006F             ;TSTC:  XTHL                            ;*** TSTC OR RST 1 ***
0146   006F             ;       RST  RIGNBLK                    ;THIS IS AT LOC. 8
0147   006F             ;       CMP  M                          ;AND THEN JUMP HERE
0148   006F 23          TC1:    INX  H                          ;COMPARE THE BYTE THAT
0149   0070 CA 7A 00            JZ   TC2                        ;FOLLOWS THE RST INST.
0150   0073 C5                  PUSH B                          ;WITH THE TEXT (DE->)
0151   0074 4E                  MOV  C,M                        ;IF NOT =, ADD THE 2ND
0152   0075 06 00               MVI  B,0                        ;BYTE THAT FOLLOWS THE
0153   0077 09                  DAD  B                          ;RST TO THE OLD PC
0154   0078 C1                  POP  B                          ;I.E., DO A RELATIVE
0155   0079 1B                  DCX  D                          ;JUMP IF NOT =
0156   007A 13          TC2:    INX  D                          ;IF =, SKIP THOSE BYTES
0157   007B 23                  INX  H                          ;AND CONTINUE
0158   007C E3                  XTHL
0159   007D C9                  RET
0160   007E             
0161   007E 21 00 00    TSTNUM: LXI  H,0                        ;*** TSTNUM ***
0162   0081 44                  MOV  B,H                        ;TEST IF THE TEXT IS
0163   0082 EF                  RST  RIGNBLK                    ;A NUMBER
0164   0083 FE 30       TN1:    CPI  30H                        ;IF NOT, RETURN 0 IN
0165   0085 D8                  RC                              ;B AND HL
0166   0086 FE 3A               CPI  3AH                        ;IF NUMBERS, CONVERT
0167   0088 D0                  RNC                             ;TO BINARY IN HL AND
0168   0089 3E F0               MVI  A,0F0H                     ;SET B TO # OF DIGITS
0169   008B A4                  ANA  H                          ;IF H>255, THERE IS NO
0170   008C C2 A6 00            JNZ  QHOW                       ;ROOM FOR NEXT DIGIT
0171   008F 04                  INR  B                          ;B COUNTS # OF DIGITS
0172   0090 C5                  PUSH B
0173   0091 44                  MOV  B,H                        ;HL=10*HL+(NEW DIGIT)
0174   0092 4D                  MOV  C,L
0175   0093 29                  DAD  H                          ;WHERE 10* IS DONE BY
0176   0094 29                  DAD  H                          ;SHIFT AND ADD
0177   0095 09                  DAD  B
0178   0096 29                  DAD  H
0179   0097 1A                  LDAX D                          ;AND (DIGIT) IS FROM
0180   0098 13                  INX  D                          ;STRIPPING THE ASCII
0181   0099 E6 0F               ANI  0FH                        ;CODE
0182   009B 85                  ADD  L
0183   009C 6F                  MOV  L,A
0184   009D 3E 00               MVI  A,0
0185   009F 8C                  ADC  H
0186   00A0 67                  MOV  H,A
0187   00A1 C1                  POP  B
0188   00A2 1A                  LDAX D                          ;DO THIS DIGIT AFTER
0189   00A3 F2 83 00            JP   TN1                        ;DIGIT. S SAYS OVERFLOW
0190   00A6             
0191   00A6 D5          QHOW:   PUSH D                          ;*** ERROR "HOW?" ***
0192   00A7 11 AD 00    AHOW:   LXI  D,HOW
0193   00AA C3 F5 04            JMP  ERROR
0194   00AD             
0195   00AD 48 4F 57 3F HOW:    .DB  "HOW?"
0196   00B1 0D                  .DB  CR
0197   00B2             
0198   00B2 4F 4B       OK:     .DB  "OK"
0199   00B4 0D                  .DB  CR
0200   00B5             
0201   00B5 57 48 41 54 WHAT:   .DB  "WHAT?"
0201   00B9 3F 
0202   00BA 0D                  .DB  CR
0203   00BB             
0204   00BB 53 4F 52 52 SORRY:  .DB  "SORRY"
0204   00BF 59 
0205   00C0 0D                  .DB  CR
0206   00C1             
0207   00C1             ;*************************************************************
0208   00C1             ;
0209   00C1             ; *** MAIN ***
0210   00C1             ;
0211   00C1             ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
0212   00C1             ; AND STORES IT IN THE MEMORY.
0213   00C1             ;
0214   00C1             ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
0215   00C1             ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
0216   00C1             ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
0217   00C1             ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
0218   00C1             ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
0219   00C1             ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
0220   00C1             ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
0221   00C1             ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
0222   00C1             ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
0223   00C1             ;
0224   00C1             ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
0225   00C1             ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
0226   00C1             ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
0227   00C1             ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
0228   00C1             ;
0229   00C1             ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
0230   00C1             ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
0231   00C1             ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
0232   00C1             ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
0233   00C1             ;
0234   00C1             ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
0235   00C1             ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
0236   00C1             ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
0237   00C1             ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
0238   00C1             ;
0239   00C1 31 00 10    RSTART: LXI  SP,STACK
0240   00C4 CD 0E 00    ST1:    CALL CRLF                       ;AND JUMP TO HERE
0241   00C7 11 B2 00            LXI  D,OK                       ;DE->STRING
0242   00CA 97                  SUB  A                          ;A=0
0243   00CB CD 96 05            CALL PRTSTG                     ;PRINT STRING UNTIL CR
0244   00CE 21 D5 00            LXI  H,ST2+1                    ;LITERAL 0
0245   00D1 22 02 08            SHLD CURRNT                     ;CURRENT->LINE # = 0
0246   00D4 21 00 00    ST2:    LXI  H,0
0247   00D7 22 0A 08            SHLD LOPVAR
0248   00DA 22 04 08            SHLD STKGOS
0249   00DD 3E 3E       ST3:    MVI  A,'>'                      ;PROMPT '>' AND
0250   00DF CD 25 05            CALL GETLN                      ;READ A LINE
0251   00E2 D5                  PUSH D                          ;DE->END OF LINE
0252   00E3 11 37 0F            LXI  D,BUFFER                   ;DE->BEGINNING OF LINE
0253   00E6 CD 7E 00            CALL TSTNUM                     ;TEST IF IT IS A NUMBER
0254   00E9 EF                  RST  RIGNBLK
0255   00EA 7C                  MOV  A,H                        ;HL=VALUE OF THE # OR
0256   00EB B5                  ORA  L                          ;0 IF NO # WAS FOUND
0257   00EC C1                  POP  B                          ;BC->END OF LINE
0258   00ED CA 8F 07            JZ   DIRECT
0259   00F0 1B                  DCX  D                          ;BACKUP DE AND SAVE
0260   00F1 7C                  MOV  A,H                        ;VALUE OF LINE # THERE
0261   00F2 12                  STAX D
0262   00F3 1B                  DCX  D
0263   00F4 7D                  MOV  A,L
0264   00F5 12                  STAX D
0265   00F6 C5                  PUSH B                          ;BC,DE->BEGIN, END
0266   00F7 D5                  PUSH D
0267   00F8 79                  MOV  A,C
0268   00F9 93                  SUB  E
0269   00FA F5                  PUSH PSW                        ;A=# OF BYTES IN LINE
0270   00FB CD 6E 05            CALL FNDLN                      ;FIND THIS LINE IN SAVE
0271   00FE D5                  PUSH D                          ;AREA, DE->SAVE AREA
0272   00FF C2 12 01            JNZ  ST4                        ;NZ:NOT FOUND, INSERT
0273   0102 D5                  PUSH D                          ;Z:FOUND, DELETE IT
0274   0103 CD 8A 05            CALL FNDNXT                     ;FIND NEXT LINE
0275   0106                                                     ;DE->NEXT LINE
0276   0106 C1                  POP  B                          ;BC->LINE TO BE DELETED
0277   0107 2A 16 08            LHLD TXTUNF                     ;HL->UNFILLED SAVE AREA
0278   010A CD 37 06            CALL MVUP                       ;MOVE UP TO DELETE
0279   010D 60                  MOV  H,B                        ;TXTUNF->UNFILLED AREA
0280   010E 69                  MOV  L,C
0281   010F 22 16 08            SHLD TXTUNF                     ;UPDATE
0282   0112 C1          ST4:    POP  B                          ;GET READY TO INSERT
0283   0113 2A 16 08            LHLD TXTUNF                     ;BUT FIRST CHECK IF
0284   0116 F1                  POP  PSW                        ;THE LENGTH OF NEW LINE
0285   0117 E5                  PUSH H                          ;IS 3 (LINE # AND CR)
0286   0118 FE 03               CPI  3                          ;THEN DO NOT INSERT
0287   011A CA C1 00            JZ   RSTART                     ;MUST CLEAR THE STACK
0288   011D 85                  ADD  L                          ;COMPUTE NEW TXTUNF
0289   011E 6F                  MOV  L,A
0290   011F 3E 00               MVI  A,0
0291   0121 8C                  ADC  H
0292   0122 67                  MOV  H,A                        ;HL->NEW UNFILLED AREA
0293   0123 11 00 0F            LXI  D,TXTEND                   ;CHECK TO SEE IF THERE
0294   0126 E7                  RST  RCOMP                      ;COMP HL,DE - IS ENOUGH SPACE
0295   0127 D2 1E 05            JNC  QSORRY                     ;SORRY, NO ROOM FOR IT
0296   012A 22 16 08            SHLD TXTUNF                     ;OK, UPDATE TXTUNF
0297   012D D1                  POP  D                          ;DE->OLD UNFILLED AREA
0298   012E CD 40 06            CALL MVDOWN
0299   0131 D1                  POP  D                          ;DE->BEGIN, HL->END
0300   0132 E1                  POP  H
0301   0133 CD 37 06            CALL MVUP                       ;MOVE NEW LINE TO SAVE
0302   0136 C3 DD 00            JMP  ST3                        ;AREA
0303   0139             
0304   0139             ;*************************************************************
0305   0139             ;
0306   0139             ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
0307   0139             ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
0308   0139             ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
0309   0139             ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
0310   0139             ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
0311   0139             ;
0312   0139             ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
0313   0139             ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
0314   0139             ; GO BACK TO 'RSTART'.
0315   0139             ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
0316   0139             ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
0317   0139             ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
0318   0139             ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
0319   0139             ;*************************************************************
0320   0139             ;
0321   0139             ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
0322   0139             ;
0323   0139             ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
0324   0139             ;
0325   0139             ; 'STOP(CR)' GOES BACK TO 'RSTART'
0326   0139             ;
0327   0139             ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
0328   0139             ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
0329   0139             ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
0330   0139             ;
0331   0139             ; THERE ARE 3 MORE ENTRIES IN 'RUN':
0332   0139             ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
0333   0139             ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
0334   0139             ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
0335   0139             ;
0336   0139             ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
0337   0139             ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
0338   0139             ;
0339   0139 CD ED 04    NEW:    CALL ENDCHK                     ;*** NEW(CR) ***
0340   013C 21 18 08            LXI  H,TXTBGN
0341   013F 22 16 08            SHLD TXTUNF
0342   0142             ;
0343   0142 CD ED 04    STOP:   CALL ENDCHK                     ;*** STOP(CR) ***
0344   0145 C3 C1 00            JMP  RSTART
0345   0148             
0346   0148 CD ED 04    RUN:    CALL ENDCHK                     ;*** RUN(CR) ***
0347   014B 11 18 08            LXI  D,TXTBGN                   ;FIRST SAVED LINE
0348   014E             ;
0349   014E 21 00 00    RUNNXL: LXI  H,0                        ;*** RUNNXL ***
0350   0151 CD 76 05            CALL FNDLP                      ;FIND WHATEVER LINE #
0351   0154 DA C1 00            JC   RSTART                     ;C:PASSED TXTUNF, QUIT
0352   0157             ;
0353   0157 EB          RUNTSL: XCHG                            ;*** RUNTSL ***
0354   0158 22 02 08            SHLD CURRNT                     ;SET 'CURRENT'->LINE #
0355   015B EB                  XCHG
0356   015C 13                  INX  D                          ;BUMP PASS LINE #
0357   015D 13                  INX  D
0358   015E             ;
0359   015E CD C7 06    RUNSML: CALL CHKIO                      ;*** RUNSML ***
0360   0161 21 05 07            LXI  H,TAB2-1                   ;FIND COMMAND IN TAB2
0361   0164 C3 92 07            JMP  EXEC                       ;AND EXECUTE IT
0362   0167             
0363   0167 DF          GOTO:   RST  REXPR                      ;*** GOTO EXPR ***
0364   0168 D5                  PUSH D                          ;SAVE FOR ERROR ROUTINE
0365   0169 CD ED 04            CALL ENDCHK                     ;MUST FIND A CR
0366   016C CD 6E 05            CALL FNDLN                      ;FIND THE TARGET LINE
0367   016F C2 A7 00            JNZ  AHOW                       ;NO SUCH LINE #
0368   0172 F1                  POP  PSW                        ;CLEAR THE PUSH DE
0369   0173 C3 57 01            JMP  RUNTSL                     ;GO DO IT
0370   0176             ;
0371   0176             ;*************************************************************
0372   0176             ;
0373   0176             ; *** LIST *** & PRINT ***
0374   0176             ;
0375   0176             ; LIST HAS TWO FORMS:
0376   0176             ; 'LIST(CR)' LISTS ALL SAVED LINES
0377   0176             ; 'LIST #(CR)' START LIST AT THIS LINE #
0378   0176             ; YOU CAN STOP THE LISTING BY CONTROL C KEY
0379   0176             ;
0380   0176             ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
0381   0176             ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
0382   0176             ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
0383   0176             ;
0384   0176             ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
0385   0176             ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
0386   0176             ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
0387   0176             ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
0388   0176             ; SPECIFIED, 6 POSITIONS WILL BE USED.
0389   0176             ;
0390   0176             ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
0391   0176             ; DOUBLE QUOTES.
0392   0176             ;
0393   0176             ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
0394   0176             ;
0395   0176             ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
0396   0176             ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
0397   0176             ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
0398   0176             ;
0399   0176 CD 7E 00    LIST:   CALL TSTNUM                     ;TEST IF THERE IS A #
0400   0179 CD ED 04            CALL ENDCHK                     ;IF NO # WE GET A 0
0401   017C CD 6E 05            CALL FNDLN                      ;FIND THIS OR NEXT LINE
0402   017F DA C1 00    LS1:    JC   RSTART                     ;C:PASSED TXTUNF
0403   0182 CD 1F 06            CALL PRTLN                      ;PRINT THE LINE
0404   0185 CD C7 06            CALL CHKIO                      ;STOP IF HIT CONTROL-C
0405   0188 CD 76 05            CALL FNDLP                      ;FIND NEXT LINE
0406   018B C3 7F 01            JMP  LS1                        ;AND LOOP BACK
0407   018E             
0408   018E 0E 08       PRINT:  MVI  C,8                        ;C = # OF SPACES
0409   0190 3E 0A               MVI  A,10                       ;DEFAULT BASE FOR PRTNUM
0410   0192 32 01 08            STA  PNBASE
0411   0195 CF                  TSTC(';',PR2)                   ;IF NULL LIST & ";"
0411   0196 3B          
0411   0197 06          
0412   0198 CD 0E 00            CALL CRLF                       ;GIVE CR-LF AND
0413   019B C3 5E 01            JMP  RUNSML                     ;CONTINUE SAME LINE
0414   019E CF          PR2:    TSTC(CR,PR0)                    ;IF NULL LIST (CR)
0414   019F 0D          
0414   01A0 06          
0415   01A1 CD 0E 00            CALL CRLF                       ;ALSO GIVE CR-LF AND
0416   01A4 C3 4E 01            JMP  RUNNXL                     ;GO TO NEXT LINE
0417   01A7 CF          PR0:    TSTC('#',PR5)                   ;ELSE IS IT FORMAT?
0417   01A8 23          
0417   01A9 05          
0418   01AA DF                  RST  REXPR                      ;YES, EVALUATE EXPR.
0419   01AB 4D                  MOV  C,L                        ;AND SAVE IT IN C
0420   01AC C3 C0 01            JMP  PR3                        ;LOOK FOR MORE TO PRINT
0421   01AF CF          PR5:    TSTC('$',PR1)                   ;ELSE IS IT PRTNUM BASE?
0421   01B0 24          
0421   01B1 08          
0422   01B2 DF                  RST  REXPR                      ;YES, EVALUATE EXPR.
0423   01B3 7D                  MOV  A,L                        ;AND STORE IT IN PNBASE
0424   01B4 32 01 08            STA  PNBASE
0425   01B7 C3 C0 01            JMP  PR3                        ;LOOK FOR MORE TO PRINT
0426   01BA CD A2 05    PR1:    CALL QTSTG                      ;OR IS IT A STRING?
0427   01BD C3 D2 01            JMP  PR8                        ;IF NOT, MUST BE EXPR.
0428   01C0 CF          PR3:    TSTC($2C,PR6)                   ;IF ",", GO FIND NEXT
0428   01C1 2C          
0428   01C2 06          
0429   01C3 CD DE 04            CALL FIN                        ;IN THE LIST.
0430   01C6 C3 A7 01            JMP  PR0                        ;LIST CONTINUES
0431   01C9 3E 0A       PR6:    MVI  A,10                       ;END OF LIST REACHED
0432   01CB 32 01 08            STA  PNBASE                     ;RESET DEFAULT BASE
0433   01CE CD 0E 00            CALL CRLF                       ;LIST ENDS WITH CRLF
0434   01D1 F7                  RST  RFINISH                    ;FINISH
0435   01D2 DF          PR8:    RST  REXPR                      ;EVALUATE THE EXPR
0436   01D3 C5                  PUSH B
0437   01D4 CD C7 05            CALL PRTNUM                     ;PRINT THE VALUE
0438   01D7 C1                  POP  B
0439   01D8 C3 C0 01            JMP  PR3                        ;MORE TO PRINT?
0440   01DB             ;
0441   01DB             ;*************************************************************
0442   01DB             ;
0443   01DB             ; *** GOSUB *** & RETURN ***
0444   01DB             ;
0445   01DB             ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
0446   01DB             ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
0447   01DB             ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
0448   01DB             ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
0449   01DB             ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
0450   01DB             ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
0451   01DB             ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
0452   01DB             ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
0453   01DB             ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
0454   01DB             ;
0455   01DB             ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
0456   01DB             ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
0457   01DB             ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
0458   01DB             ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
0459   01DB             ;
0460   01DB CD 6B 06    GOSUB:  CALL PUSHA                      ;SAVE THE CURRENT "FOR"
0461   01DE DF                  RST  REXPR                      ;PARAMETERS
0462   01DF D5                  PUSH D                          ;AND TEXT POINTER
0463   01E0 CD 6E 05            CALL FNDLN                      ;FIND THE TARGET LINE
0464   01E3 C2 A7 00            JNZ  AHOW                       ;NOT THERE. SAY "HOW?"
0465   01E6 2A 02 08            LHLD CURRNT                     ;FOUND IT, SAVE OLD
0466   01E9 E5                  PUSH H                          ;'CURRNT' OLD 'STKGOS'
0467   01EA 2A 04 08            LHLD STKGOS
0468   01ED E5                  PUSH H
0469   01EE 21 00 00            LXI  H,0                        ;AND LOAD NEW ONES
0470   01F1 22 0A 08            SHLD LOPVAR
0471   01F4 39                  DAD  SP
0472   01F5 22 04 08            SHLD STKGOS
0473   01F8 C3 57 01            JMP  RUNTSL                     ;THEN RUN THAT LINE
0474   01FB CD ED 04    RETURN: CALL ENDCHK                     ;THERE MUST BE A CR
0475   01FE 2A 04 08            LHLD STKGOS                     ;OLD STACK POINTER
0476   0201 7C                  MOV  A,H                        ;0 MEANS NOT EXIST
0477   0202 B5                  ORA  L
0478   0203 CA F1 04            JZ   QWHAT                      ;SO, WE SAY: "WHAT?"
0479   0206 F9                  SPHL                            ;ELSE, RESTORE IT
0480   0207 E1                  POP  H
0481   0208 22 04 08            SHLD STKGOS                     ;AND THE OLD 'STKGOS'
0482   020B E1                  POP  H
0483   020C 22 02 08            SHLD CURRNT                     ;AND THE OLD 'CURRNT'
0484   020F D1                  POP  D                          ;OLD TEXT POINTER
0485   0210 CD 4F 06            CALL POPA                       ;OLD "FOR" PARAMETERS
0486   0213 F7                  RST  RFINISH                    ;AND WE ARE BACK HOME
0487   0214             ;
0488   0214             ;*************************************************************
0489   0214             ;
0490   0214             ; *** FOR *** & NEXT ***
0491   0214             ;
0492   0214             ; 'FOR' HAS TWO FORMS:
0493   0214             ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
0494   0214             ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
0495   0214             ; EXP3=1.  (I.E., WITH A STEP OF +1.)
0496   0214             ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
0497   0214             ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
0498   0214             ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
0499   0214             ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
0500   0214             ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
0501   0214             ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
0502   0214             ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
0503   0214             ; BEFORE THE NEW ONE OVERWRITES IT.
0504   0214             ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
0505   0214             ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
0506   0214             ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
0507   0214             ; (PURGED FROM THE STACK..)
0508   0214             ;
0509   0214             ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
0510   0214             ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
0511   0214             ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
0512   0214             ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
0513   0214             ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
0514   0214             ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
0515   0214             ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
0516   0214             ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
0517   0214             ; IS PURGED AND EXECUTION CONTINUES.
0518   0214             ;
0519   0214 CD 6B 06    FOR:    CALL PUSHA                      ;SAVE THE OLD SAVE AREA
0520   0217 CD CB 04            CALL SETVAL                     ;SET THE CONTROL VAR.
0521   021A 2B                  DCX  H                          ;HL IS ITS ADDRESS
0522   021B 22 0A 08            SHLD LOPVAR                     ;SAVE THAT
0523   021E 21 6A 07            LXI  H,TAB5-1                   ;USE 'EXEC' TO LOOK
0524   0221 C3 92 07            JMP  EXEC                       ;FOR THE WORD 'TO'
0525   0224 DF          FR1:    RST  REXPR                      ;EVALUATE THE LIMIT
0526   0225 22 0E 08            SHLD LOPLMT                     ;SAVE THAT
0527   0228 21 70 07            LXI  H,TAB6-1                   ;USE 'EXEC' TO LOOK
0528   022B C3 92 07            JMP EXEC                        ;FOR THE WORD 'STEP'
0529   022E DF          FR2:    RST  REXPR                      ;FOUND IT, GET STEP
0530   022F C3 35 02            JMP  FR4
0531   0232 21 01 00    FR3:    LXI  H,1H                       ;NOT FOUND, SET TO 1
0532   0235 22 0C 08    FR4:    SHLD LOPINC                     ;SAVE THAT TOO
0533   0238 2A 02 08    FR5:    LHLD CURRNT                     ;SAVE CURRENT LINE #
0534   023B 22 10 08            SHLD LOPLN
0535   023E EB                  XCHG                            ;AND TEXT POINTER
0536   023F 22 12 08            SHLD LOPPT
0537   0242 01 0A 00            LXI  B,0AH                      ;DIG INTO STACK TO
0538   0245 2A 0A 08            LHLD LOPVAR                     ;FIND 'LOPVAR'
0539   0248 EB                  XCHG
0540   0249 60                  MOV  H,B
0541   024A 68                  MOV  L,B                        ;HL=0 NOW
0542   024B 39                  DAD  SP                         ;HERE IS THE STACK
0543   024C 3E                  .DB  3EH
0544   024D 09          FR7:    DAD  B                          ;EACH LEVEL IS 10 DEEP
0545   024E 7E                  MOV  A,M                        ;GET THAT OLD 'LOPVAR'
0546   024F 23                  INX  H
0547   0250 B6                  ORA  M
0548   0251 CA 6E 02            JZ   FR8                        ;0 SAYS NO MORE IN IT
0549   0254 7E                  MOV  A,M
0550   0255 2B                  DCX  H
0551   0256 BA                  CMP  D                          ;SAME AS THIS ONE?
0552   0257 C2 4D 02            JNZ  FR7
0553   025A 7E                  MOV  A,M                        ;THE OTHER HALF?
0554   025B BB                  CMP  E
0555   025C C2 4D 02            JNZ  FR7
0556   025F EB                  XCHG                            ;YES, FOUND ONE
0557   0260 21 00 00            LXI  H,0H
0558   0263 39                  DAD  SP                         ;TRY TO MOVE SP
0559   0264 44                  MOV  B,H
0560   0265 4D                  MOV  C,L
0561   0266 21 0A 00            LXI  H,0AH
0562   0269 19                  DAD  D
0563   026A CD 40 06            CALL MVDOWN                     ;AND PURGE 10 WORDS
0564   026D F9                  SPHL                            ;IN THE STACK
0565   026E 2A 12 08    FR8:    LHLD LOPPT                      ;JOB DONE, RESTORE DE
0566   0271 EB                  XCHG
0567   0272 F7                  RST  RFINISH                    ;AND CONTINUE
0568   0273             ;
0569   0273 FF          NEXT:   RST  RTSTV                      ;GET ADDRESS OF VAR.
0570   0274 DA F1 04            JC   QWHAT                      ;NO VARIABLE, "WHAT?"
0571   0277 22 06 08            SHLD VARNXT                     ;YES, SAVE IT
0572   027A D5          NX0:    PUSH D                          ;SAVE TEXT POINTER
0573   027B EB                  XCHG
0574   027C 2A 0A 08            LHLD LOPVAR                     ;GET VAR. IN 'FOR'
0575   027F 7C                  MOV  A,H
0576   0280 B5                  ORA  L                          ;0 SAYS NEVER HAD ONE
0577   0281 CA F2 04            JZ   AWHAT                      ;SO WE ASK: "WHAT?"
0578   0284 E7                  RST  RCOMP                      ;ELSE WE CHECK THEM
0579   0285 CA 92 02            JZ   NX3                        ;OK, THEY AGREE
0580   0288 D1                  POP  D                          ;NO, LET'S SEE
0581   0289 CD 4F 06            CALL POPA                       ;PURGE CURRENT LOOP
0582   028C 2A 06 08            LHLD VARNXT                     ;AND POP ONE LEVEL
0583   028F C3 7A 02            JMP  NX0                        ;GO CHECK AGAIN
0584   0292 5E          NX3:    MOV  E,M                        ;COME HERE WHEN AGREED
0585   0293 23                  INX  H
0586   0294 56                  MOV  D,M                        ;DE=VALUE OF VAR.
0587   0295 2A 0C 08            LHLD LOPINC
0588   0298 E5                  PUSH H
0589   0299 7C                  MOV  A,H
0590   029A AA                  XRA  D
0591   029B 7A                  MOV  A,D
0592   029C 19                  DAD  D                          ;ADD ONE STEP
0593   029D FA A4 02            JM   NX4
0594   02A0 AC                  XRA  H
0595   02A1 FA C6 02            JM   NX5
0596   02A4 EB          NX4:    XCHG
0597   02A5 2A 0A 08            LHLD LOPVAR                     ;PUT IT BACK
0598   02A8 73                  MOV  M,E
0599   02A9 23                  INX  H
0600   02AA 72                  MOV  M,D
0601   02AB 2A 0E 08            LHLD LOPLMT                     ;HL->LIMIT
0602   02AE F1                  POP  PSW                        ;OLD HL
0603   02AF B7                  ORA  A
0604   02B0 F2 B4 02            JP   NX1                        ;STEP > 0
0605   02B3 EB                  XCHG                            ;STEP < 0
0606   02B4 CD C3 04    NX1:    CALL CKHLDE                     ;COMPARE WITH LIMIT
0607   02B7 D1                  POP  D                          ;RESTORE TEXT POINTER
0608   02B8 DA C8 02            JC   NX2                        ;OUTSIDE LIMIT
0609   02BB 2A 10 08            LHLD LOPLN                      ;WITHIN LIMIT, GO
0610   02BE 22 02 08            SHLD CURRNT                     ;BACK TO THE SAVED
0611   02C1 2A 12 08            LHLD LOPPT                      ;'CURRNT' AND TEXT
0612   02C4 EB                  XCHG                            ;POINTER
0613   02C5 F7                  RST  RFINISH
0614   02C6 E1          NX5:    POP  H
0615   02C7 D1                  POP  D
0616   02C8 CD 4F 06    NX2:    CALL POPA                       ;PURGE THIS LOOP
0617   02CB F7                  RST  RFINISH
0618   02CC             ;
0619   02CC             ;*************************************************************
0620   02CC             ;
0621   02CC             ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
0622   02CC             ;
0623   02CC             ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
0624   02CC             ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
0625   02CC             ;
0626   02CC             ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
0627   02CC             ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
0628   02CC             ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
0629   02CC             ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
0630   02CC             ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
0631   02CC             ; EXECUTION CONTINUES AT THE NEXT LINE.
0632   02CC             ;
0633   02CC             ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
0634   02CC             ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
0635   02CC             ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
0636   02CC             ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
0637   02CC             ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
0638   02CC             ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
0639   02CC             ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
0640   02CC             ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
0641   02CC             ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
0642   02CC             ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
0643   02CC             ;
0644   02CC             ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
0645   02CC             ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
0646   02CC             ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
0647   02CC             ; THIS IS HANDLED IN 'INPERR'.
0648   02CC             ;
0649   02CC             ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
0650   02CC             ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
0651   02CC             ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
0652   02CC             ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
0653   02CC             ; THIS IS DONE BY 'DEFLT'.
0654   02CC             ;
0655   02CC 21 00 00    REM:    LXI  H,0H                       ;*** REM ***
0656   02CF 3E                  .DB  3EH                        ;SKIP RST, THIS IS LIKE 'IF 0'
0657   02D0             ;
0658   02D0 DF          IFF:    RST  REXPR                      ;*** IF ***
0659   02D1 7C                  MOV  A,H                        ;IS THE EXPR.=0?
0660   02D2 B5                  ORA  L
0661   02D3 C2 5E 01            JNZ  RUNSML                     ;NO, CONTINUE
0662   02D6 CD 8C 05            CALL FNDSKP                     ;YES, SKIP REST OF LINE
0663   02D9 D2 57 01            JNC  RUNTSL                     ;AND RUN THE NEXT LINE
0664   02DC C3 C1 00            JMP  RSTART                     ;IF NO NEXT, RE-START
0665   02DF             ;
0666   02DF 2A 08 08    INPERR: LHLD STKINP                     ;*** INPERR ***
0667   02E2 F9                  SPHL                            ;RESTORE OLD SP
0668   02E3 E1                  POP  H                          ;AND OLD 'CURRNT'
0669   02E4 22 02 08            SHLD CURRNT
0670   02E7 D1                  POP  D                          ;AND OLD TEXT POINTER
0671   02E8 D1                  POP  D                          ;REDO INPUT
0672   02E9             ;
0673   02E9             INPUT:                                  ;*** INPUT ***
0674   02E9 D5          IP1:    PUSH D                          ;SAVE IN CASE OF ERROR
0675   02EA CD A2 05            CALL QTSTG                      ;IS NEXT ITEM A STRING?
0676   02ED C3 F7 02            JMP  IP2                        ;NO
0677   02F0 FF                  RST  RTSTV                      ;YES, BUT FOLLOWED BY A
0678   02F1 DA 2E 03            JC   IP4                        ;VARIABLE?   NO.
0679   02F4 C3 07 03            JMP  IP3                        ;YES.  INPUT VARIABLE
0680   02F7 D5          IP2:    PUSH D                          ;SAVE FOR 'PRTSTG'
0681   02F8 FF                  RST  RTSTV                      ;MUST BE VARIABLE NOW
0682   02F9 DA F1 04            JC   QWHAT                      ;"WHAT?" IT IS NOT?
0683   02FC 1A                  LDAX D                          ;GET READY FOR 'PRTSTR'
0684   02FD 4F                  MOV  C,A
0685   02FE 97                  SUB  A
0686   02FF 12                  STAX D
0687   0300 D1                  POP  D
0688   0301 CD 96 05            CALL PRTSTG                     ;PRINT STRING AS PROMPT
0689   0304 79                  MOV  A,C                        ;RESTORE TEXT
0690   0305 1B                  DCX  D
0691   0306 12                  STAX D
0692   0307 D5          IP3:    PUSH D                          ;SAVE TEXT POINTER
0693   0308 EB                  XCHG
0694   0309 2A 02 08            LHLD CURRNT                     ;ALSO SAVE 'CURRNT'
0695   030C E5                  PUSH H
0696   030D 21 E9 02            LXI  H,IP1                      ;A NEGATIVE NUMBER
0697   0310 22 02 08            SHLD CURRNT                     ;AS A FLAG
0698   0313 21 00 00            LXI  H,0H                       ;SAVE SP TOO
0699   0316 39                  DAD  SP
0700   0317 22 08 08            SHLD STKINP
0701   031A D5                  PUSH D                          ;OLD HL
0702   031B 3E 3A               MVI  A,':'                      ;PRINT THIS TOO
0703   031D CD 25 05            CALL GETLN                      ;AND GET A LINE
0704   0320 11 37 0F            LXI  D,BUFFER                   ;POINTS TO BUFFER
0705   0323 DF                  RST  REXPR                      ;EVALUATE INPUT
0706   0324                     ;NOP                             ;CAN BE 'CALL ENDCHK'
0707   0324                     ;NOP
0708   0324                     ;NOP
0709   0324 D1                  POP  D                          ;OK, GET OLD HL
0710   0325 EB                  XCHG
0711   0326 73                  MOV  M,E                        ;SAVE VALUE IN VAR.
0712   0327 23                  INX  H
0713   0328 72                  MOV  M,D
0714   0329 E1                  POP  H                          ;GET OLD 'CURRNT'
0715   032A 22 02 08            SHLD CURRNT
0716   032D D1                  POP  D                          ;AND OLD TEXT POINTER
0717   032E F1          IP4:    POP  PSW                        ;PURGE JUNK IN STACK
0718   032F CF                  TSTC($2C,IP5)                   ;IS NEXT CH. ','?
0718   0330 2C          
0718   0331 03          
0719   0332 C3 E9 02            JMP  IP1                        ;YES, MORE ITEMS.
0720   0335 F7          IP5:    RST  RFINISH
0721   0336             ;
0722   0336 1A          DEFLT:  LDAX D                          ;***  DEFLT ***
0723   0337 FE 0D               CPI  CR                         ;EMPTY LINE IS OK
0724   0339 CA 45 03            JZ   LT1                        ;ELSE IT IS 'LET'
0725   033C             ;
0726   033C CD CB 04    LET:    CALL SETVAL                     ;*** LET ***
0727   033F CF                  TSTC($2C,LT1)                   ;SET VALUE TO VAR.
0727   0340 2C          
0727   0341 03          
0728   0342 C3 3C 03            JMP  LET                        ;ITEM BY ITEM
0729   0345 F7          LT1:    RST  RFINISH                    ;UNTIL FINISH
0730   0346             ;
0731   0346             ;*************************************************************
0732   0346             ;
0733   0346             ; *** EXPR ***
0734   0346             ;
0735   0346             ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
0736   0346             ; <EXPR>::<EXPR2>
0737   0346             ;         <EXPR2><REL.OP.><EXPR2>
0738   0346             ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
0739   0346             ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
0740   0346             ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
0741   0346             ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
0742   0346             ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
0743   0346             ; <EXPR4>::=<VARIABLE>
0744   0346             ;           <FUNCTION>
0745   0346             ;           (<EXPR>)
0746   0346             ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
0747   0346             ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
0748   0346             ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
0749   0346             ;
0750   0346             ;EXPR:  CALL EXPR2                      ;THIS IS AT LOC. 18
0751   0346             ;       PUSH H                          ;SAVE <EXPR2> VALUE
0752   0346 21 78 07    EXPR1:  LXI  H,TAB8-1                   ;LOOKUP REL.OP.
0753   0349 C3 92 07            JMP  EXEC                       ;GO DO IT
0754   034C             ;
0755   034C CD 75 03    XP11:   CALL XP18                       ;REL.OP.">="
0756   034F D8                  RC                              ;NO, RETURN HL=0
0757   0350 6F                  MOV  L,A                        ;YES, RETURN HL=1
0758   0351 C9                  RET
0759   0352             ;
0760   0352 CD 75 03    XP12:   CALL XP18                       ;REL.OP."#"
0761   0355 C8                  RZ                              ;FALSE, RETURN HL=0
0762   0356 6F                  MOV  L,A                        ;TRUE, RETURN HL=1
0763   0357 C9                  RET
0764   0358             ;
0765   0358 CD 75 03    XP13:   CALL XP18                       ;REL.OP.">"
0766   035B C8                  RZ                              ;FALSE
0767   035C D8                  RC                              ;ALSO FALSE, HL=0
0768   035D 6F                  MOV  L,A                        ;TRUE, HL=1
0769   035E C9                  RET
0770   035F             ;
0771   035F CD 75 03    XP14:   CALL XP18                       ;REL.OP."<="
0772   0362 6F                  MOV  L,A                        ;SET HL=1
0773   0363 C8                  RZ                              ;REL. TRUE, RETURN
0774   0364 D8                  RC
0775   0365 6C                  MOV  L,H                        ;ELSE SET HL=0
0776   0366 C9                  RET
0777   0367             ;
0778   0367 CD 75 03    XP15:   CALL XP18                       ;REL.OP."="
0779   036A C0                  RNZ                             ;FALSE, RETURN HL=0
0780   036B 6F                  MOV  L,A                        ;ELSE SET HL=1
0781   036C C9                  RET
0782   036D             ;
0783   036D CD 75 03    XP16:   CALL XP18                       ;REL.OP."<"
0784   0370 D0                  RNC                             ;FALSE, RETURN HL=0
0785   0371 6F                  MOV  L,A                        ;ELSE SET HL=1
0786   0372 C9                  RET
0787   0373             ;
0788   0373 E1          XP17:   POP  H                          ;NOT .REL.OP
0789   0374 C9                  RET                             ;RETURN HL=<EXPR2>
0790   0375             ;
0791   0375 79          XP18:   MOV  A,C                        ;SUBROUTINE FOR ALL
0792   0376 E1                  POP  H                          ;REL.OP.'S
0793   0377 C1                  POP  B
0794   0378 E5                  PUSH H                          ;REVERSE TOP OF STACK
0795   0379 C5                  PUSH B
0796   037A 4F                  MOV  C,A
0797   037B CD 8A 03            CALL EXPR2                      ;GET 2ND <EXPR2>
0798   037E EB                  XCHG                            ;VALUE IN DE NOW
0799   037F E3                  XTHL                            ;1ST <EXPR2> IN HL
0800   0380 CD C3 04            CALL CKHLDE                     ;COMPARE 1ST WITH 2ND
0801   0383 D1                  POP  D                          ;RESTORE TEXT POINTER
0802   0384 21 00 00            LXI  H,0H                       ;SET HL=0, A=1
0803   0387 3E 01               MVI  A,1
0804   0389 C9                  RET
0805   038A             ;
0806   038A CF          EXPR2:  TSTC('-',XP21)                  ;NEGATIVE SIGN?
0806   038B 2D          
0806   038C 06          
0807   038D 21 00 00            LXI  H,0H                       ;YES, FAKE '0-'
0808   0390 C3 B4 03            JMP  XP26                       ;TREAT LIKE SUBTRACT
0809   0393             ;
0810   0393 CF          XP21:   TSTC('+',XP22)                  ;POSITIVE SIGN? IGNORE
0810   0394 2B          
0810   0395 00          
0811   0396 CD BE 03    XP22:   CALL EXPR3                      ;1ST <EXPR3>
0812   0399 CF          XP23:   TSTC('+',XP25)                  ;ADD?
0812   039A 2B          
0812   039B 15          
0813   039C E5                  PUSH H                          ;YES, SAVE VALUE
0814   039D CD BE 03            CALL EXPR3                      ;GET 2ND <EXPR3>
0815   03A0 EB          XP24:   XCHG                            ;2ND IN DE
0816   03A1 E3                  XTHL                            ;1ST IN HL
0817   03A2 7C                  MOV  A,H                        ;COMPARE SIGN
0818   03A3 AA                  XRA  D
0819   03A4 7A                  MOV  A,D
0820   03A5 19                  DAD  D
0821   03A6 D1                  POP  D                          ;RESTORE TEXT POINTER
0822   03A7 FA 99 03            JM   XP23                       ;1ST AND 2ND SIGN DIFFER
0823   03AA AC                  XRA  H                          ;1ST AND 2ND SIGN EQUAL
0824   03AB F2 99 03            JP   XP23                       ;SO IS RESULT
0825   03AE             ;
0826   03AE C3 A6 00            JMP  QHOW                       ;ELSE WE HAVE OVERFLOW
0827   03B1             ;
0828   03B1 CF          XP25:   TSTC('-',XP42)                  ;SUBTRACT?
0828   03B2 2D          
0828   03B3 86          
0829   03B4 E5          XP26:   PUSH H                          ;YES, SAVE 1ST <EXPR3>
0830   03B5 CD BE 03            CALL EXPR3                      ;GET 2ND <EXPR3>
0831   03B8 CD B1 04            CALL CHGSGN                     ;NEGATE
0832   03BB C3 A0 03            JMP  XP24                       ;AND ADD THEM
0833   03BE             ;
0834   03BE CD 1E 04    EXPR3:  CALL EXPR4                      ;GET 1ST <EXPR4>
0835   03C1 CF          XP31:   TSTC('*',XP34)                  ;MULTIPLY?
0835   03C2 2A          
0835   03C3 2D          
0836   03C4 E5                  PUSH H                          ;YES, SAVE 1ST
0837   03C5 CD 1E 04            CALL EXPR4                      ;AND GET 2ND <EXPR4>
0838   03C8 06 00               MVI  B,0H                       ;CLEAR B FOR SIGN
0839   03CA CD AE 04            CALL CHKSGN                     ;CHECK SIGN
0840   03CD E3                  XTHL                            ;1ST IN HL
0841   03CE CD AE 04            CALL CHKSGN                     ;CHECK SIGN OF 1ST
0842   03D1 EB                  XCHG
0843   03D2 E3                  XTHL
0844   03D3 7C                  MOV  A,H                        ;IS HL > 255 ?
0845   03D4 B7                  ORA  A
0846   03D5 CA DE 03            JZ   XP32                       ;NO
0847   03D8 7A                  MOV  A,D                        ;YES, HOW ABOUT DE
0848   03D9 B2                  ORA  D
0849   03DA EB                  XCHG                            ;PUT SMALLER IN HL
0850   03DB C2 A7 00            JNZ  AHOW                       ;ALSO >, WILL OVERFLOW
0851   03DE 7D          XP32:   MOV  A,L                        ;THIS IS DUMB
0852   03DF 21 00 00            LXI  H,0H                       ;CLEAR RESULT
0853   03E2 B7                  ORA  A                          ;ADD AND COUNT
0854   03E3 CA 10 04            JZ   XP35
0855   03E6 19          XP33:   DAD  D
0856   03E7 DA A7 00            JC   AHOW                       ;OVERFLOW
0857   03EA 3D                  DCR  A
0858   03EB C2 E6 03            JNZ  XP33
0859   03EE C3 10 04            JMP  XP35                       ;FINISHED
0860   03F1             ;
0861   03F1 CF          XP34:   TSTC('/',XP42)                  ;DIVIDE?
0861   03F2 2F          
0861   03F3 46          
0862   03F4 E5                  PUSH H                          ;YES, SAVE 1ST <EXPR4>
0863   03F5 CD 1E 04            CALL EXPR4                      ;AND GET THE SECOND ONE
0864   03F8 06 00               MVI  B,0H                       ;CLEAR B FOR SIGN
0865   03FA CD AE 04            CALL CHKSGN                     ;CHECK SIGN OF 2ND
0866   03FD E3                  XTHL                            ;GET 1ST IN HL
0867   03FE CD AE 04            CALL CHKSGN                     ;CHECK SIGN OF 1ST
0868   0401 EB                  XCHG
0869   0402 E3                  XTHL
0870   0403 EB                  XCHG
0871   0404 7A                  MOV  A,D                        ;DIVIDE BY 0?
0872   0405 B3                  ORA  E
0873   0406 CA A7 00            JZ   AHOW                       ;SAY "HOW?"
0874   0409 C5                  PUSH B                          ;ELSE SAVE SIGN
0875   040A CD 91 04            CALL DIVIDE                     ;USE SUBROUTINE
0876   040D 60                  MOV  H,B                        ;RESULT IN HL NOW
0877   040E 69                  MOV  L,C
0878   040F C1                  POP  B                          ;GET SIGN BACK
0879   0410 D1          XP35:   POP  D                          ;AND TEXT POINTER
0880   0411 7C                  MOV  A,H                        ;HL MUST BE +
0881   0412 B7                  ORA  A
0882   0413 FA A6 00            JM   QHOW                       ;ELSE IT IS OVERFLOW
0883   0416 78                  MOV  A,B
0884   0417 B7                  ORA  A
0885   0418 FC B1 04            CM   CHGSGN                     ;CHANGE SIGN IF NEEDED
0886   041B C3 C1 03            JMP  XP31                       ;LOOK FOR MORE TERMS
0887   041E             ;
0888   041E 21 4C 07    EXPR4:  LXI  H,TAB4-1                   ;FIND FUNCTION IN TAB4
0889   0421 C3 92 07            JMP  EXEC                       ;AND GO DO IT
0890   0424             ;
0891   0424 FF          XP40:   RST  RTSTV                      ;NO, NOT A FUNCTION
0892   0425 DA 2D 04            JC   XP41                       ;NOR A VARIABLE
0893   0428 7E                  MOV  A,M                        ;VARIABLE
0894   0429 23                  INX  H
0895   042A 66                  MOV  H,M                        ;VALUE IN HL
0896   042B 6F                  MOV  L,A
0897   042C C9                  RET
0898   042D             ;
0899   042D CD 7E 00    XP41:   CALL TSTNUM                     ;OR IS IT A NUMBER
0900   0430 78                  MOV  A,B                        ;# OF DIGIT
0901   0431 B7                  ORA  A
0902   0432 C0                  RNZ                             ;OK
0903   0433 CF          PARN:   TSTC($28,XP43)                  ; '('
0903   0434 28          
0903   0435 05          
0904   0436 DF                  RST  REXPR                      ;"(EXPR)"
0905   0437 CF                  TSTC($29,XP43)                  ; ')'
0905   0438 29          
0905   0439 01          
0906   043A C9          XP42:   RET
0907   043B C3 F1 04    XP43:   JMP  QWHAT                      ;ELSE SAY: "WHAT?"
0908   043E             
0909   043E CD 33 04    RND:    CALL PARN                       ;*** RND(EXPR) ***
0910   0441 7C                  MOV  A,H                        ;EXPR MUST BE +
0911   0442 B7                  ORA  A
0912   0443 FA A6 00            JM   QHOW
0913   0446 B5                  ORA  L                          ;AND NON-ZERO
0914   0447 CA A6 00            JZ   QHOW
0915   044A D5                  PUSH D                          ;SAVE BOTH
0916   044B E5                  PUSH H
0917   044C 2A 14 08            LHLD RANPNT                     ;GET MEMORY AS RANDOM
0918   044F 11 CC 07            LXI  D,LSTROM                   ;NUMBER
0919   0452 E7                  RST  RCOMP
0920   0453 DA 59 04            JC   RA1                        ;WRAP AROUND IF LAST
0921   0456 21 00 00            LXI  H,START
0922   0459 5E          RA1:    MOV  E,M
0923   045A 23                  INX  H
0924   045B 56                  MOV  D,M
0925   045C 22 14 08            SHLD RANPNT
0926   045F E1                  POP  H
0927   0460 EB                  XCHG
0928   0461 C5                  PUSH B
0929   0462 CD 91 04            CALL DIVIDE                     ;RND(N)=MOD(M,N)+1
0930   0465 C1                  POP  B
0931   0466 D1                  POP  D
0932   0467 23                  INX  H
0933   0468 C9                  RET
0934   0469             
0935   0469 CD 33 04    ABS:    CALL PARN                       ;*** ABS(EXPR) ***
0936   046C 1B                  DCX  D
0937   046D CD AE 04            CALL CHKSGN                     ;CHECK SIGN
0938   0470 13                  INX  D
0939   0471 C9                  RET
0940   0472             
0941   0472 2A 16 08    SIZE:   LHLD TXTUNF                     ;*** RETURN SIZE IN HL ***
0942   0475 D5                  PUSH D                          ;GET THE NUMBER OF FREE
0943   0476 EB                  XCHG                            ;BYTES BETWEEN 'TXTUNF'
0944   0477 21 00 0F            LXI  H,VARBGN                   ;AND 'VARBGN'
0945   047A CD A7 04            CALL SUBDE
0946   047D D1                  POP  D
0947   047E C9                  RET
0948   047F             
0949   047F CD 33 04    PEEK:   CALL PARN                       ;*** PEEK(EXPR) ***
0950   0482 7E                  MOV  A,M                        ;GET CONTENT OF (HL)
0951   0483 26 00               MVI  H,0                        ;RETURN RESULT IN HL
0952   0485 6F                  MOV  L,A
0953   0486 C9                  RET
0954   0487             
0955   0487 CD 33 04    DEEK:   CALL PARN                       ;*** PEEK(EXPR) ***
0956   048A D5                  PUSH D
0957   048B 5E                  MOV  E,M                        ;GET LOW CONTENT OF (HL)
0958   048C 23                  INX  H
0959   048D 56                  MOV  D,M                        ;GET HIGH CONTENT OF (HL)
0960   048E EB                  XCHG                            ;RETURN RESULT IN HL
0961   048F D1                  POP  D
0962   0490 C9                  RET
0963   0491             
0964   0491             ;
0965   0491             ;*************************************************************
0966   0491             ;
0967   0491             ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
0968   0491             ;
0969   0491             ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
0970   0491             ;
0971   0491             ; 'SUBDE' SUBSTRACTS DE FROM HL
0972   0491             ;
0973   0491             ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
0974   0491             ; SIGN AND FLIP SIGN OF B.
0975   0491             ;
0976   0491             ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
0977   0491             ;
0978   0491             ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
0979   0491             ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
0980   0491             ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
0981   0491             ;
0982   0491 E5          DIVIDE: PUSH H                          ;*** DIVIDE ***
0983   0492 6C                  MOV  L,H                        ;DIVIDE H BY DE
0984   0493 26 00               MVI  H,0
0985   0495 CD 9C 04            CALL DV1
0986   0498 41                  MOV  B,C                        ;SAVE RESULT IN B
0987   0499 7D                  MOV  A,L                        ;(REMINDER+L)/DE
0988   049A E1                  POP  H
0989   049B 67                  MOV  H,A
0990   049C 0E FF       DV1:    MVI  C,0FFH                     ;RESULT IN C
0991   049E 0C          DV2:    INR  C                          ;DUMB ROUTINE
0992   049F CD A7 04            CALL SUBDE                      ;DIVIDE BY SUBTRACT
0993   04A2 D2 9E 04            JNC  DV2                        ;AND COUNT
0994   04A5 19                  DAD  D
0995   04A6 C9                  RET
0996   04A7             ;
0997   04A7 7D          SUBDE:  MOV  A,L                        ;*** SUBDE ***
0998   04A8 93                  SUB  E                          ;SUBSTRACT DE FROM
0999   04A9 6F                  MOV  L,A                        ;HL
1000   04AA 7C                  MOV  A,H
1001   04AB 9A                  SBB  D
1002   04AC 67                  MOV  H,A
1003   04AD C9                  RET
1004   04AE             ;
1005   04AE 7C          CHKSGN: MOV  A,H                        ;*** CHKSGN ***
1006   04AF B7                  ORA  A                          ;CHECK SIGN OF HL
1007   04B0 F0                  RP                              ;IF -, CHANGE SIGN
1008   04B1             ;
1009   04B1 7C          CHGSGN: MOV  A,H                        ;*** CHGSGN ***
1010   04B2 F5                  PUSH PSW
1011   04B3 2F                  CMA                             ;CHANGE SIGN OF HL
1012   04B4 67                  MOV  H,A
1013   04B5 7D                  MOV  A,L
1014   04B6 2F                  CMA
1015   04B7 6F                  MOV  L,A
1016   04B8 23                  INX  H
1017   04B9 F1                  POP  PSW
1018   04BA AC                  XRA  H
1019   04BB F2 A6 00            JP   QHOW
1020   04BE 78                  MOV  A,B                        ;AND ALSO FLIP B
1021   04BF EE 80               XRI  80H
1022   04C1 47                  MOV  B,A
1023   04C2 C9                  RET
1024   04C3             
1025   04C3 7C          CKHLDE: MOV  A,H
1026   04C4 AA                  XRA  D                          ;SAME SIGN?
1027   04C5 F2 C9 04            JP   CK1                        ;YES, COMPARE
1028   04C8 EB                  XCHG                            ;NO, XCH AND COMP
1029   04C9 E7          CK1:    RST  RCOMP
1030   04CA C9                  RET
1031   04CB             ;
1032   04CB             ;*************************************************************
1033   04CB             ;
1034   04CB             ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1035   04CB             ;
1036   04CB             ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1037   04CB             ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1038   04CB             ; TO THAT VALUE.
1039   04CB             ;
1040   04CB             ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1041   04CB             ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1042   04CB             ; NEXT LINE AND CONTINUE FROM THERE.
1043   04CB             ;
1044   04CB             ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1045   04CB             ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1046   04CB             ;
1047   04CB             ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1048   04CB             ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1049   04CB             ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1050   04CB             ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1051   04CB             ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1052   04CB             ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1053   04CB             ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1054   04CB             ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1055   04CB             ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1056   04CB             ;
1057   04CB             ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1058   04CB             ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1059   04CB             ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1060   04CB             ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1061   04CB             ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1062   04CB             ;
1063   04CB FF          SETVAL: RST  RTSTV                      ;*** SETVAL ***
1064   04CC DA F1 04            JC   QWHAT                      ;"WHAT?" NO VARIABLE
1065   04CF E5                  PUSH H                          ;SAVE ADDRESS OF VAR.
1066   04D0 CF                  TSTC('=',SV1)                   ;PASS "=" SIGN
1066   04D1 3D          
1066   04D2 08          
1067   04D3 DF                  RST  REXPR                      ;EVALUATE EXPR.
1068   04D4 44                  MOV  B,H                        ;VALUE IS IN BC NOW
1069   04D5 4D                  MOV  C,L
1070   04D6 E1                  POP  H                          ;GET ADDRESS
1071   04D7 71                  MOV  M,C                        ;SAVE VALUE
1072   04D8 23                  INX  H
1073   04D9 70                  MOV  M,B
1074   04DA C9                  RET
1075   04DB C3 F1 04    SV1:    JMP  QWHAT                      ;NO "=" SIGN
1076   04DE             
1077   04DE CF          FIN:    TSTC(';',FI1)                   ;*** FIN ***
1077   04DF 3B          
1077   04E0 04          
1078   04E1 F1                  POP  PSW                        ;";", PURGE RET. ADDR.
1079   04E2 C3 5E 01            JMP  RUNSML                     ;CONTINUE SAME LINE
1080   04E5 CF          FI1:    TSTC(CR,FI2)                    ;NOT ";", IS IT CR?
1080   04E6 0D          
1080   04E7 04          
1081   04E8 F1                  POP  PSW                        ;YES, PURGE RET. ADDR.
1082   04E9 C3 4E 01            JMP  RUNNXL                     ;RUN NEXT LINE
1083   04EC C9          FI2:    RET                             ;ELSE RETURN TO CALLER
1084   04ED             
1085   04ED EF          ENDCHK: RST  RIGNBLK                    ;IGNBLK
1086   04EE FE 0D               CPI  CR                         ;END WITH CR?
1087   04F0 C8                  RZ                              ;OK, ELSE SAY: "WHAT?"
1088   04F1             ;
1089   04F1 D5          QWHAT:  PUSH D                          ;*** QWHAT ***
1090   04F2 11 B5 00    AWHAT:  LXI  D,WHAT                     ;*** AWHAT ***
1091   04F5 97          ERROR:  SUB  A                          ;*** ERROR ***
1092   04F6 CD 96 05            CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?'
1093   04F9 D1                  POP  D                          ;OR 'SORRY'
1094   04FA 1A                  LDAX D                          ;SAVE THE CHARACTER
1095   04FB F5                  PUSH PSW                        ;AT WHERE OLD DE ->
1096   04FC 97                  SUB  A                          ;AND PUT A 0 THERE
1097   04FD 12                  STAX D
1098   04FE 2A 02 08            LHLD CURRNT                     ;GET CURRENT LINE #
1099   0501 E5                  PUSH H
1100   0502 7E                  MOV  A,M                        ;CHECK THE VALUE
1101   0503 23                  INX  H
1102   0504 B6                  ORA  M
1103   0505 D1                  POP  D
1104   0506 CA C1 00            JZ   RSTART                     ;IF ZERO, JUST RESTART
1105   0509 7E                  MOV  A,M                        ;IF NEGATIVE,
1106   050A B7                  ORA  A
1107   050B FA DF 02            JM   INPERR                     ;REDO INPUT
1108   050E CD 1F 06            CALL PRTLN                      ;ELSE PRINT THE LINE
1109   0511 1B                  DCX  D                          ;UPTO WHERE THE 0 IS
1110   0512 F1                  POP  PSW                        ;RESTORE THE CHARACTER
1111   0513 12                  STAX D
1112   0514 3E 3F               MVI  A,'?'                      ;PRINT A "?"
1113   0516 D7                  RST  ROUTC
1114   0517 97                  SUB  A                          ;AND THE REST OF THE
1115   0518 CD 96 05            CALL PRTSTG                     ;LINE
1116   051B C3 C1 00            JMP  RSTART                     ;THEN RESTART
1117   051E             ;
1118   051E D5          QSORRY: PUSH D                          ;*** QSORRY ***
1119   051F 11 BB 00    ASORRY: LXI  D,SORRY                    ;*** ASORRY ***
1120   0522 C3 F5 04            JMP  ERROR
1121   0525             ;
1122   0525             ;*************************************************************
1123   0525             ;
1124   0525             ; *** GETLN *** FNDLN (& FRIENDS) ***
1125   0525             ;
1126   0525             ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1127   0525             ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1128   0525             ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1129   0525             ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1130   0525             ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1131   0525             ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1132   0525             ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1133   0525             ;
1134   0525             ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1135   0525             ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1136   0525             ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1137   0525             ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1138   0525             ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1139   0525             ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1140   0525             ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1141   0525             ; LINE, FLAGS ARE C & NZ.
1142   0525             ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1143   0525             ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1144   0525             ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1145   0525             ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1146   0525             ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1147   0525             ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1148   0525             ;
1149   0525 D7          GETLN:  RST  ROUTC                      ;*** GETLN ***
1150   0526 11 37 0F            LXI  D,BUFFER                   ;PROMPT AND INIT.
1151   0529 CD C7 06    GL1:    CALL CHKIO                      ;CHECK KEYBOARD
1152   052C CA 29 05            JZ   GL1                        ;NO INPUT, WAIT
1153   052F FE 08               CPI  BS                         ;BS, DELETE LAST CHARACTER?
1154   0531 CA 53 05            JZ   GL3                        ;YES
1155   0534 FE 7F               CPI  DEL                        ;DEL, DELETE LAST CHARACTER?
1156   0536 CA 53 05            JZ   GL3                        ;YES
1157   0539 D7                  RST  ROUTC                      ;INPUT, ECHO BACK
1158   053A FE 0A               CPI  LF                         ;IGNORE LF
1159   053C CA 29 05            JZ   GL1
1160   053F B7                  ORA  A                          ;IGNORE NULL
1161   0540 CA 29 05            JZ   GL1
1162   0543 FE 18               CPI  CAN                        ;^X, DELETE THE WHOLE LINE?
1163   0545 CA 66 05            JZ   GL4                        ;YES
1164   0548 12                  STAX D                          ;ELSE SAVE INPUT
1165   0549 13                  INX  D                          ;AND BUMP POINTER
1166   054A FE 0D               CPI  CR                         ;WAS IT CR?
1167   054C C8                  RZ                              ;YES, END OF LINE
1168   054D 7B                  MOV  A,E                        ;ELSE MORE FREE ROOM?
1169   054E FE 77               CPI  BUFEND & 0FFH
1170   0550 C2 29 05            JNZ  GL1                        ;YES, GET NEXT INPUT
1171   0553 7B          GL3:    MOV  A,E                        ;DELETE LAST CHARACTER
1172   0554 FE 37               CPI  BUFFER & 0FFH              ;BUT DO WE HAVE ANY?
1173   0556 CA 66 05            JZ   GL4                        ;NO, REDO WHOLE LINE
1174   0559 1B                  DCX  D                          ;YES, BACKUP POINTER
1175   055A 3E 08               MVI  A,BS                       ;AND ECHO A BACKSPACE
1176   055C D7                  RST  ROUTC
1177   055D 3E 20               MVI  A,' '                      ;AND ECHO A BLANK
1178   055F D7                  RST  ROUTC
1179   0560 3E 08               MVI  A,BS                       ;AND ECHO A BACKSPACE
1180   0562 D7                  RST  ROUTC
1181   0563 C3 29 05            JMP  GL1                        ;GO GET NEXT INPUT
1182   0566 CD 0E 00    GL4:    CALL CRLF                       ;REDO ENTIRE LINE
1183   0569 3E 5E               MVI  A,'^'                      ;CR, LF AND UP-ARROW
1184   056B C3 25 05            JMP  GETLN
1185   056E             ;
1186   056E 7C          FNDLN:  MOV  A,H                        ;*** FNDLN ***
1187   056F B7                  ORA  A                          ;CHECK SIGN OF HL
1188   0570 FA A6 00            JM   QHOW                       ;IT CANNOT BE -
1189   0573 11 18 08            LXI  D,TXTBGN                   ;INIT TEXT POINTER
1190   0576             ;
1191   0576             FNDLP:                                  ;*** FDLNP ***
1192   0576 E5          FL1:    PUSH H                          ;SAVE LINE #
1193   0577 2A 16 08            LHLD TXTUNF                     ;CHECK IF WE PASSED END
1194   057A 2B                  DCX  H
1195   057B E7                  RST  RCOMP
1196   057C E1                  POP  H                          ;GET LINE # BACK
1197   057D D8                  RC                              ;C,NZ PASSED END
1198   057E 1A                  LDAX D                          ;WE DID NOT, GET BYTE 1
1199   057F 95                  SUB  L                          ;IS THIS THE LINE?
1200   0580 47                  MOV  B,A                        ;COMPARE LOW ORDER
1201   0581 13                  INX  D
1202   0582 1A                  LDAX D                          ;GET BYTE 2
1203   0583 9C                  SBB  H                          ;COMPARE HIGH ORDER
1204   0584 DA 8B 05            JC   FL2                        ;NO, NOT THERE YET
1205   0587 1B                  DCX  D                          ;ELSE WE EITHER FOUND
1206   0588 B0                  ORA  B                          ;IT, OR IT IS NOT THERE
1207   0589 C9                  RET                             ;NC,Z:FOUND, NC,NZ:NO
1208   058A             ;
1209   058A             FNDNXT:                                 ;*** FNDNXT ***
1210   058A 13                  INX  D                          ;FIND NEXT LINE
1211   058B 13          FL2:    INX  D                          ;JUST PASSED BYTE 1 & 2
1212   058C             ;
1213   058C 1A          FNDSKP: LDAX D                          ;*** FNDSKP ***
1214   058D FE 0D               CPI  CR                         ;TRY TO FIND CR
1215   058F C2 8B 05            JNZ  FL2                        ;KEEP LOOKING
1216   0592 13                  INX  D                          ;FOUND CR, SKIP OVER
1217   0593 C3 76 05            JMP  FL1                        ;CHECK IF END OF TEXT
1218   0596             ;
1219   0596             ;*************************************************************
1220   0596             ;
1221   0596             ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1222   0596             ;
1223   0596             ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1224   0596             ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1225   0596             ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1226   0596             ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1227   0596             ;
1228   0596             ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1229   0596             ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1230   0596             ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1231   0596             ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1232   0596             ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1233   0596             ; OVER (USUALLY A JUMP INSTRUCTION.
1234   0596             ;
1235   0596             ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1236   0596             ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1237   0596             ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1238   0596             ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1239   0596             ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1240   0596             ;
1241   0596             ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1242   0596             ;
1243   0596 47          PRTSTG: MOV  B,A                        ;*** PRTSTG ***
1244   0597 1A          PS1:    LDAX D                          ;GET A CHARACTER
1245   0598 13                  INX  D                          ;BUMP POINTER
1246   0599 B8                  CMP  B                          ;SAME AS OLD A?
1247   059A C8                  RZ                              ;YES, RETURN
1248   059B D7                  RST  ROUTC                      ;ELSE PRINT IT
1249   059C FE 0D               CPI  CR                         ;WAS IT A CR?
1250   059E C2 97 05            JNZ  PS1                        ;NO, NEXT
1251   05A1 C9                  RET                             ;YES, RETURN
1252   05A2             ;
1253   05A2 CF          QTSTG:  TSTC($22,QT3)                   ;*** QTSTG ***
1253   05A3 22          
1253   05A4 0F          
1254   05A5 3E 22               MVI  A,22H                      ;IT IS A "
1255   05A7 CD 96 05    QT1:    CALL PRTSTG                     ;PRINT UNTIL ANOTHER
1256   05AA FE 0D               CPI  CR                         ;WAS LAST ONE A CR?
1257   05AC E1                  POP  H                          ;RETURN ADDRESS
1258   05AD CA 4E 01            JZ   RUNNXL                     ;WAS CR, RUN NEXT LINE
1259   05B0 23          QT2:    INX  H                          ;SKIP 3 BYTES ON RETURN
1260   05B1 23                  INX  H
1261   05B2 23                  INX  H
1262   05B3 E9                  PCHL                            ;RETURN
1263   05B4 CF          QT3:    TSTC($27,QT4)                   ;IS IT A '?
1263   05B5 27          
1263   05B6 05          
1264   05B7 3E 27               MVI  A,27H                      ;YES, DO THE SAME
1265   05B9 C3 A7 05            JMP  QT1                        ;AS IN "
1266   05BC CF          QT4:    TSTC($5F,QT5)                   ;IS IT BACK-ARROW?
1266   05BD 5F          
1266   05BE 07          
1267   05BF 3E 8D               MVI  A,08DH                     ;YES, CR WITHOUT LF
1268   05C1 D7                  RST  ROUTC
1269   05C2 E1                  POP  H                          ;RETURN ADDRESS
1270   05C3 C3 B0 05            JMP  QT2
1271   05C6 C9          QT5:    RET                             ;NONE OF ABOVE
1272   05C7             
1273   05C7 D5          PRTNUM: PUSH D                          ;*** PRINT NUMBER IN HL ***
1274   05C8 3A 01 08            LDA  PNBASE                     ;GET NUMBER BASE
1275   05CB 16 00               MVI  D,0                        ;16 BIT FOR DIVIDE
1276   05CD 5F                  MOV  E,A
1277   05CE 42                  MOV  B,D                        ;NO PREFIX YET
1278   05CF FE 10               CPI  16                         ;HEX NUMBER?
1279   05D1 C2 DA 05            JNZ  PN0                        ;NO, CHECK SIGN
1280   05D4 06 24               MVI  B,'$'                      ;PRINT LEADING '$'
1281   05D6 0D                  DCR  C                          ;'$' TAKES SPACE
1282   05D7 C3 E3 05            JMP  PN1                        ;HEX IS UNSIGNED
1283   05DA CD AE 04    PN0:    CALL CHKSGN                     ;CHECK SIGN
1284   05DD F2 E3 05            JP   PN1                        ;NO SIGN
1285   05E0 06 2D               MVI  B,'-'                      ;B=SIGN
1286   05E2 0D                  DCR  C                          ;'-' TAKES SPACE
1287   05E3 AF          PN1:    XRA  A
1288   05E4 57                  MOV  D,A
1289   05E5 D5                  PUSH D                          ;SAVE AS A FLAG
1290   05E6 0D                  DCR  C                          ;C=SPACES
1291   05E7 C5                  PUSH B                          ;SAVE SIGN & SPACE
1292   05E8 CD 91 04    PN2:    CALL DIVIDE                     ;DIVIDE HL BY 10
1293   05EB 78                  MOV  A,B                        ;RESULT 0?
1294   05EC B1                  ORA  C
1295   05ED CA F8 05            JZ   PN3                        ;YES, WE GOT ALL
1296   05F0 E3                  XTHL                            ;NO, SAVE REMAINDER
1297   05F1 2D                  DCR  L                          ;AND COUNT SPACE
1298   05F2 E5                  PUSH H                          ;HL IS OLD BC
1299   05F3 60                  MOV  H,B                        ;MOVE RESULT TO BC
1300   05F4 69                  MOV  L,C
1301   05F5 C3 E8 05            JMP  PN2                        ;AND DIVIDE BY 10
1302   05F8 C1          PN3:    POP  B                          ;WE GOT ALL DIGITS IN
1303   05F9 0D          PN4:    DCR  C                          ;THE STACK
1304   05FA 79                  MOV  A,C                        ;LOOK AT SPACE COUNT
1305   05FB B7                  ORA  A
1306   05FC FA 05 06            JM   PN5                        ;NO LEADING BLANKS
1307   05FF 3E 20               MVI  A,' '                      ;LEADING BLANKS
1308   0601 D7                  RST  ROUTC
1309   0602 C3 F9 05            JMP  PN4                        ;MORE?
1310   0605 78          PN5:    MOV  A,B                        ;PRINT SIGN
1311   0606 B7                  ORA  A
1312   0607 C4 10 00            CNZ  OUTC
1313   060A 5D                  MOV  E,L                        ;LAST REMAINDER IN E
1314   060B 3A 01 08    PN6:    LDA  PNBASE                     ;GET NUMBER BASE
1315   060E BB                  CMP  E                          ;IT IS FLAG FOR NO MORE
1316   060F 7B                  MOV  A,E                        ;CHECK DIGIT IN E
1317   0610 D1                  POP  D
1318   0611 C8                  RZ                              ;IF SO, RETURN
1319   0612 FE 0A               CPI  10                         ;0-9? < A hex?
1320   0614 DA 19 06            JC   PN7                        ;Skip Add 7
1321   0617 C6 07               ADI  'A'-'0'-10                 ;Bring it up to ASCII A-F
1322   0619 C6 30       PN7:    ADI  '0'                        ;ELSE CONVERT TO ASCII
1323   061B D7                  RST  ROUTC                      ;AND PRINT THE DIGIT
1324   061C C3 0B 06            JMP  PN6                        ;GO BACK FOR MORE
1325   061F             
1326   061F 3E 0A       PRTLN:  MVI  A,10                       ;SET 10 AS DEFAULT BASE
1327   0621 32 01 08            STA  PNBASE                     ;FOR PRTNUM
1328   0624 1A                  LDAX D
1329   0625 6F                  MOV  L,A                        ;LOW ORDER LINE #
1330   0626 13                  INX  D
1331   0627 1A                  LDAX D                          ;HIGH ORDER
1332   0628 67                  MOV  H,A
1333   0629 13                  INX  D
1334   062A 0E 04               MVI  C,4                        ;PRINT 4 DIGIT LINE #
1335   062C CD C7 05            CALL PRTNUM
1336   062F 3E 20               MVI  A,' '                      ;FOLLOWED BY A BLANK
1337   0631 D7                  RST  ROUTC
1338   0632 97                  SUB  A                          ;AND THEN THE NEXT
1339   0633 CD 96 05            CALL PRTSTG
1340   0636 C9                  RET
1341   0637             ;
1342   0637             ;*************************************************************
1343   0637             ;
1344   0637             ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1345   0637             ;
1346   0637             ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1347   0637             ; DE = HL
1348   0637             ;
1349   0637             ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1350   0637             ; UNTIL DE = BC
1351   0637             ;
1352   0637             ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1353   0637             ; STACK
1354   0637             ;
1355   0637             ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1356   0637             ; STACK
1357   0637             ;
1358   0637 E7          MVUP:   RST  RCOMP                      ;*** MVUP ***
1359   0638 C8                  RZ                              ;DE = HL, RETURN
1360   0639 1A                  LDAX D                          ;GET ONE BYTE
1361   063A 02                  STAX B                          ;MOVE IT
1362   063B 13                  INX  D                          ;INCREASE BOTH POINTERS
1363   063C 03                  INX  B
1364   063D C3 37 06            JMP  MVUP                       ;UNTIL DONE
1365   0640             ;
1366   0640 78          MVDOWN: MOV  A,B                        ;*** MVDOWN ***
1367   0641 92                  SUB  D                          ;TEST IF DE = BC
1368   0642 C2 48 06            JNZ  MD1                        ;NO, GO MOVE
1369   0645 79                  MOV  A,C                        ;MAYBE, OTHER BYTE?
1370   0646 93                  SUB  E
1371   0647 C8                  RZ                              ;YES, RETURN
1372   0648 1B          MD1:    DCX  D                          ;ELSE MOVE A BYTE
1373   0649 2B                  DCX  H                          ;BUT FIRST DECREASE
1374   064A 1A                  LDAX D                          ;BOTH POINTERS AND
1375   064B 77                  MOV  M,A                        ;THEN DO IT
1376   064C C3 40 06            JMP  MVDOWN                     ;LOOP BACK
1377   064F             ;
1378   064F C1          POPA:   POP  B                          ;BC = RETURN ADDR.
1379   0650 E1                  POP  H                          ;RESTORE LOPVAR, BUT
1380   0651 22 0A 08            SHLD LOPVAR                     ;=0 MEANS NO MORE
1381   0654 7C                  MOV  A,H
1382   0655 B5                  ORA  L
1383   0656 CA 69 06            JZ   PP1                        ;YEP, GO RETURN
1384   0659 E1                  POP  H                          ;NOP, RESTORE OTHERS
1385   065A 22 0C 08            SHLD LOPINC
1386   065D E1                  POP  H
1387   065E 22 0E 08            SHLD LOPLMT
1388   0661 E1                  POP  H
1389   0662 22 10 08            SHLD LOPLN
1390   0665 E1                  POP  H
1391   0666 22 12 08            SHLD LOPPT
1392   0669 C5          PP1:    PUSH B                          ;BC = RETURN ADDR.
1393   066A C9                  RET
1394   066B             ;
1395   066B 21 78 0F    PUSHA:  LXI  H,STKLMT                   ;*** PUSHA ***
1396   066E CD B1 04            CALL CHGSGN
1397   0671 C1                  POP  B                          ;BC=RETURN ADDRESS
1398   0672 39                  DAD  SP                         ;IS STACK NEAR THE TOP?
1399   0673 D2 1E 05            JNC  QSORRY                     ;YES, SORRY FOR THAT
1400   0676 2A 0A 08            LHLD LOPVAR                     ;ELSE SAVE LOOP VAR'S
1401   0679 7C                  MOV  A,H                        ;BUT IF LOPVAR IS 0
1402   067A B5                  ORA  L                          ;THAT WILL BE ALL
1403   067B CA 91 06            JZ   PU1
1404   067E 2A 12 08            LHLD LOPPT                      ;ELSE, MORE TO SAVE
1405   0681 E5                  PUSH H
1406   0682 2A 10 08            LHLD LOPLN
1407   0685 E5                  PUSH H
1408   0686 2A 0E 08            LHLD LOPLMT
1409   0689 E5                  PUSH H
1410   068A 2A 0C 08            LHLD LOPINC
1411   068D E5                  PUSH H
1412   068E 2A 0A 08            LHLD LOPVAR
1413   0691 E5          PU1:    PUSH H
1414   0692 C5                  PUSH B                          ;BC = RETURN ADDR.
1415   0693 C9                  RET
1416   0694             ;
1417   0694             ;*************************************************************
1418   0694             ;
1419   0694             ; *** OUTC *** & CHKIO ***
1420   0694             ;
1421   0694             ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1422   0694             ; 'OUTC' IS CONTROLLED BY A SOFTWARE SWITCH 'OCSW'.  IF OCSW=0
1423   0694             ; 'OUTC' WILL JUST RETURN TO THE CALLER.  IF OCSW IS NOT 0,
1424   0694             ; IT WILL OUTPUT THE BYTE IN A.  IF THAT IS A CR, A LF IS ALSO
1425   0694             ; SEND OUT.  ONLY THE FLAGS MAY BE CHANGED AT RETURN. ALL REG.
1426   0694             ; ARE RESTORED.
1427   0694             ;
1428   0694             ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1429   0694             ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1430   0694             ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1431   0694             ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1432   0694             ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1433   0694             ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
1434   0694             ;
1435   0694 32 00 08    INIT:   STA  OCSW
1436   0697 16 1E               MVI  D,30                       ;30 new lines to clear screen
1437   0699             PATLOP:
1438   0699 CD 0E 00            CALL CRLF
1439   069C 15                  DCR  D
1440   069D C2 99 06            JNZ  PATLOP
1441   06A0 97                  SUB  A
1442   06A1 11 E5 06            LXI  D,MSG1
1443   06A4 CD 96 05            CALL PRTSTG
1444   06A7 21 00 00            LXI  H,START
1445   06AA 22 14 08            SHLD RANPNT
1446   06AD 21 18 08            LXI  H,TXTBGN
1447   06B0 22 16 08            SHLD TXTUNF
1448   06B3 C3 C1 00            JMP  RSTART
1449   06B6             
1450   06B6             ;OUTC:  PUSH PSW                        ;THIS IS AT LOC. 10
1451   06B6             ;       LDA  OCSW                       ;CHECK SOFTWARE SWITCH
1452   06B6             ;       ORA  A
1453   06B6             ;       JP   OC2
1454   06B6 C2 BB 06    OC2:    JNZ  OC3                        ;IT IS ON
1455   06B9 F1                  POP  PSW                        ;IT IS OFF
1456   06BA C9                  RET                             ;RESTORE AF AND RETURN
1457   06BB F1          OC3:    POP  PSW                        ;READY, GET OLD A BACK
1458   06BC D3 01               OUT  IODATA                     ;Out to data port
1459   06BE FE 0D               CPI  CR                         ;WAS IT CR?
1460   06C0 C0                  RNZ                             ;NO, FINISHED
1461   06C1 3E 0A               MVI  A,LF                       ;YES, WE SEND LF TOO
1462   06C3 D7                  RST  ROUTC                      ;THIS IS RECURSIVE
1463   06C4 3E 0D               MVI  A,CR                       ;GET CR BACK IN A
1464   06C6 C9                  RET
1465   06C7             
1466   06C7 DB 02       CHKIO:  IN   IOSTAT                     ;*** CHKIO ***
1467   06C9 E6 01               ANI  1H                         ;MASK STATUS BIT
1468   06CB C8                  RZ                              ;NOT READY, RETURN "Z"
1469   06CC DB 01               IN   IODATA                     ;READY, READ DATA
1470   06CE E6 7F               ANI  7FH                        ;MASK BIT 7 OFF
1471   06D0 FE 0F       CI0:    CPI  0FH                        ;IS IT CONTROL-O?
1472   06D2 C2 DF 06            JNZ  CI1                        ;NO, MORE CHECKING
1473   06D5 3A 00 08            LDA  OCSW                       ;CONTROL-O FLIPS OCSW
1474   06D8 2F                  CMA                             ;ON TO OFF, OFF TO ON
1475   06D9 32 00 08            STA  OCSW
1476   06DC C3 C7 06            JMP  CHKIO                      ;GET ANOTHER INPUT
1477   06DF FE 03       CI1:    CPI  03H                        ;IS IT CONTROL-C?
1478   06E1 C0                  RNZ                             ;NO, RETURN "NZ"
1479   06E2 C3 C1 00            JMP  RSTART                     ;YES, RESTART TBI
1480   06E5             ;
1481   06E5 54 69 6E 79 MSG1:   .DB  "Tiny "
1481   06E9 20 
1482   06EA 42 41 53 49         .DB  "BASIC "
1482   06EE 43 20 
1483   06F0 56 20 32 2E         .DB  "V 2.0"
1483   06F4 30 
1484   06F5 0D                  .DB  CR
1485   06F6             ;
1486   06F6             ;*************************************************************
1487   06F6             ;
1488   06F6             ; *** TABLES *** DIRECT *** & EXEC ***
1489   06F6             ;
1490   06F6             ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1491   06F6             ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1492   06F6             ; OF CODE ACCORDING TO THE TABLE.
1493   06F6             ;
1494   06F6             ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1495   06F6             ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1496   06F6             ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1497   06F6             ; ALL DIRECT AND STATEMENT COMMANDS.
1498   06F6             ;
1499   06F6             ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1500   06F6             ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1501   06F6             ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1502   06F6             ;
1503   06F6             ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1504   06F6             ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1505   06F6             ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1506   06F6             ; BYTE SET TO 1.
1507   06F6             ; This is done by the macro 'DWA'.
1508   06F6             ; If the program is executed from an address < 0x8000
1509   06F6             ; take care to mask this bit in program part 'EXEC'.
1510   06F6             ;
1511   06F6             ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
1512   06F6             ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
1513   06F6             ; MATCH THIS NULL ITEM AS DEFAULT.
1514   06F6             ;
1515   06F6             TAB1:                                   ;DIRECT COMMANDS
1516   06F6 4C 49 53 54         .DB  "LIST"
1517   06FA 81                  DWA(LIST)
1517   06FB 76          
1518   06FC 52 55 4E            .DB  "RUN"
1519   06FF 81                  DWA(RUN)
1519   0700 48          
1520   0701 4E 45 57            .DB  "NEW"
1521   0704 81                  DWA(NEW)
1521   0705 39          
1522   0706             ;
1523   0706             TAB2:                                   ;DIRECT/STATEMENT
1524   0706 4E 45 58 54         .DB  "NEXT"
1525   070A 82                  DWA(NEXT)
1525   070B 73          
1526   070C 4C 45 54            .DB  "LET"
1527   070F 83                  DWA(LET)
1527   0710 3C          
1528   0711 49 46               .DB  "IF"
1529   0713 82                  DWA(IFF)
1529   0714 D0          
1530   0715 47 4F 54 4F         .DB  "GOTO"
1531   0719 81                  DWA(GOTO)
1531   071A 67          
1532   071B 47 4F 53 55         .DB  "GOSUB"
1532   071F 42 
1533   0720 81                  DWA(GOSUB)
1533   0721 DB          
1534   0722 52 45 54 55         .DB  "RETURN"
1534   0726 52 4E 
1535   0728 81                  DWA(RETURN)
1535   0729 FB          
1536   072A 52 45 4D            .DB  "REM"
1537   072D 82                  DWA(REM)
1537   072E CC          
1538   072F 46 4F 52            .DB  "FOR"
1539   0732 82                  DWA(FOR)
1539   0733 14          
1540   0734 49 4E 50 55         .DB  "INPUT"
1540   0738 54 
1541   0739 82                  DWA(INPUT)
1541   073A E9          
1542   073B 50 52 49 4E         .DB  "PRINT"
1542   073F 54 
1543   0740 81                  DWA(PRINT)
1543   0741 8E          
1544   0742 3F                  .DB  "?"
1545   0743 81                  DWA(PRINT)
1545   0744 8E          
1546   0745 53 54 4F 50         .DB  "STOP"
1547   0749 81                  DWA(STOP)
1547   074A 42          
1548   074B 83                  DWA(DEFLT)                      ;END OF LIST
1548   074C 36          
1549   074D             ;
1550   074D             TAB4:                                   ;FUNCTIONS
1551   074D 52 4E 44            .DB  "RND"
1552   0750 84                  DWA(RND)
1552   0751 3E          
1553   0752 41 42 53            .DB  "ABS"
1554   0755 84                  DWA(ABS)
1554   0756 69          
1555   0757 53 49 5A 45         .DB  "SIZE"
1556   075B 84                  DWA(SIZE)
1556   075C 72          
1557   075D 50 45 45 4B         .DB  "PEEK"                     ;get byte from memory
1558   0761 84                  DWA(PEEK)
1558   0762 7F          
1559   0763 44 45 45 4B         .DB  "DEEK"                     ;get word from memory
1560   0767 84                  DWA(DEEK)
1560   0768 87          
1561   0769 84                  DWA(XP40)                       ;END OF LIST
1561   076A 24          
1562   076B             ;
1563   076B             TAB5:                                   ;"TO" IN "FOR"
1564   076B 54 4F               .DB  "TO"
1565   076D 82                  DWA(FR1)
1565   076E 24          
1566   076F 84                  DWA(QWHAT)                      ;END OF LIST
1566   0770 F1          
1567   0771             ;
1568   0771             TAB6:                                   ;"STEP" IN "FOR"
1569   0771 53 54 45 50         .DB  "STEP"
1570   0775 82                  DWA(FR2)
1570   0776 2E          
1571   0777 82                  DWA(FR3)                        ;END OF LIST
1571   0778 32          
1572   0779             ;
1573   0779             TAB8:                                   ;RELATION OPERATORS
1574   0779 3E 3D               .DB  ">="
1575   077B 83                  DWA(XP11)
1575   077C 4C          
1576   077D 23                  .DB  "#"
1577   077E 83                  DWA(XP12)
1577   077F 52          
1578   0780 3E                  .DB  ">"
1579   0781 83                  DWA(XP13)
1579   0782 58          
1580   0783 3D                  .DB  "="
1581   0784 83                  DWA(XP15)
1581   0785 67          
1582   0786 3C 3D               .DB  "<="
1583   0788 83                  DWA(XP14)
1583   0789 5F          
1584   078A 3C                  .DB  "<"
1585   078B 83                  DWA(XP16)
1585   078C 6D          
1586   078D 83                  DWA(XP17)                       ;END OF REL OPERATOR LIST
1586   078E 73          
1587   078F             ;
1588   078F 21 F5 06    DIRECT: LXI  H,TAB1-1                   ;*** DIRECT ***
1589   0792             ;
1590   0792             EXEC:                                   ;*** EXEC ***
1591   0792 EF          EX0:    RST  RIGNBLK                    ;IGNORE LEADING BLANKS
1592   0793 D5                  PUSH D                          ;SAVE POINTER
1593   0794 1A          EX1:    LDAX D                          ;IF FOUND '.' IN STRING
1594   0795 13                  INX  D                          ;BEFORE ANY MISMATCH
1595   0796 FE 2E               CPI  2EH                        ;WE DECLARE A MATCH
1596   0798 CA BD 07            JZ   EX3
1597   079B FE 61               CPI  'a'                        ;< 'a' ?
1598   079D DA A7 07            JC   EXN                        ;NO ALPHA CHAR
1599   07A0 FE 7B               CPI  'z'+1                      ;> 'z'
1600   07A2 D2 A7 07            JNC  EXN                        ;NO ALPHA CHAR
1601   07A5 E6 5F               ANI  5FH                        ;MASK LOWER CASE TO UPPER CASE
1602   07A7             EXN:
1603   07A7 23                  INX  H                          ;HL->TABLE
1604   07A8 BE                  CMP  M                          ;IF MATCH, TEST NEXT
1605   07A9 CA 94 07            JZ   EX1
1606   07AC 3E 7F               MVI  A,07FH                     ;ELSE SEE IF BIT 7
1607   07AE 1B                  DCX  D                          ;OF TABLE IS SET, WHICH
1608   07AF BE                  CMP  M                          ;IS THE JUMP ADDR. (HI)
1609   07B0 DA C4 07            JC   EX5                        ;C:YES, MATCHED
1610   07B3 23          EX2:    INX  H                          ;NC:NO, FIND JUMP ADDR.
1611   07B4 BE                  CMP  M
1612   07B5 D2 B3 07            JNC  EX2
1613   07B8 23                  INX  H                          ;BUMP TO NEXT TAB. ITEM
1614   07B9 D1                  POP  D                          ;RESTORE STRING POINTER
1615   07BA C3 92 07            JMP  EX0                        ;TEST AGAINST NEXT ITEM
1616   07BD 3E 7F       EX3:    MVI  A,07FH                     ;PARTIAL MATCH, FIND
1617   07BF 23          EX4:    INX  H                          ;JUMP ADDR., WHICH IS
1618   07C0 BE                  CMP  M                          ;FLAGGED BY BIT 7
1619   07C1 D2 BF 07            JNC  EX4
1620   07C4 7E          EX5:    MOV  A,M                        ;LOAD HL WITH THE JUMP
1621   07C5 23                  INX  H                          ;ADDRESS FROM THE TABLE
1622   07C6 6E                  MOV  L,M
1623   07C7             #IF $ < 8000H
1624   07C7 E6 7F               ANI  7FH                        ;MASK OFF HIGH ADDRESS BIT
1625   07C9             #ENDIF
1626   07C9 67                  MOV  H,A
1627   07CA F1                  POP  PSW                        ;CLEAN UP THE GABAGE
1628   07CB E9                  PCHL                            ;AND WE GO DO IT
1629   07CC             ;
1630   07CC             LSTROM:                                 ;ALL ABOVE CAN BE ROM
1631   07CC             
1632   07CC             ;       .ORG 1000H
1633   0800                     .ORG RAMBGN                     ;HERE DOWN MUST BE RAM
1634   0800             ;
1635   0800             OCSW:   .DS  1                          ;SWITCH FOR OUTPUT
1636   0801             PNBASE: .DS  1                          ;BASE FOR PRTNUM
1637   0802             CURRNT: .DS  2                          ;POINTS TO CURRENT LINE
1638   0804             STKGOS: .DS  2                          ;SAVES SP IN 'GOSUB'
1639   0806             VARNXT: .DS  2                          ;TEMP STORAGE
1640   0808             STKINP: .DS  2                          ;SAVES SP IN 'INPUT'
1641   080A             LOPVAR: .DS  2                          ;'FOR' LOOP SAVE AREA
1642   080C             LOPINC: .DS  2                          ;INCREMENT
1643   080E             LOPLMT: .DS  2                          ;LIMIT
1644   0810             LOPLN:  .DS  2                          ;LINE NUMBER
1645   0812             LOPPT:  .DS  2                          ;TEXT POINTER
1646   0814             RANPNT: .DS  2                          ;RANDOM NUMBER POINTER
1647   0816             TXTUNF: .DS  2                          ;->UNFILLED TEXT AREA
1648   0818             TXTBGN: .EQU $                          ;TEXT SAVE AREA BEGINS
1649   0818             
1650   0818             ;       .ORG 1366H
1651   0818             ;       .ORG 1F00H
1652   0818             ;       .ORG 0F00H                      ;for 2K RAM
1653   0F00                     .ORG RAMBGN + RAMSZE - $0100
1654   0F00             TXTEND: .EQU $                          ;TEXT SAVE AREA ENDS
1655   0F00             VARBGN: .DS  55                         ;VARIABLE '@(0)' FOLLOWED BY 'A'..'Z'
1656   0F37             BUFFER: .DS  64                         ;INPUT BUFFER
1657   0F77             BUFEND: .DS  1                          ;BUFFER ENDS
1658   0F78             STKLMT: .DS  1                          ;TOP LIMIT FOR STACK
1659   0F79             ;       .ORG 1400H
1660   0F79             ;       .ORG 2000H
1661   1000                     .ORG 1000H                      ;for 4K system -- 2k ROM, 2K RAM
1662   1000                     .ORG RAMBGN + RAMSZE
1663   1000             STACK:  .EQU $                          ;STACK STARTS HERE
1664   1000             ;
1665   1000                     .END
