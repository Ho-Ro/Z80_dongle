   1:			;Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
   2:			;Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
   3:			;Status bit for read in CHKIO changed to 0x02
   4:			;Status bit for write in OUTC (actually OC3) changed to 0x01
   5:			;Changed UART initialization parameters in INIT
   6:			;Changed ORG statements at end of file to match system with 2K RAM
   7:			;
   8:			;2024-10-11 Ho-Ro:
   9:			;Automatically converted from 8080 syntax to Z80 syntax:
  10:			;https://hc-ddr.hucki.net/wiki/doku.php/cpm/8080_z80
  11:			;Assembler: uz80as for Z80 as well as i8080 (uz80as --target=i8080)
  12:			;Modified for use with Z80 dongle simulator
  13:			;UART data port 1
  14:			;UART status port 2
  15:			;New:
  16:			;Case insensitive input
  17:			;PRINT modifier for hex out: PRINT %16,..
  18:			;Hex numbers: $xxxx
  19:			;2024-10-13 Ho-Ro:
  20:			;build ROM version (2K ROM / 6.5K RAM) and RAM version (2K prog RAM / 2K free RAM)
  21:			;add command "HALT" (halts Z80, returns to dongle analyser program)
  22:			;2024-10-15 Ho-Ro:
  23:			;PRINT modifier %nn switches to unsigned number format, e.g.:
  24:			;PRINT %10,$FFFF -> 65535
  25:			;2024-10-17 Ho-Ro:
  26:			;PUT ADDR, VAL, VAL, VAL,...
  27:			;constants RAM (TXTBGN), TOP (TXTEND) and SIZE (TXTEND-TXTUNF)
  28:			;function USR(para) that calls machine code at TOP (128 bytes free)
  29:			;with parameter in HL, returning the result in HL, default is RET at TOP
  30:			;Changed to the more authentic zmac syntax (https://github.com/gp48k/zmac)
  31:			;
  32:			;*************************************************************
  33:			;
  34:			;                 TINY BASIC FOR INTEL 8080
  35:			;                       VERSION 2.0
  36:			;                     BY LI-CHEN WANG
  37:			;                  MODIFIED AND TRANSLATED
  38:			;                    TO INTEL MNEMONICS
  39:			;                     BY ROGER RAUSKOLB
  40:			;                      10 OCTOBER,1976
  41:			;                        @COPYLEFT
  42:			;                   ALL WRONGS RESERVED
  43:			;
  44:			;*************************************************************
  45:			;
  46:			; *** ZERO PAGE SUBROUTINES ***
  47:			;
  48:			; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
  49:			; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
  50:			; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
  51:			; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
  52:			; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
  53:			; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
  54:			; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
  55:			; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
  56:			;
  57:			
  58:			                .Z80
  59:			
  60:			; Memory map
  61:	0000          	ROMBGN:         .EQU    $0000           ; Execution must start here
  62:	0800          	RAMBGN:         .EQU    $0800           ; 2K ROM
  63:			
  64:	0000          	.IFDEF           MAKE_ROM
  67:			.ELSE
  68:			; 2K CODE IN RAM & 2K DATA IN RAM AS TEST VERSION
  69:	0800          	RAMSZE:         .EQU    $0800
  70:			.ENDIF
  71:			
  72:			; IO map
  73:	0001          	IODATA:         .EQU    1
  74:	0002          	IOSTAT:         .EQU    2
  75:	0001          	IO_RX_BIT:      .EQU    $01
  76:			
  77:			; Control character
  78:	0008          	BS:             .EQU    $08             ; ^H, BACKSPACE
  79:	000D          	CR:             .EQU    $0D             ; ^M, CARRIAGE RETURN
  80:	000A          	LF:             .EQU    $0A             ; ^J, LINE FEED
  81:	0018          	CAN:            .EQU    $18             ; ^X, CANCEL
  82:	007F          	DEL:            .EQU    $7F             ; DELETE
  83:			
  84:			
  85:			; Store a label address as BIG endian with bit A15 set
  86:			
  87:			DWA             MACRO   LABEL
  88:			                .DB     (LABEL >> 8) | $80
  89:			                .DB     LABEL & $FF
  90:			                ENDM
  91:			
  92:			; if CHAR = A THEN JUMP RELATIVE TO LABEL
  93:			
  94:			TSTC            MACRO   CHAR,LABEL
  95:			                RST     RTSTC
  96:			                .DB     CHAR
  97:			                .DB     LABEL-$-1
  98:			                ENDM
  99:			
 100:			
 101:	0000          	                .ORG    ROMBGN
 102:			
 103:	0000  310009  	CSTART:         LD      SP,STACK ;*** COLD START ***
 104:	0003  3E00    	                LD      A,0     ;must be 2 byte
 105:	0005  C30901  	                JP      INIT    ;as delimiter for PRTSTG
 106:			
 107:			                ;*** RST 1 @ $0008 ***
 108:	0008  E3      	RTSTC:          EX      (SP),HL
 109:	0009  EF      	                RST     RIGNBLK ;IGNORE BLANKS AND
 110:	000A  BE      	                CP      (HL)    ;TEST CHARACTER
 111:	000B  C37000  	                JP      TC1     ;REST OF THIS IS AT TC1
 112:			
 113:	000E  3E0D    	CRLF:           LD      A,CR    ;*** CRLF ***
 114:			;
 115:			                ;*** RST 2 @ $0010 ***
 116:	0010  D301    	ROUTC:          OUT     (IODATA),A      ;Out to data port
 117:	0012  FE0D    	                CP      CR      ;WAS IT CR?
 118:	0014  C0      	                RET     NZ      ;NO, FINISHED
 119:	0015  C3F500  	                JP      OC1     ;REST OF THIS IS AT OC1
 120:			
 121:			                ;*** RST 3 @ $0018 ***
 122:	0018  CDE703  	REXPR:          CALL    EXPR2
 123:	001B  E5      	                PUSH    HL      ;EVALUATE AN EXPRESSION
 124:	001C  C3A303  	                JP      EXPR1   ;REST OF IT AT EXPR1
 125:	001F  57      	                .DB     "W"
 126:			
 127:			                ;*** RST 4 @ $0020 ***
 128:	0020  7C      	RCOMP:          LD      A,H
 129:	0021  BA      	                CP      D       ;COMPARE HL WITH DE
 130:	0022  C0      	                RET     NZ      ;RETURN CORRECT C AND
 131:	0023  7D      	                LD      A,L     ;Z FLAGS
 132:	0024  BB      	                CP      E       ;BUT OLD A IS LOST
 133:	0025  C9      	                RET
 134:	0026  414E    	                .DB     "AN"
 135:			
 136:			                ;*** RST 5 @ $0028 ***
 137:	0028  1A      	RIGNBLK:        LD      A,(DE)
 138:	0029  FE20    	                CP      20H     ;IGNORE BLANKS
 139:	002B  C0      	                RET     NZ      ;IN TEXT (WHERE DE->)
 140:	002C  13      	                INC     DE      ;AND RETURN THE FIRST
 141:	002D  C32800  	                JP      RIGNBLK  ;NON-BLANK CHAR. IN A
 142:			
 143:			                ;*** RST 6 @ $0030 ***
 144:	0030  F1      	RFINISH:        POP     AF
 145:	0031  CD4D05  	                CALL    FIN     ;CHECK END OF COMMAND
 146:	0034  C36005  	                JP      QWHAT   ;PRINT "WHAT?" IF WRONG
 147:	0037  47      	                .DB     "G"
 148:			
 149:			                ;*** RST 7 @ $0038 ***
 150:	0038  EF      	RTSTV:          RST     RIGNBLK ;IGNBLK
 151:	0039  D640    	                SUB     '@'     ;TEST VARIABLES
 152:	003B  D8      	                RET     C       ;C: < '@', NOT A VARIABLE
 153:	003C  C25A00  	                JP      NZ,TV1  ;NZ: NOT THE '@' ARRAY
 154:			;
 155:	003F  13      	                INC     DE      ;IT IS THE "@" ARRAY
 156:	0040  CD8804  	                CALL    PARN    ;@ SHOULD BE FOLLOWED
 157:	0043  29      	                ADD     HL,HL   ;BY (EXPR) AS ITS INDEX
 158:	0044  DAD000  	                JP      C,QHOW  ;IS INDEX TOO BIG (>0x7FFF)?
 159:	0047  23      	                INC     HL      ;ADD TWO BYTES
 160:	0048  23      	                INC     HL      ;FOR @(0)
 161:	0049  D5      	                PUSH    DE      ;WILL IT OVERWRITE
 162:	004A  EB      	                EX      DE,HL   ;TEXT?
 163:	004B  CDCA04  	                CALL    SIZE    ;FIND SIZE OF FREE RAM
 164:	004E  E7      	                RST     RCOMP   ;AND CHECK THAT
 165:	004F  DA8E05  	                JP      C,ASORRY  ;IF SO, SAY "SORRY"
 166:	0052  21000F  	                LD      HL,TXTEND ;IF NOT GET ADDRESS
 167:	0055  CD1A05  	                CALL    SUBDE   ;OF @(EXPR) AND PUT IT
 168:	0058  D1      	                POP     DE      ;IN HL (top-down from TXTEND)
 169:	0059  C9      	                RET             ;C FLAG IS CLEARED
 170:			;
 171:			                ; VARIABLES 'A'..'Z'
 172:	005A  FE21    	TV1:            CP      21H     ;>='a'?
 173:	005C  3802    	                JR      C,TV2   ;NO
 174:	005E  D620    	                SUB     20H     ;MAKE UPPER CASE
 175:	0060  FE1B    	TV2:            CP      1BH     ;<='Z'
 176:	0062  3F      	                CCF             ;IF NOT RETURN C FLAG
 177:	0063  D8      	                RET     C
 178:	0064  13      	                INC     DE      ;IT IS 'A'=1 THROUGH 'Z'=26
 179:	0065  21FE07  	                LD      HL,VARBGN-2       ;COMPUTE ADDRESS OF
 180:	0068  07      	                RLCA            ;THAT VARIABLE
 181:	0069  85      	                ADD     A,L     ;AND RETURN IT IN HL
 182:	006A  6F      	                LD      L,A     ;WITH C FLAG CLEARED
 183:	006B  3E00    	                LD      A,0
 184:	006D  8C      	                ADC     A,H
 185:	006E  67      	                LD      H,A
 186:	006F  C9      	                RET
 187:			
 188:			;TSTC:          EX      (SP),HL ;*** TSTC OR RST 1 ***
 189:			;               RST  RIGNBLK    ;THIS IS AT LOC. 8
 190:			;               CMP     (HL)    ;AND THEN JUMP HERE
 191:			;               JP      TC1     ;REST OF THIS IS AT TC1
 192:	0070  23      	TC1:            INC     HL      ;COMPARE THE BYTE THAT
 193:	0071  2807    	                JR      Z,TC2   ;FOLLOWS THE RST INST.
 194:	0073  C5      	                PUSH    BC      ;WITH THE TEXT (DE->)
 195:	0074  4E      	                LD      C,(HL)  ;IF NOT =, ADD THE 2ND
 196:	0075  0600    	                LD      B,0     ;BYTE THAT FOLLOWS THE
 197:	0077  09      	                ADD     HL,BC   ;RST TO THE OLD PC
 198:	0078  C1      	                POP     BC      ;I.E., DO A RELATIVE
 199:	0079  1B      	                DEC     DE      ;JUMP IF NOT =
 200:	007A  13      	TC2:            INC     DE      ;IF =, SKIP THOSE BYTES
 201:	007B  23      	                INC     HL      ;AND CONTINUE
 202:	007C  E3      	                EX      (SP),HL
 203:	007D  C9      	                RET
 204:			
 205:	007E  210000  	TSTNUM:         LD      HL,0    ;*** TSTNUM ***
 206:	0081  44      	                LD      B,H     ;TEST IF THE TEXT IS
 207:	0082  EF      	                RST     RIGNBLK ;A NUMBER
 208:	0083  FE24    	                CP      '$'     ;HEX NUMBER?
 209:	0085  2822    	                JR      Z,TX1   ;YES
 210:	0087  FE30    	TN1:            CP      '0'     ;IF NOT, RETURN 0 IN
 211:	0089  D8      	                RET     C       ;B AND HL
 212:	008A  FE3A    	                CP      '9'+1   ;IF NUMBERS, CONVERT
 213:	008C  D0      	                RET     NC      ;TO BINARY IN HL AND
 214:	008D  3EF0    	                LD      A,0F0H  ;SET B TO # OF DIGITS
 215:	008F  A4      	                AND     H       ;IF H>15, THERE IS NO
 216:	0090  203E    	                JR      NZ,QHOW ;ROOM FOR NEXT DIGIT
 217:	0092  04      	                INC     B       ;B COUNTS # OF DIGITS
 218:	0093  C5      	                PUSH    BC
 219:	0094  44      	                LD      B,H     ;HL=10*HL+(NEW DIGIT)
 220:	0095  4D      	                LD      C,L
 221:	0096  29      	                ADD     HL,HL   ; 2*HL
 222:	0097  29      	                ADD     HL,HL   ; 4*HL
 223:	0098  09      	                ADD     HL,BC   ; 5*HL
 224:	0099  29      	                ADD     HL,HL   ;10*HL
 225:	009A  1A      	                LD      A,(DE)  ;AND (DIGIT) IS FROM
 226:	009B  13      	                INC     DE      ;STRIPPING THE ASCII
 227:	009C  E60F    	                AND     0FH     ;CODE
 228:	009E  85      	                ADD     A,L
 229:	009F  6F      	                LD      L,A
 230:	00A0  3E00    	                LD      A,0
 231:	00A2  8C      	                ADC     A,H
 232:	00A3  67      	                LD      H,A
 233:	00A4  C1      	                POP     BC
 234:	00A5  1A      	                LD      A,(DE)  ;DO THIS DIGIT AFTER
 235:	00A6  F28700  	                JP      P,TN1   ;DIGIT. S SAYS OVERFLOW
 236:			;
 237:			                                ;OUTPUT HEX NUMBER
 238:	00A9  13      	TX1:            INC     DE      ;SKIP TO NEXT HEX
 239:	00AA  1A      	                LD      A,(DE)  ;GET HEX DIGIT
 240:	00AB  FE30    	                CP      '0'     ;< '0'
 241:	00AD  D8      	                RET     C       ;ERROR
 242:	00AE  FE3A    	                CP      '9'+1   ;<= '9'
 243:	00B0  380A    	                JR      C,TX2   ;OK '0'..'9'
 244:	00B2  FE41    	                CP      'A'     ;< 'A'
 245:	00B4  D8      	                RET     C       ;ERROR, >'9' && < 'A'
 246:	00B5  E65F    	                AND     5FH     ;CONVERT ALPHA TO UPPER
 247:	00B7  FE47    	                CP      'F'+1   ;> 'F'
 248:	00B9  D0      	                RET     NC      ;ERROR
 249:	00BA  D607    	                SUB     'A'-'0'-10      ;SKIP GAP '9' -> 'A'
 250:	00BC  E60F    	TX2:            AND     0FH     ;GET HEX CODE 0..F
 251:	00BE  C5      	                PUSH    BC
 252:	00BF  47      	                LD      B,A     ;SAVE HEX CODE
 253:	00C0  3EF0    	                LD      A,0F0H  ;IF H>15
 254:	00C2  A4      	                AND     H       ;THERE IS NO ROOM
 255:	00C3  78      	                LD      A,B
 256:	00C4  C1      	                POP     BC
 257:	00C5  2009    	                JR      NZ,QHOW ;FOR NEXT DIGIT
 258:			
 259:	00C7  04      	                INC     B       ;B COUNTS # OF DIGITS
 260:	00C8  29      	                ADD     HL,HL   ;2*HL
 261:	00C9  29      	                ADD     HL,HL   ;4*HL
 262:	00CA  29      	                ADD     HL,HL   ;8*HL
 263:	00CB  29      	                ADD     HL,HL   ;16*HL
 264:	00CC  B5      	                OR      L       ;PUT HEX CODE INTO
 265:	00CD  6F      	                LD      L,A     ;THE 4 LSB OF HL
 266:	00CE  18D9    	                JR      TX1     ;DIGIT AFTER DIGIT
 267:			
 268:	00D0  D5      	QHOW:           PUSH    DE      ;*** ERROR "HOW?" ***
 269:	00D1  11E100  	AHOW:           LD      DE,HOW
 270:	00D4  C36405  	                JP      ERROR
 271:			
 272:	00D7  54696E79	TIBAS:          .DB     "TinyBASIC"
	      42415349
	      43
 273:	00E0  0D      	                .DB     CR
 274:			
 275:	00E1  484F573F	HOW:            .DB     "HOW?"
 276:	00E5  0D      	                .DB     CR
 277:			
 278:	00E6  4F4B    	OK:             .DB     "OK"
 279:	00E8  0D      	                .DB     CR
 280:			
 281:	00E9  57484154	WHAT:           .DB     "WHAT?"
	      3F
 282:	00EE  0D      	                .DB     CR
 283:			
 284:	00EF  534F5252	SORRY:          .DB     "SORRY"
	      59
 285:	00F4  0D      	                .DB     CR
 286:			
 287:			;
 288:			;*************************************************************
 289:			;
 290:			; *** ROUTC *** CHKIO ***
 291:			;
 292:			; THESE ARE THE ONLY I/O ROUTINES IN TBI.
 293:			; OUTC WILL OUTPUT THE BYTE IN A.
 294:			; IF THAT IS A CR, A LF IS ALSO SEND OUT.
 295:			; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
 296:			; ALL REGISTERS ARE RESTORED.
 297:			;
 298:			; 'CHKIO' CHECKS THE INPUT.
 299:			; IF NO INPUT, IT WILL RETURN TO THE CALLER WITH THE Z FLAG SET.
 300:			; IF THERE IS INPUT, Z FLAG IS CLEARED AND THE INPUT BYTE IS IN A.
 301:			; IF A CONTROL-C IS READ, 'CHKIO' WILL RESTART TBI
 302:			; AND DO NOT RETURN TO THE CALLER.
 303:			;
 304:			
 305:			;THIS IS AT LOC. 10
 306:			;ROUTC:         OUT     (IODATA),A      ;Out to data port
 307:			;               CP      CR      ;WAS IT CR?
 308:			;               RET     NZ      ;NO, FINISHED
 309:			;               JP      OC1     ;REST OF THIS IS AT OC1
 310:			;
 311:	00F5  3E0A    	OC1:            LD      A,LF    ;YES, WE SEND LF TOO
 312:	00F7  D7      	                RST     ROUTC   ;THIS IS RECURSIVE
 313:	00F8  3E0D    	                LD      A,CR    ;GET CR BACK IN A
 314:	00FA  C9      	                RET
 315:			
 316:	00FB  DB02    	CHKIO:          IN      A,(IOSTAT)      ;*** CHKIO ***
 317:	00FD  E601    	                AND     IO_RX_BIT       ;MASK STATUS BIT
 318:	00FF  C8      	                RET     Z       ;NOT READY, RETURN "Z"
 319:	0100  DB01    	                IN      A,(IODATA)      ;READY, READ DATA
 320:	0102  E67F    	                AND     7FH     ;MASK BIT 7 OFF
 321:	0104  FE03    	CI0:            CP      03H     ;IS IT CONTROL-C?
 322:	0106  C0      	                RET     NZ      ;NO, RETURN "NZ"
 323:	0107  1823    	                JR      WSTART  ;YES, RESTART TBI
 324:			
 325:			;
 326:			;*************************************************************
 327:			;
 328:			
 329:			;
 330:			;*************************************************************
 331:			;
 332:			; *** INIT ***
 333:			;
 334:			; PUT IO INITIALISATION HERE, E.G. FOR THE SERIAL INTERFACE
 335:			;
 336:			; *** MAIN ***
 337:			;
 338:			; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
 339:			; AND STORES IT IN THE MEMORY.
 340:			;
 341:			; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
 342:			; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
 343:			; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
 344:			; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
 345:			; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
 346:			; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
 347:			; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
 348:			; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
 349:			; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
 350:			;
 351:			; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
 352:			; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
 353:			; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
 354:			; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
 355:			;
 356:			; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
 357:			; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
 358:			; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
 359:			; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
 360:			;
 361:			; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
 362:			; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
 363:			; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
 364:			; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
 365:			;
 366:			;
 367:			;THIS IS AT LOC. 0
 368:			;CSTART:        LD      SP,STACK    ;*** COLD START ***
 369:			;               XOR     A           ;
 370:			;               JP      INIT        ;
 371:			;
 372:	0109          	INIT:
 373:	0109  210008  	                LD      HL,RAMBGN   ;SOURCE
 374:	010C  77      	                LD      (HL),A      ;CLEAR MEM
 375:	010D  110108  	                LD      DE,RAMBGN+1 ;DESTINATION
 376:	0110  01FF07  	                LD      BC,RAMSZE-1 ;BYTE COUNT
 377:	0113  EDB0    	                LDIR                ;CLR COMPLETE MEMORY
 378:	0115  11D700  	                LD      DE,TIBAS    ;COLD START MESSAGE
 379:	0118  CDF705  	                CALL    PRTSTG
 380:	011B  3EC9    	                LD      A,$C9
 381:	011D  32000F  	                LD      (USRSPC),A  ;"RET" AT USR CODE SPACE
 382:	0120  210000  	                LD      HL,CSTART   ;INIT RANDOM POINTER
 383:	0123  224A08  	                LD      (RANPNT),HL
 384:	0126  210009  	                LD      HL,TXTBGN   ;UNFILLED TEXT
 385:	0129  223608  	                LD      (TXTUNF),HL
 386:			;
 387:	012C  310009  	WSTART:         LD      SP,STACK    ;*** WARM START ***
 388:	012F  CD0E00  	                CALL    CRLF        ;AND JUMP TO HERE
 389:	0132  11E600  	                LD      DE,OK       ;DE->STRING
 390:	0135  97      	                SUB     A           ;A=0
 391:	0136  CDF705  	                CALL    PRTSTG      ;PRINT STRING UNTIL CR
 392:	0139  214001  	                LD      HL,ST2+1    ;HACK ST2+1 -> 0000
 393:	013C  223808  	                LD      (CURRNT),HL ;CURRENT->LINE # = 0
 394:	013F  210000  	ST2:            LD      HL,0000     ;
 395:	0142  224008  	                LD      (LOPVAR),HL
 396:	0145  223A08  	                LD      (STKGOS),HL
 397:	0148          	ST3:            ;LD      A,'>'       ;PROMPT '>' AND
 398:	0148  AF      	                XOR     A           ;NO PROMPT LIKE MBASIC
 399:	0149  CD9305  	                CALL    GETLN       ;READ A LINE
 400:	014C  D5      	                PUSH    DE          ;DE->END OF LINE
 401:	014D  11800F  	                LD      DE,BUFFER   ;DE->BEGINNING OF LINE
 402:	0150  CD7E00  	                CALL    TSTNUM      ;TEST IF IT IS A NUMBER
 403:	0153  EF      	                RST     RIGNBLK
 404:	0154  7C      	                LD      A,H         ;HL=VALUE OF THE # OR
 405:	0155  B5      	                OR      L           ;0 IF NO # WAS FOUND
 406:	0156  C1      	                POP     BC          ;BC->END OF LINE
 407:	0157  CAFF06  	                JP      Z,DIRECT
 408:	015A  1B      	                DEC     DE          ;BACKUP DE AND SAVE
 409:	015B  7C      	                LD      A,H         ;VALUE OF LINE # THERE
 410:	015C  12      	                LD      (DE),A
 411:	015D  1B      	                DEC     DE
 412:	015E  7D      	                LD      A,L
 413:	015F  12      	                LD      (DE),A
 414:	0160  C5      	                PUSH    BC          ;BC,DE->BEGIN, END
 415:	0161  D5      	                PUSH    DE
 416:	0162  79      	                LD      A,C
 417:	0163  93      	                SUB     E
 418:	0164  F5      	                PUSH    AF          ;A=# OF BYTES IN LINE
 419:	0165  CDD205  	                CALL    FNDLN       ;FIND THIS LINE IN SAVE
 420:	0168  D5      	                PUSH    DE          ;AREA, DE->SAVE AREA
 421:	0169  2010    	                JR      NZ,ST4      ;NZ:NOT FOUND, INSERT
 422:	016B  D5      	                PUSH    DE          ;Z:FOUND, DELETE IT
 423:	016C  CDED05  	                CALL    FNDNXT      ;FIND NEXT LINE
 424:			                                    ;DE->NEXT LINE
 425:	016F  C1      	                POP     BC          ;BC->LINE TO BE DELETED
 426:	0170  2A3608  	                LD      HL,(TXTUNF) ;HL->UNFILLED SAVE AREA
 427:	0173  CDA706  	                CALL    MVUP        ;MOVE UP TO DELETE
 428:	0176  60      	                LD      H,B         ;TXTUNF->UNFILLED AREA
 429:	0177  69      	                LD      L,C
 430:	0178  223608  	                LD      (TXTUNF),HL ;UPDATE
 431:	017B  C1      	ST4:            POP     BC          ;GET READY TO INSERT
 432:	017C  2A3608  	                LD      HL,(TXTUNF) ;BUT FIRST CHECK IF
 433:	017F  F1      	                POP     AF          ;THE LENGTH OF NEW LINE
 434:	0180  E5      	                PUSH    HL          ;IS 3 (LINE # AND CR)
 435:	0181  FE03    	                CP      3           ;THEN DO NOT INSERT
 436:	0183  28A7    	                JR      Z,WSTART    ;MUST CLEAR THE STACK
 437:	0185  85      	                ADD     A,L         ;COMPUTE NEW TXTUNF
 438:	0186  6F      	                LD      L,A
 439:	0187  3E00    	                LD      A,0
 440:	0189  8C      	                ADC     A,H
 441:	018A  67      	                LD      H,A         ;HL->NEW UNFILLED AREA
 442:	018B  11000F  	                LD      DE,TXTEND   ;CHECK TO SEE IF THERE
 443:	018E  E7      	                RST     RCOMP       ;COMP HL,DE - IS ENOUGH SPACE
 444:	018F  D28D05  	                JP      NC,QSORRY   ;SORRY, NO ROOM FOR IT
 445:	0192  223608  	                LD      (TXTUNF),HL ;OK, UPDATE TXTUNF
 446:	0195  D1      	                POP     DE          ;DE->OLD UNFILLED AREA
 447:	0196  CDAF06  	                CALL    MVDOWN
 448:	0199  D1      	                POP     DE          ;DE->BEGIN, HL->END
 449:	019A  E1      	                POP     HL
 450:	019B  CDA706  	                CALL    MVUP        ;MOVE NEW LINE TO SAVE
 451:	019E  18A8    	                JR      ST3         ;AREA
 452:			
 453:			;*************************************************************
 454:			;
 455:			; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
 456:			; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
 457:			; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
 458:			; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
 459:			; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
 460:			;
 461:			; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'WSTART'
 462:			; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
 463:			; GO BACK TO 'WSTART'.
 464:			; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
 465:			; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
 466:			; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'WSTART', ELSE
 467:			; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
 468:			;*************************************************************
 469:			;
 470:			; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
 471:			;
 472:			; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
 473:			;
 474:			; 'STOP(CR)' GOES BACK TO 'WSTART'
 475:			;
 476:			; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
 477:			; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
 478:			; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
 479:			;
 480:			; THERE ARE 3 MORE ENTRIES IN 'RUN':
 481:			; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
 482:			; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
 483:			; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
 484:			;
 485:			; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
 486:			; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
 487:			;
 488:	01A0  CD5C05  	NEW:            CALL    ENDCHK  ;*** NEW(CR) ***
 489:	01A3  210009  	                LD      HL,TXTBGN
 490:	01A6  223608  	                LD      (TXTUNF),HL
 491:			;
 492:	01A9  CD5C05  	STOP:           CALL    ENDCHK  ;*** STOP(CR) ***
 493:	01AC  C32C01  	                JP      WSTART
 494:			
 495:	01AF  CD5C05  	RUN:            CALL    ENDCHK  ;*** RUN(CR) ***
 496:	01B2  110009  	                LD      DE,TXTBGN       ;FIRST SAVED LINE
 497:			;
 498:	01B5  210000  	RUNNXL:         LD      HL,0    ;*** RUNNXL ***
 499:	01B8  CDDA05  	                CALL    FNDLP   ;FIND WHATEVER LINE #
 500:	01BB  DA2C01  	                JP      C,WSTART ;C:PASSED TXTUNF, QUIT
 501:			;
 502:	01BE  EB      	RUNTSL:         EX      DE,HL   ;*** RUNTSL ***
 503:	01BF  223808  	                LD      (CURRNT),HL     ;SET 'CURRENT'->LINE #
 504:	01C2  EB      	                EX      DE,HL
 505:	01C3  13      	                INC     DE      ;BUMP PASS LINE #
 506:	01C4  13      	                INC     DE
 507:			;
 508:	01C5  CDFB00  	RUNSML:         CALL    CHKIO   ;*** RUNSML ***
 509:	01C8  214307  	                LD      HL,TAB2-1       ;FIND COMMAND IN TAB2
 510:	01CB  C30207  	                JP      EXEC    ;AND EXECUTE IT
 511:			
 512:	01CE  DF      	GOTO:           RST     REXPR   ;*** GOTO EXPR ***
 513:	01CF  D5      	                PUSH    DE      ;SAVE FOR ERROR ROUTINE
 514:	01D0  CD5C05  	                CALL    ENDCHK  ;MUST FIND A CR
 515:	01D3  CDD205  	                CALL    FNDLN   ;FIND THE TARGET LINE
 516:	01D6  C2D100  	                JP      NZ,AHOW ;NO SUCH LINE #
 517:	01D9  F1      	                POP     AF      ;CLEAR THE PUSH DE
 518:	01DA  18E2    	                JR      RUNTSL  ;GO DO IT
 519:			;
 520:			;*************************************************************
 521:			;
 522:			; *** LIST *** & PRINT ***
 523:			;
 524:			; LIST HAS TWO FORMS:
 525:			; 'LIST(CR)' LISTS ALL SAVED LINES
 526:			; 'LIST #(CR)' START LIST AT THIS LINE #
 527:			; YOU CAN STOP THE LISTING BY CONTROL C KEY
 528:			;
 529:			; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
 530:			; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
 531:			; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
 532:			;
 533:			; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
 534:			; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
 535:			; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
 536:			; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
 537:			; SPECIFIED, 8 POSITIONS WILL BE USED.
 538:			;
 539:			; NUMBER BASE IS SET BY PERCENT SIGN FOLLOEWED BY A NUMBER
 540:			; BETWEEN 2 and 16. VALUES ARE PRINTED AS UNSIGNED TO THIS BASE
 541:			; FOR THE REST OF THIS PRINT COMMAND UNLESS CHANGED BY
 542:			; ANOTHER BASE. IF NO BASE IS PROVIDED NUMBERS ARE SIGNED DECIMAL.
 543:			;
 544:			; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
 545:			; DOUBLE QUOTES.
 546:			;
 547:			; A BACK-ARROW (UNDERLINE) ALONE MEANS GENERATE A (CR) WITHOUT (LF).
 548:			;
 549:			; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
 550:			; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
 551:			; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
 552:			;
 553:	01DC  CD7E00  	LIST_:          CALL    TSTNUM  ;TEST IF THERE IS A #
 554:	01DF  CD5C05  	                CALL    ENDCHK  ;IF NO # WE GET A 0
 555:	01E2  CDD205  	                CALL    FNDLN   ;FIND THIS OR NEXT LINE
 556:	01E5  DA2C01  	LS1:            JP      C,WSTART ;C:PASSED TXTUNF
 557:	01E8  CD9006  	                CALL    PRTLN   ;PRINT THE LINE
 558:	01EB  CDFB00  	                CALL    CHKIO   ;STOP IF HIT CONTROL-C
 559:	01EE  CDDA05  	                CALL    FNDLP   ;FIND NEXT LINE
 560:	01F1  18F2    	                JR      LS1     ;AND LOOP BACK
 561:			
 562:	01F3  0E08    	PRINT:          LD      C,8     ;C = # OF SPACES
 563:	01F5  AF      	                XOR     A       ;DEFAULT BASE FOR PRTNUM
 564:	01F6  323508  	                LD      (PNBASE),A
 565:	01F9  CF3B06  	                TSTC     ';',PR2 ;IF NULL LIST & ";"
 566:	01FC  CD0E00  	                CALL    CRLF    ;GIVE CR-LF AND
 567:	01FF  C3C501  	                JP      RUNSML  ;CONTINUE SAME LINE
 568:	0202  CF0D06  	PR2:            TSTC     CR,PR0  ;IF NULL LIST (CR)
 569:	0205  CD0E00  	                CALL    CRLF    ;ALSO GIVE CR-LF AND
 570:	0208  C3B501  	                JP      RUNNXL  ;GO TO NEXT LINE
 571:	020B  CF2304  	PR0:            TSTC     '#',PR5 ;ELSE IS IT FORMAT?
 572:	020E  DF      	                RST     REXPR   ;YES, EVALUATE EXPR.
 573:	020F  4D      	                LD      C,L     ;AND SAVE IT IN C
 574:	0210  181A    	                JR      PR3     ;LOOK FOR MORE TO PRINT
 575:	0212  CF2511  	PR5:            TSTC     '%',PR1 ;ELSE IS IT PRTNUM BASE?
 576:	0215  DF      	                RST     REXPR   ;YES, EVALUATE EXPR.
 577:	0216  7D      	                LD      A,L     ;GET THE LOW PART
 578:	0217  FE01    	                CP      1       ;EITHER 0 OR >= 2?
 579:	0219  CAD000  	                JP      Z,QHOW  ;ERROR
 580:	021C  FE11    	                CP      17      ;BASE > 16?
 581:	021E  D2D000  	                JP      NC,QHOW ;ERROR
 582:	0221  323508  	                LD      (PNBASE),A      ;IN PNBASE
 583:	0224  1806    	                JR      PR3     ;LOOK FOR MORE TO PRINT
 584:	0226  CD0206  	PR1:            CALL    QTSTG   ;OR IS IT A STRING?
 585:	0229  C33C02  	                JP      PR8     ;HACK JP!! IF NOT, MUST BE EXPR.
 586:	022C  CF2C05  	PR3:            TSTC     $2C,PR6 ;IF ",", GO FIND NEXT
 587:	022F  CD4D05  	                CALL    FIN     ;IN THE LIST.
 588:	0232  18D7    	                JR      PR0     ;LIST CONTINUES
 589:	0234  AF      	PR6:            XOR     A       ;END OF LIST REACHED
 590:	0235  323508  	                LD      (PNBASE),A      ;RESET DEFAULT BASE
 591:	0238  CD0E00  	                CALL    CRLF    ;LIST ENDS WITH CRLF
 592:	023B  F7      	                RST     RFINISH ;FINISH
 593:	023C  DF      	PR8:            RST     REXPR   ;EVALUATE THE EXPR
 594:	023D  C5      	                PUSH    BC
 595:	023E  CD3006  	                CALL    PRTNUM  ;PRINT THE VALUE
 596:	0241  C1      	                POP     BC
 597:	0242  18E8    	                JR      PR3     ;MORE TO PRINT?
 598:			;
 599:			;*************************************************************
 600:			;
 601:			; *** GOSUB *** & RETURN ***
 602:			;
 603:			; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
 604:			; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
 605:			; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
 606:			; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
 607:			; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
 608:			; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
 609:			; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
 610:			; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
 611:			; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
 612:			;
 613:			; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
 614:			; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
 615:			; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
 616:			; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
 617:			;
 618:	0244  CDD706  	GOSUB:          CALL    PUSHA   ;SAVE THE CURRENT "FOR"
 619:	0247  DF      	                RST     REXPR   ;PARAMETERS
 620:	0248  D5      	                PUSH    DE      ;AND TEXT POINTER
 621:	0249  CDD205  	                CALL    FNDLN   ;FIND THE TARGET LINE
 622:	024C  C2D100  	                JP      NZ,AHOW ;NOT THERE. SAY "HOW?"
 623:	024F  2A3808  	                LD      HL,(CURRNT)     ;FOUND IT, SAVE OLD
 624:	0252  E5      	                PUSH    HL      ;'CURRNT' OLD 'STKGOS'
 625:	0253  2A3A08  	                LD      HL,(STKGOS)
 626:	0256  E5      	                PUSH    HL
 627:	0257  210000  	                LD      HL,0    ;AND LOAD NEW ONES
 628:	025A  224008  	                LD      (LOPVAR),HL
 629:	025D  39      	                ADD     HL,SP
 630:	025E  223A08  	                LD      (STKGOS),HL
 631:	0261  C3BE01  	                JP      RUNTSL  ;THEN RUN THAT LINE
 632:			;
 633:	0264  CD5C05  	RETURN:         CALL    ENDCHK  ;THERE MUST BE A CR
 634:	0267  2A3A08  	                LD      HL,(STKGOS)     ;OLD STACK POINTER
 635:	026A  7C      	                LD      A,H     ;0 MEANS NOT EXIST
 636:	026B  B5      	                OR      L
 637:	026C  CA6005  	                JP      Z,QWHAT ;SO, WE SAY: "WHAT?"
 638:	026F  F9      	                LD      SP,HL   ;ELSE, RESTORE IT
 639:	0270  E1      	                POP     HL
 640:	0271  223A08  	                LD      (STKGOS),HL     ;AND THE OLD 'STKGOS'
 641:	0274  E1      	                POP     HL
 642:	0275  223808  	                LD      (CURRNT),HL     ;AND THE OLD 'CURRNT'
 643:	0278  D1      	                POP     DE      ;OLD TEXT POINTER
 644:	0279  CDBC06  	                CALL    POPA    ;OLD "FOR" PARAMETERS
 645:	027C  F7      	                RST     RFINISH ;AND WE ARE BACK HOME
 646:			;
 647:			;*************************************************************
 648:			;
 649:			; *** FOR *** & NEXT ***
 650:			;
 651:			; 'FOR' HAS TWO FORMS:
 652:			; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
 653:			; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
 654:			; EXP3=1.  (I.E., WITH A STEP OF +1.)
 655:			; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
 656:			; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
 657:			; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
 658:			; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
 659:			; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
 660:			; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
 661:			; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
 662:			; BEFORE THE NEW ONE OVERWRITES IT.
 663:			; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
 664:			; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
 665:			; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
 666:			; (PURGED FROM THE STACK..)
 667:			;
 668:			; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
 669:			; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
 670:			; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
 671:			; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
 672:			; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
 673:			; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
 674:			; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
 675:			; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
 676:			; IS PURGED AND EXECUTION CONTINUES.
 677:			;
 678:	027D  CDD706  	FOR:            CALL    PUSHA           ;SAVE THE OLD SAVE AREA
 679:	0280  CD3E05  	                CALL    SETVAL          ;SET THE CONTROL VAR.
 680:	0283  2B      	                DEC     HL              ;HL IS ITS ADDRESS
 681:	0284  224008  	                LD      (LOPVAR),HL     ;SAVE THAT
 682:	0287  21C007  	                LD      HL,TAB5-1       ;USE 'EXEC' TO LOOK
 683:	028A  C30207  	                JP      EXEC            ;FOR THE WORD 'TO'
 684:	028D  DF      	FR1:            RST     REXPR           ;EVALUATE THE LIMIT
 685:	028E  224408  	                LD      (LOPLMT),HL     ;SAVE THAT
 686:	0291  21C607  	                LD      HL,TAB6-1       ;USE 'EXEC' TO LOOK
 687:	0294  C30207  	                JP      EXEC            ;FOR THE WORD 'STEP'
 688:	0297  DF      	FR2:            RST     REXPR           ;FOUND IT, GET STEP
 689:	0298  1803    	                JR      FR4
 690:	029A  210100  	FR3:            LD      HL,1H           ;NOT FOUND, SET TO 1
 691:	029D  224208  	FR4:            LD      (LOPINC),HL     ;SAVE THAT TOO
 692:	02A0  2A3808  	FR5:            LD      HL,(CURRNT)     ;SAVE CURRENT LINE #
 693:	02A3  224608  	                LD      (LOPLN),HL
 694:	02A6  EB      	                EX      DE,HL           ;AND TEXT POINTER
 695:	02A7  224808  	                LD      (LOPPT),HL
 696:	02AA  010A00  	                LD      BC,0AH          ;DIG INTO STACK TO
 697:	02AD  2A4008  	                LD      HL,(LOPVAR)     ;FIND 'LOPVAR'
 698:	02B0  EB      	                EX      DE,HL
 699:	02B1  60      	                LD      H,B
 700:	02B2  68      	                LD      L,B             ;HL=0 NOW
 701:	02B3  39      	                ADD     HL,SP           ;HERE IS THE STACK
 702:	02B4  3E      	                .DB     3EH             ;HACK SKIP "ADD HL,BC"
 703:	02B5  09      	FR7:            ADD     HL,BC           ;EACH LEVEL IS 10 DEEP
 704:	02B6  7E      	                LD      A,(HL)          ;GET THAT OLD 'LOPVAR'
 705:	02B7  23      	                INC     HL
 706:	02B8  B6      	                OR      (HL)
 707:	02B9  2818    	                JR      Z,FR8           ;0 SAYS NO MORE IN IT
 708:	02BB  7E      	                LD      A,(HL)
 709:	02BC  2B      	                DEC     HL
 710:	02BD  BA      	                CP      D               ;SAME AS THIS ONE?
 711:	02BE  20F5    	                JR      NZ,FR7
 712:	02C0  7E      	                LD      A,(HL)          ;THE OTHER HALF?
 713:	02C1  BB      	                CP      E
 714:	02C2  20F1    	                JR      NZ,FR7
 715:	02C4  EB      	                EX      DE,HL           ;YES, FOUND ONE
 716:	02C5  210000  	                LD      HL,0H
 717:	02C8  39      	                ADD     HL,SP           ;TRY TO MOVE SP
 718:	02C9  44      	                LD      B,H
 719:	02CA  4D      	                LD      C,L
 720:	02CB  210A00  	                LD      HL,0AH
 721:	02CE  19      	                ADD     HL,DE
 722:	02CF  CDAF06  	                CALL    MVDOWN          ;AND PURGE 10 WORDS
 723:	02D2  F9      	                LD      SP,HL           ;IN THE STACK
 724:	02D3  2A4808  	FR8:            LD      HL,(LOPPT)      ;JOB DONE, RESTORE DE
 725:	02D6  EB      	                EX      DE,HL
 726:	02D7  F7      	                RST     RFINISH         ;AND CONTINUE
 727:			;
 728:	02D8  FF      	NEXT:           RST     RTSTV           ;GET ADDRESS OF VAR.
 729:	02D9  DA6005  	                JP      C,QWHAT         ;NO VARIABLE, "WHAT?"
 730:	02DC  223C08  	                LD      (VARNXT),HL     ;YES, SAVE IT
 731:	02DF  D5      	NX0:            PUSH    DE              ;SAVE TEXT POINTER
 732:	02E0  EB      	                EX      DE,HL
 733:	02E1  2A4008  	                LD      HL,(LOPVAR)     ;GET VAR. IN 'FOR'
 734:	02E4  7C      	                LD      A,H
 735:	02E5  B5      	                OR      L               ;0 SAYS NEVER HAD ONE
 736:	02E6  CA6105  	                JP      Z,AWHAT         ;SO WE ASK: "WHAT?"
 737:	02E9  E7      	                RST     RCOMP           ;ELSE WE CHECK THEM
 738:	02EA  2809    	                JR      Z,NX3           ;OK, THEY AGREE
 739:	02EC  D1      	                POP     DE              ;NO, LET'S SEE
 740:	02ED  CDBC06  	                CALL    POPA            ;PURGE CURRENT LOOP
 741:	02F0  2A3C08  	                LD      HL,(VARNXT)     ;AND POP ONE LEVEL
 742:	02F3  18EA    	                JR      NX0             ;GO CHECK AGAIN
 743:	02F5  5E      	NX3:            LD      E,(HL)          ;COME HERE WHEN AGREED
 744:	02F6  23      	                INC     HL
 745:	02F7  56      	                LD      D,(HL)          ;DE=VALUE OF VAR.
 746:	02F8  2A4208  	                LD      HL,(LOPINC)
 747:	02FB  E5      	                PUSH    HL
 748:	02FC  7C      	                LD      A,H
 749:	02FD  AA      	                XOR     D
 750:	02FE  7A      	                LD      A,D
 751:	02FF  19      	                ADD     HL,DE           ;ADD ONE STEP
 752:	0300  FA0703  	                JP      M,NX4
 753:	0303  AC      	                XOR     H
 754:	0304  FA2803  	                JP      M,NX5
 755:	0307  EB      	NX4:            EX      DE,HL
 756:	0308  2A4008  	                LD      HL,(LOPVAR)     ;PUT IT BACK
 757:	030B  73      	                LD      (HL),E
 758:	030C  23      	                INC     HL
 759:	030D  72      	                LD      (HL),D
 760:	030E  2A4408  	                LD      HL,(LOPLMT)     ;HL->LIMIT
 761:	0311  F1      	                POP     AF              ;OLD HL
 762:	0312  B7      	                OR      A
 763:	0313  F21703  	                JP      P,NX1           ;STEP > 0
 764:	0316  EB      	                EX      DE,HL           ;STEP < 0
 765:	0317  CD3605  	NX1:            CALL    CKHLDE          ;COMPARE WITH LIMIT
 766:	031A  D1      	                POP     DE              ;RESTORE TEXT POINTER
 767:	031B  380D    	                JR      C,NX2           ;OUTSIDE LIMIT
 768:	031D  2A4608  	                LD      HL,(LOPLN)      ;WITHIN LIMIT, GO
 769:	0320  223808  	                LD      (CURRNT),HL     ;BACK TO THE SAVED
 770:	0323  2A4808  	                LD      HL,(LOPPT)      ;'CURRNT' AND TEXT
 771:	0326  EB      	                EX      DE,HL           ;POINTER
 772:	0327  F7      	                RST     RFINISH
 773:	0328  E1      	NX5:            POP     HL
 774:	0329  D1      	                POP     DE
 775:	032A  CDBC06  	NX2:            CALL    POPA            ;PURGE THIS LOOP
 776:	032D  F7      	                RST     RFINISH
 777:			;
 778:			;*************************************************************
 779:			;
 780:			; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
 781:			;
 782:			; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
 783:			; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
 784:			;
 785:			; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
 786:			; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
 787:			; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
 788:			; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
 789:			; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
 790:			; EXECUTION CONTINUES AT THE NEXT LINE.
 791:			;
 792:			; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
 793:			; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
 794:			; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
 795:			; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
 796:			; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
 797:			; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
 798:			; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
 799:			; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
 800:			; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
 801:			; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
 802:			;
 803:			; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
 804:			; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
 805:			; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
 806:			; THIS IS HANDLED IN 'INPERR'.
 807:			;
 808:			; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
 809:			; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
 810:			; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
 811:			; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
 812:			; THIS IS DONE BY 'DEFLT'.
 813:			;
 814:	032E  210000  	REM:            LD      HL,0H   ;*** REM ***
 815:	0331  3E      	                .DB     3EH             ;SKIP RST, THIS IS LIKE 'IF 0'
 816:			;
 817:	0332  DF      	IF_:            RST     REXPR   ;*** IF ***
 818:	0333  7C      	                LD      A,H     ;IS THE EXPR.=0?
 819:	0334  B5      	                OR      L
 820:	0335  C2C501  	                JP      NZ,RUNSML       ;NO, CONTINUE
 821:	0338  CDEF05  	                CALL    FNDSKP  ;YES, SKIP REST OF LINE
 822:	033B  D2BE01  	                JP      NC,RUNTSL       ;AND RUN THE NEXT LINE
 823:	033E  C32C01  	                JP      WSTART  ;IF NO NEXT, RE-START
 824:			;
 825:	0341  2A3E08  	INPERR:         LD      HL,(STKINP)     ;*** INPERR ***
 826:	0344  F9      	                LD      SP,HL   ;RESTORE OLD SP
 827:	0345  E1      	                POP     HL      ;AND OLD 'CURRNT'
 828:	0346  223808  	                LD      (CURRNT),HL
 829:	0349  D1      	                POP     DE      ;AND OLD TEXT POINTER
 830:	034A  D1      	                POP     DE      ;REDO INPUT
 831:			;
 832:	034B          	INPUT:          ;*** INPUT ***
 833:	034B  D5      	IP1:            PUSH    DE      ;SAVE IN CASE OF ERROR
 834:	034C  CD0206  	                CALL    QTSTG   ;IS NEXT ITEM A STRING?
 835:	034F  C35703  	                JP      IP2     ;HACK JP!! NO
 836:	0352  FF      	                RST     RTSTV   ;YES, BUT FOLLOWED BY A
 837:	0353  3839    	                JR      C,IP4   ;VARIABLE?   NO.
 838:	0355  1810    	                JR      IP3     ;YES.  INPUT VARIABLE
 839:	0357  D5      	IP2:            PUSH    DE      ;SAVE FOR 'PRTSTG'
 840:	0358  FF      	                RST     RTSTV   ;MUST BE VARIABLE NOW
 841:	0359  DA6005  	                JP      C,QWHAT ;"WHAT?" IT IS NOT?
 842:	035C  1A      	                LD      A,(DE)  ;GET READY FOR 'PRTSTG'
 843:	035D  4F      	                LD      C,A
 844:	035E  97      	                SUB     A
 845:	035F  12      	                LD      (DE),A
 846:	0360  D1      	                POP     DE
 847:	0361  CDF705  	                CALL    PRTSTG  ;PRINT STRING AS PROMPT
 848:	0364  79      	                LD      A,C     ;RESTORE TEXT
 849:	0365  1B      	                DEC     DE
 850:	0366  12      	                LD      (DE),A
 851:	0367  D5      	IP3:            PUSH    DE      ;SAVE TEXT POINTER
 852:	0368  EB      	                EX      DE,HL
 853:	0369  2A3808  	                LD      HL,(CURRNT)     ;ALSO SAVE 'CURRNT'
 854:	036C  E5      	                PUSH    HL
 855:	036D  214B03  	                LD      HL,IP1  ;A NEGATIVE NUMBER
 856:	0370  223808  	                LD      (CURRNT),HL     ;AS A FLAG
 857:	0373  210000  	                LD      HL,0H   ;SAVE SP TOO
 858:	0376  39      	                ADD     HL,SP
 859:	0377  223E08  	                LD      (STKINP),HL
 860:	037A  D5      	                PUSH    DE      ;OLD HL
 861:	037B  3E3A    	                LD      A,':'   ;PRINT THIS TOO
 862:	037D  CD9305  	                CALL    GETLN   ;AND GET A LINE
 863:	0380  11800F  	                LD      DE,BUFFER       ;POINTS TO BUFFER
 864:	0383  DF      	                RST     REXPR   ;EVALUATE INPUT
 865:			                ;NOP            ;??? CAN BE 'CALL ENDCHK'
 866:			                ;NOP
 867:			                ;NOP
 868:	0384  D1      	                POP     DE      ;OK, GET OLD HL
 869:	0385  EB      	                EX      DE,HL
 870:	0386  73      	                LD      (HL),E  ;SAVE VALUE IN VAR.
 871:	0387  23      	                INC     HL
 872:	0388  72      	                LD      (HL),D
 873:	0389  E1      	                POP     HL      ;GET OLD 'CURRNT'
 874:	038A  223808  	                LD      (CURRNT),HL
 875:	038D  D1      	                POP     DE      ;AND OLD TEXT POINTER
 876:	038E  F1      	IP4:            POP     AF      ;PURGE JUNK IN STACK
 877:	038F  CF2C02  	                TSTC     $2C,IP5 ;IS NEXT CH. ','?
 878:	0392  18B7    	                JR      IP1     ;YES, MORE ITEMS.
 879:	0394  F7      	IP5:            RST     RFINISH
 880:			;
 881:	0395  1A      	DEFLT:          LD      A,(DE)  ;***  DEFLT ***
 882:	0396  FE0D    	                CP      CR      ;EMPTY LINE IS OK
 883:	0398  2808    	                JR      Z,LT1   ;ELSE IT IS 'LET'
 884:			;
 885:	039A  CD3E05  	LET:            CALL    SETVAL  ;*** LET ***
 886:	039D  CF2C02  	                TSTC    $2C,LT1  ;SET VALUE TO VAR.
 887:	03A0  18F8    	                JR      LET     ;ITEM BY ITEM
 888:	03A2  F7      	LT1:            RST     RFINISH ;UNTIL FINISH
 889:			;
 890:			;*************************************************************
 891:			;
 892:			; *** EXPR ***
 893:			;
 894:			; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
 895:			; <EXPR>::<EXPR2>
 896:			;         <EXPR2><REL.OP.><EXPR2>
 897:			; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
 898:			; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
 899:			; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
 900:			; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
 901:			; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
 902:			; <EXPR4>::=<VARIABLE>
 903:			;           <FUNCTION>
 904:			;           (<EXPR>)
 905:			; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
 906:			; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
 907:			; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
 908:			;
 909:			;EXPR:          CALL    EXPR2   ;THIS IS AT LOC. 18
 910:			;               PUSH    HL      ;SAVE <EXPR2> VALUE
 911:			;               JP      EXPR1   ;REST OF IT AT EXPR1
 912:	03A3  21CE07  	EXPR1:          LD      HL,TAB8-1       ;LOOKUP REL.OP.
 913:	03A6  C30207  	                JP      EXEC    ;GO DO IT
 914:			;
 915:	03A9  CDD203  	XP11:           CALL    XP18    ;REL.OP.">="
 916:	03AC  D8      	                RET     C       ;NO, RETURN HL=0
 917:	03AD  6F      	                LD      L,A     ;YES, RETURN HL=1
 918:	03AE  C9      	                RET
 919:			;
 920:	03AF  CDD203  	XP12:           CALL    XP18    ;REL.OP."#" OR "!="
 921:	03B2  C8      	                RET     Z       ;FALSE, RETURN HL=0
 922:	03B3  6F      	                LD      L,A     ;TRUE, RETURN HL=1
 923:	03B4  C9      	                RET
 924:			;
 925:	03B5  CDD203  	XP13:           CALL    XP18    ;REL.OP.">"
 926:	03B8  C8      	                RET     Z       ;FALSE
 927:	03B9  D8      	                RET     C       ;ALSO FALSE, HL=0
 928:	03BA  6F      	                LD      L,A     ;TRUE, HL=1
 929:	03BB  C9      	                RET
 930:			;
 931:	03BC  CDD203  	XP14:           CALL    XP18    ;REL.OP."<="
 932:	03BF  6F      	                LD      L,A     ;SET HL=1
 933:	03C0  C8      	                RET     Z       ;REL. TRUE, RETURN
 934:	03C1  D8      	                RET     C
 935:	03C2  6C      	                LD      L,H     ;ELSE SET HL=0
 936:	03C3  C9      	                RET
 937:			;
 938:	03C4  CDD203  	XP15:           CALL    XP18    ;REL.OP."=" OR "=="
 939:	03C7  C0      	                RET     NZ      ;FALSE, RETURN HL=0
 940:	03C8  6F      	                LD      L,A     ;ELSE SET HL=1
 941:	03C9  C9      	                RET
 942:			;
 943:	03CA  CDD203  	XP16:           CALL    XP18    ;REL.OP."<"
 944:	03CD  D0      	                RET     NC      ;FALSE, RETURN HL=0
 945:	03CE  6F      	                LD      L,A     ;ELSE SET HL=1
 946:	03CF  C9      	                RET
 947:			;
 948:	03D0  E1      	XP17:           POP     HL      ;NOT .REL.OP
 949:	03D1  C9      	                RET             ;RETURN HL=<EXPR2>
 950:			;
 951:	03D2  79      	XP18:           LD      A,C     ;SUBROUTINE FOR ALL
 952:	03D3  E1      	                POP     HL      ;REL.OP.'S
 953:	03D4  C1      	                POP     BC
 954:	03D5  E5      	                PUSH    HL      ;REVERSE TOP OF STACK
 955:	03D6  C5      	                PUSH    BC
 956:	03D7  4F      	                LD      C,A
 957:	03D8  CDE703  	                CALL    EXPR2   ;GET 2ND <EXPR2>
 958:	03DB  EB      	                EX      DE,HL   ;VALUE IN DE NOW
 959:	03DC  E3      	                EX      (SP),HL ;1ST <EXPR2> IN HL
 960:	03DD  CD3605  	                CALL    CKHLDE  ;COMPARE 1ST WITH 2ND
 961:	03E0  D1      	                POP     DE      ;RESTORE TEXT POINTER
 962:	03E1  210000  	                LD      HL,0H   ;SET HL=0, A=1
 963:	03E4  3E01    	                LD      A,1
 964:	03E6  C9      	                RET
 965:			;
 966:	03E7  CF2D05  	EXPR2:          TSTC    '-',XP21 ;NEGATIVE SIGN?
 967:	03EA  210000  	                LD      HL,0H   ;YES, FAKE '0-'
 968:	03ED  1821    	                JR      XP26    ;TREAT LIKE SUBTRACT
 969:			;
 970:	03EF  CF2B00  	XP21:           TSTC    '+',XP22 ;POSITIVE SIGN? IGNORE
 971:	03F2  CD1904  	XP22:           CALL    EXPR3   ;1ST <EXPR3>
 972:	03F5  CF2B15  	XP23:           TSTC    '+',XP25 ;ADD?
 973:	03F8  E5      	                PUSH    HL      ;YES, SAVE VALUE
 974:	03F9  CD1904  	                CALL    EXPR3   ;GET 2ND <EXPR3>
 975:	03FC  EB      	XP24:           EX      DE,HL   ;2ND IN DE
 976:	03FD  E3      	                EX      (SP),HL ;1ST IN HL
 977:	03FE  7C      	                LD      A,H     ;COMPARE SIGN
 978:	03FF  AA      	                XOR     D
 979:	0400  7A      	                LD      A,D
 980:	0401  19      	                ADD     HL,DE
 981:	0402  D1      	                POP     DE      ;RESTORE TEXT POINTER
 982:	0403  FAF503  	                JP      M,XP23  ;1ST AND 2ND SIGN DIFFER
 983:	0406  AC      	                XOR     H       ;1ST AND 2ND SIGN EQUAL
 984:	0407  F2F503  	                JP      P,XP23  ;SO IS RESULT
 985:			;
 986:	040A  C3D000  	                JP      QHOW    ;ELSE WE HAVE OVERFLOW
 987:			;
 988:	040D  CF2D7F  	XP25:           TSTC    '-',XP42 ;SUBTRACT?
 989:	0410  E5      	XP26:           PUSH    HL      ;YES, SAVE 1ST <EXPR3>
 990:	0411  CD1904  	                CALL    EXPR3   ;GET 2ND <EXPR3>
 991:	0414  CD2105  	                CALL    CHGSGN  ;NEGATE
 992:	0417  18E3    	                JR      XP24    ;AND ADD THEM
 993:			;
 994:	0419  CD7404  	EXPR3:          CALL    EXPR4   ;GET 1ST <EXPR4>
 995:	041C  CF2A29  	XP31:           TSTC    '*',XP34 ;MULTIPLY?
 996:	041F  E5      	                PUSH    HL      ;YES, SAVE 1ST
 997:	0420  CD7404  	                CALL    EXPR4   ;AND GET 2ND <EXPR4>
 998:	0423  0600    	                LD      B,0H    ;CLEAR B FOR SIGN
 999:	0425  CD1E05  	                CALL    CHKSGN  ;CHECK SIGN
1000:	0428  E3      	                EX      (SP),HL ;1ST IN HL
1001:	0429  CD1E05  	                CALL    CHKSGN  ;CHECK SIGN OF 1ST
1002:	042C  EB      	                EX      DE,HL
1003:	042D  E3      	                EX      (SP),HL
1004:	042E  7C      	                LD      A,H     ;IS HL > 255 ?
1005:	042F  B7      	                OR      A
1006:	0430  2806    	                JR      Z,XP32  ;NO
1007:	0432  7A      	                LD      A,D     ;YES, HOW ABOUT DE
1008:	0433  B2      	                OR      D
1009:	0434  EB      	                EX      DE,HL   ;PUT SMALLER IN HL
1010:	0435  C2D100  	                JP      NZ,AHOW ;ALSO >, WILL OVERFLOW
1011:	0438  7D      	XP32:           LD      A,L     ;THIS IS DUMB
1012:	0439  210000  	                LD      HL,0H   ;CLEAR RESULT
1013:	043C  B7      	                OR      A       ;ADD AND COUNT
1014:	043D  2828    	                JR      Z,XP35
1015:	043F  19      	XP33:           ADD     HL,DE
1016:	0440  DAD100  	                JP      C,AHOW  ;OVERFLOW
1017:	0443  3D      	                DEC     A
1018:	0444  20F9    	                JR      NZ,XP33
1019:	0446  181F    	                JR      XP35    ;FINISHED
1020:			;
1021:	0448  CF2F44  	XP34:           TSTC    '/',XP42 ;DIVIDE?
1022:	044B  E5      	                PUSH    HL      ;YES, SAVE 1ST <EXPR4>
1023:	044C  CD7404  	                CALL    EXPR4   ;AND GET THE SECOND ONE
1024:	044F  0600    	                LD      B,0H    ;CLEAR B FOR SIGN
1025:	0451  CD1E05  	                CALL    CHKSGN  ;CHECK SIGN OF 2ND
1026:	0454  E3      	                EX      (SP),HL ;GET 1ST IN HL
1027:	0455  CD1E05  	                CALL    CHKSGN  ;CHECK SIGN OF 1ST
1028:	0458  EB      	                EX      DE,HL
1029:	0459  E3      	                EX      (SP),HL
1030:	045A  EB      	                EX      DE,HL
1031:	045B  7A      	                LD      A,D     ;DIVIDE BY 0?
1032:	045C  B3      	                OR      E
1033:	045D  CAD100  	                JP      Z,AHOW  ;SAY "HOW?"
1034:	0460  C5      	                PUSH    BC      ;ELSE SAVE SIGN
1035:	0461  CD0505  	                CALL    DIVIDE  ;USE SUBROUTINE
1036:	0464  60      	                LD      H,B     ;RESULT IN HL NOW
1037:	0465  69      	                LD      L,C
1038:	0466  C1      	                POP     BC      ;GET SIGN BACK
1039:	0467  D1      	XP35:           POP     DE      ;AND TEXT POINTER
1040:	0468  7C      	                LD      A,H     ;HL MUST BE +
1041:	0469  B7      	                OR      A
1042:	046A  FAD000  	                JP      M,QHOW  ;ELSE IT IS OVERFLOW
1043:	046D  78      	                LD      A,B
1044:	046E  B7      	                OR      A
1045:	046F  FC2105  	                CALL    M,CHGSGN        ;CHANGE SIGN IF NEEDED
1046:	0472  18A8    	                JR      XP31    ;LOOK FOR MORE TERMS
1047:			;
1048:	0474  219507  	EXPR4:          LD      HL,TAB4-1       ;FIND FUNCTION IN TAB4
1049:	0477  C30207  	                JP      EXEC    ;AND GO DO IT
1050:			;
1051:	047A  FF      	XP40:           RST     RTSTV   ;NO, NOT A FUNCTION
1052:	047B  3805    	                JR      C,XP41  ;NOR A VARIABLE
1053:	047D  7E      	                LD      A,(HL)  ;VARIABLE
1054:	047E  23      	                INC     HL
1055:	047F  66      	                LD      H,(HL)  ;VALUE IN HL
1056:	0480  6F      	                LD      L,A
1057:	0481  C9      	                RET
1058:			;
1059:	0482  CD7E00  	XP41:           CALL    TSTNUM  ;OR IS IT A NUMBER
1060:	0485  78      	                LD      A,B     ;# OF DIGIT
1061:	0486  B7      	                OR      A
1062:	0487  C0      	                RET     NZ      ;OK
1063:	0488  CF2805  	PARN:           TSTC    $28,XP43 ; '('
1064:	048B  DF      	                RST     REXPR   ;"(EXPR)"
1065:	048C  CF2901  	                TSTC    $29,XP43 ; ')'
1066:	048F  C9      	XP42:           RET
1067:	0490  C36005  	XP43:           JP      QWHAT   ;ELSE SAY: "WHAT?"
1068:			
1069:	0493  CD8804  	RND:            CALL    PARN    ;*** RND(EXPR) ***
1070:	0496  7C      	                LD      A,H     ;EXPR MUST BE +
1071:	0497  B7      	                OR      A
1072:	0498  FAD000  	                JP      M,QHOW
1073:	049B  B5      	                OR      L       ;AND NON-ZERO
1074:	049C  CAD000  	                JP      Z,QHOW
1075:	049F  D5      	                PUSH    DE      ;SAVE BOTH
1076:	04A0  E5      	                PUSH    HL
1077:	04A1  2A4A08  	                LD      HL,(RANPNT)     ;GET MEMORY AS RANDOM
1078:	04A4  11ED07  	                LD      DE,LSTROM       ;NUMBER
1079:	04A7  E7      	                RST     RCOMP
1080:	04A8  3803    	                JR      C,RA1   ;WRAP AROUND IF LAST
1081:	04AA  210000  	                LD      HL,CSTART
1082:	04AD  ED5F    	RA1:            LD      A,R     ;RFSH REG GIVES TIME DEP. RANDOM
1083:	04AF  AE      	                XOR     (HL)
1084:	04B0  5F      	                LD      E,A
1085:	04B1  23      	                INC     HL
1086:	04B2  AE      	                XOR     (HL)
1087:	04B3  57      	                LD      D,A
1088:	04B4  224A08  	                LD      (RANPNT),HL
1089:	04B7  E1      	                POP     HL
1090:	04B8  EB      	                EX      DE,HL
1091:	04B9  C5      	                PUSH    BC
1092:	04BA  CD0505  	                CALL    DIVIDE  ;RND(N)=MOD(M,N)+1
1093:	04BD  C1      	                POP     BC
1094:	04BE  D1      	                POP     DE
1095:	04BF  23      	                INC     HL
1096:	04C0  C9      	                RET
1097:			
1098:	04C1  CD8804  	ABS:            CALL    PARN    ;*** ABS(EXPR) ***
1099:	04C4  1B      	                DEC     DE
1100:	04C5  CD1E05  	                CALL    CHKSGN  ;CHECK SIGN AND CHANGE IF HL < 0
1101:	04C8  13      	                INC     DE
1102:	04C9  C9      	                RET
1103:			
1104:	04CA  2A3608  	SIZE:           LD      HL,(TXTUNF)     ;*** RETURN SIZE IN HL ***
1105:	04CD  D5      	                PUSH    DE              ;GET THE NUMBER OF FREE
1106:	04CE  EB      	                EX      DE,HL           ;BYTES BETWEEN 'TXTUNF'
1107:	04CF  21000F  	                LD      HL,TXTEND       ;AND 'TXTEND'
1108:	04D2  CD1A05  	                CALL    SUBDE
1109:	04D5  D1      	                POP     DE
1110:	04D6  C9      	                RET
1111:			
1112:	04D7  CD8804  	GET:            CALL    PARN    ;*** GET(ADDR) ***
1113:	04DA  6E      	                LD      L,(HL)  ;GET CONTENT OF (HL)
1114:	04DB  2600    	                LD      H,0     ;RETURN RESULT IN HL
1115:	04DD  C9      	                RET
1116:			
1117:	04DE  CD8804  	USR:            CALL    PARN    ;*** USR(PARA) ***
1118:	04E1  C3000F  	                JP      USRSPC  ;GET para in HL and JP to prog
1119:			;                               ;There you should:
1120:			;               ...             ;    - Do the work
1121:			;               ...             ;    - Put result in HL
1122:			;               RET             ;$C9 - RET to BASIC
1123:			;                               ;DEFAULT: (USRSPC)=$C9
1124:			
1125:	04E4  210008  	RAM:            LD      HL,RAMBGN ; *** RAM *** VARIABLES 'A'..'Z'
1126:	04E7  C9      	                RET
1127:			
1128:	04E8  210009  	TXT:            LD      HL,TXTBGN ; *** TXT *** BEGIN OF TXT AREA
1129:	04EB  C9      	                RET
1130:			
1131:	04EC  21000F  	TOP:            LD      HL,TXTEND ; *** TOP *** END OF TEXT AREA = USRSPC
1132:	04EF  C9      	                RET
1133:			
1134:	04F0  DF      	PUT:            RST     REXPR   ;*** PUT ADDR, VAL1 [,VAL2, VAL3,..]
1135:	04F1  CF2C0D  	                TSTC    $2C,PT2  ; 1ST ',' SEPARATES THE VALUE(S)
1136:	04F4  E5      	                PUSH    HL      ;SAVE ADDR
1137:	04F5  DF      	PT0:            RST     REXPR   ;GET VAL IN HL
1138:	04F6  7D      	                LD      A,L     ;LOW BYTE OF VAL
1139:	04F7  E1      	                POP     HL      ;GET ADDR
1140:	04F8  77      	                LD      (HL),A  ;PUT VALUE IN RAM
1141:	04F9  CF2C04  	                TSTC    $2C,PT1 ;READY UNLESS ","
1142:	04FC  23      	                INC     HL      ;NEXT ADDR
1143:	04FD  E5      	                PUSH    HL
1144:	04FE  18F5    	                JR      PT0     ;LIST CONTINUES
1145:			;
1146:	0500  F7      	PT1:            RST     RFINISH ;READY
1147:			;
1148:	0501  C36005  	PT2:            JP      QWHAT   ;ELSE SAY: "WHAT?"
1149:			
1150:	0504  76      	HALT_:          HALT            ;HALT CPU (return to analyser)
1151:			
1152:			;
1153:			;*************************************************************
1154:			;
1155:			; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1156:			;
1157:			; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1158:			;
1159:			; 'SUBDE' SUBSTRACTS DE FROM HL
1160:			;
1161:			; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1162:			; SIGN AND FLIP SIGN OF B.
1163:			;
1164:			; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1165:			;
1166:			; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1167:			; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1168:			; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1169:			;
1170:	0505  E5      	DIVIDE:         PUSH    HL      ;*** DIVIDE ***
1171:	0506  6C      	                LD      L,H     ;DIVIDE H BY DE
1172:	0507  2600    	                LD      H,0
1173:	0509  CD1005  	                CALL    DV1
1174:	050C  41      	                LD      B,C     ;SAVE RESULT IN B
1175:	050D  7D      	                LD      A,L     ;(REMINDER+L)/DE
1176:	050E  E1      	                POP     HL
1177:	050F  67      	                LD      H,A
1178:	0510  0EFF    	DV1:            LD      C,0FFH  ;RESULT IN C
1179:	0512  0C      	DV2:            INC     C       ;DUMB ROUTINE
1180:	0513  CD1A05  	                CALL    SUBDE   ;DIVIDE BY SUBTRACT
1181:	0516  30FA    	                JR      NC,DV2  ;AND COUNT
1182:	0518  19      	                ADD     HL,DE
1183:	0519  C9      	                RET
1184:			
1185:	051A  B7      	SUBDE:          OR      A       ;CLR CY
1186:	051B  ED52    	                SBC     HL,DE
1187:	051D  C9      	                RET
1188:			
1189:	051E  7C      	CHKSGN:         LD      A,H     ;*** CHKSGN ***
1190:	051F  B7      	                OR      A       ;CHECK SIGN OF HL
1191:	0520  F0      	                RET     P       ;IF HL >=0 RETURN
1192:			;
1193:	0521  7C      	CHGSGN:         LD      A,H     ;*** CHGSGN ***
1194:	0522  B5      	                OR      L       ;CHECK VALUE OF HL
1195:	0523  C8      	                RET     Z       ;IF HL == 0 RETURN
1196:			;
1197:	0524  7C      	                LD      A,H
1198:	0525  F5      	                PUSH    AF      ;SAVE SIGN
1199:	0526  2F      	                CPL             ;CHANGE SIGN OF HL
1200:	0527  67      	                LD      H,A
1201:	0528  7D      	                LD      A,L
1202:	0529  2F      	                CPL
1203:	052A  6F      	                LD      L,A
1204:	052B  23      	                INC     HL      ;HL = -HL
1205:	052C  F1      	                POP     AF      ;GET ORIGINAL SIGN
1206:	052D  AC      	                XOR     H       ;COMPARE
1207:	052E  F2D000  	                JP      P,QHOW  ;ERROR IF SIGN UNCHANGED (HL=$8000)
1208:	0531  78      	                LD      A,B     ;AND ALSO FLIP B
1209:	0532  EE80    	                XOR     80H
1210:	0534  47      	                LD      B,A
1211:	0535  C9      	                RET
1212:			
1213:	0536  7C      	CKHLDE:         LD      A,H
1214:	0537  AA      	                XOR     D       ;SAME SIGN?
1215:	0538  F23C05  	                JP      P,CK1   ;YES, COMPARE
1216:	053B  EB      	                EX      DE,HL   ;NO, XCH AND COMP
1217:	053C  E7      	CK1:            RST     RCOMP
1218:	053D  C9      	                RET
1219:			;
1220:			;*************************************************************
1221:			;
1222:			; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1223:			;
1224:			; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1225:			; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1226:			; TO THAT VALUE.
1227:			;
1228:			; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1229:			; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1230:			; NEXT LINE AND CONTINUE FROM THERE.
1231:			;
1232:			; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1233:			; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1234:			;
1235:			; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1236:			; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1237:			; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1238:			; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1239:			; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1240:			; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1241:			; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1242:			; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1243:			; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1244:			;
1245:			; RELATED TO 'ERROR' ARE THE FOLLOWING:
1246:			; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1247:			; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1248:			; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1249:			; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1250:			;
1251:	053E  FF      	SETVAL:         RST     RTSTV   ;*** SETVAL ***
1252:	053F  381F    	                JR      C,QWHAT ;"WHAT?" NO VARIABLE
1253:	0541  E5      	                PUSH    HL      ;SAVE ADDRESS OF VAR.
1254:	0542  CF3D1B  	                TSTC    '=',QWHAT ;PASS "=" SIGN
1255:	0545  DF      	                RST     REXPR   ;EVALUATE EXPR.
1256:	0546  44      	                LD      B,H     ;VALUE IS IN BC NOW
1257:	0547  4D      	                LD      C,L
1258:	0548  E1      	                POP     HL      ;GET ADDRESS
1259:	0549  71      	                LD      (HL),C  ;SAVE VALUE
1260:	054A  23      	                INC     HL
1261:	054B  70      	                LD      (HL),B
1262:	054C  C9      	                RET
1263:			
1264:	054D  CF3B04  	FIN:            TSTC    ';',FI1 ;*** FIN ***
1265:	0550  F1      	                POP     AF      ;";", PURGE RET. ADDR.
1266:	0551  C3C501  	                JP      RUNSML  ;CONTINUE SAME LINE
1267:	0554  CF0D04  	FI1:            TSTC    CR,FI2  ;NOT ";", IS IT CR?
1268:	0557  F1      	                POP     AF      ;YES, PURGE RET. ADDR.
1269:	0558  C3B501  	                JP      RUNNXL  ;RUN NEXT LINE
1270:	055B  C9      	FI2:            RET             ;ELSE RETURN TO CALLER
1271:			
1272:	055C  EF      	ENDCHK:         RST     RIGNBLK ;IGNBLK
1273:	055D  FE0D    	                CP      CR      ;END WITH CR?
1274:	055F  C8      	                RET     Z       ;OK, ELSE SAY: "WHAT?"
1275:			;
1276:	0560  D5      	QWHAT:          PUSH    DE      ;*** QWHAT ***
1277:	0561  11E900  	AWHAT:          LD      DE,WHAT ;*** AWHAT ***
1278:	0564  97      	ERROR:          SUB     A       ;*** ERROR ***
1279:	0565  CDF705  	                CALL    PRTSTG  ;PRINT 'WHAT?', 'HOW?'
1280:	0568  D1      	                POP     DE      ;OR 'SORRY'
1281:	0569  1A      	                LD      A,(DE)  ;SAVE THE CHARACTER
1282:	056A  F5      	                PUSH    AF      ;AT WHERE OLD DE ->
1283:	056B  97      	                SUB     A       ;AND PUT A 0 THERE
1284:	056C  12      	                LD      (DE),A
1285:	056D  2A3808  	                LD      HL,(CURRNT)     ;GET CURRENT LINE #
1286:	0570  E5      	                PUSH    HL
1287:	0571  7E      	                LD      A,(HL)  ;CHECK THE VALUE
1288:	0572  23      	                INC     HL
1289:	0573  B6      	                OR      (HL)
1290:	0574  D1      	                POP     DE
1291:	0575  CA2C01  	                JP      Z,WSTART ;IF ZERO, JUST RESTART
1292:	0578  7E      	                LD      A,(HL)  ;IF NEGATIVE,
1293:	0579  B7      	                OR      A
1294:	057A  FA4103  	                JP      M,INPERR        ;REDO INPUT
1295:	057D  CD9006  	                CALL    PRTLN   ;ELSE PRINT THE LINE
1296:	0580  1B      	                DEC     DE      ;UPTO WHERE THE 0 IS
1297:	0581  F1      	                POP     AF      ;RESTORE THE CHARACTER
1298:	0582  12      	                LD      (DE),A
1299:	0583  3E3F    	                LD      A,'?'   ;PRINT A "?"
1300:	0585  D7      	                RST     ROUTC
1301:	0586  97      	                SUB     A       ;AND THE REST OF THE
1302:	0587  CDF705  	                CALL    PRTSTG  ;LINE
1303:	058A  C32C01  	                JP      WSTART  ;THEN RESTART
1304:			;
1305:	058D  D5      	QSORRY:         PUSH    DE      ;*** QSORRY ***
1306:	058E  11EF00  	ASORRY:         LD      DE,SORRY        ;*** ASORRY ***
1307:	0591  18D1    	                JR      ERROR
1308:			
1309:			;
1310:			;*************************************************************
1311:			;
1312:			; *** GETLN *** FNDLN (& FRIENDS) ***
1313:			;
1314:			; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1315:			; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1316:			; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1317:			; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1318:			; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1319:			; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1320:			; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1321:			;
1322:			; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1323:			; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1324:			; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1325:			; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1326:			; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1327:			; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1328:			; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1329:			; LINE, FLAGS ARE C & NZ.
1330:			; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1331:			; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1332:			; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1333:			; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1334:			; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1335:			; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1336:			;
1337:	0593  D7      	GETLN:          RST     ROUTC   ;*** GETLN ***
1338:	0594  11800F  	                LD      DE,BUFFER       ;PROMPT AND INIT.
1339:	0597  CDFB00  	GL1:            CALL    CHKIO   ;CHECK KEYBOARD
1340:	059A  28FB    	                JR      Z,GL1   ;NO INPUT, WAIT
1341:	059C  FE08    	                CP      BS      ;BS, DELETE LAST CHARACTER?
1342:	059E  281A    	                JR      Z,GL3   ;YES
1343:	05A0  FE7F    	                CP      DEL     ;DEL, DELETE LAST CHARACTER?
1344:	05A2  2816    	                JR      Z,GL3   ;YES
1345:	05A4  D7      	                RST     ROUTC   ;INPUT, ECHO BACK
1346:	05A5  FE0A    	                CP      LF      ;IGNORE LF
1347:	05A7  28EE    	                JR      Z,GL1
1348:	05A9  B7      	                OR      A       ;IGNORE NULL
1349:	05AA  28EB    	                JR      Z,GL1
1350:	05AC  FE18    	                CP      CAN     ;^X, DELETE THE WHOLE LINE?
1351:	05AE  281B    	                JR      Z,GL4   ;YES
1352:	05B0  12      	                LD      (DE),A  ;ELSE SAVE INPUT
1353:	05B1  13      	                INC     DE      ;AND BUMP POINTER
1354:	05B2  FE0D    	                CP      CR      ;WAS IT CR?
1355:	05B4  C8      	                RET     Z       ;YES, END OF LINE
1356:	05B5  7B      	                LD      A,E     ;ELSE MORE FREE ROOM?
1357:	05B6  FEFF    	                CP      BUFEND & 0FFH
1358:	05B8  20DD    	                JR      NZ,GL1  ;YES, GET NEXT INPUT
1359:	05BA  7B      	GL3:            LD      A,E     ;DELETE LAST CHARACTER
1360:	05BB  FE80    	                CP      BUFFER & 0FFH   ;BUT DO WE HAVE ANY?
1361:	05BD  280C    	                JR      Z,GL4   ;NO, REDO WHOLE LINE
1362:	05BF  1B      	                DEC     DE      ;YES, BACKUP POINTER
1363:	05C0  3E08    	                LD      A,BS    ;AND ECHO A BACKSPACE
1364:	05C2  D7      	                RST     ROUTC
1365:	05C3  3E20    	                LD      A,' '   ;AND ECHO A BLANK
1366:	05C5  D7      	                RST     ROUTC
1367:	05C6  3E08    	                LD      A,BS    ;AND ECHO A BACKSPACE
1368:	05C8  D7      	                RST     ROUTC
1369:	05C9  18CC    	                JR      GL1     ;GO GET NEXT INPUT
1370:	05CB  CD0E00  	GL4:            CALL    CRLF    ;REDO ENTIRE LINE
1371:	05CE  3E5E    	                LD      A,'^'   ;CR, LF AND UP-ARROW
1372:	05D0  18C1    	                JR      GETLN
1373:			;
1374:	05D2  7C      	FNDLN:          LD      A,H     ;*** FNDLN ***
1375:	05D3  B7      	                OR      A       ;CHECK SIGN OF HL
1376:	05D4  FAD000  	                JP      M,QHOW  ;IT CANNOT BE -
1377:	05D7  110009  	                LD      DE,TXTBGN       ;INIT TEXT POINTER
1378:			;
1379:	05DA          	FNDLP:          ;*** FDLNP ***
1380:	05DA  E5      	FL1:            PUSH    HL      ;SAVE LINE #
1381:	05DB  2A3608  	                LD      HL,(TXTUNF)     ;CHECK IF WE PASSED END
1382:	05DE  2B      	                DEC     HL
1383:	05DF  E7      	                RST     RCOMP
1384:	05E0  E1      	                POP     HL      ;GET LINE # BACK
1385:	05E1  D8      	                RET     C       ;C,NZ PASSED END
1386:	05E2  1A      	                LD      A,(DE)  ;WE DID NOT, GET BYTE 1
1387:	05E3  95      	                SUB     L       ;IS THIS THE LINE?
1388:	05E4  47      	                LD      B,A     ;COMPARE LOW ORDER
1389:	05E5  13      	                INC     DE
1390:	05E6  1A      	                LD      A,(DE)  ;GET BYTE 2
1391:	05E7  9C      	                SBC     A,H     ;COMPARE HIGH ORDER
1392:	05E8  3804    	                JR      C,FL2   ;NO, NOT THERE YET
1393:	05EA  1B      	                DEC     DE      ;ELSE WE EITHER FOUND
1394:	05EB  B0      	                OR      B       ;IT, OR IT IS NOT THERE
1395:	05EC  C9      	                RET     ;NC,Z:FOUND, NC,NZ:NO
1396:			;
1397:	05ED          	FNDNXT:         ;*** FNDNXT ***
1398:	05ED  13      	                INC     DE      ;FIND NEXT LINE
1399:	05EE  13      	FL2:            INC     DE      ;JUST PASSED BYTE 1 & 2
1400:			;
1401:	05EF  1A      	FNDSKP:         LD      A,(DE)  ;*** FNDSKP ***
1402:	05F0  FE0D    	                CP      CR      ;TRY TO FIND CR
1403:	05F2  20FA    	                JR      NZ,FL2  ;KEEP LOOKING
1404:	05F4  13      	                INC     DE      ;FOUND CR, SKIP OVER
1405:	05F5  18E3    	                JR      FL1     ;CHECK IF END OF TEXT
1406:			;
1407:			;*************************************************************
1408:			;
1409:			; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1410:			;
1411:			; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1412:			; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1413:			; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1414:			; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1415:			;
1416:			; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1417:			; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1418:			; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1419:			; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1420:			; HACK AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER
1421:			;      IS SKIPPED OVER (SHALL BE A "JP" INSTRUCTION).
1422:			;
1423:			; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1424:			; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1425:			; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1426:			; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1427:			; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1428:			;
1429:			; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1430:			;
1431:	05F7  47      	PRTSTG:         LD      B,A     ;*** PRTSTG ***
1432:	05F8  1A      	PS1:            LD      A,(DE)  ;GET A CHARACTER
1433:	05F9  13      	                INC     DE      ;BUMP POINTER
1434:	05FA  B8      	                CP      B       ;SAME AS OLD A?
1435:	05FB  C8      	                RET     Z       ;YES, RETURN
1436:	05FC  D7      	                RST     ROUTC   ;ELSE PRINT IT
1437:	05FD  FE0D    	                CP      CR      ;WAS IT A CR?
1438:	05FF  20F7    	                JR      NZ,PS1  ;NO, NEXT
1439:	0601  C9      	                RET             ;YES, RETURN
1440:			;
1441:	0602  CF220F  	QTSTG:          TSTC    $22,QT3 ;*** QTSTG ***
1442:	0605  3E22    	                LD      A,22H   ;IT IS A '"'
1443:	0607  CDF705  	QT1:            CALL    PRTSTG  ;PRINT UNTIL ANOTHER
1444:	060A  FE0D    	QT1A:           CP      CR      ;WAS LAST ONE A CR?
1445:	060C  E1      	                POP     HL       ; HACK RETURN ADDRESS
1446:	060D  CAB501  	                JP      Z,RUNNXL ; WAS CR, RUN NEXT LINE
1447:	0610  23      	QT2:            INC     HL       ; !! SKIP 3 BYTES ON RETURN
1448:	0611  23      	                INC     HL       ; !! -> AFTER "CALL QTSTG"
1449:	0612  23      	                INC     HL       ; !!    MUST BE "JP .."
1450:	0613  E9      	                JP      (HL)     ; !! RETURN AFTER THIS "JP"
1451:			;
1452:	0614  CF2704  	QT3:            TSTC    $27,QT4 ;IS IT A "'"?
1453:	0617  3E27    	                LD      A,27H   ;YES, DO THE SAME
1454:	0619  18EC    	                JR      QT1     ;AS IN '"'
1455:			;
1456:	061B  CF5F06  	QT4:            TSTC    $5F,QT5 ;IS IT UNDERLINE?
1457:	061E  3E8D    	                LD      A,08DH  ;YES, CR WITHOUT LF
1458:	0620  D7      	                RST     ROUTC
1459:	0621  E1      	                POP     HL      ;HACK RETURN ADDRESS
1460:	0622  18EC    	                JR      QT2
1461:			;
1462:	0624  CF5E08  	QT5:            TSTC    5EH,QT6 ;RST 1, is it '^'?
1463:	0627  1A      	                LD      A,(DE)  ;CHR
1464:	0628  EE40    	                XOR     40H     ;CONVERT TO CTRL
1465:	062A  D7      	                RST     ROUTC
1466:	062B  1A      	                LD      A,(DE)  ;RESTORE CHR
1467:	062C  13      	                INC     DE
1468:	062D  18DB    	                JR      QT1A
1469:	062F  C9      	QT6:            RET             ;NONE OF ABOVE
1470:			
1471:	0630          	PRTNUM:                         ;*** PRINT NUMBER IN HL ***
1472:	0630  3A3508  	                LD      A,(PNBASE)      ;GET NUMBER BASE
1473:	0633  B7      	                OR      A
1474:	0634  2809    	                JR      Z,PN0   ;0: DEFAULT DEC
1475:	0636  FE10    	                CP      16      ;HEX NUMBER?
1476:	0638  2010    	                JR      NZ,PN1  ;NO
1477:	063A  0624    	                LD      B,'$'   ;PRINT LEADING '$'
1478:	063C  0D      	                DEC     C       ;'$' TAKES SPACE
1479:	063D  180B    	                JR      PN1     ;HEX IS UNSIGNED
1480:	063F  0600    	PN0:            LD      B,0     ;NO PREFIX YET
1481:	0641  CD1E05  	                CALL    CHKSGN  ;CHECK SIGN
1482:	0644  F24A06  	                JP      P,PN1   ;NO SIGN
1483:	0647  062D    	                LD      B,'-'   ;B=SIGN
1484:	0649  0D      	                DEC     C       ;'-' TAKES SPACE
1485:	064A  D5      	PN1:            PUSH    DE
1486:	064B  3A3508  	                LD      A,(PNBASE)
1487:	064E  B7      	                OR      A       ;DEFAULT DECIMAL?
1488:	064F  2002    	                JR      NZ,PN1A
1489:	0651  3E0A    	                LD      A,10
1490:	0653  5F      	PN1A:           LD      E,A
1491:	0654  AF      	                XOR     A
1492:	0655  57      	                LD      D,A
1493:	0656  D5      	                PUSH    DE      ;SAVE AS A FLAG
1494:	0657  0D      	                DEC     C       ;C=SPACES
1495:	0658  C5      	                PUSH    BC      ;SAVE SIGN & SPACE
1496:	0659  CD0505  	PN2:            CALL    DIVIDE  ;DIVIDE HL BY NUMBER BASE
1497:	065C  78      	                LD      A,B     ;RESULT 0?
1498:	065D  B1      	                OR      C
1499:	065E  2807    	                JR      Z,PN3   ;YES, WE GOT ALL
1500:	0660  E3      	                EX      (SP),HL ;NO, SAVE REMAINDER
1501:	0661  2D      	                DEC     L       ;AND COUNT SPACE
1502:	0662  E5      	                PUSH    HL      ;HL IS OLD BC
1503:	0663  60      	                LD      H,B     ;MOVE RESULT TO BC
1504:	0664  69      	                LD      L,C
1505:	0665  18F2    	                JR      PN2     ;AND DIVIDE AGAIN
1506:			;
1507:	0667  C1      	PN3:            POP     BC      ;WE GOT ALL DIGITS IN
1508:	0668  0D      	PN4:            DEC     C       ;THE STACK
1509:	0669  79      	                LD      A,C     ;LOOK AT SPACE COUNT
1510:	066A  B7      	                OR      A
1511:	066B  FA7306  	                JP      M,PN5   ;NO LEADING BLANKS
1512:	066E  3E20    	                LD      A,' '   ;LEADING BLANKS
1513:	0670  D7      	                RST     ROUTC
1514:	0671  18F5    	                JR      PN4     ;MORE?
1515:	0673  78      	PN5:            LD      A,B     ;PRINT SIGN OR '$'
1516:	0674  B7      	                OR      A
1517:	0675  C41000  	                CALL    NZ,ROUTC
1518:	0678  5D      	                LD      E,L     ;LAST REMAINDER IN E
1519:	0679  3A3508  	PN6:            LD      A,(PNBASE)      ;GET NUMBER BASE
1520:	067C  B7      	                OR      A       ;DEFAULT DECIMAL?
1521:	067D  2002    	                JR      NZ,PN6A
1522:	067F  3E0A    	                LD      A,10
1523:	0681  BB      	PN6A:           CP      E       ;IT IS FLAG FOR NO MORE
1524:	0682  7B      	                LD      A,E     ;CHECK DIGIT IN E
1525:	0683  D1      	                POP     DE
1526:	0684  C8      	                RET     Z       ;IF SO, RETURN
1527:	0685  FE0A    	                CP      10      ;0-9? < A hex?
1528:	0687  3802    	                JR      C,PN7   ;Skip Add 7
1529:	0689  C607    	                ADD     A,'A'-'0'-10    ;Bring it up to ASCII A-F
1530:	068B  C630    	PN7:            ADD     A,'0'   ;ELSE CONVERT TO ASCII
1531:	068D  D7      	                RST     ROUTC   ;AND PRINT THE DIGIT
1532:	068E  18E9    	                JR      PN6     ;GO BACK FOR MORE
1533:			
1534:	0690  AF      	PRTLN:          XOR     A       ;0 -> DEFAULT BASE 10 SIGNED
1535:	0691  323508  	                LD      (PNBASE),A      ;FOR PRTNUM
1536:	0694  1A      	                LD      A,(DE)
1537:	0695  6F      	                LD      L,A     ;LOW ORDER LINE #
1538:	0696  13      	                INC     DE
1539:	0697  1A      	                LD      A,(DE)  ;HIGH ORDER
1540:	0698  67      	                LD      H,A
1541:	0699  13      	                INC     DE
1542:	069A  0E04    	                LD      C,4     ;PRINT 4 DIGIT LINE #
1543:	069C  CD3006  	                CALL    PRTNUM
1544:	069F  3E20    	                LD      A,' '   ;FOLLOWED BY A BLANK
1545:	06A1  D7      	                RST     ROUTC
1546:	06A2  97      	                SUB     A       ;AND THEN THE NEXT
1547:	06A3  CDF705  	                CALL    PRTSTG
1548:	06A6  C9      	                RET
1549:			;
1550:			;*************************************************************
1551:			;
1552:			; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1553:			;
1554:			; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1555:			; DE = HL
1556:			;
1557:			; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1558:			; UNTIL DE = BC
1559:			;
1560:			; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1561:			; STACK
1562:			;
1563:			; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1564:			; STACK
1565:			;
1566:	06A7  E7      	MVUP:           RST     RCOMP   ;*** MVUP ***
1567:	06A8  C8      	                RET     Z       ;DE = HL, RETURN
1568:	06A9  1A      	                LD      A,(DE)  ;GET ONE BYTE
1569:	06AA  02      	                LD      (BC),A  ;MOVE IT
1570:	06AB  13      	                INC     DE      ;INCREASE BOTH POINTERS
1571:	06AC  03      	                INC     BC
1572:	06AD  18F8    	                JR      MVUP    ;UNTIL DONE
1573:			;
1574:	06AF  78      	MVDOWN:         LD      A,B     ;*** MVDOWN ***
1575:	06B0  92      	                SUB     D       ;TEST IF DE = BC
1576:	06B1  2003    	                JR      NZ,MD1  ;NO, GO MOVE
1577:	06B3  79      	                LD      A,C     ;MAYBE, OTHER BYTE?
1578:	06B4  93      	                SUB     E
1579:	06B5  C8      	                RET     Z       ;YES, RETURN
1580:	06B6  1B      	MD1:            DEC     DE      ;ELSE MOVE A BYTE
1581:	06B7  2B      	                DEC     HL      ;BUT FIRST DECREASE
1582:	06B8  1A      	                LD      A,(DE)  ;BOTH POINTERS AND
1583:	06B9  77      	                LD      (HL),A  ;THEN DO IT
1584:	06BA  18F3    	                JR      MVDOWN  ;LOOP BACK
1585:			;
1586:	06BC  C1      	POPA:           POP     BC      ;BC = RETURN ADDR.
1587:	06BD  E1      	                POP     HL      ;RESTORE LOPVAR, BUT
1588:	06BE  224008  	                LD      (LOPVAR),HL     ;=0 MEANS NO MORE
1589:	06C1  7C      	                LD      A,H
1590:	06C2  B5      	                OR      L
1591:	06C3  2810    	                JR      Z,PP1   ;YEP, GO RETURN
1592:	06C5  E1      	                POP     HL      ;NOP, RESTORE OTHERS
1593:	06C6  224208  	                LD      (LOPINC),HL
1594:	06C9  E1      	                POP     HL
1595:	06CA  224408  	                LD      (LOPLMT),HL
1596:	06CD  E1      	                POP     HL
1597:	06CE  224608  	                LD      (LOPLN),HL
1598:	06D1  E1      	                POP     HL
1599:	06D2  224808  	                LD      (LOPPT),HL
1600:	06D5  C5      	PP1:            PUSH    BC      ;BC = RETURN ADDR.
1601:	06D6  C9      	                RET
1602:			;
1603:	06D7  214C08  	PUSHA:          LD      HL,STKLMT       ;*** PUSHA ***
1604:	06DA  CD2105  	                CALL    CHGSGN
1605:	06DD  C1      	                POP     BC      ;BC=RETURN ADDRESS
1606:	06DE  39      	                ADD     HL,SP   ;IS STACK NEAR THE TOP?
1607:	06DF  D28D05  	                JP      NC,QSORRY       ;YES, SORRY FOR THAT
1608:	06E2  2A4008  	                LD      HL,(LOPVAR)     ;ELSE SAVE LOOP VAR'S
1609:	06E5  7C      	                LD      A,H     ;BUT IF LOPVAR IS 0
1610:	06E6  B5      	                OR      L       ;THAT WILL BE ALL
1611:	06E7  2813    	                JR      Z,PU1
1612:	06E9  2A4808  	                LD      HL,(LOPPT)      ;ELSE, MORE TO SAVE
1613:	06EC  E5      	                PUSH    HL
1614:	06ED  2A4608  	                LD      HL,(LOPLN)
1615:	06F0  E5      	                PUSH    HL
1616:	06F1  2A4408  	                LD      HL,(LOPLMT)
1617:	06F4  E5      	                PUSH    HL
1618:	06F5  2A4208  	                LD      HL,(LOPINC)
1619:	06F8  E5      	                PUSH    HL
1620:	06F9  2A4008  	                LD      HL,(LOPVAR)
1621:	06FC  E5      	PU1:            PUSH    HL
1622:	06FD  C5      	                PUSH    BC      ;BC = RETURN ADDR.
1623:	06FE  C9      	                RET
1624:			
1625:			;*************************************************************
1626:			;
1627:			; *** DIRECT *** EXEC *** TABLES ***
1628:			;
1629:			; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1630:			; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1631:			; OF CODE ACCORDING TO THE TABLE.
1632:			;
1633:			; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1634:			; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1635:			; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1636:			; ALL DIRECT AND STATEMENT COMMANDS.
1637:			;
1638:			; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1639:			; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1640:			; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1641:			;
1642:			
1643:	06FF  213307  	DIRECT:         LD      HL,TAB1-1       ;*** DIRECT ***
1644:			;
1645:	0702          	EXEC:           ;*** EXEC ***
1646:	0702  EF      	EX0:            RST     RIGNBLK ;IGNORE LEADING BLANKS
1647:	0703  D5      	                PUSH    DE      ;SAVE POINTER
1648:	0704  1A      	EX1:            LD      A,(DE)  ;IF FOUND '.' IN STRING
1649:	0705  13      	                INC     DE      ;BEFORE ANY MISMATCH
1650:	0706  FE2E    	                CP      2EH     ;WE DECLARE A MATCH
1651:	0708  281C    	                JR      Z,EX3
1652:	070A  FE61    	                CP      'a'     ;< 'a' ?
1653:	070C  3806    	                JR      C,EXN   ;NO ALPHA CHAR
1654:	070E  FE7B    	                CP      'z'+1   ;> 'z'
1655:	0710  3002    	                JR      NC,EXN  ;NO ALPHA CHAR
1656:	0712  E65F    	                AND     5FH     ;MASK LOWER CASE TO UPPER CASE
1657:	0714          	EXN:
1658:	0714  23      	                INC     HL      ;HL->TABLE
1659:	0715  BE      	                CP      (HL)    ;IF MATCH, TEST NEXT
1660:	0716  28EC    	                JR      Z,EX1
1661:	0718  3E7F    	                LD      A,07FH  ;ELSE SEE IF BIT 7
1662:	071A  1B      	                DEC     DE      ;OF TABLE IS SET, WHICH
1663:	071B  BE      	                CP      (HL)    ;IS THE JUMP ADDR. (HI)
1664:	071C  380E    	                JR      C,EX5   ;C:YES, MATCHED
1665:	071E  23      	EX2:            INC     HL      ;NC:NO, FIND JUMP ADDR.
1666:	071F  BE      	                CP      (HL)
1667:	0720  30FC    	                JR      NC,EX2
1668:	0722  23      	                INC     HL      ;BUMP TO NEXT TAB. ITEM
1669:	0723  D1      	                POP     DE      ;RESTORE STRING POINTER
1670:	0724  18DC    	                JR      EX0     ;TEST AGAINST NEXT ITEM
1671:	0726  3E7F    	EX3:            LD      A,07FH  ;PARTIAL MATCH, FIND
1672:	0728  23      	EX4:            INC     HL      ;JUMP ADDR., WHICH IS
1673:	0729  BE      	                CP      (HL)    ;FLAGGED BY BIT 7
1674:	072A  30FC    	                JR      NC,EX4
1675:	072C  7E      	EX5:            LD      A,(HL)  ;LOAD HL WITH THE JUMP
1676:	072D  23      	                INC     HL      ;ADDRESS FROM THE TABLE
1677:	072E  6E      	                LD      L,(HL)
1678:			                                ;ADDRESSES ARE BIG-ENDIAN
1679:			                                ;WITH MSB SET to 1
1680:	0001          	                .IF      $ < 8000H
1681:	072F  E67F    	                AND     7FH     ;MASK OFF HIGH ADDRESS BIT
1682:			                .ENDIF
1683:	0731  67      	                LD      H,A
1684:	0732  F1      	                POP     AF      ;CLEAN UP THE GARBAGE
1685:	0733  E9      	                JP      (HL)    ;AND WE GO DO IT
1686:			;
1687:			
1688:			; THE TABLES CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1689:			; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1690:			; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1691:			; BYTE SET TO 1.
1692:			; This is done by the macro 'DWA'.
1693:			; If the program is executed from an address < 0x8000
1694:			; take care to mask this bit in program part 'EXEC'.
1695:			;
1696:			; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.
1697:			; IF THE STRING DOES NOT MATCH ANY OF THE OTHER ITEMS,
1698:			; IT WILL MATCH THIS NULL ITEM AS DEFAULT.
1699:			
1700:			;
1701:	0734          	TAB1:           ;DIRECT ONLY COMMANDS
1702:	0734  4C495354	                .DB     "LIST"
1703:	0738  81DC    	                DWA     LIST_
1704:	073A  52554E  	                .DB     "RUN"
1705:	073D  81AF    	                DWA     RUN
1706:	073F  4E4557  	                .DB     "NEW"
1707:	0742  81A0    	                DWA     NEW
1708:			;
1709:	0744          	TAB2:           ;DIRECT OR PROGRAM STATEMENT
1710:	0744  4E455854	                .DB     "NEXT"
1711:	0748  82D8    	                DWA     NEXT
1712:	074A  4C4554  	                .DB     "LET"           ; can be omitted
1713:	074D  839A    	                DWA     LET
1714:	074F  4946    	                .DB     "IF"
1715:	0751  8332    	                DWA     IF_
1716:	0753  474F544F	                .DB     "GOTO"
1717:	0757  81CE    	                DWA     GOTO
1718:	0759  474F5355	                .DB     "GOSUB"
	      42
1719:	075E  8244    	                DWA     GOSUB
1720:	0760  52455455	                .DB     "RETURN"
	      524E
1721:	0766  8264    	                DWA     RETURN
1722:	0768  52454D  	                .DB     "REM"
1723:	076B  832E    	                DWA     REM
1724:	076D  464F52  	                .DB     "FOR"
1725:	0770  827D    	                DWA     FOR
1726:	0772  494E5055	                .DB     "INPUT"         ; wait for KBD input
	      54
1727:	0777  834B    	                DWA     INPUT
1728:	0779  5052494E	                .DB     "PRINT"
	      54
1729:	077E  81F3    	                DWA     PRINT
1730:	0780  3F      	                .DB     "?"             ; short for PRINT
1731:	0781  81F3    	                DWA     PRINT
1732:	0783  505554  	                .DB     "PUT"           ; PUT ADDR, VAL, VAL,...
1733:	0786  84F0    	                DWA     PUT
1734:	0788  53544F50	                .DB     "STOP"          ; warm start
1735:	078C  81A9    	                DWA     STOP
1736:	078E  48414C54	                .DB     "HALT"          ; HALT CPU (return to analyser)
1737:	0792  8504    	                DWA     HALT_
1738:	0794  8395    	                DWA     DEFLT           ;END OF LIST
1739:			;
1740:	0796          	TAB4:           ;FUNCTIONS AND CONSTANTS
1741:	0796  524E44  	                .DB     "RND"           ;funct RND(RANGE)
1742:	0799  8493    	                DWA     RND
1743:	079B  414253  	                .DB     "ABS"           ;funct ABS(VALUE)
1744:	079E  84C1    	                DWA     ABS
1745:	07A0  474554  	                .DB     "GET"           ;funct GET(ADR) get byte from memory
1746:	07A3  84D7    	                DWA     GET
1747:	07A5  555352  	                .DB     "USR"           ;funct USR(PARA) call usr funct at TOP
1748:	07A8  84DE    	                DWA     USR                ; and return a result in HL
1749:	07AA  53495A45	                .DB     "SIZE"          ;const SIZE - no parantesis, get free mem
1750:	07AE  84CA    	                DWA     SIZE
1751:	07B0  52414D  	                .DB     "RAM"           ;const RAM - no par., get RAM begin = 'A'..'Z'
1752:	07B3  84E4    	                DWA     RAM
1753:	07B5  545854  	                .DB     "TXT"           ;const TXT - no par., get TEXT begin
1754:	07B8  84E8    	                DWA     TXT
1755:	07BA  544F50  	                .DB     "TOP"           ;const TOP - no par., get TEXT TOP = USRSPC
1756:	07BD  84EC    	                DWA     TOP
1757:	07BF  847A    	                DWA     XP40            ;END OF LIST
1758:			;
1759:	07C1          	TAB5:           ;"TO" IN "FOR"
1760:	07C1  544F    	                .DB     "TO"
1761:	07C3  828D    	                DWA     FR1
1762:	07C5  8560    	                DWA     QWHAT           ;END OF LIST
1763:			;
1764:	07C7          	TAB6:           ;"STEP" IN "FOR"
1765:	07C7  53544550	                .DB     "STEP"
1766:	07CB  8297    	                DWA     FR2
1767:	07CD  829A    	                DWA     FR3             ;END OF LIST
1768:			;
1769:	07CF          	TAB8:           ;RELATION OPERATORS
1770:	07CF  3E3D    	                .DB     ">="
1771:	07D1  83A9    	                DWA     XP11
1772:	07D3  213D    	                .DB     "!="
1773:	07D5  83AF    	                DWA     XP12
1774:	07D7  23      	                .DB     "#"
1775:	07D8  83AF    	                DWA     XP12
1776:	07DA  3E      	                .DB     ">"
1777:	07DB  83B5    	                DWA     XP13
1778:	07DD  3D3D    	                .DB     "=="
1779:	07DF  83C4    	                DWA     XP15
1780:	07E1  3D      	                .DB     "="
1781:	07E2  83C4    	                DWA     XP15
1782:	07E4  3C3D    	                .DB     "<="
1783:	07E6  83BC    	                DWA     XP14
1784:	07E8  3C      	                .DB     "<"
1785:	07E9  83CA    	                DWA     XP16
1786:	07EB  83D0    	                DWA     XP17            ;END OF REL OPERATOR LIST
1787:			
1788:			;
1789:	07ED          	LSTROM:                                 ;ALL ABOVE CAN BE ROM
1790:			
1791:			;
1792:			; CHECK THAT THE PROGRAM DOES NOT EXCEED ROM SIZE
1793:			;
1794:	0001          	                .ASSERT $ <= RAMBGN
1795:			
1796:			
1797:	07ED ..07FF 00	                .DC     RAMBGN-$,$00    ;fill with $00 until RAMBGN
1798:			;
1799:			;
1800:			;*************************************************************
1801:			
1802:	0800          	                .ORG    RAMBGN          ;HERE DOWN MUST BE RAM
1803:			;
1804:			;*************************************************************
1805:			;
1806:			
1807:	0800          	VARBGN:         .DS     2*26            ;VARIABLES 'A'..'Z'
1808:	0834          	OCSW:           .DS     1               ;SWITCH FOR OUTPUT
1809:	0835          	PNBASE:         .DS     1               ;BASE FOR PRTNUM
1810:	0836          	TXTUNF:         .DS     2               ;->UNFILLED TEXT AREA
1811:	0838          	CURRNT:         .DS     2               ;POINTS TO CURRENT LINE
1812:	083A          	STKGOS:         .DS     2               ;SAVES SP IN 'GOSUB'
1813:	083C          	VARNXT:         .DS     2               ;TEMP STORAGE
1814:	083E          	STKINP:         .DS     2               ;SAVES SP IN 'INPUT'
1815:	0840          	LOPVAR:         .DS     2               ;'FOR' LOOP SAVE AREA
1816:	0842          	LOPINC:         .DS     2               ;INCREMENT
1817:	0844          	LOPLMT:         .DS     2               ;LIMIT
1818:	0846          	LOPLN:          .DS     2               ;LINE NUMBER
1819:	0848          	LOPPT:          .DS     2               ;TEXT POINTER
1820:	084A          	RANPNT:         .DS     2               ;RANDOM NUMBER POINTER
1821:	084C          	STKLMT:         .EQU    $               ;LIMIT FOR STACK
1822:			
1823:	0900          	                .ORG    RAMBGN+$100
1824:			;
1825:	0900          	STACK:                                  ;STACK STARTS HERE AND GROWS DOWN
1826:			
1827:	0900          	TXTBGN:                                 ;TEXT STARTS HERE AND GROWS UP
1828:			;
1829:			
1830:	0F00          	                .ORG    RAMBGN+RAMSZE-$100
1831:	0F00          	TXTEND:                                 ;TEXT SAVE AREA ENDS
1832:			;
1833:			                                        ;VARIABLES @(0), @(1), @(2)
1834:			                                        ;... stored top-down
1835:			                                        ;i.e. &@(i) = TXTEND-2-2*i
1836:			;
1837:	0F00          	USRSPC:         .DS     128
1838:			
1839:	0F80          	BUFFER:         .DS     127             ;INPUT BUFFER
1840:	0FFF          	BUFEND:         .DS     1               ;BUFFER END
1841:			
1842:	1000          	                .END



Statistics:

     4	passes
     0	jr promotions
   225	symbols
  2048	bytes

    64	macro calls
   205	macro bytes
     0	invented symbols



Symbol Table:

ABS              4C1      1217
AHOW            D1        209
ASORRY           58E      1422
AWHAT            561      1377
BS             =08        8
BUFEND           FFF      4095
BUFFER           F80      3968
CAN            =18        24
CHGSGN           521      1313
CHKIO           FB        251
CHKSGN           51E      1310
CI0              104      260
CK1              53C      1340
CKHLDE           536      1334
CR             =0D        13
CRLF            0E        14
CSTART          00        0
CURRNT           838      2104
DEFLT            395      917
DEL            =7F        127
DIRECT           6FF      1791
DIVIDE           505      1285
DV1              510      1296
DV2              512      1298
ENDCHK           55C      1372
ERROR            564      1380
EX0              702      1794
EX1              704      1796
EX2              71E      1822
EX3              726      1830
EX4              728      1832
EX5              72C      1836
EXEC             702      1794
EXN              714      1812
EXPR1            3A3      931
EXPR2            3E7      999
EXPR3            419      1049
EXPR4            474      1140
FI1              554      1364
FI2              55B      1371
FIN              54D      1357
FL1              5DA      1498
FL2              5EE      1518
FNDLN            5D2      1490
FNDLP            5DA      1498
FNDNXT           5ED      1517
FNDSKP           5EF      1519
FOR              27D      637
FR1              28D      653
FR2              297      663
FR3              29A      666
FR4              29D      669
FR5              2A0      672
FR7              2B5      693
FR8              2D3      723
GET              4D7      1239
GETLN            593      1427
GL1              597      1431
GL3              5BA      1466
GL4              5CB      1483
GOSUB            244      580
GOTO             1CE      462
HALT_            504      1284
HOW             E1        225
IF_              332      818
INIT             109      265
INPERR           341      833
INPUT            34B      843
IODATA         =01        1
IOSTAT         =02        2
IO_RX_BIT      =01        1
IP1              34B      843
IP2              357      855
IP3              367      871
IP4              38E      910
IP5              394      916
LET              39A      922
LF             =0A        10
LIST_            1DC      476
LOPINC           842      2114
LOPLMT           844      2116
LOPLN            846      2118
LOPPT            848      2120
LOPVAR           840      2112
LS1              1E5      485
LSTROM           7ED      2029
LT1              3A2      930
MD1              6B6      1718
MVDOWN           6AF      1711
MVUP             6A7      1703
NEW              1A0      416
NEXT             2D8      728
NX0              2DF      735
NX1              317      791
NX2              32A      810
NX3              2F5      757
NX4              307      775
NX5              328      808
OC1             F5        245
OCSW             834      2100
OK              E6        230
PARN             488      1160
PN0              63F      1599
PN1              64A      1610
PN1A             653      1619
PN2              659      1625
PN3              667      1639
PN4              668      1640
PN5              673      1651
PN6              679      1657
PN6A             681      1665
PN7              68B      1675
PNBASE           835      2101
POPA             6BC      1724
PP1              6D5      1749
PR0              20B      523
PR1              226      550
PR2              202      514
PR3              22C      556
PR5              212      530
PR6              234      564
PR8              23C      572
PRINT            1F3      499
PRTLN            690      1680
PRTNUM           630      1584
PRTSTG           5F7      1527
PS1              5F8      1528
PT0              4F5      1269
PT1              500      1280
PT2              501      1281
PU1              6FC      1788
PUSHA            6D7      1751
PUT              4F0      1264
QHOW            D0        208
QSORRY           58D      1421
QT1              607      1543
QT1A             60A      1546
QT2              610      1552
QT3              614      1556
QT4              61B      1563
QT5              624      1572
QT6              62F      1583
QTSTG            602      1538
QWHAT            560      1376
RA1              4AD      1197
RAM              4E4      1252
RAMBGN         = 800      2048
RAMSZE         = 800      2048
RANPNT           84A      2122
RCOMP           20        32
REM              32E      814
RETURN           264      612
REXPR           18        24
RFINISH         30        48
RIGNBLK         28        40
RND              493      1171
ROMBGN         =00        0
ROUTC           10        16
RTSTC           08        8
RTSTV           38        56
RUN              1AF      431
RUNNXL           1B5      437
RUNSML           1C5      453
RUNTSL           1BE      446
SETVAL           53E      1342
SIZE             4CA      1226
SORRY           EF        239
ST2              13F      319
ST3              148      328
ST4              17B      379
STACK            900      2304
STKGOS           83A      2106
STKINP           83E      2110
STKLMT         = 84C      2124
STOP             1A9      425
SUBDE            51A      1306
TAB1             734      1844
TAB2             744      1860
TAB4             796      1942
TAB5             7C1      1985
TAB6             7C7      1991
TAB8             7CF      1999
TC1             70        112
TC2             7A        122
TIBAS           D7        215
TN1             87        135
TOP              4EC      1260
TSTNUM          7E        126
TV1             5A        90
TV2             60        96
TX1             A9        169
TX2             BC        188
TXT              4E8      1256
TXTBGN           900      2304
TXTEND           F00      3840
TXTUNF           836      2102
USR              4DE      1246
USRSPC           F00      3840
VARBGN           800      2048
VARNXT           83C      2108
WHAT            E9        233
WSTART           12C      300
XP11             3A9      937
XP12             3AF      943
XP13             3B5      949
XP14             3BC      956
XP15             3C4      964
XP16             3CA      970
XP17             3D0      976
XP18             3D2      978
XP21             3EF      1007
XP22             3F2      1010
XP23             3F5      1013
XP24             3FC      1020
XP25             40D      1037
XP26             410      1040
XP31             41C      1052
XP32             438      1080
XP33             43F      1087
XP34             448      1096
XP35             467      1127
XP40             47A      1146
XP41             482      1154
XP42             48F      1167
XP43             490      1168
