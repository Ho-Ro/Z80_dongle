0001   0000             ;Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
0002   0000             ;Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
0003   0000             ;Status bit for read in CHKIO changed to 0x02
0004   0000             ;Status bit for write in OUTC (actually OC3) changed to 0x01
0005   0000             ;Changed UART initialization parameters in INIT
0006   0000             ;Changed ORG statements at end of file to match system with 2K RAM
0007   0000             ;*************************************************************
0008   0000             ; 
0009   0000             ;                 TINY BASIC FOR INTEL 8080
0010   0000             ;                       VERSION 2.0
0011   0000             ;                     BY LI-CHEN WANG
0012   0000             ;                  MODIFIED AND TRANSLATED
0013   0000             ;                    TO INTEL MNEMONICS
0014   0000             ;                     BY ROGER RAUSKOLB
0015   0000             ;                      10 OCTOBER,1976
0016   0000             ;                        @COPYLEFT
0017   0000             ;                   ALL WRONGS RESERVED
0018   0000             ; 
0019   0000             ;*************************************************************
0020   0000             ; 
0021   0000             ; *** ZERO PAGE SUBROUTINES ***
0022   0000             ; 
0023   0000             ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
0024   0000             ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
0025   0000             ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
0026   0000             ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
0027   0000             ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
0028   0000             ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
0029   0000             ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
0030   0000             ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
0031   0000             ; 
0032   0000             
0033   0000             ;DWA     MACRO WHERE
0034   0000             ;        DB   (WHERE SHR 8) + 128
0035   0000             ;        DB   WHERE AND 0FFH
0036   0000             ;        ENDM
0037   0000             ;
0038   0000             
0039   0000             ; Memory map
0040   0000             ROMBGN  .EQU $0000      ; Execution must start here
0041   0000             RAMBGN  .EQU $0800      ; 2K ROM
0042   0000             RAMSZE  .EQU $0800      ; 2K RAM
0043   0000             
0044   0000             ; IO map
0045   0000             IODATA  .EQU 1
0046   0000             IOSTAT  .EQU 2
0047   0000             
0048   0000             ; Control character
0049   0000             BS      .EQU 08H        ; ^H, BACKSPACE
0050   0000             CR      .EQU 0DH        ; ^M, CARRIAGE RETURN
0051   0000             LF      .EQU 0AH        ; ^J, LINE FEED
0052   0000             CAN     .EQU 18H        ; ^X, CANCEL
0053   0000             DEL     .EQU 7FH        ; DELETE
0054   0000             
0055   0000             ; Store a label address as BIG endian with bit A15 set
0056   0000             #DEFINE DWA(LABEL) .DB (LABEL >> 8) | $80 \ .DB (LABEL & $FF)
0057   0000             
0058   0000             ; if CHAR != A then jump relative to LABEL
0059   0000             #DEFINE TSTC(CHAR,LABEL) RST RTSTC \ .DB CHAR \ .DB LABEL-$-1
0060   0000             
0061   0000             
0062   0000                     .ORG ROMBGN
0063   0000             
0064   0000 31 00 10    START:  LXI  SP,STACK                   ;*** COLD START ***
0065   0003 3E FF               MVI  A,0FFH
0066   0005 C3 C5 06            JMP  INIT
0067   0008             
0068   0008             RTSTC  .EQU 1                          ;*** RST 1 @ $0008 ***
0069   0008 E3                  XTHL
0070   0009 EF                  RST  RIGNBLK                    ;IGNORE BLANKS AND
0071   000A BE                  CMP  M                          ;TEST CHARACTER
0072   000B C3 6F 00            JMP  TC1                        ;REST OF THIS IS AT TC1
0073   000E             
0074   000E 3E 0D       CRLF:   MVI  A,CR                       ;*** CRLF ***
0075   0010             ;
0076   0010             ROUTC   .EQU 2                          ;*** RST 2 @ $0010 ***
0077   0010 D3 01       OUTC:   OUT  IODATA                     ;Out to data port
0078   0012 FE 0D               CPI  CR                         ;WAS IT CR?
0079   0014 C0                  RNZ                             ;NO, FINISHED
0080   0015 C3 E4 06            JMP  OC1                        ;REST OF THIS IS AT OC1
0081   0018             
0082   0018             REXPR   .EQU 3                          ;*** RST 3 @ $0018 ***
0083   0018 CD BB 03    EXPR:   CALL EXPR2
0084   001B E5                  PUSH H                          ;EVALUATE AN EXPRESSION
0085   001C C3 77 03            JMP  EXPR1                      ;REST OF IT AT EXPR1
0086   001F 57                  .DB  "W"
0087   0020             
0088   0020             RCOMP   .EQU 4                          ;*** RST 4 @ $0020 ***
0089   0020 7C          COMP:   MOV  A,H
0090   0021 BA                  CMP  D                          ;COMPARE HL WITH DE
0091   0022 C0                  RNZ                             ;RETURN CORRECT C AND
0092   0023 7D                  MOV  A,L                        ;Z FLAGS
0093   0024 BB                  CMP  E                          ;BUT OLD A IS LOST
0094   0025 C9                  RET
0095   0026 41 4E               .DB  "AN"
0096   0028             
0097   0028             RIGNBLK .EQU 5                          ;*** RST 5 @ $0028 ***
0098   0028 1A          IGNBLK: LDAX D
0099   0029 FE 20               CPI  20H                        ;IGNORE BLANKS
0100   002B C0                  RNZ                             ;IN TEXT (WHERE DE->)
0101   002C 13                  INX  D                          ;AND RETURN THE FIRST
0102   002D C3 28 00            JMP  IGNBLK                     ;NON-BLANK CHAR. IN A
0103   0030             
0104   0030             RFINISH .EQU 6                          ;*** RST 6 @ $0030 ***
0105   0030 F1          FINISH: POP  PSW
0106   0031 CD 0F 05            CALL FIN                        ;CHECK END OF COMMAND
0107   0034 C3 22 05            JMP  QWHAT                      ;PRINT "WHAT?" IF WRONG
0108   0037 47                  .DB  "G"
0109   0038             
0110   0038             RTSTV   .EQU 7                          ;*** RST 7 @ $0038 ***
0111   0038 EF          TSTV:   RST  RIGNBLK                    ;IGNBLK
0112   0039 D6 40               SUI  40H                        ;TEST VARIABLES
0113   003B D8                  RC                              ;C:NOT A VARIABLE
0114   003C C2 58 00            JNZ  TV1                        ;NOT "@" ARRAY
0115   003F 13                  INX  D                          ;IT IS THE "@" ARRAY
0116   0040 CD 64 04            CALL PARN                       ;@ SHOULD BE FOLLOWED
0117   0043 29                  DAD  H                          ;BY (EXPR) AS ITS INDEX
0118   0044 DA D7 00            JC   QHOW                       ;IS INDEX TOO BIG (>0x7FFF)?
0119   0047 D5                  PUSH D                          ;WILL IT OVERWRITE
0120   0048 EB                  XCHG                            ;TEXT?
0121   0049 CD A3 04            CALL SIZE                       ;FIND SIZE OF FREE
0122   004C E7                  RST  RCOMP                      ;AND CHECK THAT
0123   004D DA 50 05            JC   ASORRY                     ;IF SO, SAY "SORRY"
0124   0050 21 00 0F            LXI  H,VARBGN                   ;IF NOT GET ADDRESS
0125   0053 CD D8 04            CALL SUBDE                      ;OF @(EXPR) AND PUT IT
0126   0056 D1                  POP  D                          ;IN HL (top-down from TXTEND)
0127   0057 C9                  RET                             ;C FLAG IS CLEARED
0128   0058             ;
0129   0058 FE 21       TV1:    CPI  21H                        ;>='a'?
0130   005A DA 5F 00            JC   TV2                        ;NO
0131   005D D6 20               SUI  20H                        ;MAKE UPPER CASE
0132   005F FE 1B       TV2:    CPI  1BH                        ;NOT @, IS IT A TO Z?
0133   0061 3F                  CMC                             ;IF NOT RETURN C FLAG
0134   0062 D8                  RC
0135   0063 13                  INX  D                          ;IF A THROUGH Z
0136   0064 21 00 0F            LXI  H,VARBGN                   ;COMPUTE ADDRESS OF
0137   0067 07                  RLC                             ;THAT VARIABLE
0138   0068 85                  ADD  L                          ;AND RETURN IT IN HL
0139   0069 6F                  MOV  L,A                        ;WITH C FLAG CLEARED
0140   006A 3E 00               MVI  A,0
0141   006C 8C                  ADC  H
0142   006D 67                  MOV  H,A
0143   006E C9                  RET
0144   006F             
0145   006F             ;TSTC:  XTHL                            ;*** TSTC OR RST 1 ***
0146   006F             ;       RST  RIGNBLK                    ;THIS IS AT LOC. 8
0147   006F             ;       CMP  M                          ;AND THEN JUMP HERE
0148   006F 23          TC1:    INX  H                          ;COMPARE THE BYTE THAT
0149   0070 CA 7A 00            JZ   TC2                        ;FOLLOWS THE RST INST.
0150   0073 C5                  PUSH B                          ;WITH THE TEXT (DE->)
0151   0074 4E                  MOV  C,M                        ;IF NOT =, ADD THE 2ND
0152   0075 06 00               MVI  B,0                        ;BYTE THAT FOLLOWS THE
0153   0077 09                  DAD  B                          ;RST TO THE OLD PC
0154   0078 C1                  POP  B                          ;I.E., DO A RELATIVE
0155   0079 1B                  DCX  D                          ;JUMP IF NOT =
0156   007A 13          TC2:    INX  D                          ;IF =, SKIP THOSE BYTES
0157   007B 23                  INX  H                          ;AND CONTINUE
0158   007C E3                  XTHL
0159   007D C9                  RET
0160   007E             
0161   007E 21 00 00    TSTNUM: LXI  H,0                        ;*** TSTNUM ***
0162   0081 44                  MOV  B,H                        ;TEST IF THE TEXT IS
0163   0082 EF                  RST  RIGNBLK                    ;A NUMBER
0164   0083 FE 24               CPI  '$'                        ;HEX NUMBER?
0165   0085 CA AB 00            JZ   TX1                        ;YES
0166   0088 FE 30       TN1:    CPI  '0'                        ;IF NOT, RETURN 0 IN
0167   008A D8                  RC                              ;B AND HL
0168   008B FE 3A               CPI  '9'+1                      ;IF NUMBERS, CONVERT
0169   008D D0                  RNC                             ;TO BINARY IN HL AND
0170   008E 3E F0               MVI  A,0F0H                     ;SET B TO # OF DIGITS
0171   0090 A4                  ANA  H                          ;IF H>15, THERE IS NO
0172   0091 C2 D7 00            JNZ  QHOW                       ;ROOM FOR NEXT DIGIT
0173   0094 04                  INR  B                          ;B COUNTS # OF DIGITS
0174   0095 C5                  PUSH B
0175   0096 44                  MOV  B,H                        ;HL=10*HL+(NEW DIGIT)
0176   0097 4D                  MOV  C,L
0177   0098 29                  DAD  H                          ; 2*HL
0178   0099 29                  DAD  H                          ; 4*HL
0179   009A 09                  DAD  B                          ; 5*HL
0180   009B 29                  DAD  H                          ;10*HL
0181   009C 1A                  LDAX D                          ;AND (DIGIT) IS FROM
0182   009D 13                  INX  D                          ;STRIPPING THE ASCII
0183   009E E6 0F               ANI  0FH                        ;CODE
0184   00A0 85                  ADD  L
0185   00A1 6F                  MOV  L,A
0186   00A2 3E 00               MVI  A,0
0187   00A4 8C                  ADC  H
0188   00A5 67                  MOV  H,A
0189   00A6 C1                  POP  B
0190   00A7 1A                  LDAX D                          ;DO THIS DIGIT AFTER
0191   00A8 F2 88 00            JP   TN1                        ;DIGIT. S SAYS OVERFLOW
0192   00AB             
0193   00AB 13          TX1:    INX  D                          ;SKIP TO NEXT HEX
0194   00AC 1A                  LDAX D                          ;GET HEX DIGIT
0195   00AD FE 30               CPI  '0'                        ;< '0'
0196   00AF D8                  RC                              ;ERROR
0197   00B0 FE 3A               CPI  '9'+1                      ;<= '9'
0198   00B2 DA BF 00            JC   TX2                        ;OK '0'..'9'
0199   00B5 FE 41               CPI  'A'                        ;< 'A'
0200   00B7 D8                  RC                              ;ERROR, >'9' && < 'A'
0201   00B8 E6 5F               ANI  5FH                        ;CONVERT ALPHA TO UPPER
0202   00BA FE 47               CPI  'F'+1                      ;> 'F'
0203   00BC D0                  RNC                             ;ERROR
0204   00BD D6 07               SUI  'A'-'0'-10                 ;SKIP GAP '9' -> 'A'
0205   00BF E6 0F       TX2:    ANI  0FH                        ;GET HEX CODE 0..F
0206   00C1 C5                  PUSH B
0207   00C2 47                  MOV  B,A                        ;SAVE HEX CODE
0208   00C3 3E F0               MVI  A,0F0H                     ;IF H>15
0209   00C5 A4                  ANA  H                          ;THERE IS NO ROOM
0210   00C6 78                  MOV  A,B
0211   00C7 C1                  POP  B
0212   00C8 C2 D7 00            JNZ  QHOW                       ;FOR NEXT DIGIT
0213   00CB             
0214   00CB 04                  INR  B                          ;B COUNTS # OF DIGITS
0215   00CC 29                  DAD  H                          ;2*HL
0216   00CD 29                  DAD  H                          ;4*HL
0217   00CE 29                  DAD  H                          ;8*HL
0218   00CF 29                  DAD  H                          ;16*HL
0219   00D0 B5                  ORA  L                          ;PUT HEX CODE INTO
0220   00D1 6F                  MOV  L,A                        ;THE 4 LSB OF HL
0221   00D2 7C                  MOV  A,H
0222   00D3 B7                  ORA  A
0223   00D4 C3 AB 00            JMP   TX1                        ;DIGIT AFTER DIGIT. S SAYS OVERFLOW
0224   00D7             
0225   00D7 D5          QHOW:   PUSH D                          ;*** ERROR "HOW?" ***
0226   00D8 11 DE 00    AHOW:   LXI  D,HOW
0227   00DB C3 26 05            JMP  ERROR
0228   00DE             
0229   00DE 48 4F 57 3F HOW:    .DB  "HOW?"
0230   00E2 0D                  .DB  CR
0231   00E3             
0232   00E3 4F 4B       OK:     .DB  "OK"
0233   00E5 0D                  .DB  CR
0234   00E6             
0235   00E6 57 48 41 54 WHAT:   .DB  "WHAT?"
0235   00EA 3F 
0236   00EB 0D                  .DB  CR
0237   00EC             
0238   00EC 53 4F 52 52 SORRY:  .DB  "SORRY"
0238   00F0 59 
0239   00F1 0D                  .DB  CR
0240   00F2             
0241   00F2             ;*************************************************************
0242   00F2             ;
0243   00F2             ; *** MAIN ***
0244   00F2             ;
0245   00F2             ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
0246   00F2             ; AND STORES IT IN THE MEMORY.
0247   00F2             ;
0248   00F2             ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
0249   00F2             ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
0250   00F2             ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
0251   00F2             ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
0252   00F2             ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
0253   00F2             ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
0254   00F2             ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
0255   00F2             ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
0256   00F2             ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
0257   00F2             ;
0258   00F2             ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
0259   00F2             ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
0260   00F2             ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
0261   00F2             ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
0262   00F2             ;
0263   00F2             ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
0264   00F2             ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
0265   00F2             ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
0266   00F2             ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
0267   00F2             ;
0268   00F2             ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
0269   00F2             ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
0270   00F2             ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
0271   00F2             ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
0272   00F2             ;
0273   00F2 31 00 10    RSTART: LXI  SP,STACK
0274   00F5 CD 0E 00    ST1:    CALL CRLF                       ;AND JUMP TO HERE
0275   00F8 11 E3 00            LXI  D,OK                       ;DE->STRING
0276   00FB 97                  SUB  A                          ;A=0
0277   00FC CD C7 05            CALL PRTSTG                     ;PRINT STRING UNTIL CR
0278   00FF 21 06 01            LXI  H,ST2+1                    ;LITERAL 0
0279   0102 22 02 08            SHLD CURRNT                     ;CURRENT->LINE # = 0
0280   0105 21 00 00    ST2:    LXI  H,0
0281   0108 22 0A 08            SHLD LOPVAR
0282   010B 22 04 08            SHLD STKGOS
0283   010E 3E 3E       ST3:    MVI  A,'>'                      ;PROMPT '>' AND
0284   0110 CD 56 05            CALL GETLN                      ;READ A LINE
0285   0113 D5                  PUSH D                          ;DE->END OF LINE
0286   0114 11 68 0F            LXI  D,BUFFER                   ;DE->BEGINNING OF LINE
0287   0117 CD 7E 00            CALL TSTNUM                     ;TEST IF IT IS A NUMBER
0288   011A EF                  RST  RIGNBLK
0289   011B 7C                  MOV  A,H                        ;HL=VALUE OF THE # OR
0290   011C B5                  ORA  L                          ;0 IF NO # WAS FOUND
0291   011D C1                  POP  B                          ;BC->END OF LINE
0292   011E CA 9C 07            JZ   DIRECT
0293   0121 1B                  DCX  D                          ;BACKUP DE AND SAVE
0294   0122 7C                  MOV  A,H                        ;VALUE OF LINE # THERE
0295   0123 12                  STAX D
0296   0124 1B                  DCX  D
0297   0125 7D                  MOV  A,L
0298   0126 12                  STAX D
0299   0127 C5                  PUSH B                          ;BC,DE->BEGIN, END
0300   0128 D5                  PUSH D
0301   0129 79                  MOV  A,C
0302   012A 93                  SUB  E
0303   012B F5                  PUSH PSW                        ;A=# OF BYTES IN LINE
0304   012C CD 9F 05            CALL FNDLN                      ;FIND THIS LINE IN SAVE
0305   012F D5                  PUSH D                          ;AREA, DE->SAVE AREA
0306   0130 C2 43 01            JNZ  ST4                        ;NZ:NOT FOUND, INSERT
0307   0133 D5                  PUSH D                          ;Z:FOUND, DELETE IT
0308   0134 CD BB 05            CALL FNDNXT                     ;FIND NEXT LINE
0309   0137                                                     ;DE->NEXT LINE
0310   0137 C1                  POP  B                          ;BC->LINE TO BE DELETED
0311   0138 2A 16 08            LHLD TXTUNF                     ;HL->UNFILLED SAVE AREA
0312   013B CD 68 06            CALL MVUP                       ;MOVE UP TO DELETE
0313   013E 60                  MOV  H,B                        ;TXTUNF->UNFILLED AREA
0314   013F 69                  MOV  L,C
0315   0140 22 16 08            SHLD TXTUNF                     ;UPDATE
0316   0143 C1          ST4:    POP  B                          ;GET READY TO INSERT
0317   0144 2A 16 08            LHLD TXTUNF                     ;BUT FIRST CHECK IF
0318   0147 F1                  POP  PSW                        ;THE LENGTH OF NEW LINE
0319   0148 E5                  PUSH H                          ;IS 3 (LINE # AND CR)
0320   0149 FE 03               CPI  3                          ;THEN DO NOT INSERT
0321   014B CA F2 00            JZ   RSTART                     ;MUST CLEAR THE STACK
0322   014E 85                  ADD  L                          ;COMPUTE NEW TXTUNF
0323   014F 6F                  MOV  L,A
0324   0150 3E 00               MVI  A,0
0325   0152 8C                  ADC  H
0326   0153 67                  MOV  H,A                        ;HL->NEW UNFILLED AREA
0327   0154 11 00 0F            LXI  D,TXTEND                   ;CHECK TO SEE IF THERE
0328   0157 E7                  RST  RCOMP                      ;COMP HL,DE - IS ENOUGH SPACE
0329   0158 D2 4F 05            JNC  QSORRY                     ;SORRY, NO ROOM FOR IT
0330   015B 22 16 08            SHLD TXTUNF                     ;OK, UPDATE TXTUNF
0331   015E D1                  POP  D                          ;DE->OLD UNFILLED AREA
0332   015F CD 71 06            CALL MVDOWN
0333   0162 D1                  POP  D                          ;DE->BEGIN, HL->END
0334   0163 E1                  POP  H
0335   0164 CD 68 06            CALL MVUP                       ;MOVE NEW LINE TO SAVE
0336   0167 C3 0E 01            JMP  ST3                        ;AREA
0337   016A             
0338   016A             ;*************************************************************
0339   016A             ;
0340   016A             ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
0341   016A             ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
0342   016A             ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
0343   016A             ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
0344   016A             ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
0345   016A             ;
0346   016A             ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
0347   016A             ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
0348   016A             ; GO BACK TO 'RSTART'.
0349   016A             ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
0350   016A             ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
0351   016A             ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
0352   016A             ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
0353   016A             ;*************************************************************
0354   016A             ;
0355   016A             ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
0356   016A             ;
0357   016A             ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
0358   016A             ;
0359   016A             ; 'STOP(CR)' GOES BACK TO 'RSTART'
0360   016A             ;
0361   016A             ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
0362   016A             ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
0363   016A             ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
0364   016A             ;
0365   016A             ; THERE ARE 3 MORE ENTRIES IN 'RUN':
0366   016A             ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
0367   016A             ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
0368   016A             ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
0369   016A             ;
0370   016A             ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
0371   016A             ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
0372   016A             ;
0373   016A CD 1E 05    NEW:    CALL ENDCHK                     ;*** NEW(CR) ***
0374   016D 21 18 08            LXI  H,TXTBGN
0375   0170 22 16 08            SHLD TXTUNF
0376   0173             ;
0377   0173 CD 1E 05    STOP:   CALL ENDCHK                     ;*** STOP(CR) ***
0378   0176 C3 F2 00            JMP  RSTART
0379   0179             
0380   0179 CD 1E 05    RUN:    CALL ENDCHK                     ;*** RUN(CR) ***
0381   017C 11 18 08            LXI  D,TXTBGN                   ;FIRST SAVED LINE
0382   017F             ;
0383   017F 21 00 00    RUNNXL: LXI  H,0                        ;*** RUNNXL ***
0384   0182 CD A7 05            CALL FNDLP                      ;FIND WHATEVER LINE #
0385   0185 DA F2 00            JC   RSTART                     ;C:PASSED TXTUNF, QUIT
0386   0188             ;
0387   0188 EB          RUNTSL: XCHG                            ;*** RUNTSL ***
0388   0189 22 02 08            SHLD CURRNT                     ;SET 'CURRENT'->LINE #
0389   018C EB                  XCHG
0390   018D 13                  INX  D                          ;BUMP PASS LINE #
0391   018E 13                  INX  D
0392   018F             ;
0393   018F CD EA 06    RUNSML: CALL CHKIO                      ;*** RUNSML ***
0394   0192 21 12 07            LXI  H,TAB2-1                   ;FIND COMMAND IN TAB2
0395   0195 C3 9F 07            JMP  EXEC                       ;AND EXECUTE IT
0396   0198             
0397   0198 DF          GOTO:   RST  REXPR                      ;*** GOTO EXPR ***
0398   0199 D5                  PUSH D                          ;SAVE FOR ERROR ROUTINE
0399   019A CD 1E 05            CALL ENDCHK                     ;MUST FIND A CR
0400   019D CD 9F 05            CALL FNDLN                      ;FIND THE TARGET LINE
0401   01A0 C2 D8 00            JNZ  AHOW                       ;NO SUCH LINE #
0402   01A3 F1                  POP  PSW                        ;CLEAR THE PUSH DE
0403   01A4 C3 88 01            JMP  RUNTSL                     ;GO DO IT
0404   01A7             ;
0405   01A7             ;*************************************************************
0406   01A7             ;
0407   01A7             ; *** LIST *** & PRINT ***
0408   01A7             ;
0409   01A7             ; LIST HAS TWO FORMS:
0410   01A7             ; 'LIST(CR)' LISTS ALL SAVED LINES
0411   01A7             ; 'LIST #(CR)' START LIST AT THIS LINE #
0412   01A7             ; YOU CAN STOP THE LISTING BY CONTROL C KEY
0413   01A7             ;
0414   01A7             ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
0415   01A7             ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
0416   01A7             ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
0417   01A7             ;
0418   01A7             ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
0419   01A7             ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
0420   01A7             ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
0421   01A7             ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
0422   01A7             ; SPECIFIED, 6 POSITIONS WILL BE USED.
0423   01A7             ;
0424   01A7             ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
0425   01A7             ; DOUBLE QUOTES.
0426   01A7             ;
0427   01A7             ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
0428   01A7             ;
0429   01A7             ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
0430   01A7             ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
0431   01A7             ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
0432   01A7             ;
0433   01A7 CD 7E 00    LIST:   CALL TSTNUM                     ;TEST IF THERE IS A #
0434   01AA CD 1E 05            CALL ENDCHK                     ;IF NO # WE GET A 0
0435   01AD CD 9F 05            CALL FNDLN                      ;FIND THIS OR NEXT LINE
0436   01B0 DA F2 00    LS1:    JC   RSTART                     ;C:PASSED TXTUNF
0437   01B3 CD 50 06            CALL PRTLN                      ;PRINT THE LINE
0438   01B6 CD EA 06            CALL CHKIO                      ;STOP IF HIT CONTROL-C
0439   01B9 CD A7 05            CALL FNDLP                      ;FIND NEXT LINE
0440   01BC C3 B0 01            JMP  LS1                        ;AND LOOP BACK
0441   01BF             
0442   01BF 0E 08       PRINT:  MVI  C,8                        ;C = # OF SPACES
0443   01C1 3E 0A               MVI  A,10                       ;DEFAULT BASE FOR PRTNUM
0444   01C3 32 00 08            STA  PNBASE
0445   01C6 CF                  TSTC(';',PR2)                   ;IF NULL LIST & ";"
0445   01C7 3B          
0445   01C8 06          
0446   01C9 CD 0E 00            CALL CRLF                       ;GIVE CR-LF AND
0447   01CC C3 8F 01            JMP  RUNSML                     ;CONTINUE SAME LINE
0448   01CF CF          PR2:    TSTC(CR,PR0)                    ;IF NULL LIST (CR)
0448   01D0 0D          
0448   01D1 06          
0449   01D2 CD 0E 00            CALL CRLF                       ;ALSO GIVE CR-LF AND
0450   01D5 C3 7F 01            JMP  RUNNXL                     ;GO TO NEXT LINE
0451   01D8 CF          PR0:    TSTC('#',PR5)                   ;ELSE IS IT FORMAT?
0451   01D9 23          
0451   01DA 05          
0452   01DB DF                  RST  REXPR                      ;YES, EVALUATE EXPR.
0453   01DC 4D                  MOV  C,L                        ;AND SAVE IT IN C
0454   01DD C3 F1 01            JMP  PR3                        ;LOOK FOR MORE TO PRINT
0455   01E0 CF          PR5:    TSTC('%',PR1)                   ;ELSE IS IT PRTNUM BASE?
0455   01E1 25          
0455   01E2 08          
0456   01E3 DF                  RST  REXPR                      ;YES, EVALUATE EXPR.
0457   01E4 7D                  MOV  A,L                        ;AND STORE THE LOW PART
0458   01E5 32 00 08            STA  PNBASE                     ;IN PNBASE
0459   01E8 C3 F1 01            JMP  PR3                        ;LOOK FOR MORE TO PRINT
0460   01EB CD D3 05    PR1:    CALL QTSTG                      ;OR IS IT A STRING?
0461   01EE C3 03 02            JMP  PR8                        ;IF NOT, MUST BE EXPR.
0462   01F1 CF          PR3:    TSTC($2C,PR6)                   ;IF ",", GO FIND NEXT
0462   01F2 2C          
0462   01F3 06          
0463   01F4 CD 0F 05            CALL FIN                        ;IN THE LIST.
0464   01F7 C3 D8 01            JMP  PR0                        ;LIST CONTINUES
0465   01FA 3E 0A       PR6:    MVI  A,10                       ;END OF LIST REACHED
0466   01FC 32 00 08            STA  PNBASE                     ;RESET DEFAULT BASE
0467   01FF CD 0E 00            CALL CRLF                       ;LIST ENDS WITH CRLF
0468   0202 F7                  RST  RFINISH                    ;FINISH
0469   0203 DF          PR8:    RST  REXPR                      ;EVALUATE THE EXPR
0470   0204 C5                  PUSH B
0471   0205 CD F8 05            CALL PRTNUM                     ;PRINT THE VALUE
0472   0208 C1                  POP  B
0473   0209 C3 F1 01            JMP  PR3                        ;MORE TO PRINT?
0474   020C             ;
0475   020C             ;*************************************************************
0476   020C             ;
0477   020C             ; *** GOSUB *** & RETURN ***
0478   020C             ;
0479   020C             ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
0480   020C             ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
0481   020C             ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
0482   020C             ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
0483   020C             ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
0484   020C             ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
0485   020C             ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
0486   020C             ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
0487   020C             ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
0488   020C             ;
0489   020C             ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
0490   020C             ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
0491   020C             ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
0492   020C             ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
0493   020C             ;
0494   020C CD 9C 06    GOSUB:  CALL PUSHA                      ;SAVE THE CURRENT "FOR"
0495   020F DF                  RST  REXPR                      ;PARAMETERS
0496   0210 D5                  PUSH D                          ;AND TEXT POINTER
0497   0211 CD 9F 05            CALL FNDLN                      ;FIND THE TARGET LINE
0498   0214 C2 D8 00            JNZ  AHOW                       ;NOT THERE. SAY "HOW?"
0499   0217 2A 02 08            LHLD CURRNT                     ;FOUND IT, SAVE OLD
0500   021A E5                  PUSH H                          ;'CURRNT' OLD 'STKGOS'
0501   021B 2A 04 08            LHLD STKGOS
0502   021E E5                  PUSH H
0503   021F 21 00 00            LXI  H,0                        ;AND LOAD NEW ONES
0504   0222 22 0A 08            SHLD LOPVAR
0505   0225 39                  DAD  SP
0506   0226 22 04 08            SHLD STKGOS
0507   0229 C3 88 01            JMP  RUNTSL                     ;THEN RUN THAT LINE
0508   022C CD 1E 05    RETURN: CALL ENDCHK                     ;THERE MUST BE A CR
0509   022F 2A 04 08            LHLD STKGOS                     ;OLD STACK POINTER
0510   0232 7C                  MOV  A,H                        ;0 MEANS NOT EXIST
0511   0233 B5                  ORA  L
0512   0234 CA 22 05            JZ   QWHAT                      ;SO, WE SAY: "WHAT?"
0513   0237 F9                  SPHL                            ;ELSE, RESTORE IT
0514   0238 E1                  POP  H
0515   0239 22 04 08            SHLD STKGOS                     ;AND THE OLD 'STKGOS'
0516   023C E1                  POP  H
0517   023D 22 02 08            SHLD CURRNT                     ;AND THE OLD 'CURRNT'
0518   0240 D1                  POP  D                          ;OLD TEXT POINTER
0519   0241 CD 80 06            CALL POPA                       ;OLD "FOR" PARAMETERS
0520   0244 F7                  RST  RFINISH                    ;AND WE ARE BACK HOME
0521   0245             ;
0522   0245             ;*************************************************************
0523   0245             ;
0524   0245             ; *** FOR *** & NEXT ***
0525   0245             ;
0526   0245             ; 'FOR' HAS TWO FORMS:
0527   0245             ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
0528   0245             ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
0529   0245             ; EXP3=1.  (I.E., WITH A STEP OF +1.)
0530   0245             ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
0531   0245             ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
0532   0245             ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
0533   0245             ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
0534   0245             ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
0535   0245             ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
0536   0245             ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
0537   0245             ; BEFORE THE NEW ONE OVERWRITES IT.
0538   0245             ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
0539   0245             ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
0540   0245             ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
0541   0245             ; (PURGED FROM THE STACK..)
0542   0245             ;
0543   0245             ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
0544   0245             ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
0545   0245             ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
0546   0245             ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
0547   0245             ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
0548   0245             ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
0549   0245             ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
0550   0245             ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
0551   0245             ; IS PURGED AND EXECUTION CONTINUES.
0552   0245             ;
0553   0245 CD 9C 06    FOR:    CALL PUSHA                      ;SAVE THE OLD SAVE AREA
0554   0248 CD FC 04            CALL SETVAL                     ;SET THE CONTROL VAR.
0555   024B 2B                  DCX  H                          ;HL IS ITS ADDRESS
0556   024C 22 0A 08            SHLD LOPVAR                     ;SAVE THAT
0557   024F 21 77 07            LXI  H,TAB5-1                   ;USE 'EXEC' TO LOOK
0558   0252 C3 9F 07            JMP  EXEC                       ;FOR THE WORD 'TO'
0559   0255 DF          FR1:    RST  REXPR                      ;EVALUATE THE LIMIT
0560   0256 22 0E 08            SHLD LOPLMT                     ;SAVE THAT
0561   0259 21 7D 07            LXI  H,TAB6-1                   ;USE 'EXEC' TO LOOK
0562   025C C3 9F 07            JMP EXEC                        ;FOR THE WORD 'STEP'
0563   025F DF          FR2:    RST  REXPR                      ;FOUND IT, GET STEP
0564   0260 C3 66 02            JMP  FR4
0565   0263 21 01 00    FR3:    LXI  H,1H                       ;NOT FOUND, SET TO 1
0566   0266 22 0C 08    FR4:    SHLD LOPINC                     ;SAVE THAT TOO
0567   0269 2A 02 08    FR5:    LHLD CURRNT                     ;SAVE CURRENT LINE #
0568   026C 22 10 08            SHLD LOPLN
0569   026F EB                  XCHG                            ;AND TEXT POINTER
0570   0270 22 12 08            SHLD LOPPT
0571   0273 01 0A 00            LXI  B,0AH                      ;DIG INTO STACK TO
0572   0276 2A 0A 08            LHLD LOPVAR                     ;FIND 'LOPVAR'
0573   0279 EB                  XCHG
0574   027A 60                  MOV  H,B
0575   027B 68                  MOV  L,B                        ;HL=0 NOW
0576   027C 39                  DAD  SP                         ;HERE IS THE STACK
0577   027D 3E                  .DB  3EH
0578   027E 09          FR7:    DAD  B                          ;EACH LEVEL IS 10 DEEP
0579   027F 7E                  MOV  A,M                        ;GET THAT OLD 'LOPVAR'
0580   0280 23                  INX  H
0581   0281 B6                  ORA  M
0582   0282 CA 9F 02            JZ   FR8                        ;0 SAYS NO MORE IN IT
0583   0285 7E                  MOV  A,M
0584   0286 2B                  DCX  H
0585   0287 BA                  CMP  D                          ;SAME AS THIS ONE?
0586   0288 C2 7E 02            JNZ  FR7
0587   028B 7E                  MOV  A,M                        ;THE OTHER HALF?
0588   028C BB                  CMP  E
0589   028D C2 7E 02            JNZ  FR7
0590   0290 EB                  XCHG                            ;YES, FOUND ONE
0591   0291 21 00 00            LXI  H,0H
0592   0294 39                  DAD  SP                         ;TRY TO MOVE SP
0593   0295 44                  MOV  B,H
0594   0296 4D                  MOV  C,L
0595   0297 21 0A 00            LXI  H,0AH
0596   029A 19                  DAD  D
0597   029B CD 71 06            CALL MVDOWN                     ;AND PURGE 10 WORDS
0598   029E F9                  SPHL                            ;IN THE STACK
0599   029F 2A 12 08    FR8:    LHLD LOPPT                      ;JOB DONE, RESTORE DE
0600   02A2 EB                  XCHG
0601   02A3 F7                  RST  RFINISH                    ;AND CONTINUE
0602   02A4             ;
0603   02A4 FF          NEXT:   RST  RTSTV                      ;GET ADDRESS OF VAR.
0604   02A5 DA 22 05            JC   QWHAT                      ;NO VARIABLE, "WHAT?"
0605   02A8 22 06 08            SHLD VARNXT                     ;YES, SAVE IT
0606   02AB D5          NX0:    PUSH D                          ;SAVE TEXT POINTER
0607   02AC EB                  XCHG
0608   02AD 2A 0A 08            LHLD LOPVAR                     ;GET VAR. IN 'FOR'
0609   02B0 7C                  MOV  A,H
0610   02B1 B5                  ORA  L                          ;0 SAYS NEVER HAD ONE
0611   02B2 CA 23 05            JZ   AWHAT                      ;SO WE ASK: "WHAT?"
0612   02B5 E7                  RST  RCOMP                      ;ELSE WE CHECK THEM
0613   02B6 CA C3 02            JZ   NX3                        ;OK, THEY AGREE
0614   02B9 D1                  POP  D                          ;NO, LET'S SEE
0615   02BA CD 80 06            CALL POPA                       ;PURGE CURRENT LOOP
0616   02BD 2A 06 08            LHLD VARNXT                     ;AND POP ONE LEVEL
0617   02C0 C3 AB 02            JMP  NX0                        ;GO CHECK AGAIN
0618   02C3 5E          NX3:    MOV  E,M                        ;COME HERE WHEN AGREED
0619   02C4 23                  INX  H
0620   02C5 56                  MOV  D,M                        ;DE=VALUE OF VAR.
0621   02C6 2A 0C 08            LHLD LOPINC
0622   02C9 E5                  PUSH H
0623   02CA 7C                  MOV  A,H
0624   02CB AA                  XRA  D
0625   02CC 7A                  MOV  A,D
0626   02CD 19                  DAD  D                          ;ADD ONE STEP
0627   02CE FA D5 02            JM   NX4
0628   02D1 AC                  XRA  H
0629   02D2 FA F7 02            JM   NX5
0630   02D5 EB          NX4:    XCHG
0631   02D6 2A 0A 08            LHLD LOPVAR                     ;PUT IT BACK
0632   02D9 73                  MOV  M,E
0633   02DA 23                  INX  H
0634   02DB 72                  MOV  M,D
0635   02DC 2A 0E 08            LHLD LOPLMT                     ;HL->LIMIT
0636   02DF F1                  POP  PSW                        ;OLD HL
0637   02E0 B7                  ORA  A
0638   02E1 F2 E5 02            JP   NX1                        ;STEP > 0
0639   02E4 EB                  XCHG                            ;STEP < 0
0640   02E5 CD F4 04    NX1:    CALL CKHLDE                     ;COMPARE WITH LIMIT
0641   02E8 D1                  POP  D                          ;RESTORE TEXT POINTER
0642   02E9 DA F9 02            JC   NX2                        ;OUTSIDE LIMIT
0643   02EC 2A 10 08            LHLD LOPLN                      ;WITHIN LIMIT, GO
0644   02EF 22 02 08            SHLD CURRNT                     ;BACK TO THE SAVED
0645   02F2 2A 12 08            LHLD LOPPT                      ;'CURRNT' AND TEXT
0646   02F5 EB                  XCHG                            ;POINTER
0647   02F6 F7                  RST  RFINISH
0648   02F7 E1          NX5:    POP  H
0649   02F8 D1                  POP  D
0650   02F9 CD 80 06    NX2:    CALL POPA                       ;PURGE THIS LOOP
0651   02FC F7                  RST  RFINISH
0652   02FD             ;
0653   02FD             ;*************************************************************
0654   02FD             ;
0655   02FD             ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
0656   02FD             ;
0657   02FD             ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
0658   02FD             ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
0659   02FD             ;
0660   02FD             ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
0661   02FD             ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
0662   02FD             ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
0663   02FD             ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
0664   02FD             ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
0665   02FD             ; EXECUTION CONTINUES AT THE NEXT LINE.
0666   02FD             ;
0667   02FD             ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
0668   02FD             ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
0669   02FD             ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
0670   02FD             ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
0671   02FD             ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
0672   02FD             ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
0673   02FD             ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
0674   02FD             ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
0675   02FD             ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
0676   02FD             ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
0677   02FD             ;
0678   02FD             ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
0679   02FD             ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
0680   02FD             ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
0681   02FD             ; THIS IS HANDLED IN 'INPERR'.
0682   02FD             ;
0683   02FD             ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
0684   02FD             ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
0685   02FD             ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
0686   02FD             ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
0687   02FD             ; THIS IS DONE BY 'DEFLT'.
0688   02FD             ;
0689   02FD 21 00 00    REM:    LXI  H,0H                       ;*** REM ***
0690   0300 3E                  .DB  3EH                        ;SKIP RST, THIS IS LIKE 'IF 0'
0691   0301             ;
0692   0301 DF          IFF:    RST  REXPR                      ;*** IF ***
0693   0302 7C                  MOV  A,H                        ;IS THE EXPR.=0?
0694   0303 B5                  ORA  L
0695   0304 C2 8F 01            JNZ  RUNSML                     ;NO, CONTINUE
0696   0307 CD BD 05            CALL FNDSKP                     ;YES, SKIP REST OF LINE
0697   030A D2 88 01            JNC  RUNTSL                     ;AND RUN THE NEXT LINE
0698   030D C3 F2 00            JMP  RSTART                     ;IF NO NEXT, RE-START
0699   0310             ;
0700   0310 2A 08 08    INPERR: LHLD STKINP                     ;*** INPERR ***
0701   0313 F9                  SPHL                            ;RESTORE OLD SP
0702   0314 E1                  POP  H                          ;AND OLD 'CURRNT'
0703   0315 22 02 08            SHLD CURRNT
0704   0318 D1                  POP  D                          ;AND OLD TEXT POINTER
0705   0319 D1                  POP  D                          ;REDO INPUT
0706   031A             ;
0707   031A             INPUT:                                  ;*** INPUT ***
0708   031A D5          IP1:    PUSH D                          ;SAVE IN CASE OF ERROR
0709   031B CD D3 05            CALL QTSTG                      ;IS NEXT ITEM A STRING?
0710   031E C3 28 03            JMP  IP2                        ;NO
0711   0321 FF                  RST  RTSTV                      ;YES, BUT FOLLOWED BY A
0712   0322 DA 5F 03            JC   IP4                        ;VARIABLE?   NO.
0713   0325 C3 38 03            JMP  IP3                        ;YES.  INPUT VARIABLE
0714   0328 D5          IP2:    PUSH D                          ;SAVE FOR 'PRTSTG'
0715   0329 FF                  RST  RTSTV                      ;MUST BE VARIABLE NOW
0716   032A DA 22 05            JC   QWHAT                      ;"WHAT?" IT IS NOT?
0717   032D 1A                  LDAX D                          ;GET READY FOR 'PRTSTR'
0718   032E 4F                  MOV  C,A
0719   032F 97                  SUB  A
0720   0330 12                  STAX D
0721   0331 D1                  POP  D
0722   0332 CD C7 05            CALL PRTSTG                     ;PRINT STRING AS PROMPT
0723   0335 79                  MOV  A,C                        ;RESTORE TEXT
0724   0336 1B                  DCX  D
0725   0337 12                  STAX D
0726   0338 D5          IP3:    PUSH D                          ;SAVE TEXT POINTER
0727   0339 EB                  XCHG
0728   033A 2A 02 08            LHLD CURRNT                     ;ALSO SAVE 'CURRNT'
0729   033D E5                  PUSH H
0730   033E 21 1A 03            LXI  H,IP1                      ;A NEGATIVE NUMBER
0731   0341 22 02 08            SHLD CURRNT                     ;AS A FLAG
0732   0344 21 00 00            LXI  H,0H                       ;SAVE SP TOO
0733   0347 39                  DAD  SP
0734   0348 22 08 08            SHLD STKINP
0735   034B D5                  PUSH D                          ;OLD HL
0736   034C 3E 3A               MVI  A,':'                      ;PRINT THIS TOO
0737   034E CD 56 05            CALL GETLN                      ;AND GET A LINE
0738   0351 11 68 0F            LXI  D,BUFFER                   ;POINTS TO BUFFER
0739   0354 DF                  RST  REXPR                      ;EVALUATE INPUT
0740   0355                     ;NOP                             ;CAN BE 'CALL ENDCHK'
0741   0355                     ;NOP
0742   0355                     ;NOP
0743   0355 D1                  POP  D                          ;OK, GET OLD HL
0744   0356 EB                  XCHG
0745   0357 73                  MOV  M,E                        ;SAVE VALUE IN VAR.
0746   0358 23                  INX  H
0747   0359 72                  MOV  M,D
0748   035A E1                  POP  H                          ;GET OLD 'CURRNT'
0749   035B 22 02 08            SHLD CURRNT
0750   035E D1                  POP  D                          ;AND OLD TEXT POINTER
0751   035F F1          IP4:    POP  PSW                        ;PURGE JUNK IN STACK
0752   0360 CF                  TSTC($2C,IP5)                   ;IS NEXT CH. ','?
0752   0361 2C          
0752   0362 03          
0753   0363 C3 1A 03            JMP  IP1                        ;YES, MORE ITEMS.
0754   0366 F7          IP5:    RST  RFINISH
0755   0367             ;
0756   0367 1A          DEFLT:  LDAX D                          ;***  DEFLT ***
0757   0368 FE 0D               CPI  CR                         ;EMPTY LINE IS OK
0758   036A CA 76 03            JZ   LT1                        ;ELSE IT IS 'LET'
0759   036D             ;
0760   036D CD FC 04    LET:    CALL SETVAL                     ;*** LET ***
0761   0370 CF                  TSTC($2C,LT1)                   ;SET VALUE TO VAR.
0761   0371 2C          
0761   0372 03          
0762   0373 C3 6D 03            JMP  LET                        ;ITEM BY ITEM
0763   0376 F7          LT1:    RST  RFINISH                    ;UNTIL FINISH
0764   0377             ;
0765   0377             ;*************************************************************
0766   0377             ;
0767   0377             ; *** EXPR ***
0768   0377             ;
0769   0377             ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
0770   0377             ; <EXPR>::<EXPR2>
0771   0377             ;         <EXPR2><REL.OP.><EXPR2>
0772   0377             ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
0773   0377             ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
0774   0377             ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
0775   0377             ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
0776   0377             ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
0777   0377             ; <EXPR4>::=<VARIABLE>
0778   0377             ;           <FUNCTION>
0779   0377             ;           (<EXPR>)
0780   0377             ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
0781   0377             ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
0782   0377             ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
0783   0377             ;
0784   0377             ;EXPR:  CALL EXPR2                      ;THIS IS AT LOC. 18
0785   0377             ;       PUSH H                          ;SAVE <EXPR2> VALUE
0786   0377 21 85 07    EXPR1:  LXI  H,TAB8-1                   ;LOOKUP REL.OP.
0787   037A C3 9F 07            JMP  EXEC                       ;GO DO IT
0788   037D             ;
0789   037D CD A6 03    XP11:   CALL XP18                       ;REL.OP.">="
0790   0380 D8                  RC                              ;NO, RETURN HL=0
0791   0381 6F                  MOV  L,A                        ;YES, RETURN HL=1
0792   0382 C9                  RET
0793   0383             ;
0794   0383 CD A6 03    XP12:   CALL XP18                       ;REL.OP."#"
0795   0386 C8                  RZ                              ;FALSE, RETURN HL=0
0796   0387 6F                  MOV  L,A                        ;TRUE, RETURN HL=1
0797   0388 C9                  RET
0798   0389             ;
0799   0389 CD A6 03    XP13:   CALL XP18                       ;REL.OP.">"
0800   038C C8                  RZ                              ;FALSE
0801   038D D8                  RC                              ;ALSO FALSE, HL=0
0802   038E 6F                  MOV  L,A                        ;TRUE, HL=1
0803   038F C9                  RET
0804   0390             ;
0805   0390 CD A6 03    XP14:   CALL XP18                       ;REL.OP."<="
0806   0393 6F                  MOV  L,A                        ;SET HL=1
0807   0394 C8                  RZ                              ;REL. TRUE, RETURN
0808   0395 D8                  RC
0809   0396 6C                  MOV  L,H                        ;ELSE SET HL=0
0810   0397 C9                  RET
0811   0398             ;
0812   0398 CD A6 03    XP15:   CALL XP18                       ;REL.OP."="
0813   039B C0                  RNZ                             ;FALSE, RETURN HL=0
0814   039C 6F                  MOV  L,A                        ;ELSE SET HL=1
0815   039D C9                  RET
0816   039E             ;
0817   039E CD A6 03    XP16:   CALL XP18                       ;REL.OP."<"
0818   03A1 D0                  RNC                             ;FALSE, RETURN HL=0
0819   03A2 6F                  MOV  L,A                        ;ELSE SET HL=1
0820   03A3 C9                  RET
0821   03A4             ;
0822   03A4 E1          XP17:   POP  H                          ;NOT .REL.OP
0823   03A5 C9                  RET                             ;RETURN HL=<EXPR2>
0824   03A6             ;
0825   03A6 79          XP18:   MOV  A,C                        ;SUBROUTINE FOR ALL
0826   03A7 E1                  POP  H                          ;REL.OP.'S
0827   03A8 C1                  POP  B
0828   03A9 E5                  PUSH H                          ;REVERSE TOP OF STACK
0829   03AA C5                  PUSH B
0830   03AB 4F                  MOV  C,A
0831   03AC CD BB 03            CALL EXPR2                      ;GET 2ND <EXPR2>
0832   03AF EB                  XCHG                            ;VALUE IN DE NOW
0833   03B0 E3                  XTHL                            ;1ST <EXPR2> IN HL
0834   03B1 CD F4 04            CALL CKHLDE                     ;COMPARE 1ST WITH 2ND
0835   03B4 D1                  POP  D                          ;RESTORE TEXT POINTER
0836   03B5 21 00 00            LXI  H,0H                       ;SET HL=0, A=1
0837   03B8 3E 01               MVI  A,1
0838   03BA C9                  RET
0839   03BB             ;
0840   03BB CF          EXPR2:  TSTC('-',XP21)                  ;NEGATIVE SIGN?
0840   03BC 2D          
0840   03BD 06          
0841   03BE 21 00 00            LXI  H,0H                       ;YES, FAKE '0-'
0842   03C1 C3 E5 03            JMP  XP26                       ;TREAT LIKE SUBTRACT
0843   03C4             ;
0844   03C4 CF          XP21:   TSTC('+',XP22)                  ;POSITIVE SIGN? IGNORE
0844   03C5 2B          
0844   03C6 00          
0845   03C7 CD EF 03    XP22:   CALL EXPR3                      ;1ST <EXPR3>
0846   03CA CF          XP23:   TSTC('+',XP25)                  ;ADD?
0846   03CB 2B          
0846   03CC 15          
0847   03CD E5                  PUSH H                          ;YES, SAVE VALUE
0848   03CE CD EF 03            CALL EXPR3                      ;GET 2ND <EXPR3>
0849   03D1 EB          XP24:   XCHG                            ;2ND IN DE
0850   03D2 E3                  XTHL                            ;1ST IN HL
0851   03D3 7C                  MOV  A,H                        ;COMPARE SIGN
0852   03D4 AA                  XRA  D
0853   03D5 7A                  MOV  A,D
0854   03D6 19                  DAD  D
0855   03D7 D1                  POP  D                          ;RESTORE TEXT POINTER
0856   03D8 FA CA 03            JM   XP23                       ;1ST AND 2ND SIGN DIFFER
0857   03DB AC                  XRA  H                          ;1ST AND 2ND SIGN EQUAL
0858   03DC F2 CA 03            JP   XP23                       ;SO IS RESULT
0859   03DF             ;
0860   03DF C3 D7 00            JMP  QHOW                       ;ELSE WE HAVE OVERFLOW
0861   03E2             ;
0862   03E2 CF          XP25:   TSTC('-',XP42)                  ;SUBTRACT?
0862   03E3 2D          
0862   03E4 86          
0863   03E5 E5          XP26:   PUSH H                          ;YES, SAVE 1ST <EXPR3>
0864   03E6 CD EF 03            CALL EXPR3                      ;GET 2ND <EXPR3>
0865   03E9 CD E2 04            CALL CHGSGN                     ;NEGATE
0866   03EC C3 D1 03            JMP  XP24                       ;AND ADD THEM
0867   03EF             ;
0868   03EF CD 4F 04    EXPR3:  CALL EXPR4                      ;GET 1ST <EXPR4>
0869   03F2 CF          XP31:   TSTC('*',XP34)                  ;MULTIPLY?
0869   03F3 2A          
0869   03F4 2D          
0870   03F5 E5                  PUSH H                          ;YES, SAVE 1ST
0871   03F6 CD 4F 04            CALL EXPR4                      ;AND GET 2ND <EXPR4>
0872   03F9 06 00               MVI  B,0H                       ;CLEAR B FOR SIGN
0873   03FB CD DF 04            CALL CHKSGN                     ;CHECK SIGN
0874   03FE E3                  XTHL                            ;1ST IN HL
0875   03FF CD DF 04            CALL CHKSGN                     ;CHECK SIGN OF 1ST
0876   0402 EB                  XCHG
0877   0403 E3                  XTHL
0878   0404 7C                  MOV  A,H                        ;IS HL > 255 ?
0879   0405 B7                  ORA  A
0880   0406 CA 0F 04            JZ   XP32                       ;NO
0881   0409 7A                  MOV  A,D                        ;YES, HOW ABOUT DE
0882   040A B2                  ORA  D
0883   040B EB                  XCHG                            ;PUT SMALLER IN HL
0884   040C C2 D8 00            JNZ  AHOW                       ;ALSO >, WILL OVERFLOW
0885   040F 7D          XP32:   MOV  A,L                        ;THIS IS DUMB
0886   0410 21 00 00            LXI  H,0H                       ;CLEAR RESULT
0887   0413 B7                  ORA  A                          ;ADD AND COUNT
0888   0414 CA 41 04            JZ   XP35
0889   0417 19          XP33:   DAD  D
0890   0418 DA D8 00            JC   AHOW                       ;OVERFLOW
0891   041B 3D                  DCR  A
0892   041C C2 17 04            JNZ  XP33
0893   041F C3 41 04            JMP  XP35                       ;FINISHED
0894   0422             ;
0895   0422 CF          XP34:   TSTC('/',XP42)                  ;DIVIDE?
0895   0423 2F          
0895   0424 46          
0896   0425 E5                  PUSH H                          ;YES, SAVE 1ST <EXPR4>
0897   0426 CD 4F 04            CALL EXPR4                      ;AND GET THE SECOND ONE
0898   0429 06 00               MVI  B,0H                       ;CLEAR B FOR SIGN
0899   042B CD DF 04            CALL CHKSGN                     ;CHECK SIGN OF 2ND
0900   042E E3                  XTHL                            ;GET 1ST IN HL
0901   042F CD DF 04            CALL CHKSGN                     ;CHECK SIGN OF 1ST
0902   0432 EB                  XCHG
0903   0433 E3                  XTHL
0904   0434 EB                  XCHG
0905   0435 7A                  MOV  A,D                        ;DIVIDE BY 0?
0906   0436 B3                  ORA  E
0907   0437 CA D8 00            JZ   AHOW                       ;SAY "HOW?"
0908   043A C5                  PUSH B                          ;ELSE SAVE SIGN
0909   043B CD C2 04            CALL DIVIDE                     ;USE SUBROUTINE
0910   043E 60                  MOV  H,B                        ;RESULT IN HL NOW
0911   043F 69                  MOV  L,C
0912   0440 C1                  POP  B                          ;GET SIGN BACK
0913   0441 D1          XP35:   POP  D                          ;AND TEXT POINTER
0914   0442 7C                  MOV  A,H                        ;HL MUST BE +
0915   0443 B7                  ORA  A
0916   0444 FA D7 00            JM   QHOW                       ;ELSE IT IS OVERFLOW
0917   0447 78                  MOV  A,B
0918   0448 B7                  ORA  A
0919   0449 FC E2 04            CM   CHGSGN                     ;CHANGE SIGN IF NEEDED
0920   044C C3 F2 03            JMP  XP31                       ;LOOK FOR MORE TERMS
0921   044F             ;
0922   044F 21 59 07    EXPR4:  LXI  H,TAB4-1                   ;FIND FUNCTION IN TAB4
0923   0452 C3 9F 07            JMP  EXEC                       ;AND GO DO IT
0924   0455             ;
0925   0455 FF          XP40:   RST  RTSTV                      ;NO, NOT A FUNCTION
0926   0456 DA 5E 04            JC   XP41                       ;NOR A VARIABLE
0927   0459 7E                  MOV  A,M                        ;VARIABLE
0928   045A 23                  INX  H
0929   045B 66                  MOV  H,M                        ;VALUE IN HL
0930   045C 6F                  MOV  L,A
0931   045D C9                  RET
0932   045E             ;
0933   045E CD 7E 00    XP41:   CALL TSTNUM                     ;OR IS IT A NUMBER
0934   0461 78                  MOV  A,B                        ;# OF DIGIT
0935   0462 B7                  ORA  A
0936   0463 C0                  RNZ                             ;OK
0937   0464 CF          PARN:   TSTC($28,XP43)                  ; '('
0937   0465 28          
0937   0466 05          
0938   0467 DF                  RST  REXPR                      ;"(EXPR)"
0939   0468 CF                  TSTC($29,XP43)                  ; ')'
0939   0469 29          
0939   046A 01          
0940   046B C9          XP42:   RET
0941   046C C3 22 05    XP43:   JMP  QWHAT                      ;ELSE SAY: "WHAT?"
0942   046F             
0943   046F CD 64 04    RND:    CALL PARN                       ;*** RND(EXPR) ***
0944   0472 7C                  MOV  A,H                        ;EXPR MUST BE +
0945   0473 B7                  ORA  A
0946   0474 FA D7 00            JM   QHOW
0947   0477 B5                  ORA  L                          ;AND NON-ZERO
0948   0478 CA D7 00            JZ   QHOW
0949   047B D5                  PUSH D                          ;SAVE BOTH
0950   047C E5                  PUSH H
0951   047D 2A 14 08            LHLD RANPNT                     ;GET MEMORY AS RANDOM
0952   0480 11 D9 07            LXI  D,LSTROM                   ;NUMBER
0953   0483 E7                  RST  RCOMP
0954   0484 DA 8A 04            JC   RA1                        ;WRAP AROUND IF LAST
0955   0487 21 00 00            LXI  H,START
0956   048A 5E          RA1:    MOV  E,M
0957   048B 23                  INX  H
0958   048C 56                  MOV  D,M
0959   048D 22 14 08            SHLD RANPNT
0960   0490 E1                  POP  H
0961   0491 EB                  XCHG
0962   0492 C5                  PUSH B
0963   0493 CD C2 04            CALL DIVIDE                     ;RND(N)=MOD(M,N)+1
0964   0496 C1                  POP  B
0965   0497 D1                  POP  D
0966   0498 23                  INX  H
0967   0499 C9                  RET
0968   049A             
0969   049A CD 64 04    ABS:    CALL PARN                       ;*** ABS(EXPR) ***
0970   049D 1B                  DCX  D
0971   049E CD DF 04            CALL CHKSGN                     ;CHECK SIGN
0972   04A1 13                  INX  D
0973   04A2 C9                  RET
0974   04A3             
0975   04A3 2A 16 08    SIZE:   LHLD TXTUNF                     ;*** RETURN SIZE IN HL ***
0976   04A6 D5                  PUSH D                          ;GET THE NUMBER OF FREE
0977   04A7 EB                  XCHG                            ;BYTES BETWEEN 'TXTUNF'
0978   04A8 21 00 0F            LXI  H,VARBGN                   ;AND 'VARBGN'
0979   04AB CD D8 04            CALL SUBDE
0980   04AE D1                  POP  D
0981   04AF C9                  RET
0982   04B0             
0983   04B0 CD 64 04    PEEK:   CALL PARN                       ;*** PEEK(EXPR) ***
0984   04B3 7E                  MOV  A,M                        ;GET CONTENT OF (HL)
0985   04B4 26 00               MVI  H,0                        ;RETURN RESULT IN HL
0986   04B6 6F                  MOV  L,A
0987   04B7 C9                  RET
0988   04B8             
0989   04B8 CD 64 04    DEEK:   CALL PARN                       ;*** PEEK(EXPR) ***
0990   04BB D5                  PUSH D
0991   04BC 5E                  MOV  E,M                        ;GET LOW CONTENT OF (HL)
0992   04BD 23                  INX  H
0993   04BE 56                  MOV  D,M                        ;GET HIGH CONTENT OF (HL)
0994   04BF EB                  XCHG                            ;RETURN RESULT IN HL
0995   04C0 D1                  POP  D
0996   04C1 C9                  RET
0997   04C2             
0998   04C2             ;
0999   04C2             ;*************************************************************
1000   04C2             ;
1001   04C2             ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1002   04C2             ;
1003   04C2             ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1004   04C2             ;
1005   04C2             ; 'SUBDE' SUBSTRACTS DE FROM HL
1006   04C2             ;
1007   04C2             ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1008   04C2             ; SIGN AND FLIP SIGN OF B.
1009   04C2             ;
1010   04C2             ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1011   04C2             ;
1012   04C2             ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1013   04C2             ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1014   04C2             ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1015   04C2             ;
1016   04C2 E5          DIVIDE: PUSH H                          ;*** DIVIDE ***
1017   04C3 6C                  MOV  L,H                        ;DIVIDE H BY DE
1018   04C4 26 00               MVI  H,0
1019   04C6 CD CD 04            CALL DV1
1020   04C9 41                  MOV  B,C                        ;SAVE RESULT IN B
1021   04CA 7D                  MOV  A,L                        ;(REMINDER+L)/DE
1022   04CB E1                  POP  H
1023   04CC 67                  MOV  H,A
1024   04CD 0E FF       DV1:    MVI  C,0FFH                     ;RESULT IN C
1025   04CF 0C          DV2:    INR  C                          ;DUMB ROUTINE
1026   04D0 CD D8 04            CALL SUBDE                      ;DIVIDE BY SUBTRACT
1027   04D3 D2 CF 04            JNC  DV2                        ;AND COUNT
1028   04D6 19                  DAD  D
1029   04D7 C9                  RET
1030   04D8             ;
1031   04D8 7D          SUBDE:  MOV  A,L                        ;*** SUBDE ***
1032   04D9 93                  SUB  E                          ;SUBSTRACT DE FROM
1033   04DA 6F                  MOV  L,A                        ;HL
1034   04DB 7C                  MOV  A,H
1035   04DC 9A                  SBB  D
1036   04DD 67                  MOV  H,A
1037   04DE C9                  RET
1038   04DF             ;
1039   04DF 7C          CHKSGN: MOV  A,H                        ;*** CHKSGN ***
1040   04E0 B7                  ORA  A                          ;CHECK SIGN OF HL
1041   04E1 F0                  RP                              ;IF -, CHANGE SIGN
1042   04E2             ;
1043   04E2 7C          CHGSGN: MOV  A,H                        ;*** CHGSGN ***
1044   04E3 F5                  PUSH PSW
1045   04E4 2F                  CMA                             ;CHANGE SIGN OF HL
1046   04E5 67                  MOV  H,A
1047   04E6 7D                  MOV  A,L
1048   04E7 2F                  CMA
1049   04E8 6F                  MOV  L,A
1050   04E9 23                  INX  H
1051   04EA F1                  POP  PSW
1052   04EB AC                  XRA  H
1053   04EC F2 D7 00            JP   QHOW
1054   04EF 78                  MOV  A,B                        ;AND ALSO FLIP B
1055   04F0 EE 80               XRI  80H
1056   04F2 47                  MOV  B,A
1057   04F3 C9                  RET
1058   04F4             
1059   04F4 7C          CKHLDE: MOV  A,H
1060   04F5 AA                  XRA  D                          ;SAME SIGN?
1061   04F6 F2 FA 04            JP   CK1                        ;YES, COMPARE
1062   04F9 EB                  XCHG                            ;NO, XCH AND COMP
1063   04FA E7          CK1:    RST  RCOMP
1064   04FB C9                  RET
1065   04FC             ;
1066   04FC             ;*************************************************************
1067   04FC             ;
1068   04FC             ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1069   04FC             ;
1070   04FC             ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1071   04FC             ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1072   04FC             ; TO THAT VALUE.
1073   04FC             ;
1074   04FC             ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1075   04FC             ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1076   04FC             ; NEXT LINE AND CONTINUE FROM THERE.
1077   04FC             ;
1078   04FC             ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1079   04FC             ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1080   04FC             ;
1081   04FC             ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1082   04FC             ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1083   04FC             ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1084   04FC             ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1085   04FC             ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1086   04FC             ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1087   04FC             ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1088   04FC             ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1089   04FC             ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1090   04FC             ;
1091   04FC             ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1092   04FC             ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1093   04FC             ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1094   04FC             ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1095   04FC             ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1096   04FC             ;
1097   04FC FF          SETVAL: RST  RTSTV                      ;*** SETVAL ***
1098   04FD DA 22 05            JC   QWHAT                      ;"WHAT?" NO VARIABLE
1099   0500 E5                  PUSH H                          ;SAVE ADDRESS OF VAR.
1100   0501 CF                  TSTC('=',SV1)                   ;PASS "=" SIGN
1100   0502 3D          
1100   0503 08          
1101   0504 DF                  RST  REXPR                      ;EVALUATE EXPR.
1102   0505 44                  MOV  B,H                        ;VALUE IS IN BC NOW
1103   0506 4D                  MOV  C,L
1104   0507 E1                  POP  H                          ;GET ADDRESS
1105   0508 71                  MOV  M,C                        ;SAVE VALUE
1106   0509 23                  INX  H
1107   050A 70                  MOV  M,B
1108   050B C9                  RET
1109   050C C3 22 05    SV1:    JMP  QWHAT                      ;NO "=" SIGN
1110   050F             
1111   050F CF          FIN:    TSTC(';',FI1)                   ;*** FIN ***
1111   0510 3B          
1111   0511 04          
1112   0512 F1                  POP  PSW                        ;";", PURGE RET. ADDR.
1113   0513 C3 8F 01            JMP  RUNSML                     ;CONTINUE SAME LINE
1114   0516 CF          FI1:    TSTC(CR,FI2)                    ;NOT ";", IS IT CR?
1114   0517 0D          
1114   0518 04          
1115   0519 F1                  POP  PSW                        ;YES, PURGE RET. ADDR.
1116   051A C3 7F 01            JMP  RUNNXL                     ;RUN NEXT LINE
1117   051D C9          FI2:    RET                             ;ELSE RETURN TO CALLER
1118   051E             
1119   051E EF          ENDCHK: RST  RIGNBLK                    ;IGNBLK
1120   051F FE 0D               CPI  CR                         ;END WITH CR?
1121   0521 C8                  RZ                              ;OK, ELSE SAY: "WHAT?"
1122   0522             ;
1123   0522 D5          QWHAT:  PUSH D                          ;*** QWHAT ***
1124   0523 11 E6 00    AWHAT:  LXI  D,WHAT                     ;*** AWHAT ***
1125   0526 97          ERROR:  SUB  A                          ;*** ERROR ***
1126   0527 CD C7 05            CALL PRTSTG                     ;PRINT 'WHAT?', 'HOW?'
1127   052A D1                  POP  D                          ;OR 'SORRY'
1128   052B 1A                  LDAX D                          ;SAVE THE CHARACTER
1129   052C F5                  PUSH PSW                        ;AT WHERE OLD DE ->
1130   052D 97                  SUB  A                          ;AND PUT A 0 THERE
1131   052E 12                  STAX D
1132   052F 2A 02 08            LHLD CURRNT                     ;GET CURRENT LINE #
1133   0532 E5                  PUSH H
1134   0533 7E                  MOV  A,M                        ;CHECK THE VALUE
1135   0534 23                  INX  H
1136   0535 B6                  ORA  M
1137   0536 D1                  POP  D
1138   0537 CA F2 00            JZ   RSTART                     ;IF ZERO, JUST RESTART
1139   053A 7E                  MOV  A,M                        ;IF NEGATIVE,
1140   053B B7                  ORA  A
1141   053C FA 10 03            JM   INPERR                     ;REDO INPUT
1142   053F CD 50 06            CALL PRTLN                      ;ELSE PRINT THE LINE
1143   0542 1B                  DCX  D                          ;UPTO WHERE THE 0 IS
1144   0543 F1                  POP  PSW                        ;RESTORE THE CHARACTER
1145   0544 12                  STAX D
1146   0545 3E 3F               MVI  A,'?'                      ;PRINT A "?"
1147   0547 D7                  RST  ROUTC
1148   0548 97                  SUB  A                          ;AND THE REST OF THE
1149   0549 CD C7 05            CALL PRTSTG                     ;LINE
1150   054C C3 F2 00            JMP  RSTART                     ;THEN RESTART
1151   054F             ;
1152   054F D5          QSORRY: PUSH D                          ;*** QSORRY ***
1153   0550 11 EC 00    ASORRY: LXI  D,SORRY                    ;*** ASORRY ***
1154   0553 C3 26 05            JMP  ERROR
1155   0556             ;
1156   0556             ;*************************************************************
1157   0556             ;
1158   0556             ; *** GETLN *** FNDLN (& FRIENDS) ***
1159   0556             ;
1160   0556             ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1161   0556             ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1162   0556             ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1163   0556             ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1164   0556             ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1165   0556             ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1166   0556             ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1167   0556             ;
1168   0556             ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1169   0556             ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1170   0556             ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1171   0556             ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1172   0556             ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1173   0556             ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1174   0556             ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1175   0556             ; LINE, FLAGS ARE C & NZ.
1176   0556             ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1177   0556             ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1178   0556             ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1179   0556             ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1180   0556             ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1181   0556             ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1182   0556             ;
1183   0556 D7          GETLN:  RST  ROUTC                      ;*** GETLN ***
1184   0557 11 68 0F            LXI  D,BUFFER                   ;PROMPT AND INIT.
1185   055A CD EA 06    GL1:    CALL CHKIO                      ;CHECK KEYBOARD
1186   055D CA 5A 05            JZ   GL1                        ;NO INPUT, WAIT
1187   0560 FE 08               CPI  BS                         ;BS, DELETE LAST CHARACTER?
1188   0562 CA 84 05            JZ   GL3                        ;YES
1189   0565 FE 7F               CPI  DEL                        ;DEL, DELETE LAST CHARACTER?
1190   0567 CA 84 05            JZ   GL3                        ;YES
1191   056A D7                  RST  ROUTC                      ;INPUT, ECHO BACK
1192   056B FE 0A               CPI  LF                         ;IGNORE LF
1193   056D CA 5A 05            JZ   GL1
1194   0570 B7                  ORA  A                          ;IGNORE NULL
1195   0571 CA 5A 05            JZ   GL1
1196   0574 FE 18               CPI  CAN                        ;^X, DELETE THE WHOLE LINE?
1197   0576 CA 97 05            JZ   GL4                        ;YES
1198   0579 12                  STAX D                          ;ELSE SAVE INPUT
1199   057A 13                  INX  D                          ;AND BUMP POINTER
1200   057B FE 0D               CPI  CR                         ;WAS IT CR?
1201   057D C8                  RZ                              ;YES, END OF LINE
1202   057E 7B                  MOV  A,E                        ;ELSE MORE FREE ROOM?
1203   057F FE A8               CPI  BUFEND & 0FFH
1204   0581 C2 5A 05            JNZ  GL1                        ;YES, GET NEXT INPUT
1205   0584 7B          GL3:    MOV  A,E                        ;DELETE LAST CHARACTER
1206   0585 FE 68               CPI  BUFFER & 0FFH              ;BUT DO WE HAVE ANY?
1207   0587 CA 97 05            JZ   GL4                        ;NO, REDO WHOLE LINE
1208   058A 1B                  DCX  D                          ;YES, BACKUP POINTER
1209   058B 3E 08               MVI  A,BS                       ;AND ECHO A BACKSPACE
1210   058D D7                  RST  ROUTC
1211   058E 3E 20               MVI  A,' '                      ;AND ECHO A BLANK
1212   0590 D7                  RST  ROUTC
1213   0591 3E 08               MVI  A,BS                       ;AND ECHO A BACKSPACE
1214   0593 D7                  RST  ROUTC
1215   0594 C3 5A 05            JMP  GL1                        ;GO GET NEXT INPUT
1216   0597 CD 0E 00    GL4:    CALL CRLF                       ;REDO ENTIRE LINE
1217   059A 3E 5E               MVI  A,'^'                      ;CR, LF AND UP-ARROW
1218   059C C3 56 05            JMP  GETLN
1219   059F             ;
1220   059F 7C          FNDLN:  MOV  A,H                        ;*** FNDLN ***
1221   05A0 B7                  ORA  A                          ;CHECK SIGN OF HL
1222   05A1 FA D7 00            JM   QHOW                       ;IT CANNOT BE -
1223   05A4 11 18 08            LXI  D,TXTBGN                   ;INIT TEXT POINTER
1224   05A7             ;
1225   05A7             FNDLP:                                  ;*** FDLNP ***
1226   05A7 E5          FL1:    PUSH H                          ;SAVE LINE #
1227   05A8 2A 16 08            LHLD TXTUNF                     ;CHECK IF WE PASSED END
1228   05AB 2B                  DCX  H
1229   05AC E7                  RST  RCOMP
1230   05AD E1                  POP  H                          ;GET LINE # BACK
1231   05AE D8                  RC                              ;C,NZ PASSED END
1232   05AF 1A                  LDAX D                          ;WE DID NOT, GET BYTE 1
1233   05B0 95                  SUB  L                          ;IS THIS THE LINE?
1234   05B1 47                  MOV  B,A                        ;COMPARE LOW ORDER
1235   05B2 13                  INX  D
1236   05B3 1A                  LDAX D                          ;GET BYTE 2
1237   05B4 9C                  SBB  H                          ;COMPARE HIGH ORDER
1238   05B5 DA BC 05            JC   FL2                        ;NO, NOT THERE YET
1239   05B8 1B                  DCX  D                          ;ELSE WE EITHER FOUND
1240   05B9 B0                  ORA  B                          ;IT, OR IT IS NOT THERE
1241   05BA C9                  RET                             ;NC,Z:FOUND, NC,NZ:NO
1242   05BB             ;
1243   05BB             FNDNXT:                                 ;*** FNDNXT ***
1244   05BB 13                  INX  D                          ;FIND NEXT LINE
1245   05BC 13          FL2:    INX  D                          ;JUST PASSED BYTE 1 & 2
1246   05BD             ;
1247   05BD 1A          FNDSKP: LDAX D                          ;*** FNDSKP ***
1248   05BE FE 0D               CPI  CR                         ;TRY TO FIND CR
1249   05C0 C2 BC 05            JNZ  FL2                        ;KEEP LOOKING
1250   05C3 13                  INX  D                          ;FOUND CR, SKIP OVER
1251   05C4 C3 A7 05            JMP  FL1                        ;CHECK IF END OF TEXT
1252   05C7             ;
1253   05C7             ;*************************************************************
1254   05C7             ;
1255   05C7             ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1256   05C7             ;
1257   05C7             ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1258   05C7             ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1259   05C7             ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1260   05C7             ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1261   05C7             ;
1262   05C7             ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1263   05C7             ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1264   05C7             ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1265   05C7             ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1266   05C7             ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1267   05C7             ; OVER (USUALLY A JUMP INSTRUCTION.
1268   05C7             ;
1269   05C7             ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1270   05C7             ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1271   05C7             ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1272   05C7             ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1273   05C7             ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1274   05C7             ;
1275   05C7             ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1276   05C7             ;
1277   05C7 47          PRTSTG: MOV  B,A                        ;*** PRTSTG ***
1278   05C8 1A          PS1:    LDAX D                          ;GET A CHARACTER
1279   05C9 13                  INX  D                          ;BUMP POINTER
1280   05CA B8                  CMP  B                          ;SAME AS OLD A?
1281   05CB C8                  RZ                              ;YES, RETURN
1282   05CC D7                  RST  ROUTC                      ;ELSE PRINT IT
1283   05CD FE 0D               CPI  CR                         ;WAS IT A CR?
1284   05CF C2 C8 05            JNZ  PS1                        ;NO, NEXT
1285   05D2 C9                  RET                             ;YES, RETURN
1286   05D3             ;
1287   05D3 CF          QTSTG:  TSTC($22,QT3)                   ;*** QTSTG ***
1287   05D4 22          
1287   05D5 0F          
1288   05D6 3E 22               MVI  A,22H                      ;IT IS A "
1289   05D8 CD C7 05    QT1:    CALL PRTSTG                     ;PRINT UNTIL ANOTHER
1290   05DB FE 0D               CPI  CR                         ;WAS LAST ONE A CR?
1291   05DD E1                  POP  H                          ;RETURN ADDRESS
1292   05DE CA 7F 01            JZ   RUNNXL                     ;WAS CR, RUN NEXT LINE
1293   05E1 23          QT2:    INX  H                          ;SKIP 3 BYTES ON RETURN
1294   05E2 23                  INX  H
1295   05E3 23                  INX  H
1296   05E4 E9                  PCHL                            ;RETURN
1297   05E5 CF          QT3:    TSTC($27,QT4)                   ;IS IT A '?
1297   05E6 27          
1297   05E7 05          
1298   05E8 3E 27               MVI  A,27H                      ;YES, DO THE SAME
1299   05EA C3 D8 05            JMP  QT1                        ;AS IN "
1300   05ED CF          QT4:    TSTC($5F,QT5)                   ;IS IT BACK-ARROW?
1300   05EE 5F          
1300   05EF 07          
1301   05F0 3E 8D               MVI  A,08DH                     ;YES, CR WITHOUT LF
1302   05F2 D7                  RST  ROUTC
1303   05F3 E1                  POP  H                          ;RETURN ADDRESS
1304   05F4 C3 E1 05            JMP  QT2
1305   05F7 C9          QT5:    RET                             ;NONE OF ABOVE
1306   05F8             
1307   05F8 D5          PRTNUM: PUSH D                          ;*** PRINT NUMBER IN HL ***
1308   05F9 3A 00 08            LDA  PNBASE                     ;GET NUMBER BASE
1309   05FC 16 00               MVI  D,0                        ;16 BIT FOR DIVIDE
1310   05FE 5F                  MOV  E,A
1311   05FF 42                  MOV  B,D                        ;NO PREFIX YET
1312   0600 FE 10               CPI  16                         ;HEX NUMBER?
1313   0602 C2 0B 06            JNZ  PN0                        ;NO, CHECK SIGN
1314   0605 06 24               MVI  B,'$'                      ;PRINT LEADING '$'
1315   0607 0D                  DCR  C                          ;'$' TAKES SPACE
1316   0608 C3 14 06            JMP  PN1                        ;HEX IS UNSIGNED
1317   060B CD DF 04    PN0:    CALL CHKSGN                     ;CHECK SIGN
1318   060E F2 14 06            JP   PN1                        ;NO SIGN
1319   0611 06 2D               MVI  B,'-'                      ;B=SIGN
1320   0613 0D                  DCR  C                          ;'-' TAKES SPACE
1321   0614 AF          PN1:    XRA  A
1322   0615 57                  MOV  D,A
1323   0616 D5                  PUSH D                          ;SAVE AS A FLAG
1324   0617 0D                  DCR  C                          ;C=SPACES
1325   0618 C5                  PUSH B                          ;SAVE SIGN & SPACE
1326   0619 CD C2 04    PN2:    CALL DIVIDE                     ;DIVIDE HL BY 10
1327   061C 78                  MOV  A,B                        ;RESULT 0?
1328   061D B1                  ORA  C
1329   061E CA 29 06            JZ   PN3                        ;YES, WE GOT ALL
1330   0621 E3                  XTHL                            ;NO, SAVE REMAINDER
1331   0622 2D                  DCR  L                          ;AND COUNT SPACE
1332   0623 E5                  PUSH H                          ;HL IS OLD BC
1333   0624 60                  MOV  H,B                        ;MOVE RESULT TO BC
1334   0625 69                  MOV  L,C
1335   0626 C3 19 06            JMP  PN2                        ;AND DIVIDE BY 10
1336   0629 C1          PN3:    POP  B                          ;WE GOT ALL DIGITS IN
1337   062A 0D          PN4:    DCR  C                          ;THE STACK
1338   062B 79                  MOV  A,C                        ;LOOK AT SPACE COUNT
1339   062C B7                  ORA  A
1340   062D FA 36 06            JM   PN5                        ;NO LEADING BLANKS
1341   0630 3E 20               MVI  A,' '                      ;LEADING BLANKS
1342   0632 D7                  RST  ROUTC
1343   0633 C3 2A 06            JMP  PN4                        ;MORE?
1344   0636 78          PN5:    MOV  A,B                        ;PRINT SIGN
1345   0637 B7                  ORA  A
1346   0638 C4 10 00            CNZ  OUTC
1347   063B 5D                  MOV  E,L                        ;LAST REMAINDER IN E
1348   063C 3A 00 08    PN6:    LDA  PNBASE                     ;GET NUMBER BASE
1349   063F BB                  CMP  E                          ;IT IS FLAG FOR NO MORE
1350   0640 7B                  MOV  A,E                        ;CHECK DIGIT IN E
1351   0641 D1                  POP  D
1352   0642 C8                  RZ                              ;IF SO, RETURN
1353   0643 FE 0A               CPI  10                         ;0-9? < A hex?
1354   0645 DA 4A 06            JC   PN7                        ;Skip Add 7
1355   0648 C6 07               ADI  'A'-'0'-10                 ;Bring it up to ASCII A-F
1356   064A C6 30       PN7:    ADI  '0'                        ;ELSE CONVERT TO ASCII
1357   064C D7                  RST  ROUTC                      ;AND PRINT THE DIGIT
1358   064D C3 3C 06            JMP  PN6                        ;GO BACK FOR MORE
1359   0650             
1360   0650 3E 0A       PRTLN:  MVI  A,10                       ;SET 10 AS DEFAULT BASE
1361   0652 32 00 08            STA  PNBASE                     ;FOR PRTNUM
1362   0655 1A                  LDAX D
1363   0656 6F                  MOV  L,A                        ;LOW ORDER LINE #
1364   0657 13                  INX  D
1365   0658 1A                  LDAX D                          ;HIGH ORDER
1366   0659 67                  MOV  H,A
1367   065A 13                  INX  D
1368   065B 0E 04               MVI  C,4                        ;PRINT 4 DIGIT LINE #
1369   065D CD F8 05            CALL PRTNUM
1370   0660 3E 20               MVI  A,' '                      ;FOLLOWED BY A BLANK
1371   0662 D7                  RST  ROUTC
1372   0663 97                  SUB  A                          ;AND THEN THE NEXT
1373   0664 CD C7 05            CALL PRTSTG
1374   0667 C9                  RET
1375   0668             ;
1376   0668             ;*************************************************************
1377   0668             ;
1378   0668             ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1379   0668             ;
1380   0668             ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1381   0668             ; DE = HL
1382   0668             ;
1383   0668             ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1384   0668             ; UNTIL DE = BC
1385   0668             ;
1386   0668             ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1387   0668             ; STACK
1388   0668             ;
1389   0668             ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1390   0668             ; STACK
1391   0668             ;
1392   0668 E7          MVUP:   RST  RCOMP                      ;*** MVUP ***
1393   0669 C8                  RZ                              ;DE = HL, RETURN
1394   066A 1A                  LDAX D                          ;GET ONE BYTE
1395   066B 02                  STAX B                          ;MOVE IT
1396   066C 13                  INX  D                          ;INCREASE BOTH POINTERS
1397   066D 03                  INX  B
1398   066E C3 68 06            JMP  MVUP                       ;UNTIL DONE
1399   0671             ;
1400   0671 78          MVDOWN: MOV  A,B                        ;*** MVDOWN ***
1401   0672 92                  SUB  D                          ;TEST IF DE = BC
1402   0673 C2 79 06            JNZ  MD1                        ;NO, GO MOVE
1403   0676 79                  MOV  A,C                        ;MAYBE, OTHER BYTE?
1404   0677 93                  SUB  E
1405   0678 C8                  RZ                              ;YES, RETURN
1406   0679 1B          MD1:    DCX  D                          ;ELSE MOVE A BYTE
1407   067A 2B                  DCX  H                          ;BUT FIRST DECREASE
1408   067B 1A                  LDAX D                          ;BOTH POINTERS AND
1409   067C 77                  MOV  M,A                        ;THEN DO IT
1410   067D C3 71 06            JMP  MVDOWN                     ;LOOP BACK
1411   0680             ;
1412   0680 C1          POPA:   POP  B                          ;BC = RETURN ADDR.
1413   0681 E1                  POP  H                          ;RESTORE LOPVAR, BUT
1414   0682 22 0A 08            SHLD LOPVAR                     ;=0 MEANS NO MORE
1415   0685 7C                  MOV  A,H
1416   0686 B5                  ORA  L
1417   0687 CA 9A 06            JZ   PP1                        ;YEP, GO RETURN
1418   068A E1                  POP  H                          ;NOP, RESTORE OTHERS
1419   068B 22 0C 08            SHLD LOPINC
1420   068E E1                  POP  H
1421   068F 22 0E 08            SHLD LOPLMT
1422   0692 E1                  POP  H
1423   0693 22 10 08            SHLD LOPLN
1424   0696 E1                  POP  H
1425   0697 22 12 08            SHLD LOPPT
1426   069A C5          PP1:    PUSH B                          ;BC = RETURN ADDR.
1427   069B C9                  RET
1428   069C             ;
1429   069C 21 A9 0F    PUSHA:  LXI  H,STKLMT                   ;*** PUSHA ***
1430   069F CD E2 04            CALL CHGSGN
1431   06A2 C1                  POP  B                          ;BC=RETURN ADDRESS
1432   06A3 39                  DAD  SP                         ;IS STACK NEAR THE TOP?
1433   06A4 D2 4F 05            JNC  QSORRY                     ;YES, SORRY FOR THAT
1434   06A7 2A 0A 08            LHLD LOPVAR                     ;ELSE SAVE LOOP VAR'S
1435   06AA 7C                  MOV  A,H                        ;BUT IF LOPVAR IS 0
1436   06AB B5                  ORA  L                          ;THAT WILL BE ALL
1437   06AC CA C2 06            JZ   PU1
1438   06AF 2A 12 08            LHLD LOPPT                      ;ELSE, MORE TO SAVE
1439   06B2 E5                  PUSH H
1440   06B3 2A 10 08            LHLD LOPLN
1441   06B6 E5                  PUSH H
1442   06B7 2A 0E 08            LHLD LOPLMT
1443   06BA E5                  PUSH H
1444   06BB 2A 0C 08            LHLD LOPINC
1445   06BE E5                  PUSH H
1446   06BF 2A 0A 08            LHLD LOPVAR
1447   06C2 E5          PU1:    PUSH H
1448   06C3 C5                  PUSH B                          ;BC = RETURN ADDR.
1449   06C4 C9                  RET
1450   06C5             
1451   06C5             ;*************************************************************
1452   06C5             ;
1453   06C5             ; *** OUTC *** CHKIO ***
1454   06C5             ;
1455   06C5             ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1456   06C5             ; OUTC WILL OUTPUT THE BYTE IN A.
1457   06C5             ; IF THAT IS A CR, A LF IS ALSO SEND OUT.
1458   06C5             ; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
1459   06C5             ; ALL REGISTERS ARE RESTORED.
1460   06C5             ;
1461   06C5             ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1462   06C5             ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1463   06C5             ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1464   06C5             ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1465   06C5             ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1466   06C5             ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
1467   06C5             ;
1468   06C5 16 1E       INIT:   MVI  D,30                       ;30 new lines to clear screen
1469   06C7 CD 0E 00    PATLOP: CALL CRLF
1470   06CA 15                  DCR  D
1471   06CB C2 C7 06            JNZ  PATLOP
1472   06CE 97                  SUB  A
1473   06CF 11 F9 06            LXI  D,MSG1
1474   06D2 CD C7 05            CALL PRTSTG
1475   06D5 21 00 00            LXI  H,START
1476   06D8 22 14 08            SHLD RANPNT
1477   06DB 21 18 08            LXI  H,TXTBGN
1478   06DE 22 16 08            SHLD TXTUNF
1479   06E1 C3 F2 00            JMP  RSTART
1480   06E4             
1481   06E4             ;THIS IS AT LOC. 10
1482   06E4             ;OUTC:  OUT  IODATA                     ;Out to data port
1483   06E4             ;       CPI  CR                         ;WAS IT CR?
1484   06E4             ;       RNZ                             ;NO, FINISHED
1485   06E4             ;       JMP  OC1                        ;REST OF THIS IS AT OC1
1486   06E4 3E 0A       OC1:    MVI  A,LF                       ;YES, WE SEND LF TOO
1487   06E6 D7                  RST  ROUTC                      ;THIS IS RECURSIVE
1488   06E7 3E 0D               MVI  A,CR                       ;GET CR BACK IN A
1489   06E9 C9                  RET
1490   06EA             
1491   06EA DB 02       CHKIO:  IN   IOSTAT                     ;*** CHKIO ***
1492   06EC E6 01               ANI  1H                         ;MASK STATUS BIT
1493   06EE C8                  RZ                              ;NOT READY, RETURN "Z"
1494   06EF DB 01               IN   IODATA                     ;READY, READ DATA
1495   06F1 E6 7F               ANI  7FH                        ;MASK BIT 7 OFF
1496   06F3 FE 03       CI0:    CPI  03H                        ;IS IT CONTROL-C?
1497   06F5 C0                  RNZ                             ;NO, RETURN "NZ"
1498   06F6 C3 F2 00            JMP  RSTART                     ;YES, RESTART TBI
1499   06F9             ;
1500   06F9 54 69 6E 79 MSG1:   .DB  "TinyBASIC"
1500   06FD 42 41 53 49 
1500   0701 43 
1501   0702 0D                  .DB  CR
1502   0703             
1503   0703             ;*************************************************************
1504   0703             ;
1505   0703             ; *** TABLES *** DIRECT *** & EXEC ***
1506   0703             ;
1507   0703             ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1508   0703             ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1509   0703             ; OF CODE ACCORDING TO THE TABLE.
1510   0703             ;
1511   0703             ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1512   0703             ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1513   0703             ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1514   0703             ; ALL DIRECT AND STATEMENT COMMANDS.
1515   0703             ;
1516   0703             ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1517   0703             ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1518   0703             ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1519   0703             ;
1520   0703             ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1521   0703             ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1522   0703             ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1523   0703             ; BYTE SET TO 1.
1524   0703             ; This is done by the macro 'DWA'.
1525   0703             ; If the program is executed from an address < 0x8000
1526   0703             ; take care to mask this bit in program part 'EXEC'.
1527   0703             ;
1528   0703             ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
1529   0703             ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
1530   0703             ; MATCH THIS NULL ITEM AS DEFAULT.
1531   0703             ;
1532   0703             TAB1:                                   ;DIRECT COMMANDS
1533   0703 4C 49 53 54         .DB  "LIST"
1534   0707 81                  DWA(LIST)
1534   0708 A7          
1535   0709 52 55 4E            .DB  "RUN"
1536   070C 81                  DWA(RUN)
1536   070D 79          
1537   070E 4E 45 57            .DB  "NEW"
1538   0711 81                  DWA(NEW)
1538   0712 6A          
1539   0713             ;
1540   0713             TAB2:                                   ;DIRECT/STATEMENT
1541   0713 4E 45 58 54         .DB  "NEXT"
1542   0717 82                  DWA(NEXT)
1542   0718 A4          
1543   0719 4C 45 54            .DB  "LET"
1544   071C 83                  DWA(LET)
1544   071D 6D          
1545   071E 49 46               .DB  "IF"
1546   0720 83                  DWA(IFF)
1546   0721 01          
1547   0722 47 4F 54 4F         .DB  "GOTO"
1548   0726 81                  DWA(GOTO)
1548   0727 98          
1549   0728 47 4F 53 55         .DB  "GOSUB"
1549   072C 42 
1550   072D 82                  DWA(GOSUB)
1550   072E 0C          
1551   072F 52 45 54 55         .DB  "RETURN"
1551   0733 52 4E 
1552   0735 82                  DWA(RETURN)
1552   0736 2C          
1553   0737 52 45 4D            .DB  "REM"
1554   073A 82                  DWA(REM)
1554   073B FD          
1555   073C 46 4F 52            .DB  "FOR"
1556   073F 82                  DWA(FOR)
1556   0740 45          
1557   0741 49 4E 50 55         .DB  "INPUT"
1557   0745 54 
1558   0746 83                  DWA(INPUT)
1558   0747 1A          
1559   0748 50 52 49 4E         .DB  "PRINT"
1559   074C 54 
1560   074D 81                  DWA(PRINT)
1560   074E BF          
1561   074F 3F                  .DB  "?"
1562   0750 81                  DWA(PRINT)
1562   0751 BF          
1563   0752 53 54 4F 50         .DB  "STOP"
1564   0756 81                  DWA(STOP)
1564   0757 73          
1565   0758 83                  DWA(DEFLT)                      ;END OF LIST
1565   0759 67          
1566   075A             ;
1567   075A             TAB4:                                   ;FUNCTIONS
1568   075A 52 4E 44            .DB  "RND"
1569   075D 84                  DWA(RND)
1569   075E 6F          
1570   075F 41 42 53            .DB  "ABS"
1571   0762 84                  DWA(ABS)
1571   0763 9A          
1572   0764 53 49 5A 45         .DB  "SIZE"
1573   0768 84                  DWA(SIZE)
1573   0769 A3          
1574   076A 50 45 45 4B         .DB  "PEEK"                     ;get byte from memory
1575   076E 84                  DWA(PEEK)
1575   076F B0          
1576   0770 44 45 45 4B         .DB  "DEEK"                     ;get word from memory
1577   0774 84                  DWA(DEEK)
1577   0775 B8          
1578   0776 84                  DWA(XP40)                       ;END OF LIST
1578   0777 55          
1579   0778             ;
1580   0778             TAB5:                                   ;"TO" IN "FOR"
1581   0778 54 4F               .DB  "TO"
1582   077A 82                  DWA(FR1)
1582   077B 55          
1583   077C 85                  DWA(QWHAT)                      ;END OF LIST
1583   077D 22          
1584   077E             ;
1585   077E             TAB6:                                   ;"STEP" IN "FOR"
1586   077E 53 54 45 50         .DB  "STEP"
1587   0782 82                  DWA(FR2)
1587   0783 5F          
1588   0784 82                  DWA(FR3)                        ;END OF LIST
1588   0785 63          
1589   0786             ;
1590   0786             TAB8:                                   ;RELATION OPERATORS
1591   0786 3E 3D               .DB  ">="
1592   0788 83                  DWA(XP11)
1592   0789 7D          
1593   078A 23                  .DB  "#"
1594   078B 83                  DWA(XP12)
1594   078C 83          
1595   078D 3E                  .DB  ">"
1596   078E 83                  DWA(XP13)
1596   078F 89          
1597   0790 3D                  .DB  "="
1598   0791 83                  DWA(XP15)
1598   0792 98          
1599   0793 3C 3D               .DB  "<="
1600   0795 83                  DWA(XP14)
1600   0796 90          
1601   0797 3C                  .DB  "<"
1602   0798 83                  DWA(XP16)
1602   0799 9E          
1603   079A 83                  DWA(XP17)                       ;END OF REL OPERATOR LIST
1603   079B A4          
1604   079C             ;
1605   079C 21 02 07    DIRECT: LXI  H,TAB1-1                   ;*** DIRECT ***
1606   079F             ;
1607   079F             EXEC:                                   ;*** EXEC ***
1608   079F EF          EX0:    RST  RIGNBLK                    ;IGNORE LEADING BLANKS
1609   07A0 D5                  PUSH D                          ;SAVE POINTER
1610   07A1 1A          EX1:    LDAX D                          ;IF FOUND '.' IN STRING
1611   07A2 13                  INX  D                          ;BEFORE ANY MISMATCH
1612   07A3 FE 2E               CPI  2EH                        ;WE DECLARE A MATCH
1613   07A5 CA CA 07            JZ   EX3
1614   07A8 FE 61               CPI  'a'                        ;< 'a' ?
1615   07AA DA B4 07            JC   EXN                        ;NO ALPHA CHAR
1616   07AD FE 7B               CPI  'z'+1                      ;> 'z'
1617   07AF D2 B4 07            JNC  EXN                        ;NO ALPHA CHAR
1618   07B2 E6 5F               ANI  5FH                        ;MASK LOWER CASE TO UPPER CASE
1619   07B4             EXN:
1620   07B4 23                  INX  H                          ;HL->TABLE
1621   07B5 BE                  CMP  M                          ;IF MATCH, TEST NEXT
1622   07B6 CA A1 07            JZ   EX1
1623   07B9 3E 7F               MVI  A,07FH                     ;ELSE SEE IF BIT 7
1624   07BB 1B                  DCX  D                          ;OF TABLE IS SET, WHICH
1625   07BC BE                  CMP  M                          ;IS THE JUMP ADDR. (HI)
1626   07BD DA D1 07            JC   EX5                        ;C:YES, MATCHED
1627   07C0 23          EX2:    INX  H                          ;NC:NO, FIND JUMP ADDR.
1628   07C1 BE                  CMP  M
1629   07C2 D2 C0 07            JNC  EX2
1630   07C5 23                  INX  H                          ;BUMP TO NEXT TAB. ITEM
1631   07C6 D1                  POP  D                          ;RESTORE STRING POINTER
1632   07C7 C3 9F 07            JMP  EX0                        ;TEST AGAINST NEXT ITEM
1633   07CA 3E 7F       EX3:    MVI  A,07FH                     ;PARTIAL MATCH, FIND
1634   07CC 23          EX4:    INX  H                          ;JUMP ADDR., WHICH IS
1635   07CD BE                  CMP  M                          ;FLAGGED BY BIT 7
1636   07CE D2 CC 07            JNC  EX4
1637   07D1 7E          EX5:    MOV  A,M                        ;LOAD HL WITH THE JUMP
1638   07D2 23                  INX  H                          ;ADDRESS FROM THE TABLE
1639   07D3 6E                  MOV  L,M
1640   07D4             #IF $ < 8000H
1641   07D4 E6 7F               ANI  7FH                        ;MASK OFF HIGH ADDRESS BIT
1642   07D6             #ENDIF
1643   07D6 67                  MOV  H,A
1644   07D7 F1                  POP  PSW                        ;CLEAN UP THE GARBAGE
1645   07D8 E9                  PCHL                            ;AND WE GO DO IT
1646   07D9             ;
1647   07D9             LSTROM:                                 ;ALL ABOVE CAN BE ROM
1648   07D9             ;
1649   07D9             ;*************************************************************
1650   07D9             
1651   07D9             ;*************************************************************
1652   07D9             ;
1653   0800                     .ORG RAMBGN                     ;HERE DOWN MUST BE RAM
1654   0800             ;
1655   0800             PNBASE: .DS  1                          ;BASE FOR PRTNUM
1656   0801             OCSW:   .DS  1                          ;SWITCH FOR OUTPUT
1657   0802             CURRNT: .DS  2                          ;POINTS TO CURRENT LINE
1658   0804             STKGOS: .DS  2                          ;SAVES SP IN 'GOSUB'
1659   0806             VARNXT: .DS  2                          ;TEMP STORAGE
1660   0808             STKINP: .DS  2                          ;SAVES SP IN 'INPUT'
1661   080A             LOPVAR: .DS  2                          ;'FOR' LOOP SAVE AREA
1662   080C             LOPINC: .DS  2                          ;INCREMENT
1663   080E             LOPLMT: .DS  2                          ;LIMIT
1664   0810             LOPLN:  .DS  2                          ;LINE NUMBER
1665   0812             LOPPT:  .DS  2                          ;TEXT POINTER
1666   0814             RANPNT: .DS  2                          ;RANDOM NUMBER POINTER
1667   0816             TXTUNF: .DS  2                          ;->UNFILLED TEXT AREA
1668   0818             TXTBGN: .EQU $                          ;TEXT SAVE AREA BEGINS
1669   0818             
1670   0F00                     .ORG RAMBGN + RAMSZE - $0100
1671   0F00             ;
1672   0F00             TXTEND: .EQU $                          ;TEXT SAVE AREA ENDS
1673   0F00             VARBGN: .DS  2+2*26                     ;VARIABLE '@(0)' FOLLOWED BY 'A'..'Z'
1674   0F68                                                     ;'@(1), @(2), ... are stored top-down
1675   0F68                                                     ;i.e. &@(i) = TXTEND-2*i
1676   0F68             BUFFER: .DS  64                         ;INPUT BUFFER
1677   0FA8             BUFEND: .DS  1                          ;BUFFER ENDS
1678   0FA9             STKLMT: .DS  1                          ;TOP LIMIT FOR STACK
1679   0FAA             
1680   1000                     .ORG RAMBGN + RAMSZE
1681   1000             ;
1682   1000             STACK:  .EQU $                          ;STACK STARTS HERE
1683   1000             ;
1684   1000                     .END
