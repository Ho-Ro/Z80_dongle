   1:			; Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
   2:			; Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
   3:			; Status bit for read in CHKIO changed to 0x02
   4:			; Status bit for write in OUTC (actually OC3) changed to 0x01
   5:			; Changed UART initialization parameters in INIT
   6:			; Changed ORG statements at end of file to match system with 2K RAM
   7:			;
   8:			; 2024-10-11 Ho-Ro:
   9:			; Automatically converted from 8080 syntax to Z80 syntax:
  10:			; https://hc-ddr.hucki.net/wiki/doku.php/cpm/8080_z80
  11:			; Assembler: uz80as for Z80 as well as i8080 (uz80as --target=i8080)
  12:			; Modified for use with Z80 dongle simulator
  13:			; UART data port 1
  14:			; UART status port 2
  15:			; New:
  16:			; Case insensitive input
  17:			; PRINT modifier for hex out: PRINT %16,..
  18:			; Hex numbers: $xxxx
  19:			; 2024-10-13 Ho-Ro:
  20:			; build ROM version (2K ROM / 6.5K RAM) and RAM version (2K prog RAM / 2K free RAM)
  21:			; add command "BYE" (halts Z80, returns to dongle analyser program)
  22:			; 2024-10-15 Ho-Ro:
  23:			; PRINT modifier %nn switches to unsigned number format, e.g.:
  24:			; PRINT %10,$FFFF -> 65535
  25:			; 2024-10-17 Ho-Ro:
  26:			; PUT ADDR, VAL, VAL, VAL,...
  27:			; constants RAM (TXTBGN), TOP (TXTEND) and SIZE (TXTEND-TXTUNF)
  28:			; function USR(para) that calls machine code at TOP (128 bytes free)
  29:			; with parameter in HL, returning the result in HL, default is RET at TOP
  30:			; Changed to the more authentic zmac syntax (https://github.com/gp48k/zmac)
  31:			; 2024-10-30 Ho-Ro:
  32:			; add operator '|' and '&'; remove RAM and TXT; 2044 bytes
  33:			; 2024-11-03 Ho-Ro:
  34:			; replace JP -> JR, add function CALL(ADR), add char constant 'x', 2047 bytes
  35:			; *************************************************************
  36:			;
  37:			;                 TINY BASIC FOR INTEL 8080
  38:			;                       VERSION 2.0
  39:			;                     BY LI-CHEN WANG
  40:			;                  MODIFIED AND TRANSLATED
  41:			;                    TO INTEL MNEMONICS
  42:			;                     BY ROGER RAUSKOLB
  43:			;                      10 OCTOBER,1976
  44:			;                        @COPYLEFT
  45:			;                   ALL WRONGS RESERVED
  46:			;
  47:			; *************************************************************
  48:			;
  49:			; *** ZERO PAGE SUBROUTINES ***
  50:			;
  51:			; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
  52:			; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
  53:			; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
  54:			; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
  55:			; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
  56:			; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
  57:			; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
  58:			; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
  59:			;
  60:			
  61:			                .Z80
  62:			
  63:			; Memory map
  64:	0000          	ROMBGN:         .EQU    $0000           ; Execution must start here
  65:	0800          	RAMBGN:         .EQU    $0800           ; 2K ROM
  66:			
  67:	0000          	                .IFDEF  MAKE_ROM
  70:			                .ELSE
  71:			; 2K CODE IN RAM & 2K DATA IN RAM AS TEST VERSION
  72:	0800          	RAMSZE:         .EQU    $0800
  73:			                .ENDIF
  74:			
  75:			; IO map
  76:	0001          	IODATA:         .EQU    1
  77:	0002          	IOSTAT:         .EQU    2
  78:	0001          	IO_RX_BIT:      .EQU    $01
  79:			
  80:			; Control character
  81:	0008          	BS:             .EQU    $08             ; ^H, BACKSPACE
  82:	000D          	CR:             .EQU    $0D             ; ^M, CARRIAGE RETURN
  83:	000A          	LF:             .EQU    $0A             ; ^J, LINE FEED
  84:	0018          	CAN:            .EQU    $18             ; ^X, CANCEL
  85:	007F          	DEL:            .EQU    $7F             ; DELETE
  86:			
  87:			
  88:			; Store a label address as BIG endian with bit A15 set
  89:			
  90:			DWA             .MACRO   LABEL
  91:			                .DB     HIGH LABEL | $80
  92:			                .DB     LOW LABEL
  93:			                .ENDM
  94:			
  95:			; if CHAR != A THEN JUMP RELATIVE TO LABEL
  96:			
  97:			TSTC            .MACRO   CHAR,LABEL
  98:			                RST     RTSTC
  99:			                .DB     CHAR
 100:			                .DB     LABEL-$-1
 101:			                .ENDM
 102:			
 103:			
 104:	0000          	                .ORG    ROMBGN
 105:			
 106:	0000  310009  	CSTART:         LD      SP,STACK        ; *** COLD START ***
 107:	0003  3EC9    	                LD      A,$C9           ; must be 2 byte
 108:	0005  C31501  	                JP      INIT            ; as delimiter for PRTSTG
 109:			
 110:			
 111:	0008  E3      	RTSTC:          EX      (SP),HL         ; *** RST 1 @ $0008 ***
 112:	0009  EF      	                RST     RIGNBLK         ; IGNORE BLANKS AND
 113:	000A  BE      	                CP      (HL)            ; TEST CHARACTER
 114:	000B  23      	                INC     HL              ; COMPARE THE FOLLOWING BYTE
 115:	000C  1861    	                JR      TC1             ; REST OF THIS IS AT TC1
 116:			
 117:			
 118:	000E  3E0D    	CRLF:           LD      A,CR            ; *** CRLF ***
 119:			                                        ; *** RST 2 @ $0010 ***
 120:	0010  D301    	ROUTC:          OUT     (IODATA),A      ; Out to data port
 121:	0012  FE0D    	                CP      CR              ; WAS IT CR?
 122:	0014  C0      	                RET     NZ              ; NO, FINISHED
 123:	0015  C30101  	                JP      OC1             ; REST OF THIS IS AT OC1
 124:			
 125:			
 126:	0018  CDE103  	REXPR:          CALL    EXPR2           ; *** RST 3 @ $0018 ***
 127:	001B  E5      	                PUSH    HL              ; EVALUATE AN EXPRESSION
 128:	001C  C39D03  	                JP      EXPR1           ; REST OF IT AT EXPR1
 129:	001F  57      	                .DB     'W'             ; FILL ONE BYTE
 130:			
 131:			
 132:	0020  7C      	RCOMP:          LD      A,H             ; *** RST 4 @ $0020 ***
 133:	0021  BA      	                CP      D               ; COMPARE HL WITH DE
 134:	0022  C0      	                RET     NZ              ; RETURN CORRECT C AND
 135:	0023  7D      	                LD      A,L             ; Z FLAGS
 136:	0024  BB      	                CP      E               ; BUT OLD A IS LOST
 137:	0025  C9      	                RET
 138:	0026  00      	                NOP
 139:	0027  41      	                .DB     'A'             ; FILL ONE BYTE
 140:			
 141:			
 142:	0028  1A      	RIGNBLK:        LD      A,(DE)          ; *** RST 5 @ $0028 ***
 143:	0029  FE20    	                CP      20H             ; IGNORE BLANKS
 144:	002B  C0      	                RET     NZ              ; IN TEXT (WHERE DE->)
 145:	002C  13      	                INC     DE              ; AND RETURN THE FIRST
 146:	002D  18F9    	                JR      RIGNBLK         ; NON-BLANK CHAR. IN A
 147:	002F  4E      	                .DB     'N'             ; FILL ONE BYTE
 148:			
 149:			
 150:	0030  F1      	RFINISH:        POP     AF              ; *** RST 6 @ $0030 ***
 151:	0031  CD6605  	                CALL    FIN             ; CHECK END OF COMMAND
 152:	0034  C37905  	                JP      QWHAT           ; PRINT "WHAT?" IF WRONG
 153:	0037  47      	                .DB     'G'             ; FILL ONE BYTE
 154:			
 155:			
 156:	0038  EF      	RTSTV:          RST     RIGNBLK         ; *** RST 7 @ $0038 ***
 157:	0039  D640    	                SUB     '@'             ; TEST VARIABLES
 158:	003B  D8      	                RET     C               ; C: < '@', NOT A VARIABLE
 159:	003C  201B    	                JR      NZ,TV1          ; NZ: NOT THE '@' ARRAY
 160:			;
 161:	003E  13      	                INC     DE              ; IT IS THE "@" ARRAY
 162:	003F  CDA604  	                CALL    PARN            ; @ SHOULD BE FOLLOWED
 163:	0042  29      	                ADD     HL,HL           ; BY (EXPR) AS ITS INDEX
 164:	0043  DADB00  	                JP      C,QHOW          ; IS INDEX TOO BIG (>0x7FFF)?
 165:	0046  23      	                INC     HL              ; ADD TWO BYTES
 166:	0047  23      	                INC     HL              ; FOR @(0)
 167:	0048  D5      	                PUSH    DE              ; WILL IT OVERWRITE
 168:	0049  EB      	                EX      DE,HL           ; TEXT?
 169:	004A  CDE804  	                CALL    SIZE            ; FIND SIZE OF FREE RAM
 170:	004D  E7      	                RST     RCOMP           ; AND CHECK THAT
 171:	004E  DAA705  	                JP      C,ASORRY        ; IF SO, SAY "SORRY"
 172:	0051  21000F  	                LD      HL,TXTEND       ; IF NOT GET ADDRESS
 173:	0054  CD3305  	                CALL    SUBDE           ; OF @(EXPR) AND PUT IT
 174:	0057  D1      	                POP     DE              ; IN HL (top-down from TXTEND)
 175:	0058  C9      	                RET                     ; C FLAG IS CLEARED
 176:			;
 177:			                                        ; VARIABLES 'A'..'Z'
 178:	0059  FE21    	TV1:            CP      21H             ; >='a'?
 179:	005B  3802    	                JR      C,TV2           ; NO
 180:	005D  D620    	                SUB     20H             ; MAKE UPPER CASE
 181:	005F  FE1B    	TV2:            CP      1BH             ; <='Z'
 182:	0061  3F      	                CCF                     ; IF NOT RETURN C FLAG
 183:	0062  D8      	                RET     C
 184:	0063  13      	                INC     DE              ; IT IS 'A'=1 THROUGH 'Z'=26
 185:	0064  21FE07  	                LD      HL,VARBGN-2     ; COMPUTE ADDRESS OF
 186:	0067  07      	                RLCA                    ; THAT VARIABLE
 187:	0068  85      	                ADD     A,L             ; AND RETURN IT IN HL
 188:	0069  6F      	                LD      L,A             ; WITH C FLAG CLEARED
 189:	006A  3E00    	                LD      A,0
 190:	006C  8C      	                ADC     A,H
 191:	006D  67      	                LD      H,A
 192:	006E  C9      	                RET
 193:			
 194:			; RTSTC:        EX      (SP),HL         ; *** TSTC OR RST 1 ***
 195:			;               RST     RIGNBLK         ; THIS IS AT LOC. 8
 196:			;               CMP     (HL)            ; AND THEN JUMP HERE
 197:			;               INC     HL              ; COMPARE THE FOLLOWING BYTE
 198:			;               JR      TC1             ; REST OF THIS IS AT TC1
 199:			;
 200:	006F  2807    	TC1:            JR      Z,TC2           ; FOLLOWS THE RST INST.
 201:	0071  C5      	                PUSH    BC              ; WITH THE TEXT (DE->)
 202:	0072  4E      	                LD      C,(HL)          ; IF NOT =, ADD THE 2ND
 203:	0073  0600    	                LD      B,0             ; BYTE THAT FOLLOWS THE
 204:	0075  09      	                ADD     HL,BC           ; RST TO THE OLD PC
 205:	0076  C1      	                POP     BC              ; I.E., DO A RELATIVE
 206:	0077  1B      	                DEC     DE              ; JUMP IF NOT =
 207:	0078  13      	TC2:            INC     DE              ; IF =, SKIP THOSE BYTES
 208:	0079  23      	                INC     HL              ; AND CONTINUE
 209:	007A  E3      	                EX      (SP),HL
 210:	007B  C9      	                RET
 211:			
 212:	007C  210000  	TSTNUM:         LD      HL,0            ; *** TSTNUM ***
 213:	007F  44      	                LD      B,H             ; TEST IF THE TEXT IS A NUMBER
 214:	0080  CF270B  	                TSTC    "'",TN1         ; If not char const check for number
 215:	0083  1A      	                LD      A,(DE)          ; Get the char
 216:	0084  6F      	                LD      L,A
 217:	0085  13      	                INC     DE              ; Skip char
 218:	0086  1A      	                LD      A,(DE)          ; Followed by
 219:	0087  FE27    	                CP      "'"             ; closing "'"?
 220:	0089  206A    	                JR      NZ,WHAT         ; No -> syntax error
 221:	008B  13      	                INC     DE              ; Skip the closing "'"
 222:	008C  04      	                INC     B               ; At least 1 digit
 223:	008D  C9      	                RET
 224:			;
 225:	008E  FE24    	TN1:            CP      '$'             ; HEX NUMBER?
 226:	0090  2822    	                JR      Z,TX1           ; YES
 227:	0092  FE30    	TN2:            CP      '0'             ; IF NOT A DIGIT,
 228:	0094  D8      	                RET     C               ; RETURN 0 IN B AND HL
 229:	0095  FE3A    	                CP      '9'+1           ; IF NUMBERS, CONVERT
 230:	0097  D0      	                RET     NC              ; TO BINARY IN HL AND
 231:	0098  3EF0    	                LD      A,0F0H          ; SET B TO # OF DIGITS
 232:	009A  A4      	                AND     H               ; IF H>15, THERE IS NO
 233:	009B  203E    	                JR      NZ,QHOW         ; ROOM FOR NEXT DIGIT
 234:	009D  04      	                INC     B               ; B COUNTS # OF DIGITS
 235:	009E  C5      	                PUSH    BC
 236:	009F  44      	                LD      B,H             ; HL=10*HL+(NEW DIGIT)
 237:	00A0  4D      	                LD      C,L
 238:	00A1  29      	                ADD     HL,HL           ; 2*HL
 239:	00A2  29      	                ADD     HL,HL           ; 4*HL
 240:	00A3  09      	                ADD     HL,BC           ; 5*HL
 241:	00A4  29      	                ADD     HL,HL           ; 10*HL
 242:	00A5  1A      	                LD      A,(DE)          ; AND (DIGIT) IS FROM
 243:	00A6  13      	                INC     DE              ; STRIPPING THE ASCII
 244:	00A7  E60F    	                AND     0FH             ; CODE
 245:	00A9  85      	                ADD     A,L
 246:	00AA  6F      	                LD      L,A
 247:	00AB  3E00    	                LD      A,0
 248:	00AD  8C      	                ADC     A,H
 249:	00AE  67      	                LD      H,A
 250:	00AF  C1      	                POP     BC
 251:	00B0  1A      	                LD      A,(DE)          ; DO THIS DIGIT AFTER
 252:	00B1  F29200  	                JP      P,TN2           ; DIGIT. S SAYS OVERFLOW
 253:			;
 254:			                                        ; OUTPUT HEX NUMBER
 255:	00B4  13      	TX1:            INC     DE              ; SKIP TO NEXT DIGIT POSITION
 256:	00B5  1A      	                LD      A,(DE)          ; GET HEX DIGIT
 257:	00B6  FE30    	                CP      '0'             ; < '0'
 258:	00B8  D8      	                RET     C               ; ERROR
 259:	00B9  FE3A    	                CP      '9'+1           ; <= '9'
 260:	00BB  380A    	                JR      C,TX2           ; OK '0'..'9'
 261:	00BD  FE41    	                CP      'A'             ; < 'A'
 262:	00BF  D8      	                RET     C               ; ERROR, >'9' && < 'A'
 263:	00C0  E65F    	                AND     5FH             ; CONVERT ALPHA TO UPPER
 264:	00C2  FE47    	                CP      'F'+1           ; > 'F'
 265:	00C4  D0      	                RET     NC              ; ERROR
 266:	00C5  D607    	                SUB     'A'-'0'-10      ; SKIP GAP '9' -> 'A'
 267:	00C7  E60F    	TX2:            AND     0FH             ; GET HEX CODE 0..F
 268:	00C9  C5      	                PUSH    BC
 269:	00CA  47      	                LD      B,A             ; SAVE HEX CODE
 270:	00CB  3EF0    	                LD      A,0F0H          ; IF H>15
 271:	00CD  A4      	                AND     H               ; THERE IS NO ROOM
 272:	00CE  78      	                LD      A,B
 273:	00CF  C1      	                POP     BC
 274:	00D0  2009    	                JR      NZ,QHOW         ; FOR NEXT DIGIT
 275:			
 276:	00D2  04      	                INC     B               ; B COUNTS # OF DIGITS
 277:	00D3  29      	                ADD     HL,HL           ; 2*HL
 278:	00D4  29      	                ADD     HL,HL           ; 4*HL
 279:	00D5  29      	                ADD     HL,HL           ; 8*HL
 280:	00D6  29      	                ADD     HL,HL           ; 16*HL
 281:	00D7  B5      	                OR      L               ; PUT HEX CODE INTO
 282:	00D8  6F      	                LD      L,A             ; THE 4 LSB OF HL
 283:	00D9  18D9    	                JR      TX1             ; DIGIT AFTER DIGIT
 284:			
 285:	00DB  D5      	QHOW:           PUSH    DE              ; *** ERROR "HOW?" ***
 286:	00DC  11ED00  	AHOW:           LD      DE,HOW
 287:	00DF  C37D05  	                JP      ERROR
 288:			
 289:	00E2  54696E79	TIBAS:          .DB     "TinyBASIC2"
	      42415349
	      4332
 290:	00EC  0D      	                .DB     CR
 291:			
 292:	00ED  484F573F	HOW:            .DB     "HOW?"
 293:	00F1  0D      	                .DB     CR
 294:			
 295:	00F2  4F4B    	OK:             .DB     "OK"
 296:	00F4  0D      	                .DB     CR
 297:			
 298:	00F5  57484154	WHAT:           .DB     "WHAT?"
	      3F
 299:	00FA  0D      	                .DB     CR
 300:			
 301:	00FB  534F5252	SORRY:          .DB     "SORRY"
	      59
 302:	0100  0D      	                .DB     CR
 303:			
 304:			;
 305:			; *************************************************************
 306:			;
 307:			; *** ROUTC *** CHKIO ***
 308:			;
 309:			; THESE ARE THE ONLY I/O ROUTINES IN TBI.
 310:			; OUTC WILL OUTPUT THE BYTE IN A.
 311:			; IF THAT IS A CR, A LF IS ALSO SEND OUT.
 312:			; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
 313:			; ALL REGISTERS ARE RESTORED.
 314:			;
 315:			; 'CHKIO' CHECKS THE INPUT.
 316:			; IF NO INPUT, IT WILL RETURN TO THE CALLER WITH THE Z FLAG SET.
 317:			; IF THERE IS INPUT, Z FLAG IS CLEARED AND THE INPUT BYTE IS IN A.
 318:			; IF A CONTROL-C IS READ, 'CHKIO' WILL RESTART TBI
 319:			; AND DO NOT RETURN TO THE CALLER.
 320:			;
 321:			
 322:			; THIS IS AT LOC. 10
 323:			; ROUTC:        OUT     (IODATA),A      ; Out to data port
 324:			;               CP      CR              ; WAS IT CR?
 325:			;               RET     NZ              ; NO, FINISHED
 326:			;               JP      OC1             ; REST OF THIS IS AT OC1
 327:			;
 328:	0101  3E0A    	OC1:            LD      A,LF            ; YES, WE SEND LF TOO
 329:	0103  D7      	                RST     ROUTC           ; THIS IS RECURSIVE
 330:	0104  3E0D    	                LD      A,CR            ; GET CR BACK IN A
 331:	0106  C9      	                RET
 332:			
 333:	0107  DB02    	CHKIO:          IN      A,(IOSTAT)      ; *** CHKIO ***
 334:	0109  E601    	                AND     IO_RX_BIT       ; MASK STATUS BIT
 335:	010B  C8      	                RET     Z               ; NOT READY, RETURN "Z"
 336:	010C  DB01    	                IN      A,(IODATA)      ; READY, READ DATA
 337:	010E  E67F    	                AND     7FH             ; MASK BIT 7 OFF
 338:	0110  FE03    	CI0:            CP      03H             ; IS IT CONTROL-C?
 339:	0112  C0      	                RET     NZ              ; NO, RETURN "NZ"
 340:	0113  1815    	                JR      WSTART          ; YES, RESTART TBI
 341:			
 342:			;
 343:			; *************************************************************
 344:			;
 345:			
 346:			;
 347:			; *************************************************************
 348:			;
 349:			; *** INIT ***
 350:			;
 351:			; PUT IO INITIALISATION HERE, E.G. FOR THE SERIAL INTERFACE
 352:			;
 353:			; *** MAIN ***
 354:			;
 355:			; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
 356:			; AND STORES IT IN THE MEMORY.
 357:			;
 358:			; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
 359:			; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
 360:			; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
 361:			; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
 362:			; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
 363:			; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
 364:			; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
 365:			; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
 366:			; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
 367:			;
 368:			; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
 369:			; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
 370:			; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
 371:			; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
 372:			;
 373:			; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
 374:			; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
 375:			; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
 376:			; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
 377:			;
 378:			; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
 379:			; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
 380:			; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
 381:			; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
 382:			;
 383:			;
 384:			                                        ; THIS IS AT LOC. 0
 385:			; CSTART:       LD      SP,STACK        ; *** COLD START ***
 386:			;               LD      A,$C9           ; must be 2 byte
 387:			;               JP      INIT            ; as delimiter for PRTSTG
 388:			;
 389:	0115          	INIT:
 390:	0115  32000F  	                LD      (USRSPC),A      ; "RET" AT USR CODE SPACE
 391:	0118  11E200  	                LD      DE,TIBAS        ; COLD START MESSAGE
 392:	011B  CD1006  	                CALL    PRTSTG
 393:	011E  210000  	                LD      HL,CSTART       ; INIT RANDOM POINTER
 394:	0121  224A08  	                LD      (RANPNT),HL
 395:	0124  210009  	                LD      HL,TXTBGN       ; UNFILLED TEXT
 396:	0127  223608  	                LD      (TXTUNF),HL
 397:			;
 398:	012A  310009  	WSTART:         LD      SP,STACK        ; *** WARM START ***
 399:	012D  CD0E00  	                CALL    CRLF            ; AND JUMP TO HERE
 400:	0130  11F200  	                LD      DE,OK           ; DE->STRING
 401:	0133  97      	                SUB     A               ; A=0
 402:	0134  CD1006  	                CALL    PRTSTG          ; PRINT STRING UNTIL CR
 403:	0137  213E01  	                LD      HL,ST2+1        ; HACK ST2+1 -> 0000
 404:	013A  223808  	                LD      (CURRNT),HL     ; CURRENT->LINE # = 0
 405:	013D  210000  	ST2:            LD      HL,0000         ; <- ST2+1
 406:	0140  224008  	                LD      (LOPVAR),HL
 407:	0143  223A08  	                LD      (STKGOS),HL
 408:	0146  3E3E    	ST3:            LD      A,'>'           ; PROMPT '>' AND
 409:	0148  CDAC05  	                CALL    GETLN           ; READ A LINE
 410:	014B  D5      	                PUSH    DE              ; DE->END OF LINE
 411:	014C  11800F  	                LD      DE,BUFFER       ; DE->BEGINNING OF LINE
 412:	014F  CD7C00  	                CALL    TSTNUM          ; TEST IF IT IS A NUMBER
 413:	0152  EF      	                RST     RIGNBLK
 414:	0153  7C      	                LD      A,H             ; HL=VALUE OF THE # OR
 415:	0154  B5      	                OR      L               ; 0 IF NO # WAS FOUND
 416:	0155  C1      	                POP     BC              ; BC->END OF LINE
 417:	0156  CA1007  	                JP      Z,DIRECT
 418:	0159  1B      	                DEC     DE              ; BACKUP DE AND SAVE
 419:	015A  7C      	                LD      A,H             ; VALUE OF LINE # THERE
 420:	015B  12      	                LD      (DE),A
 421:	015C  1B      	                DEC     DE
 422:	015D  7D      	                LD      A,L
 423:	015E  12      	                LD      (DE),A
 424:	015F  C5      	                PUSH    BC              ; BC,DE->BEGIN, END
 425:	0160  D5      	                PUSH    DE
 426:	0161  79      	                LD      A,C
 427:	0162  93      	                SUB     E
 428:	0163  F5      	                PUSH    AF              ; A=# OF BYTES IN LINE
 429:	0164  CDEB05  	                CALL    FNDLN           ; FIND THIS LINE IN SAVE
 430:	0167  D5      	                PUSH    DE              ; AREA, DE->SAVE AREA
 431:	0168  2010    	                JR      NZ,ST4          ; NZ:NOT FOUND, INSERT
 432:	016A  D5      	                PUSH    DE              ; Z:FOUND, DELETE IT
 433:	016B  CD0606  	                CALL    FNDNXT          ; FIND NEXT LINE
 434:			                                        ; DE->NEXT LINE
 435:	016E  C1      	                POP     BC              ; BC->LINE TO BE DELETED
 436:	016F  2A3608  	                LD      HL,(TXTUNF)     ; HL->UNFILLED SAVE AREA
 437:	0172  CDB806  	                CALL    MVUP            ; MOVE UP TO DELETE
 438:	0175  60      	                LD      H,B             ; TXTUNF->UNFILLED AREA
 439:	0176  69      	                LD      L,C
 440:	0177  223608  	                LD      (TXTUNF),HL     ; UPDATE
 441:	017A  C1      	ST4:            POP     BC              ; GET READY TO INSERT
 442:	017B  2A3608  	                LD      HL,(TXTUNF)     ; BUT FIRST CHECK IF
 443:	017E  F1      	                POP     AF              ; THE LENGTH OF NEW LINE
 444:	017F  E5      	                PUSH    HL              ; IS 3 (LINE # AND CR)
 445:	0180  FE03    	                CP      3               ; THEN DO NOT INSERT
 446:	0182  28A6    	                JR      Z,WSTART        ; MUST CLEAR THE STACK
 447:	0184  85      	                ADD     A,L             ; COMPUTE NEW TXTUNF
 448:	0185  6F      	                LD      L,A
 449:	0186  3E00    	                LD      A,0
 450:	0188  8C      	                ADC     A,H
 451:	0189  67      	                LD      H,A             ; HL->NEW UNFILLED AREA
 452:	018A  11000F  	                LD      DE,TXTEND       ; CHECK TO SEE IF THERE
 453:	018D  E7      	                RST     RCOMP           ; COMP HL,DE - IS ENOUGH SPACE
 454:	018E  D2A605  	                JP      NC,QSORRY       ; SORRY, NO ROOM FOR IT
 455:	0191  223608  	                LD      (TXTUNF),HL     ; OK, UPDATE TXTUNF
 456:	0194  D1      	                POP     DE              ; DE->OLD UNFILLED AREA
 457:	0195  CDC006  	                CALL    MVDOWN
 458:	0198  D1      	                POP     DE              ; DE->BEGIN, HL->END
 459:	0199  E1      	                POP     HL
 460:	019A  CDB806  	                CALL    MVUP            ; MOVE NEW LINE TO SAVE
 461:	019D  18A7    	                JR      ST3             ; AREA
 462:			
 463:			; *************************************************************
 464:			;
 465:			; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
 466:			; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
 467:			; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
 468:			; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
 469:			; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
 470:			;
 471:			; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'WSTART'
 472:			; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
 473:			; GO BACK TO 'WSTART'.
 474:			; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
 475:			; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
 476:			; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'WSTART', ELSE
 477:			; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
 478:			; *************************************************************
 479:			;
 480:			; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
 481:			;
 482:			; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
 483:			;
 484:			; 'STOP(CR)' GOES BACK TO 'WSTART'
 485:			;
 486:			; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
 487:			; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
 488:			; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
 489:			;
 490:			; THERE ARE 3 MORE ENTRIES IN 'RUN':
 491:			; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
 492:			; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
 493:			; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
 494:			;
 495:			; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
 496:			; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
 497:			;
 498:	019F  CD7505  	NEW:            CALL    ENDCHK          ; *** NEW(CR) ***
 499:	01A2  210009  	                LD      HL,TXTBGN
 500:	01A5  223608  	                LD      (TXTUNF),HL
 501:			;
 502:	01A8  CD7505  	STOP:           CALL    ENDCHK          ; *** STOP(CR) ***
 503:	01AB  C32A01  	                JP      WSTART
 504:			
 505:	01AE  CD7505  	RUN:            CALL    ENDCHK          ; *** RUN(CR) ***
 506:	01B1  110009  	                LD      DE,TXTBGN       ; FIRST SAVED LINE
 507:			;
 508:	01B4  210000  	RUNNXL:         LD      HL,0            ; *** RUNNXL ***
 509:	01B7  CDF305  	                CALL    FNDLP           ; FIND WHATEVER LINE #
 510:	01BA  DA2A01  	                JP      C,WSTART        ; C:PASSED TXTUNF, QUIT
 511:			;
 512:	01BD  EB      	RUNTSL:         EX      DE,HL           ; *** RUNTSL ***
 513:	01BE  223808  	                LD      (CURRNT),HL     ; SET 'CURRENT'->LINE #
 514:	01C1  EB      	                EX      DE,HL
 515:	01C2  13      	                INC     DE              ; BUMP PASS LINE #
 516:	01C3  13      	                INC     DE
 517:			;
 518:	01C4  CD0701  	RUNSML:         CALL    CHKIO           ; *** RUNSML ***
 519:	01C7  215407  	                LD      HL,TAB2-1       ; FIND COMMAND IN TAB2
 520:	01CA  C31307  	                JP      EXEC            ; AND EXECUTE IT
 521:			
 522:	01CD  DF      	GOTO:           RST     REXPR           ; *** GOTO EXPR ***
 523:	01CE  D5      	                PUSH    DE              ; SAVE FOR ERROR ROUTINE
 524:	01CF  CD7505  	                CALL    ENDCHK          ; MUST FIND A CR
 525:	01D2  CDEB05  	                CALL    FNDLN           ; FIND THE TARGET LINE
 526:	01D5  C2DC00  	                JP      NZ,AHOW         ; NO SUCH LINE #
 527:	01D8  F1      	                POP     AF              ; CLEAR THE PUSH DE
 528:	01D9  18E2    	                JR      RUNTSL          ; GO DO IT
 529:			;
 530:			; *************************************************************
 531:			;
 532:			; *** LIST *** & PRINT ***
 533:			;
 534:			; LIST HAS TWO FORMS:
 535:			; 'LIST(CR)' LISTS ALL SAVED LINES
 536:			; 'LIST #(CR)' START LIST AT THIS LINE #
 537:			; YOU CAN STOP THE LISTING BY CONTROL C KEY
 538:			;
 539:			; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
 540:			; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
 541:			; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
 542:			;
 543:			; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
 544:			; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
 545:			; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
 546:			; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
 547:			; SPECIFIED, 8 POSITIONS WILL BE USED.
 548:			;
 549:			; NUMBER BASE IS SET BY PERCENT SIGN FOLLOEWED BY A NUMBER
 550:			; BETWEEN 2 and 16. VALUES ARE PRINTED AS UNSIGNED TO THIS BASE
 551:			; FOR THE REST OF THIS PRINT COMMAND UNLESS CHANGED BY
 552:			; ANOTHER BASE. IF NO BASE IS PROVIDED NUMBERS ARE SIGNED DECIMAL.
 553:			;
 554:			; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
 555:			; DOUBLE QUOTES.
 556:			;
 557:			; A BACK-ARROW (UNDERLINE) ALONE MEANS GENERATE A (CR) WITHOUT (LF).
 558:			;
 559:			; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
 560:			; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
 561:			; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
 562:			;
 563:	01DB  CD7C00  	LIST:           CALL    TSTNUM          ; TEST IF THERE IS A #
 564:	01DE  CD7505  	                CALL    ENDCHK          ; IF NO # WE GET A 0
 565:	01E1  CDEB05  	                CALL    FNDLN           ; FIND THIS OR NEXT LINE
 566:	01E4  DA2A01  	LS1:            JP      C,WSTART        ; C:PASSED TXTUNF
 567:	01E7  CDA106  	                CALL    PRTLN           ; PRINT THE LINE
 568:	01EA  CD0701  	                CALL    CHKIO           ; STOP IF HIT CONTROL-C
 569:	01ED  CDF305  	                CALL    FNDLP           ; FIND NEXT LINE
 570:	01F0  18F2    	                JR      LS1             ; AND LOOP BACK
 571:			
 572:	01F2  AF      	PRINT:          XOR     A               ; DEFAULT BASE FOR PRTNUM
 573:	01F3  323508  	                LD      (PNBASE),A
 574:	01F6  0E08    	                LD      C,8             ; C = # OF SPACES
 575:	01F8  CF3B05  	                TSTC    ';',PR2         ; IF NULL LIST & ";"
 576:	01FB  CD0E00  	                CALL    CRLF            ; GIVE CR-LF AND
 577:	01FE  18C4    	                JR      RUNSML          ; CONTINUE SAME LINE
 578:	0200  CF0D05  	PR2:            TSTC    CR,PR0          ; IF NULL LIST (CR)
 579:	0203  CD0E00  	                CALL    CRLF            ; ALSO GIVE CR-LF AND
 580:	0206  18AC    	                JR      RUNNXL          ; GO TO NEXT LINE
 581:	0208  CF2304  	PR0:            TSTC    '#',PR5         ; ELSE IS IT FORMAT?
 582:	020B  DF      	                RST     REXPR           ; YES, EVALUATE EXPR.
 583:	020C  4D      	                LD      C,L             ; AND SAVE IT IN C
 584:	020D  1819    	                JR      PR3             ; LOOK FOR MORE TO PRINT
 585:	020F  CF2511  	PR5:            TSTC    '%',PR1         ; ELSE IS IT PRTNUM BASE?
 586:	0212  DF      	                RST     REXPR           ; YES, EVALUATE EXPR.
 587:	0213  7D      	                LD      A,L             ; GET THE LOW PART
 588:	0214  FE01    	                CP      1               ; EITHER 0 OR >= 2?
 589:	0216  CADB00  	                JP      Z,QHOW          ; ERROR
 590:	0219  FE11    	                CP      17              ; BASE > 16?
 591:	021B  D2DB00  	                JP      NC,QHOW         ; ERROR
 592:	021E  323508  	                LD      (PNBASE),A      ; IN PNBASE
 593:	0221  1805    	                JR      PR3             ; LOOK FOR MORE TO PRINT
 594:	0223  CD1B06  	PR1:            CALL    QTSTG           ; OR IS IT A STRING?
 595:	0226  1810    	                JR      PR8             ; HACK JR!! IF NOT, MUST BE EXPR.
 596:	0228  CF2C05  	PR3:            TSTC    $2C,PR6         ; IF ",", GO FIND NEXT
 597:	022B  CD6605  	                CALL    FIN             ; IN THE LIST.
 598:	022E  18D8    	                JR      PR0             ; LIST CONTINUES
 599:	0230  AF      	PR6:            XOR     A               ; END OF LIST REACHED
 600:	0231  323508  	                LD      (PNBASE),A      ; RESET DEFAULT BASE
 601:	0234  CD0E00  	                CALL    CRLF            ; LIST ENDS WITH CRLF
 602:	0237  F7      	                RST     RFINISH         ; FINISH
 603:	0238  DF      	PR8:            RST     REXPR           ; EVALUATE THE EXPR
 604:	0239  C5      	                PUSH    BC
 605:	023A  CD4106  	                CALL    PRTNUM          ; PRINT THE VALUE
 606:	023D  C1      	                POP     BC
 607:	023E  18E8    	                JR      PR3             ; MORE TO PRINT?
 608:			;
 609:			; *************************************************************
 610:			;
 611:			; *** GOSUB *** & RETURN ***
 612:			;
 613:			; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
 614:			; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
 615:			; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
 616:			; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
 617:			; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
 618:			; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
 619:			; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
 620:			; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
 621:			; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
 622:			;
 623:			; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
 624:			; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
 625:			; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
 626:			; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
 627:			;
 628:	0240  CDE806  	GOSUB:          CALL    PUSHA           ; SAVE THE CURRENT "FOR"
 629:	0243  DF      	                RST     REXPR           ; PARAMETERS
 630:	0244  D5      	                PUSH    DE              ; AND TEXT POINTER
 631:	0245  CDEB05  	                CALL    FNDLN           ; FIND THE TARGET LINE
 632:	0248  C2DC00  	                JP      NZ,AHOW         ; NOT THERE. SAY "HOW?"
 633:	024B  2A3808  	                LD      HL,(CURRNT)     ; FOUND IT, SAVE OLD
 634:	024E  E5      	                PUSH    HL              ; 'CURRNT' OLD 'STKGOS'
 635:	024F  2A3A08  	                LD      HL,(STKGOS)
 636:	0252  E5      	                PUSH    HL
 637:	0253  ED62    	                SBC     HL,HL           ; CY=0, shorter than LD HL,0
 638:	0255  224008  	                LD      (LOPVAR),HL     ; LOAD NEW ONES
 639:	0258  39      	                ADD     HL,SP
 640:	0259  223A08  	                LD      (STKGOS),HL
 641:	025C  C3BD01  	                JP      RUNTSL          ; THEN RUN THAT LINE
 642:			;
 643:	025F  CD7505  	RETURN:         CALL    ENDCHK          ; THERE MUST BE A CR
 644:	0262  2A3A08  	                LD      HL,(STKGOS)     ; OLD STACK POINTER
 645:	0265  7C      	                LD      A,H             ; 0 MEANS NOT EXIST
 646:	0266  B5      	                OR      L
 647:	0267  CA7905  	                JP      Z,QWHAT         ; SO, WE SAY: "WHAT?"
 648:	026A  F9      	                LD      SP,HL           ; ELSE, RESTORE IT
 649:	026B  E1      	                POP     HL
 650:	026C  223A08  	                LD      (STKGOS),HL     ; AND THE OLD 'STKGOS'
 651:	026F  E1      	                POP     HL
 652:	0270  223808  	                LD      (CURRNT),HL     ; AND THE OLD 'CURRNT'
 653:	0273  D1      	                POP     DE              ; OLD TEXT POINTER
 654:	0274  CDCD06  	                CALL    POPA            ; OLD "FOR" PARAMETERS
 655:	0277  F7      	                RST     RFINISH         ; AND WE ARE BACK HOME
 656:			;
 657:			; *************************************************************
 658:			;
 659:			; *** FOR *** & NEXT ***
 660:			;
 661:			; 'FOR' HAS TWO FORMS:
 662:			; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
 663:			; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
 664:			; EXP3=1.  (I.E., WITH A STEP OF +1.)
 665:			; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
 666:			; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
 667:			; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
 668:			; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
 669:			; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
 670:			; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
 671:			; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
 672:			; BEFORE THE NEW ONE OVERWRITES IT.
 673:			; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
 674:			; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
 675:			; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
 676:			; (PURGED FROM THE STACK..)
 677:			;
 678:			; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
 679:			; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
 680:			; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
 681:			; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
 682:			; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
 683:			; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
 684:			; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
 685:			; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
 686:			; IS PURGED AND EXECUTION CONTINUES.
 687:			;
 688:	0278  CDE806  	FOR:            CALL    PUSHA           ; SAVE THE OLD SAVE AREA
 689:	027B  CD5705  	                CALL    SETVAL          ; SET THE CONTROL VAR.
 690:	027E  2B      	                DEC     HL              ; HL IS ITS ADDRESS
 691:	027F  224008  	                LD      (LOPVAR),HL     ; SAVE THAT
 692:	0282  21CC07  	                LD      HL,TAB5-1       ; USE 'EXEC' TO LOOK
 693:	0285  C31307  	                JP      EXEC            ; FOR THE WORD 'TO'
 694:	0288  DF      	FR1:            RST     REXPR           ; EVALUATE THE LIMIT
 695:	0289  224408  	                LD      (LOPLMT),HL     ; SAVE THAT
 696:	028C  21D207  	                LD      HL,TAB6-1       ; USE 'EXEC' TO LOOK
 697:	028F  C31307  	                JP      EXEC            ; FOR THE WORD 'STEP'
 698:	0292  DF      	FR2:            RST     REXPR           ; FOUND IT, GET STEP
 699:	0293  1803    	                JR      FR4
 700:	0295  210100  	FR3:            LD      HL,1H           ; NOT FOUND, SET TO 1
 701:	0298  224208  	FR4:            LD      (LOPINC),HL     ; SAVE THAT TOO
 702:	029B  2A3808  	FR5:            LD      HL,(CURRNT)     ; SAVE CURRENT LINE #
 703:	029E  224608  	                LD      (LOPLN),HL
 704:	02A1  EB      	                EX      DE,HL           ; AND TEXT POINTER
 705:	02A2  224808  	                LD      (LOPPT),HL
 706:	02A5  010A00  	                LD      BC,0AH          ; DIG INTO STACK TO
 707:	02A8  2A4008  	                LD      HL,(LOPVAR)     ; FIND 'LOPVAR'
 708:	02AB  EB      	                EX      DE,HL
 709:	02AC  60      	                LD      H,B
 710:	02AD  68      	                LD      L,B             ; HL=0 NOW
 711:	02AE  39      	                ADD     HL,SP           ; HERE IS THE STACK
 712:	02AF  3E      	                .DB     3EH             ; HACK SKIP "ADD HL,BC"
 713:	02B0  09      	FR7:            ADD     HL,BC           ; EACH LEVEL IS 10 DEEP
 714:	02B1  7E      	                LD      A,(HL)          ; GET THAT OLD 'LOPVAR'
 715:	02B2  23      	                INC     HL
 716:	02B3  B6      	                OR      (HL)
 717:	02B4  2818    	                JR      Z,FR8           ; 0 SAYS NO MORE IN IT
 718:	02B6  7E      	                LD      A,(HL)
 719:	02B7  2B      	                DEC     HL
 720:	02B8  BA      	                CP      D               ; SAME AS THIS ONE?
 721:	02B9  20F5    	                JR      NZ,FR7
 722:	02BB  7E      	                LD      A,(HL)          ; THE OTHER HALF?
 723:	02BC  BB      	                CP      E
 724:	02BD  20F1    	                JR      NZ,FR7
 725:	02BF  EB      	                EX      DE,HL           ; YES, FOUND ONE
 726:	02C0  210000  	                LD      HL,0H
 727:	02C3  39      	                ADD     HL,SP           ; TRY TO MOVE SP
 728:	02C4  44      	                LD      B,H
 729:	02C5  4D      	                LD      C,L
 730:	02C6  210A00  	                LD      HL,0AH
 731:	02C9  19      	                ADD     HL,DE
 732:	02CA  CDC006  	                CALL    MVDOWN          ; AND PURGE 10 WORDS
 733:	02CD  F9      	                LD      SP,HL           ; IN THE STACK
 734:	02CE  2A4808  	FR8:            LD      HL,(LOPPT)      ; JOB DONE, RESTORE DE
 735:	02D1  EB      	                EX      DE,HL
 736:	02D2  F7      	                RST     RFINISH         ; AND CONTINUE
 737:			;
 738:	02D3  FF      	NEXT:           RST     RTSTV           ; GET ADDRESS OF VAR.
 739:	02D4  DA7905  	                JP      C,QWHAT         ; NO VARIABLE, "WHAT?"
 740:	02D7  223C08  	                LD      (VARNXT),HL     ; YES, SAVE IT
 741:	02DA  D5      	NX0:            PUSH    DE              ; SAVE TEXT POINTER
 742:	02DB  EB      	                EX      DE,HL
 743:	02DC  2A4008  	                LD      HL,(LOPVAR)     ; GET VAR. IN 'FOR'
 744:	02DF  7C      	                LD      A,H
 745:	02E0  B5      	                OR      L               ; 0 SAYS NEVER HAD ONE
 746:	02E1  CA7A05  	                JP      Z,AWHAT         ; SO WE ASK: "WHAT?"
 747:	02E4  E7      	                RST     RCOMP           ; ELSE WE CHECK THEM
 748:	02E5  2809    	                JR      Z,NX3           ; OK, THEY AGREE
 749:	02E7  D1      	                POP     DE              ; NO, LET'S SEE
 750:	02E8  CDCD06  	                CALL    POPA            ; PURGE CURRENT LOOP
 751:	02EB  2A3C08  	                LD      HL,(VARNXT)     ; AND POP ONE LEVEL
 752:	02EE  18EA    	                JR      NX0             ; GO CHECK AGAIN
 753:	02F0  5E      	NX3:            LD      E,(HL)          ; COME HERE WHEN AGREED
 754:	02F1  23      	                INC     HL
 755:	02F2  56      	                LD      D,(HL)          ; DE=VALUE OF VAR.
 756:	02F3  2A4208  	                LD      HL,(LOPINC)
 757:	02F6  E5      	                PUSH    HL
 758:	02F7  7C      	                LD      A,H
 759:	02F8  AA      	                XOR     D
 760:	02F9  7A      	                LD      A,D
 761:	02FA  19      	                ADD     HL,DE           ; ADD ONE STEP
 762:	02FB  FA0203  	                JP      M,NX4
 763:	02FE  AC      	                XOR     H
 764:	02FF  FA2303  	                JP      M,NX5
 765:	0302  EB      	NX4:            EX      DE,HL
 766:	0303  2A4008  	                LD      HL,(LOPVAR)     ; PUT IT BACK
 767:	0306  73      	                LD      (HL),E
 768:	0307  23      	                INC     HL
 769:	0308  72      	                LD      (HL),D
 770:	0309  2A4408  	                LD      HL,(LOPLMT)     ; HL->LIMIT
 771:	030C  F1      	                POP     AF              ; OLD HL
 772:	030D  B7      	                OR      A
 773:	030E  F21203  	                JP      P,NX1           ; STEP > 0
 774:	0311  EB      	                EX      DE,HL           ; STEP < 0
 775:	0312  CD4F05  	NX1:            CALL    CKHLDE          ; COMPARE WITH LIMIT
 776:	0315  D1      	                POP     DE              ; RESTORE TEXT POINTER
 777:	0316  380D    	                JR      C,NX2           ; OUTSIDE LIMIT
 778:	0318  2A4608  	                LD      HL,(LOPLN)      ; WITHIN LIMIT, GO
 779:	031B  223808  	                LD      (CURRNT),HL     ; BACK TO THE SAVED
 780:	031E  2A4808  	                LD      HL,(LOPPT)      ; 'CURRNT' AND TEXT
 781:	0321  EB      	                EX      DE,HL           ; POINTER
 782:	0322  F7      	                RST     RFINISH
 783:	0323  E1      	NX5:            POP     HL
 784:	0324  D1      	                POP     DE
 785:	0325  CDCD06  	NX2:            CALL    POPA            ; PURGE THIS LOOP
 786:	0328  F7      	                RST     RFINISH
 787:			;
 788:			; *************************************************************
 789:			;
 790:			; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
 791:			;
 792:			; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
 793:			; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
 794:			;
 795:			; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
 796:			; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
 797:			; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
 798:			; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
 799:			; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
 800:			; EXECUTION CONTINUES AT THE NEXT LINE.
 801:			;
 802:			; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
 803:			; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
 804:			; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
 805:			; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
 806:			; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
 807:			; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
 808:			; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
 809:			; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
 810:			; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
 811:			; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
 812:			;
 813:			; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
 814:			; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
 815:			; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
 816:			; THIS IS HANDLED IN 'INPERR'.
 817:			;
 818:			; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
 819:			; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
 820:			; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
 821:			; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
 822:			; THIS IS DONE BY 'DEFLT'.
 823:			;
 824:	0329  210000  	REM:            LD      HL,0H           ; *** REM ***
 825:	032C  3E      	                .DB     3EH             ; SKIP RST, THIS IS LIKE 'IF 0'
 826:			;
 827:	032D  DF      	IFF:            RST     REXPR           ; *** IF ***
 828:	032E  7C      	                LD      A,H             ; IS THE EXPR.=0?
 829:	032F  B5      	                OR      L
 830:	0330  C2C401  	                JP      NZ,RUNSML       ; NO, CONTINUE
 831:	0333  CD0806  	                CALL    FNDSKP          ; YES, SKIP REST OF LINE
 832:	0336  D2BD01  	                JP      NC,RUNTSL       ; AND RUN THE NEXT LINE
 833:	0339  C32A01  	                JP      WSTART          ; IF NO NEXT, RE-START
 834:			;
 835:	033C  2A3E08  	INPERR:         LD      HL,(STKINP)     ; *** INPERR ***
 836:	033F  F9      	                LD      SP,HL           ; RESTORE OLD SP
 837:	0340  E1      	                POP     HL              ; AND OLD 'CURRNT'
 838:	0341  223808  	                LD      (CURRNT),HL
 839:	0344  D1      	                POP     DE              ; AND OLD TEXT POINTER
 840:	0345  D1      	                POP     DE              ; REDO INPUT
 841:			;
 842:	0346          	INPUT:                                  ; *** INPUT ***
 843:	0346  D5      	IP1:            PUSH    DE              ; SAVE IN CASE OF ERROR
 844:	0347  CD1B06  	                CALL    QTSTG           ; IS NEXT ITEM A STRING?
 845:	034A  1805    	                JR      IP2             ; HACK JR!! NO
 846:	034C  FF      	                RST     RTSTV           ; YES, BUT FOLLOWED BY A
 847:	034D  3839    	                JR      C,IP4           ; VARIABLE?   NO.
 848:	034F  1810    	                JR      IP3             ; YES.  INPUT VARIABLE
 849:	0351  D5      	IP2:            PUSH    DE              ; SAVE FOR 'PRTSTG'
 850:	0352  FF      	                RST     RTSTV           ; MUST BE VARIABLE NOW
 851:	0353  DA7905  	                JP      C,QWHAT         ; "WHAT?" IT IS NOT?
 852:	0356  1A      	                LD      A,(DE)          ; GET READY FOR 'PRTSTG'
 853:	0357  4F      	                LD      C,A
 854:	0358  97      	                SUB     A
 855:	0359  12      	                LD      (DE),A
 856:	035A  D1      	                POP     DE
 857:	035B  CD1006  	                CALL    PRTSTG          ; PRINT STRING AS PROMPT
 858:	035E  79      	                LD      A,C             ; RESTORE TEXT
 859:	035F  1B      	                DEC     DE
 860:	0360  12      	                LD      (DE),A
 861:	0361  D5      	IP3:            PUSH    DE              ; SAVE TEXT POINTER
 862:	0362  EB      	                EX      DE,HL
 863:	0363  2A3808  	                LD      HL,(CURRNT)     ; ALSO SAVE 'CURRNT'
 864:	0366  E5      	                PUSH    HL
 865:	0367  214603  	                LD      HL,IP1          ; A NEGATIVE NUMBER
 866:	036A  223808  	                LD      (CURRNT),HL     ; AS A FLAG
 867:	036D  210000  	                LD      HL,0H           ; SAVE SP TOO
 868:	0370  39      	                ADD     HL,SP
 869:	0371  223E08  	                LD      (STKINP),HL
 870:	0374  D5      	                PUSH    DE              ; OLD HL
 871:	0375  3E3A    	                LD      A,':'           ; PRINT THIS TOO
 872:	0377  CDAC05  	                CALL    GETLN           ; AND GET A LINE
 873:	037A  11800F  	                LD      DE,BUFFER       ; POINTS TO BUFFER
 874:	037D  DF      	                RST     REXPR           ; EVALUATE INPUT
 875:			                                        ; NOP            ;??? CAN BE 'CALL ENDCHK'
 876:			                                        ; NOP
 877:			                                        ; NOP
 878:	037E  D1      	                POP     DE              ; OK, GET OLD HL
 879:	037F  EB      	                EX      DE,HL
 880:	0380  73      	                LD      (HL),E          ; SAVE VALUE IN VAR.
 881:	0381  23      	                INC     HL
 882:	0382  72      	                LD      (HL),D
 883:	0383  E1      	                POP     HL              ; GET OLD 'CURRNT'
 884:	0384  223808  	                LD      (CURRNT),HL
 885:	0387  D1      	                POP     DE              ; AND OLD TEXT POINTER
 886:	0388  F1      	IP4:            POP     AF              ; PURGE JUNK IN STACK
 887:	0389  CF2C02  	                TSTC    $2C,IP5         ; IS NEXT CH. ','?
 888:	038C  18B8    	                JR      IP1             ; YES, MORE ITEMS.
 889:	038E  F7      	IP5:            RST     RFINISH
 890:			;
 891:	038F  1A      	DEFLT:          LD      A,(DE)          ; ***  DEFLT ***
 892:	0390  FE0D    	                CP      CR              ; EMPTY LINE IS OK
 893:	0392  2808    	                JR      Z,LT1           ; ELSE IT IS 'LET'
 894:			;
 895:	0394  CD5705  	LET:            CALL    SETVAL          ; *** LET ***
 896:	0397  CF2C02  	                TSTC    $2C,LT1         ; SET VALUE TO VAR.
 897:	039A  18F8    	                JR      LET             ; ITEM BY ITEM
 898:	039C  F7      	LT1:            RST     RFINISH         ; UNTIL FINISH
 899:			;
 900:			; *************************************************************
 901:			;
 902:			; *** EXPR ***
 903:			;
 904:			; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
 905:			; <EXPR>::<EXPR2>
 906:			;         <EXPR2><REL.OP.><EXPR2>
 907:			; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
 908:			; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
 909:			; <EXPR2>::=(+ OR -)<EXPR3>(+ OR - OR |<EXPR3>)(....)
 910:			; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
 911:			; <EXPR3>::=<EXPR4>(* OR / OR &<EXPR4>)(....)
 912:			; <EXPR4>::=<VARIABLE>
 913:			;           <FUNCTION>
 914:			;           (<EXPR>)
 915:			; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
 916:			; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
 917:			; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
 918:			;
 919:			; EXPR:         CALL    EXPR2           ; THIS IS AT LOC. 18
 920:			;               PUSH    HL              ; SAVE <EXPR2> VALUE
 921:			;               JP      EXPR1           ; REST OF IT AT EXPR1
 922:			;
 923:	039D  21DA07  	EXPR1:          LD      HL,TAB8-1       ; LOOKUP REL.OP.
 924:	03A0  C31307  	                JP      EXEC            ; GO DO IT
 925:			;
 926:	03A3  CDCC03  	XPEQ:           CALL    XP18            ; REL.OP."="
 927:	03A6  C0      	                RET     NZ              ; FALSE, RETURN HL=0
 928:	03A7  6F      	                LD      L,A             ; ELSE SET HL=1
 929:	03A8  C9      	                RET
 930:			;
 931:	03A9  CDCC03  	XPNE:           CALL    XP18            ; REL.OP."#" OR "<>"
 932:	03AC  C8      	                RET     Z               ; FALSE, RETURN HL=0
 933:	03AD  6F      	                LD      L,A             ; TRUE, RETURN HL=1
 934:	03AE  C9      	                RET
 935:			;
 936:	03AF  CDCC03  	XPLE:           CALL    XP18            ; REL.OP."<="
 937:	03B2  6F      	                LD      L,A             ; SET HL=1
 938:	03B3  C8      	                RET     Z               ; REL. TRUE, RETURN
 939:	03B4  D8      	                RET     C
 940:	03B5  6C      	                LD      L,H             ; ELSE SET HL=0
 941:	03B6  C9      	                RET
 942:			;
 943:	03B7  CDCC03  	XPLT:           CALL    XP18            ; REL.OP."<"
 944:	03BA  D0      	                RET     NC              ; FALSE, RETURN HL=0
 945:	03BB  6F      	                LD      L,A             ; ELSE SET HL=1
 946:	03BC  C9      	                RET
 947:			;
 948:	03BD  CDCC03  	XPGE:           CALL    XP18            ; REL.OP.">="
 949:	03C0  D8      	                RET     C               ; NO, RETURN HL=0
 950:	03C1  6F      	                LD      L,A             ; YES, RETURN HL=1
 951:	03C2  C9      	                RET
 952:			;
 953:	03C3  CDCC03  	XPGT:           CALL    XP18            ; REL.OP.">"
 954:	03C6  C8      	                RET     Z               ; FALSE
 955:	03C7  D8      	                RET     C               ; ALSO FALSE, HL=0
 956:	03C8  6F      	                LD      L,A             ; TRUE, HL=1
 957:	03C9  C9      	                RET
 958:			;
 959:	03CA  E1      	XP17:           POP     HL              ; NOT .REL.OP
 960:	03CB  C9      	                RET                     ; RETURN HL=<EXPR2>
 961:			;
 962:	03CC  79      	XP18:           LD      A,C             ; SUBROUTINE FOR ALL
 963:	03CD  E1      	                POP     HL              ; REL.OP.'S
 964:	03CE  C1      	                POP     BC
 965:	03CF  E5      	                PUSH    HL              ; REVERSE TOP OF STACK
 966:	03D0  C5      	                PUSH    BC
 967:	03D1  4F      	                LD      C,A
 968:	03D2  CDE103  	                CALL    EXPR2           ; GET 2ND <EXPR2>
 969:	03D5  EB      	                EX      DE,HL           ; VALUE IN DE NOW
 970:	03D6  E3      	                EX      (SP),HL         ; 1ST <EXPR2> IN HL
 971:	03D7  CD4F05  	                CALL    CKHLDE          ; COMPARE 1ST WITH 2ND
 972:	03DA  D1      	                POP     DE              ; RESTORE TEXT POINTER
 973:	03DB  210000  	                LD      HL,0H           ; SET HL=0, A=1
 974:	03DE  3E01    	                LD      A,1
 975:	03E0  C9      	                RET
 976:			;
 977:	03E1  CF2D05  	EXPR2:          TSTC    '-',XP21        ; NEGATIVE SIGN?
 978:	03E4  210000  	                LD      HL,0H           ; YES, FAKE '0-'
 979:	03E7  1821    	                JR      XP26            ; TREAT LIKE SUBTRACT
 980:			;
 981:	03E9  CF2B00  	XP21:           TSTC    '+',XP22        ; POSITIVE SIGN? IGNORE
 982:	03EC  CD2504  	XP22:           CALL    EXPR3           ; 1ST <EXPR3>
 983:	03EF  CF2B15  	XP23:           TSTC    '+',XP25        ; ADD?
 984:	03F2  E5      	                PUSH    HL              ; YES, SAVE VALUE
 985:	03F3  CD2504  	                CALL    EXPR3           ; GET 2ND <EXPR3>
 986:	03F6  EB      	XP24:           EX      DE,HL           ; 2ND IN DE
 987:	03F7  E3      	                EX      (SP),HL         ; 1ST IN HL
 988:	03F8  7C      	                LD      A,H             ; COMPARE SIGN
 989:	03F9  AA      	                XOR     D
 990:	03FA  7A      	                LD      A,D
 991:	03FB  19      	                ADD     HL,DE
 992:	03FC  D1      	                POP     DE              ; RESTORE TEXT POINTER
 993:	03FD  FAEF03  	                JP      M,XP23          ; 1ST AND 2ND SIGN DIFFER
 994:	0400  AC      	                XOR     H               ; 1ST AND 2ND SIGN EQUAL
 995:	0401  F2EF03  	                JP      P,XP23          ; SO IS RESULT
 996:			;
 997:	0404  C3DB00  	                JP      QHOW            ; ELSE WE HAVE OVERFLOW
 998:			;
 999:	0407  CF2D09  	XP25:           TSTC    '-',XP27        ; SUBTRACT?
1000:	040A  E5      	XP26:           PUSH    HL              ; YES, SAVE 1ST <EXPR3>
1001:	040B  CD2504  	                CALL    EXPR3           ; GET 2ND <EXPR3>
1002:	040E  CD3A05  	                CALL    CHGSGN          ; NEGATE
1003:	0411  18E3    	                JR      XP24            ; AND ADD THEM
1004:			
1005:	0413  CF7C97  	XP27:           TSTC    '|',XP42        ; OR?
1006:	0416  E5      	                PUSH    HL              ; YES, SAVE 1ST <EXPR3>
1007:	0417  CD2504  	                CALL    EXPR3           ; GET 2ND <EXPR3>
1008:	041A  EB      	                EX      DE,HL           ; 2ND IN DE
1009:	041B  E3      	                EX      (SP),HL         ; 1ST IN HL
1010:	041C  7C      	                LD      A,H             ; HL = HL & DE
1011:	041D  B2      	                OR      D
1012:	041E  67      	                LD      H,A
1013:	041F  7D      	                LD      A,L
1014:	0420  B3      	                OR      E
1015:	0421  6F      	                LD      L,A
1016:	0422  D1      	                POP     DE              ; RESTORE TEXT POINTER
1017:	0423  18CA    	                JR      XP23            ; LOOK FOR MORE TERMS
1018:			;
1019:	0425  CD9204  	EXPR3:          CALL    EXPR4           ; GET 1ST <EXPR4>
1020:	0428  CF2A29  	XP31:           TSTC    '*',XP34        ; MULTIPLY?
1021:	042B  E5      	                PUSH    HL              ; YES, SAVE 1ST
1022:	042C  CD9204  	                CALL    EXPR4           ; AND GET 2ND <EXPR4>
1023:	042F  0600    	                LD      B,0H            ; CLEAR B FOR SIGN
1024:	0431  CD3705  	                CALL    CHKSGN          ; CHECK SIGN
1025:	0434  E3      	                EX      (SP),HL         ; 1ST IN HL
1026:	0435  CD3705  	                CALL    CHKSGN          ; CHECK SIGN OF 1ST
1027:	0438  EB      	                EX      DE,HL
1028:	0439  E3      	                EX      (SP),HL
1029:	043A  7C      	                LD      A,H             ; IS HL > 255 ?
1030:	043B  B7      	                OR      A
1031:	043C  2806    	                JR      Z,XP32          ; NO
1032:	043E  7A      	                LD      A,D             ; YES, HOW ABOUT DE
1033:	043F  B2      	                OR      D
1034:	0440  EB      	                EX      DE,HL           ; PUT SMALLER IN HL
1035:	0441  C2DC00  	                JP      NZ,AHOW         ; ALSO >, WILL OVERFLOW
1036:	0444  7D      	XP32:           LD      A,L             ; THIS IS DUMB
1037:	0445  210000  	                LD      HL,0H           ; CLEAR RESULT
1038:	0448  B7      	                OR      A               ; ADD AND COUNT
1039:	0449  2828    	                JR      Z,XP35
1040:	044B  19      	XP33:           ADD     HL,DE
1041:	044C  DADC00  	                JP      C,AHOW          ; OVERFLOW
1042:	044F  3D      	                DEC     A
1043:	0450  20F9    	                JR      NZ,XP33
1044:	0452  181F    	                JR      XP35            ; FINISHED
1045:			;
1046:	0454  CF2F29  	XP34:           TSTC    '/',XP36        ; DIVIDE?
1047:	0457  E5      	                PUSH    HL              ; YES, SAVE 1ST <EXPR4>
1048:	0458  CD9204  	                CALL    EXPR4           ; AND GET THE SECOND ONE
1049:	045B  0600    	                LD      B,0H            ; CLEAR B FOR SIGN
1050:	045D  CD3705  	                CALL    CHKSGN          ; CHECK SIGN OF 2ND
1051:	0460  E3      	                EX      (SP),HL         ; GET 1ST IN HL
1052:	0461  CD3705  	                CALL    CHKSGN          ; CHECK SIGN OF 1ST
1053:	0464  EB      	                EX      DE,HL
1054:	0465  E3      	                EX      (SP),HL
1055:	0466  EB      	                EX      DE,HL
1056:	0467  7A      	                LD      A,D             ; DIVIDE BY 0?
1057:	0468  B3      	                OR      E
1058:	0469  CADC00  	                JP      Z,AHOW          ; SAY "HOW?"
1059:	046C  C5      	                PUSH    BC              ; ELSE SAVE SIGN
1060:	046D  CD1E05  	                CALL    DIVIDE          ; USE SUBROUTINE
1061:	0470  60      	                LD      H,B             ; RESULT IN HL NOW
1062:	0471  69      	                LD      L,C
1063:	0472  C1      	                POP     BC              ; GET SIGN BACK
1064:	0473  D1      	XP35:           POP     DE              ; AND TEXT POINTER
1065:	0474  7C      	                LD      A,H             ; HL MUST BE +
1066:	0475  B7      	                OR      A
1067:	0476  FADB00  	                JP      M,QHOW          ; ELSE IT IS OVERFLOW
1068:	0479  78      	                LD      A,B
1069:	047A  B7      	                OR      A
1070:	047B  FC3A05  	                CALL    M,CHGSGN        ; CHANGE SIGN IF NEEDED
1071:	047E  18A8    	                JR      XP31            ; LOOK FOR MORE TERMS
1072:			;
1073:	0480  CF262A  	XP36:           TSTC    '&',XP42        ; AND?
1074:	0483  E5      	                PUSH    HL              ; YES, SAVE 1ST <EXPR4>
1075:	0484  CD9204  	                CALL    EXPR4           ; AND GET THE SECOND ONE
1076:	0487  EB      	                EX      DE,HL           ; 2ND IN DE
1077:	0488  E3      	                EX      (SP),HL         ; 1ST IN HL
1078:	0489  7C      	                LD      A,H             ; HL = HL & DE
1079:	048A  A2      	                AND     D
1080:	048B  67      	                LD      H,A
1081:	048C  7D      	                LD      A,L
1082:	048D  A3      	                AND     E
1083:	048E  6F      	                LD      L,A
1084:	048F  D1      	                POP     DE              ; RESTORE TEXT POINTER
1085:	0490  1896    	                JR      XP31            ; LOOK FOR MORE TERMS
1086:			
1087:			;
1088:	0492  21A507  	EXPR4:          LD      HL,TAB4-1       ; FIND FUNCTION IN TAB4
1089:	0495  C31307  	                JP      EXEC            ; AND GO DO IT
1090:			;
1091:	0498  FF      	XP40:           RST     RTSTV           ; NO, NOT A FUNCTION
1092:	0499  3805    	                JR      C,XP41          ; NOR A VARIABLE
1093:	049B  7E      	                LD      A,(HL)          ; VARIABLE
1094:	049C  23      	                INC     HL
1095:	049D  66      	                LD      H,(HL)          ; VALUE IN HL
1096:	049E  6F      	                LD      L,A
1097:	049F  C9      	                RET
1098:			;
1099:	04A0  CD7C00  	XP41:           CALL    TSTNUM          ; OR IS IT A NUMBER
1100:	04A3  78      	                LD      A,B             ; # OF DIGIT
1101:	04A4  B7      	                OR      A
1102:	04A5  C0      	                RET     NZ              ; OK
1103:	04A6  CF2805  	PARN:           TSTC    $28,XP43        ; '('
1104:	04A9  DF      	                RST     REXPR           ; "(EXPR)"
1105:	04AA  CF2901  	                TSTC    $29,XP43        ; ')'
1106:	04AD  C9      	XP42:           RET
1107:	04AE  C37905  	XP43:           JP      QWHAT           ; ELSE SAY: "WHAT?"
1108:			
1109:	04B1  CDA604  	RND:            CALL    PARN            ; *** RND(EXPR) ***
1110:	04B4  7C      	                LD      A,H             ; EXPR MUST BE +
1111:	04B5  B7      	                OR      A
1112:	04B6  FADB00  	                JP      M,QHOW
1113:	04B9  B5      	                OR      L               ; AND NON-ZERO
1114:	04BA  CADB00  	                JP      Z,QHOW
1115:	04BD  D5      	                PUSH    DE              ; SAVE BOTH
1116:	04BE  E5      	                PUSH    HL
1117:	04BF  2A4A08  	                LD      HL,(RANPNT)     ; GET MEMORY AS RANDOM
1118:	04C2  11F507  	                LD      DE,LSTROM       ; NUMBER
1119:	04C5  E7      	                RST     RCOMP
1120:	04C6  3803    	                JR      C,RA1           ; WRAP AROUND IF LAST
1121:	04C8  210000  	                LD      HL,CSTART
1122:	04CB  ED5F    	RA1:            LD      A,R             ; RFSH REG GIVES TIME DEP. RANDOM
1123:	04CD  AE      	                XOR     (HL)
1124:	04CE  5F      	                LD      E,A
1125:	04CF  23      	                INC     HL
1126:	04D0  AE      	                XOR     (HL)
1127:	04D1  57      	                LD      D,A
1128:	04D2  224A08  	                LD      (RANPNT),HL
1129:	04D5  E1      	                POP     HL
1130:	04D6  EB      	                EX      DE,HL
1131:	04D7  C5      	                PUSH    BC
1132:	04D8  CD1E05  	                CALL    DIVIDE          ; RND(N)=MOD(M,N)+1
1133:	04DB  C1      	                POP     BC
1134:	04DC  D1      	                POP     DE
1135:	04DD  23      	                INC     HL
1136:	04DE  C9      	                RET
1137:			
1138:	04DF  CDA604  	ABS:            CALL    PARN            ; *** ABS(EXPR) ***
1139:	04E2  1B      	                DEC     DE
1140:	04E3  CD3705  	                CALL    CHKSGN          ; CHECK SIGN AND CHANGE IF HL < 0
1141:	04E6  13      	                INC     DE
1142:	04E7  C9      	                RET
1143:			
1144:	04E8  2A3608  	SIZE:           LD      HL,(TXTUNF)     ; *** RETURN SIZE IN HL ***
1145:	04EB  D5      	                PUSH    DE              ; GET THE NUMBER OF FREE
1146:	04EC  EB      	                EX      DE,HL           ; BYTES BETWEEN 'TXTUNF'
1147:	04ED  21000F  	                LD      HL,TXTEND       ; AND 'TXTEND'
1148:	04F0  CD3305  	                CALL    SUBDE
1149:	04F3  D1      	                POP     DE
1150:	04F4  C9      	                RET
1151:			
1152:	04F5  CDA604  	GET:            CALL    PARN            ; *** GET(ADDR) ***
1153:	04F8  6E      	                LD      L,(HL)          ; GET CONTENT OF (HL)
1154:	04F9  2600    	                LD      H,0             ; RETURN RESULT IN HL
1155:	04FB  C9      	                RET
1156:			
1157:	04FC  CDA604  	USR:            CALL    PARN            ; *** USR(PARA) ***
1158:	04FF  C3000F  	                JP      USRSPC          ; GET para in HL and JP to prog
1159:			;                                       ; There you should:
1160:			;               ...                     ;   - Do the work
1161:			;               ...                     ;   - Put result in HL
1162:			;               RET                     ; $C9 - RET to BASIC
1163:			;                                       ; DEFAULT: (USRSPC)=$C9
1164:			
1165:	0502  CDA604  	CALL:           CALL    PARN            ; *** CALL(ADR) ***
1166:	0505  E9      	                JP      (HL)            ; Get address in HL and jump there
1167:			                                        ; Return value in HL
1168:			
1169:	0506  21000F  	TOP:            LD      HL,TXTEND       ; *** TOP *** END OF TEXT AREA = USRSPC
1170:	0509  C9      	                RET
1171:			
1172:	050A  DF      	PUT:            RST     REXPR           ; *** PUT ADDR, VAL1 [,VAL2, VAL3,..]
1173:	050B  CF2C0D  	                TSTC    $2C,PT2         ; 1ST ',' SEPARATES THE VALUE(S)
1174:	050E  E5      	                PUSH    HL              ; SAVE ADDR
1175:	050F  DF      	PT0:            RST     REXPR           ; GET VAL IN HL
1176:	0510  7D      	                LD      A,L             ; LOW BYTE OF VAL
1177:	0511  E1      	                POP     HL              ; GET ADDR
1178:	0512  77      	                LD      (HL),A          ; PUT VALUE IN RAM
1179:	0513  CF2C04  	                TSTC    $2C,PT1         ; READY UNLESS ","
1180:	0516  23      	                INC     HL              ; NEXT ADDR
1181:	0517  E5      	                PUSH    HL
1182:	0518  18F5    	                JR      PT0             ; LIST CONTINUES
1183:			;
1184:	051A  F7      	PT1:            RST     RFINISH         ; READY
1185:			;
1186:	051B  185C    	PT2:            JR      QWHAT           ; ELSE SAY: "WHAT?"
1187:			
1188:	051D  76      	BYE:            HALT                    ; HALT CPU (return to analyser)
1189:			
1190:			;
1191:			; *************************************************************
1192:			;
1193:			; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1194:			;
1195:			; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1196:			;
1197:			; 'SUBDE' SUBSTRACTS DE FROM HL
1198:			;
1199:			; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1200:			; SIGN AND FLIP SIGN OF B.
1201:			;
1202:			; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1203:			;
1204:			; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1205:			; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1206:			; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1207:			;
1208:	051E  E5      	DIVIDE:         PUSH    HL              ; *** DIVIDE ***
1209:	051F  6C      	                LD      L,H             ; DIVIDE H BY DE
1210:	0520  2600    	                LD      H,0
1211:	0522  CD2905  	                CALL    DV1
1212:	0525  41      	                LD      B,C             ; SAVE RESULT IN B
1213:	0526  7D      	                LD      A,L             ; (REMINDER+L)/DE
1214:	0527  E1      	                POP     HL
1215:	0528  67      	                LD      H,A
1216:	0529  0EFF    	DV1:            LD      C,0FFH          ; RESULT IN C
1217:	052B  0C      	DV2:            INC     C               ; DUMB ROUTINE
1218:	052C  CD3305  	                CALL    SUBDE           ; DIVIDE BY SUBTRACT
1219:	052F  30FA    	                JR      NC,DV2          ; AND COUNT
1220:	0531  19      	                ADD     HL,DE
1221:	0532  C9      	                RET
1222:			
1223:	0533  B7      	SUBDE:          OR      A               ; CLR CY
1224:	0534  ED52    	                SBC     HL,DE
1225:	0536  C9      	                RET
1226:			
1227:	0537  7C      	CHKSGN:         LD      A,H             ; *** CHKSGN ***
1228:	0538  B7      	                OR      A               ; CHECK SIGN OF HL
1229:	0539  F0      	                RET     P               ; IF HL >=0 RETURN
1230:			;
1231:	053A  7C      	CHGSGN:         LD      A,H             ; *** CHGSGN ***
1232:	053B  B5      	                OR      L               ; CHECK VALUE OF HL
1233:	053C  C8      	                RET     Z               ; IF HL == 0 RETURN
1234:			;
1235:	053D  7C      	                LD      A,H
1236:	053E  F5      	                PUSH    AF              ; SAVE SIGN
1237:	053F  2F      	                CPL                     ; CHANGE SIGN OF HL
1238:	0540  67      	                LD      H,A
1239:	0541  7D      	                LD      A,L
1240:	0542  2F      	                CPL
1241:	0543  6F      	                LD      L,A
1242:	0544  23      	                INC     HL              ; HL = -HL
1243:	0545  F1      	                POP     AF              ; GET ORIGINAL SIGN
1244:	0546  AC      	                XOR     H               ; COMPARE
1245:	0547  F2DB00  	                JP      P,QHOW          ; ERROR IF SIGN UNCHANGED (HL=$8000)
1246:	054A  78      	                LD      A,B             ; AND ALSO FLIP B
1247:	054B  EE80    	                XOR     80H
1248:	054D  47      	                LD      B,A
1249:	054E  C9      	                RET
1250:			
1251:	054F  7C      	CKHLDE:         LD      A,H
1252:	0550  AA      	                XOR     D               ; SAME SIGN?
1253:	0551  F25505  	                JP      P,CK1           ; YES, COMPARE
1254:	0554  EB      	                EX      DE,HL           ; NO, XCH AND COMP
1255:	0555  E7      	CK1:            RST     RCOMP
1256:	0556  C9      	                RET
1257:			;
1258:			; *************************************************************
1259:			;
1260:			; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1261:			;
1262:			; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1263:			; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1264:			; TO THAT VALUE.
1265:			;
1266:			; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1267:			; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1268:			; NEXT LINE AND CONTINUE FROM THERE.
1269:			;
1270:			; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1271:			; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1272:			;
1273:			; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1274:			; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1275:			; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1276:			; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1277:			; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1278:			; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1279:			; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1280:			; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1281:			; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1282:			;
1283:			; RELATED TO 'ERROR' ARE THE FOLLOWING:
1284:			; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1285:			; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1286:			; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1287:			; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1288:			;
1289:	0557  FF      	SETVAL:         RST     RTSTV           ; *** SETVAL ***
1290:	0558  381F    	                JR      C,QWHAT         ; "WHAT?" NO VARIABLE
1291:	055A  E5      	                PUSH    HL              ; SAVE ADDRESS OF VAR.
1292:	055B  CF3D1B  	                TSTC    '=',QWHAT       ; PASS "=" SIGN
1293:	055E  DF      	                RST     REXPR           ; EVALUATE EXPR.
1294:	055F  44      	                LD      B,H             ; VALUE IS IN BC NOW
1295:	0560  4D      	                LD      C,L
1296:	0561  E1      	                POP     HL              ; GET ADDRESS
1297:	0562  71      	                LD      (HL),C          ; SAVE VALUE
1298:	0563  23      	                INC     HL
1299:	0564  70      	                LD      (HL),B
1300:	0565  C9      	                RET
1301:			
1302:	0566  CF3B04  	FIN:            TSTC    ';',FI1         ; *** FIN ***
1303:	0569  F1      	                POP     AF              ; ";", PURGE RET. ADDR.
1304:	056A  C3C401  	                JP      RUNSML          ; CONTINUE SAME LINE
1305:	056D  CF0D04  	FI1:            TSTC    CR,FI2          ; NOT ";", IS IT CR?
1306:	0570  F1      	                POP     AF              ; YES, PURGE RET. ADDR.
1307:	0571  C3B401  	                JP      RUNNXL          ; RUN NEXT LINE
1308:	0574  C9      	FI2:            RET                     ; ELSE RETURN TO CALLER
1309:			
1310:	0575  EF      	ENDCHK:         RST     RIGNBLK         ; IGNBLK
1311:	0576  FE0D    	                CP      CR              ; END WITH CR?
1312:	0578  C8      	                RET     Z               ; OK, ELSE SAY: "WHAT?"
1313:			;
1314:	0579  D5      	QWHAT:          PUSH    DE              ; *** QWHAT ***
1315:	057A  11F500  	AWHAT:          LD      DE,WHAT         ; *** AWHAT ***
1316:	057D  97      	ERROR:          SUB     A               ; *** ERROR ***
1317:	057E  CD1006  	                CALL    PRTSTG          ; PRINT 'WHAT?', 'HOW?'
1318:	0581  D1      	                POP     DE              ; OR 'SORRY'
1319:	0582  1A      	                LD      A,(DE)          ; SAVE THE CHARACTER
1320:	0583  F5      	                PUSH    AF              ; AT WHERE OLD DE ->
1321:	0584  97      	                SUB     A               ; AND PUT A 0 THERE
1322:	0585  12      	                LD      (DE),A
1323:	0586  2A3808  	                LD      HL,(CURRNT)     ; GET CURRENT LINE #
1324:	0589  E5      	                PUSH    HL
1325:	058A  7E      	                LD      A,(HL)          ; CHECK THE VALUE
1326:	058B  23      	                INC     HL
1327:	058C  B6      	                OR      (HL)
1328:	058D  D1      	                POP     DE
1329:	058E  CA2A01  	                JP      Z,WSTART        ; IF ZERO, JUST RESTART
1330:	0591  7E      	                LD      A,(HL)          ; IF NEGATIVE,
1331:	0592  B7      	                OR      A
1332:	0593  FA3C03  	                JP      M,INPERR        ; REDO INPUT
1333:	0596  CDA106  	                CALL    PRTLN           ; ELSE PRINT THE LINE
1334:	0599  1B      	                DEC     DE              ; UPTO WHERE THE 0 IS
1335:	059A  F1      	                POP     AF              ; RESTORE THE CHARACTER
1336:	059B  12      	                LD      (DE),A
1337:	059C  3E3F    	                LD      A,'?'           ; PRINT A "?"
1338:	059E  D7      	                RST     ROUTC
1339:	059F  97      	                SUB     A               ; AND THE REST OF THE
1340:	05A0  CD1006  	                CALL    PRTSTG          ; LINE
1341:	05A3  C32A01  	                JP      WSTART          ; THEN RESTART
1342:			;
1343:	05A6  D5      	QSORRY:         PUSH    DE              ; *** QSORRY ***
1344:	05A7  11FB00  	ASORRY:         LD      DE,SORRY        ; *** ASORRY ***
1345:	05AA  18D1    	                JR      ERROR
1346:			
1347:			;
1348:			; *************************************************************
1349:			;
1350:			; *** GETLN *** FNDLN (& FRIENDS) ***
1351:			;
1352:			; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1353:			; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1354:			; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1355:			; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1356:			; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1357:			; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1358:			; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1359:			;
1360:			; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1361:			; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1362:			; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1363:			; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1364:			; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1365:			; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1366:			; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1367:			; LINE, FLAGS ARE C & NZ.
1368:			; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1369:			; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1370:			; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1371:			; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1372:			; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1373:			; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1374:			;
1375:	05AC  D7      	GETLN:          RST     ROUTC           ; *** GETLN ***
1376:	05AD  11800F  	                LD      DE,BUFFER       ; PROMPT AND INIT.
1377:	05B0  CD0701  	GL1:            CALL    CHKIO           ; CHECK KEYBOARD
1378:	05B3  28FB    	                JR      Z,GL1           ; NO INPUT, WAIT
1379:	05B5  FE08    	                CP      BS              ; BS, DELETE LAST CHARACTER?
1380:	05B7  281A    	                JR      Z,GL3           ; YES
1381:	05B9  FE7F    	                CP      DEL             ; DEL, DELETE LAST CHARACTER?
1382:	05BB  2816    	                JR      Z,GL3           ; YES
1383:	05BD  FE18    	                CP      CAN             ; ^X, DELETE THE WHOLE LINE?
1384:	05BF  2823    	                JR      Z,GL4           ; YES
1385:	05C1  FE0A    	                CP      LF              ; IGNORE LF
1386:	05C3  28EB    	                JR      Z,GL1
1387:	05C5  B7      	                OR      A               ; IGNORE NULL
1388:	05C6  28E8    	                JR      Z,GL1
1389:	05C8  D7      	                RST     ROUTC           ; INPUT, ECHO BACK
1390:	05C9  12      	                LD      (DE),A          ; ELSE SAVE INPUT
1391:	05CA  13      	                INC     DE              ; AND BUMP POINTER
1392:	05CB  FE0D    	                CP      CR              ; WAS IT CR?
1393:	05CD  C8      	                RET     Z               ; YES, END OF LINE
1394:	05CE  7B      	                LD      A,E             ; ELSE MORE FREE ROOM?
1395:	05CF  FEFF    	                CP      BUFEND & 0FFH
1396:	05D1  20DD    	                JR      NZ,GL1          ; YES, GET NEXT INPUT
1397:	05D3  7B      	GL3:            LD      A,E             ; DELETE LAST CHARACTER
1398:	05D4  FE80    	                CP      BUFFER & 0FFH   ; BUT DO WE HAVE ANY?
1399:	05D6  280C    	                JR      Z,GL4           ; NO, REDO WHOLE LINE
1400:	05D8  1B      	                DEC     DE              ; YES, BACKUP POINTER
1401:	05D9  3E08    	                LD      A,BS            ; AND ECHO A BACKSPACE
1402:	05DB  D7      	                RST     ROUTC
1403:	05DC  3E20    	                LD      A,' '           ; AND ECHO A BLANK
1404:	05DE  D7      	                RST     ROUTC
1405:	05DF  3E08    	                LD      A,BS            ; AND ECHO A BACKSPACE
1406:	05E1  D7      	                RST     ROUTC
1407:	05E2  18CC    	                JR      GL1             ; GO GET NEXT INPUT
1408:	05E4  CD0E00  	GL4:            CALL    CRLF            ; REDO ENTIRE LINE
1409:	05E7  3E5E    	                LD      A,'^'           ; CR, LF AND UP-ARROW
1410:	05E9  18C1    	                JR      GETLN
1411:			;
1412:	05EB  7C      	FNDLN:          LD      A,H             ; *** FNDLN ***
1413:	05EC  B7      	                OR      A               ; CHECK SIGN OF HL
1414:	05ED  FADB00  	                JP      M,QHOW          ; IT CANNOT BE -
1415:	05F0  110009  	                LD      DE,TXTBGN       ; INIT TEXT POINTER
1416:			;
1417:	05F3          	FNDLP:                                  ; *** FDLNP ***
1418:	05F3  E5      	FL1:            PUSH    HL              ; SAVE LINE #
1419:	05F4  2A3608  	                LD      HL,(TXTUNF)     ; CHECK IF WE PASSED END
1420:	05F7  2B      	                DEC     HL
1421:	05F8  E7      	                RST     RCOMP
1422:	05F9  E1      	                POP     HL              ; GET LINE # BACK
1423:	05FA  D8      	                RET     C               ; C,NZ PASSED END
1424:	05FB  1A      	                LD      A,(DE)          ; WE DID NOT, GET BYTE 1
1425:	05FC  95      	                SUB     L               ; IS THIS THE LINE?
1426:	05FD  47      	                LD      B,A             ; COMPARE LOW ORDER
1427:	05FE  13      	                INC     DE
1428:	05FF  1A      	                LD      A,(DE)          ; GET BYTE 2
1429:	0600  9C      	                SBC     A,H             ; COMPARE HIGH ORDER
1430:	0601  3804    	                JR      C,FL2           ; NO, NOT THERE YET
1431:	0603  1B      	                DEC     DE              ; ELSE WE EITHER FOUND
1432:	0604  B0      	                OR      B               ; IT, OR IT IS NOT THERE
1433:	0605  C9      	                RET                     ; NC,Z:FOUND, NC,NZ:NO
1434:			;
1435:	0606          	FNDNXT:                                 ; *** FNDNXT ***
1436:	0606  13      	                INC     DE              ; FIND NEXT LINE
1437:	0607  13      	FL2:            INC     DE              ; JUST PASSED BYTE 1 & 2
1438:			;
1439:	0608  1A      	FNDSKP:         LD      A,(DE)          ; *** FNDSKP ***
1440:	0609  FE0D    	                CP      CR              ; TRY TO FIND CR
1441:	060B  20FA    	                JR      NZ,FL2          ; KEEP LOOKING
1442:	060D  13      	                INC     DE              ; FOUND CR, SKIP OVER
1443:	060E  18E3    	                JR      FL1             ; CHECK IF END OF TEXT
1444:			;
1445:			; *************************************************************
1446:			;
1447:			; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1448:			;
1449:			; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1450:			; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1451:			; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1452:			; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1453:			;
1454:			; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1455:			; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1456:			; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1457:			; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1458:			; HACK AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER
1459:			;      IS SKIPPED OVER (SHALL BE A "JP" INSTRUCTION).
1460:			;
1461:			; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1462:			; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1463:			; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1464:			; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1465:			; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1466:			;
1467:			; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1468:			;
1469:	0610  47      	PRTSTG:         LD      B,A             ; *** PRTSTG ***
1470:	0611  1A      	PS1:            LD      A,(DE)          ; GET A CHARACTER
1471:	0612  13      	                INC     DE              ; BUMP POINTER
1472:	0613  B8      	                CP      B               ; SAME AS OLD A?
1473:	0614  C8      	                RET     Z               ; YES, RETURN
1474:	0615  D7      	                RST     ROUTC           ; ELSE PRINT IT
1475:	0616  FE0D    	                CP      CR              ; WAS IT A CR?
1476:	0618  20F7    	                JR      NZ,PS1          ; NO, NEXT
1477:	061A  C9      	                RET                     ; YES, RETURN
1478:			;
1479:	061B  CF220E  	QTSTG:          TSTC    $22,QT4         ; *** QTSTG ***
1480:	061E  3E22    	                LD      A,22H           ; IT IS A '"'
1481:	0620  CD1006  	QT1:            CALL    PRTSTG          ; PRINT UNTIL ANOTHER
1482:	0623  FE0D    	QT1A:           CP      CR              ; WAS LAST ONE A CR?
1483:	0625  E1      	                POP     HL              ; HACK RETURN ADDRESS
1484:	0626  CAB401  	                JP      Z,RUNNXL        ; WAS CR, RUN NEXT LINE
1485:	0629  23      	QT2:            INC     HL              ; !! -> AFTER "CALL QTSTG"
1486:	062A  23      	                INC     HL              ; !!    MUST BE "JR .."
1487:	062B  E9      	                JP      (HL)            ; !! RETURN AFTER THIS "JR"
1488:			;
1489:			;QT3:            TSTC    $27,QT4         ; IS IT A "'"?
1490:			;                LD      A,27H           ; YES, DO THE SAME
1491:			;                JR      QT1             ; AS IN '"'
1492:			;
1493:	062C  CF5F06  	QT4:            TSTC    $5F,QT5         ; IS IT UNDERLINE?
1494:	062F  3E8D    	                LD      A,08DH          ; YES, CR WITHOUT LF
1495:	0631  D7      	                RST     ROUTC
1496:	0632  E1      	                POP     HL              ; HACK RETURN ADDRESS
1497:	0633  18F4    	                JR      QT2
1498:			;
1499:	0635  CF5E08  	QT5:            TSTC    5EH,QT6         ; RST 1, is it '^'?
1500:	0638  1A      	                LD      A,(DE)          ; CHR
1501:	0639  EE40    	                XOR     40H             ; CONVERT TO CTRL
1502:	063B  D7      	                RST     ROUTC
1503:	063C  1A      	                LD      A,(DE)          ; RESTORE CHR
1504:	063D  13      	                INC     DE
1505:	063E  18E3    	                JR      QT1A
1506:	0640  C9      	QT6:            RET                     ; NONE OF ABOVE
1507:			
1508:	0641          	PRTNUM:                                 ; *** PRINT NUMBER IN HL ***
1509:	0641  3A3508  	                LD      A,(PNBASE)      ; GET NUMBER BASE
1510:	0644  B7      	                OR      A
1511:	0645  2809    	                JR      Z,PN0           ; 0: DEFAULT DEC
1512:	0647  FE10    	                CP      16              ; HEX NUMBER?
1513:	0649  2010    	                JR      NZ,PN1          ; NO
1514:	064B  0624    	                LD      B,'$'           ; PRINT LEADING '$'
1515:	064D  0D      	                DEC     C               ; '$' TAKES SPACE
1516:	064E  180B    	                JR      PN1             ; HEX IS UNSIGNED
1517:	0650  0600    	PN0:            LD      B,0             ; NO PREFIX YET
1518:	0652  CD3705  	                CALL    CHKSGN          ; CHECK SIGN
1519:	0655  F25B06  	                JP      P,PN1           ; NO SIGN
1520:	0658  062D    	                LD      B,'-'           ; B=SIGN
1521:	065A  0D      	                DEC     C               ; '-' TAKES SPACE
1522:	065B  D5      	PN1:            PUSH    DE
1523:	065C  3A3508  	                LD      A,(PNBASE)
1524:	065F  B7      	                OR      A               ; DEFAULT DECIMAL?
1525:	0660  2002    	                JR      NZ,PN1A
1526:	0662  3E0A    	                LD      A,10
1527:	0664  5F      	PN1A:           LD      E,A
1528:	0665  AF      	                XOR     A
1529:	0666  57      	                LD      D,A
1530:	0667  D5      	                PUSH    DE              ; SAVE AS A FLAG
1531:	0668  0D      	                DEC     C               ; C=SPACES
1532:	0669  C5      	                PUSH    BC              ; SAVE SIGN & SPACE
1533:	066A  CD1E05  	PN2:            CALL    DIVIDE          ; DIVIDE HL BY NUMBER BASE
1534:	066D  78      	                LD      A,B             ; RESULT 0?
1535:	066E  B1      	                OR      C
1536:	066F  2807    	                JR      Z,PN3           ; YES, WE GOT ALL
1537:	0671  E3      	                EX      (SP),HL         ; NO, SAVE REMAINDER
1538:	0672  2D      	                DEC     L               ; AND COUNT SPACE
1539:	0673  E5      	                PUSH    HL              ; HL IS OLD BC
1540:	0674  60      	                LD      H,B             ; MOVE RESULT TO BC
1541:	0675  69      	                LD      L,C
1542:	0676  18F2    	                JR      PN2             ; AND DIVIDE AGAIN
1543:			;
1544:	0678  C1      	PN3:            POP     BC              ; WE GOT ALL DIGITS IN
1545:	0679  0D      	PN4:            DEC     C               ; THE STACK
1546:	067A  79      	                LD      A,C             ; LOOK AT SPACE COUNT
1547:	067B  B7      	                OR      A
1548:	067C  FA8406  	                JP      M,PN5           ; NO LEADING BLANKS
1549:	067F  3E20    	                LD      A,' '           ; LEADING BLANKS
1550:	0681  D7      	                RST     ROUTC
1551:	0682  18F5    	                JR      PN4             ; MORE?
1552:	0684  78      	PN5:            LD      A,B             ; PRINT SIGN OR '$'
1553:	0685  B7      	                OR      A
1554:	0686  C41000  	                CALL    NZ,ROUTC
1555:	0689  5D      	                LD      E,L             ; LAST REMAINDER IN E
1556:	068A  3A3508  	PN6:            LD      A,(PNBASE)      ; GET NUMBER BASE
1557:	068D  B7      	                OR      A               ; DEFAULT DECIMAL?
1558:	068E  2002    	                JR      NZ,PN6A
1559:	0690  3E0A    	                LD      A,10
1560:	0692  BB      	PN6A:           CP      E               ; IT IS FLAG FOR NO MORE
1561:	0693  7B      	                LD      A,E             ; CHECK DIGIT IN E
1562:	0694  D1      	                POP     DE
1563:	0695  C8      	                RET     Z               ; IF SO, RETURN
1564:	0696  FE0A    	                CP      10              ; 0-9? < A hex?
1565:	0698  3802    	                JR      C,PN7           ; Skip Add 7
1566:	069A  C607    	                ADD     A,'A'-'0'-10    ; Bring it up to ASCII A-F
1567:	069C  C630    	PN7:            ADD     A,'0'           ; ELSE CONVERT TO ASCII
1568:	069E  D7      	                RST     ROUTC           ; AND PRINT THE DIGIT
1569:	069F  18E9    	                JR      PN6             ; GO BACK FOR MORE
1570:			
1571:	06A1  AF      	PRTLN:          XOR     A               ; 0 -> DEFAULT BASE 10 SIGNED
1572:	06A2  323508  	                LD      (PNBASE),A      ; FOR PRTNUM
1573:	06A5  1A      	                LD      A,(DE)
1574:	06A6  6F      	                LD      L,A             ; LOW ORDER LINE #
1575:	06A7  13      	                INC     DE
1576:	06A8  1A      	                LD      A,(DE)          ; HIGH ORDER
1577:	06A9  67      	                LD      H,A
1578:	06AA  13      	                INC     DE
1579:	06AB  0E04    	                LD      C,4             ; PRINT 4 DIGIT LINE #
1580:	06AD  CD4106  	                CALL    PRTNUM
1581:	06B0  3E20    	                LD      A,' '           ; FOLLOWED BY A BLANK
1582:	06B2  D7      	                RST     ROUTC
1583:	06B3  97      	                SUB     A               ; AND THEN THE NEXT
1584:	06B4  CD1006  	                CALL    PRTSTG
1585:	06B7  C9      	                RET
1586:			;
1587:			; *************************************************************
1588:			;
1589:			; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1590:			;
1591:			; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1592:			; DE = HL
1593:			;
1594:			; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1595:			; UNTIL DE = BC
1596:			;
1597:			; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1598:			; STACK
1599:			;
1600:			; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1601:			; STACK
1602:			;
1603:	06B8  E7      	MVUP:           RST     RCOMP           ; *** MVUP ***
1604:	06B9  C8      	                RET     Z               ; DE = HL, RETURN
1605:	06BA  1A      	                LD      A,(DE)          ; GET ONE BYTE
1606:	06BB  02      	                LD      (BC),A          ; MOVE IT
1607:	06BC  13      	                INC     DE              ; INCREASE BOTH POINTERS
1608:	06BD  03      	                INC     BC
1609:	06BE  18F8    	                JR      MVUP            ; UNTIL DONE
1610:			;
1611:	06C0  78      	MVDOWN:         LD      A,B             ; *** MVDOWN ***
1612:	06C1  92      	                SUB     D               ; TEST IF DE = BC
1613:	06C2  2003    	                JR      NZ,MD1          ; NO, GO MOVE
1614:	06C4  79      	                LD      A,C             ; MAYBE, OTHER BYTE?
1615:	06C5  93      	                SUB     E
1616:	06C6  C8      	                RET     Z               ; YES, RETURN
1617:	06C7  1B      	MD1:            DEC     DE              ; ELSE MOVE A BYTE
1618:	06C8  2B      	                DEC     HL              ; BUT FIRST DECREASE
1619:	06C9  1A      	                LD      A,(DE)          ; BOTH POINTERS AND
1620:	06CA  77      	                LD      (HL),A          ; THEN DO IT
1621:	06CB  18F3    	                JR      MVDOWN          ; LOOP BACK
1622:			;
1623:	06CD  C1      	POPA:           POP     BC              ; BC = RETURN ADDR.
1624:	06CE  E1      	                POP     HL              ; RESTORE LOPVAR, BUT
1625:	06CF  224008  	                LD      (LOPVAR),HL     ; =0 MEANS NO MORE
1626:	06D2  7C      	                LD      A,H
1627:	06D3  B5      	                OR      L
1628:	06D4  2810    	                JR      Z,PP1           ; YEP, GO RETURN
1629:	06D6  E1      	                POP     HL              ; NOP, RESTORE OTHERS
1630:	06D7  224208  	                LD      (LOPINC),HL
1631:	06DA  E1      	                POP     HL
1632:	06DB  224408  	                LD      (LOPLMT),HL
1633:	06DE  E1      	                POP     HL
1634:	06DF  224608  	                LD      (LOPLN),HL
1635:	06E2  E1      	                POP     HL
1636:	06E3  224808  	                LD      (LOPPT),HL
1637:	06E6  C5      	PP1:            PUSH    BC              ; BC = RETURN ADDR.
1638:	06E7  C9      	                RET
1639:			;
1640:	06E8  214C08  	PUSHA:          LD      HL,STKLMT       ; *** PUSHA ***
1641:	06EB  CD3A05  	                CALL    CHGSGN
1642:	06EE  C1      	                POP     BC              ; BC=RETURN ADDRESS
1643:	06EF  39      	                ADD     HL,SP           ; IS STACK NEAR THE TOP?
1644:	06F0  D2A605  	                JP      NC,QSORRY       ; YES, SORRY FOR THAT
1645:	06F3  2A4008  	                LD      HL,(LOPVAR)     ; ELSE SAVE LOOP VAR'S
1646:	06F6  7C      	                LD      A,H             ; BUT IF LOPVAR IS 0
1647:	06F7  B5      	                OR      L               ; THAT WILL BE ALL
1648:	06F8  2813    	                JR      Z,PU1
1649:	06FA  2A4808  	                LD      HL,(LOPPT)      ; ELSE, MORE TO SAVE
1650:	06FD  E5      	                PUSH    HL
1651:	06FE  2A4608  	                LD      HL,(LOPLN)
1652:	0701  E5      	                PUSH    HL
1653:	0702  2A4408  	                LD      HL,(LOPLMT)
1654:	0705  E5      	                PUSH    HL
1655:	0706  2A4208  	                LD      HL,(LOPINC)
1656:	0709  E5      	                PUSH    HL
1657:	070A  2A4008  	                LD      HL,(LOPVAR)
1658:	070D  E5      	PU1:            PUSH    HL
1659:	070E  C5      	                PUSH    BC              ; BC = RETURN ADDR.
1660:	070F  C9      	                RET
1661:			
1662:			; *************************************************************
1663:			;
1664:			; *** DIRECT *** EXEC *** TABLES ***
1665:			;
1666:			; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1667:			; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1668:			; OF CODE ACCORDING TO THE TABLE.
1669:			;
1670:			; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1671:			; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1672:			; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1673:			; ALL DIRECT AND STATEMENT COMMANDS.
1674:			;
1675:			; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1676:			; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1677:			; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1678:			;
1679:			
1680:	0710  214407  	DIRECT:         LD      HL,TAB1-1       ; *** DIRECT ***
1681:			;
1682:	0713          	EXEC:                                   ; *** EXEC ***
1683:	0713  EF      	EX0:            RST     RIGNBLK         ; IGNORE LEADING BLANKS
1684:	0714  D5      	                PUSH    DE              ; SAVE POINTER
1685:	0715  1A      	EX1:            LD      A,(DE)          ; IF FOUND '.' IN STRING
1686:	0716  13      	                INC     DE              ; BEFORE ANY MISMATCH
1687:	0717  FE2E    	                CP      2EH             ; WE DECLARE A MATCH
1688:	0719  281C    	                JR      Z,EX3
1689:	071B  FE61    	                CP      'a'             ; < 'a' ?
1690:	071D  3806    	                JR      C,EXN           ; NO ALPHA CHAR
1691:	071F  FE7B    	                CP      'z'+1           ; > 'z'
1692:	0721  3002    	                JR      NC,EXN          ; NO ALPHA CHAR
1693:	0723  E65F    	                AND     5FH             ; MASK LOWER CASE TO UPPER CASE
1694:	0725          	EXN:
1695:	0725  23      	                INC     HL              ; HL->TABLE
1696:	0726  BE      	                CP      (HL)            ; IF MATCH, TEST NEXT
1697:	0727  28EC    	                JR      Z,EX1
1698:	0729  3E7F    	                LD      A,07FH          ; ELSE SEE IF BIT 7
1699:	072B  1B      	                DEC     DE              ; OF TABLE IS SET, WHICH
1700:	072C  BE      	                CP      (HL)            ; IS THE JUMP ADDR. (HI)
1701:	072D  380E    	                JR      C,EX5           ; C:YES, MATCHED
1702:	072F  23      	EX2:            INC     HL              ; NC:NO, FIND JUMP ADDR.
1703:	0730  BE      	                CP      (HL)
1704:	0731  30FC    	                JR      NC,EX2
1705:	0733  23      	                INC     HL              ; BUMP TO NEXT TAB. ITEM
1706:	0734  D1      	                POP     DE              ; RESTORE STRING POINTER
1707:	0735  18DC    	                JR      EX0             ; TEST AGAINST NEXT ITEM
1708:	0737  3E7F    	EX3:            LD      A,07FH          ; PARTIAL MATCH, FIND
1709:	0739  23      	EX4:            INC     HL              ; JUMP ADDR., WHICH IS
1710:	073A  BE      	                CP      (HL)            ; FLAGGED BY BIT 7
1711:	073B  30FC    	                JR      NC,EX4
1712:	073D  7E      	EX5:            LD      A,(HL)          ; LOAD HL WITH THE JUMP
1713:	073E  23      	                INC     HL              ; ADDRESS FROM THE TABLE
1714:	073F  6E      	                LD      L,(HL)
1715:			                                        ; ADDRESSES ARE BIG-ENDIAN
1716:			                                        ; WITH MSB SET to 1
1717:	0001          	                .IF     $ < 8000H
1718:	0740  E67F    	                AND     7FH             ; MASK OFF HIGH ADDRESS BIT
1719:			                .ENDIF
1720:	0742  67      	                LD      H,A
1721:	0743  F1      	                POP     AF              ; CLEAN UP THE GARBAGE
1722:	0744  E9      	                JP      (HL)            ; AND WE GO DO IT
1723:			;
1724:			
1725:			; THE TABLES CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM IS:
1726:			; - A STRING OF 7 BIT ASCII CHARACTERS
1727:			;   The string shall be defined with ".ASCII" to allow
1728:			;   the creation of the command list document "token.txt"
1729:			; - A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF HIGH BYTE SET.
1730:			;   This is done by the macro 'DWA'.
1731:			; If the program is executed from an address < 0x8000
1732:			; take care to mask this bit in program part 'EXEC'.
1733:			;
1734:			; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.
1735:			; IF THE STRING DOES NOT MATCH ANY OF THE OTHER ITEMS,
1736:			; IT WILL MATCH THIS NULL ITEM AS DEFAULT.
1737:			
1738:			;
1739:	0745          	TAB1:                                   ; DIRECT ONLY COMMANDS
1740:	0745  4C495354	                .ASCII  "LIST"          ; List program code (DIRECT ONLY)
1741:	0749  81DB    	                DWA     LIST
1742:	074B  52554E  	                .ASCII  "RUN"           ; Execute program (DIRECT ONLY)
1743:	074E  81AE    	                DWA     RUN
1744:	0750  4E4557  	                .ASCII  "NEW"           ; Clear program code (DIRECT ONLY)
1745:	0753  819F    	                DWA     NEW
1746:			;
1747:	0755          	TAB2:                                   ; DIRECT OR PROGRAM STATEMENT
1748:	0755  4E455854	                .ASCII  "NEXT"          ; Next loop iteration
1749:	0759  82D3    	                DWA     NEXT
1750:	075B  4C4554  	                .ASCII  "LET"           ; Variable assignment, can be omitted
1751:	075E  8394    	                DWA     LET
1752:	0760  4946    	                .ASCII  "IF"            ; Test condition
1753:	0762  832D    	                DWA     IFF
1754:	0764  474F544F	                .ASCII  "GOTO"          ; Go to program line
1755:	0768  81CD    	                DWA     GOTO
1756:	076A  474F5355	                .ASCII  "GOSUB"         ; Call subroutine
	      42
1757:	076F  8240    	                DWA     GOSUB
1758:	0771  52455455	                .ASCII  "RETURN"        ; Return from subroutine
	      524E
1759:	0777  825F    	                DWA     RETURN
1760:	0779  52454D  	                .ASCII  "REM"           ; Remark, ignore rest of line
1761:	077C  8329    	                DWA     REM
1762:	077E  464F52  	                .ASCII  "FOR"           ; Start a program loop
1763:	0781  8278    	                DWA     FOR
1764:	0783  494E5055	                .ASCII  "INPUT"         ; Wait for KBD input
	      54
1765:	0788  8346    	                DWA     INPUT
1766:	078A  5052494E	                .ASCII  "PRINT"         ; Output values
	      54
1767:	078F  81F2    	                DWA     PRINT
1768:	0791  3F      	                .ASCII  "?"             ; Short for PRINT
1769:	0792  81F2    	                DWA     PRINT
1770:	0794  505554  	                .ASCII  "PUT"           ; PUT ADDR, EXPR, EXPR,... put bytes.. into RAM at ADDR++
1771:	0797  850A    	                DWA     PUT
1772:	0799  53544F50	                .ASCII  "STOP"          ; Warm start
1773:	079D  81A8    	                DWA     STOP
1774:	079F  425945  	                .ASCII  "BYE"           ; HALT Z80 CPU (return to analyser)
1775:	07A2  851D    	                DWA     BYE
1776:	07A4  838F    	                DWA     DEFLT           ; END OF LIST
1777:			;
1778:	07A6          	TAB4:                                   ; FUNCTIONS AND CONSTANTS
1779:	07A6  524E44  	                .ASCII  "RND"           ; Function RND(RANGE), get random [0..RANGE[
1780:	07A9  84B1    	                DWA     RND
1781:	07AB  414253  	                .ASCII  "ABS"           ; Function ABS(ARG), return absolute value of ARG
1782:	07AE  84DF    	                DWA     ABS
1783:	07B0  474554  	                .ASCII  "GET"           ; Function GET(ADR), get byte from memory at ADR
1784:	07B3  84F5    	                DWA     GET
1785:	07B5  555352  	                .ASCII  "USR"           ; Function USR(ARG), call function at TOP, return HL
1786:	07B8  84FC    	                DWA     USR
1787:	07BA  43414C4C	                .ASCII  "CALL"          ; Function CALL(ADR), call opcode at ADR
1788:	07BE  8502    	                DWA     CALL
1789:	07C0  53495A45	                .ASCII  "SIZE"          ; Constant SIZE, get size of free memory
1790:	07C4  84E8    	                DWA     SIZE
1791:	07C6  544F50  	                .ASCII  "TOP"           ; Constant TOP, get address of TEXT TOP = USRSPC
1792:	07C9  8506    	                DWA     TOP
1793:	07CB  8498    	                DWA     XP40            ; END OF LIST
1794:			;
1795:	07CD          	TAB5:                                   ; "TO" IN "FOR"
1796:	07CD  544F    	                .ASCII  "TO"            ; Final value of loop counter
1797:	07CF  8288    	                DWA     FR1
1798:	07D1  8579    	                DWA     QWHAT           ; END OF LIST
1799:			;
1800:	07D3          	TAB6:                                   ; "STEP" IN "FOR"
1801:	07D3  53544550	                .ASCII  "STEP"          ; Increment value for loop counter
1802:	07D7  8292    	                DWA     FR2
1803:	07D9  8295    	                DWA     FR3             ; END OF LIST
1804:			;
1805:	07DB          	TAB8:                                   ; RELATION OPERATORS
1806:	07DB  3D      	                .ASCII  "="             ; Operator equal
1807:	07DC  83A3    	                DWA     XPEQ
1808:	07DE  23      	                .ASCII  "#"             ; Operator not equal
1809:	07DF  83A9    	                DWA     XPNE
1810:	07E1  3C3E    	                .ASCII  "<>"            ; Operator not equal
1811:	07E3  83A9    	                DWA     XPNE
1812:	07E5  3C3D    	                .ASCII  "<="            ; Operator less or equal
1813:	07E7  83AF    	                DWA     XPLE
1814:	07E9  3C      	                .ASCII  "<"             ; Operator less than
1815:	07EA  83B7    	                DWA     XPLT
1816:	07EC  3E3D    	                .ASCII  ">="            ; Operator greater or equal
1817:	07EE  83BD    	                DWA     XPGE
1818:	07F0  3E      	                .ASCII  ">"             ; Operator greater than
1819:	07F1  83C3    	                DWA     XPGT
1820:	07F3  83CA    	                DWA     XP17            ; END OF REL OPERATOR LIST
1821:			
1822:			;
1823:	07F5          	LSTROM:                                 ; ALL ABOVE CAN BE ROM
1824:			
1825:			;
1826:			; CHECK THAT THE PROGRAM DOES NOT EXCEED ROM SIZE
1827:			;
1828:	0001          	                .ASSERT $ <= RAMBGN
1829:			
1830:			
1831:	07F5 ..07FF 00	                .DC     RAMBGN-$,$00    ; fill with $00 until RAMBGN
1832:			;
1833:			;
1834:			; *************************************************************
1835:			
1836:	0800          	                .ORG    RAMBGN          ; HERE DOWN MUST BE RAM
1837:			;
1838:			; *************************************************************
1839:			;
1840:			
1841:	0800          	VARBGN:         .DS     2*26            ; VARIABLES 'A'..'Z'
1842:	0834          	OCSW:           .DS     1               ; SWITCH FOR OUTPUT
1843:	0835          	PNBASE:         .DS     1               ; BASE FOR PRTNUM
1844:	0836          	TXTUNF:         .DS     2               ; ->UNFILLED TEXT AREA
1845:	0838          	CURRNT:         .DS     2               ; POINTS TO CURRENT LINE
1846:	083A          	STKGOS:         .DS     2               ; SAVES SP IN 'GOSUB'
1847:	083C          	VARNXT:         .DS     2               ; TEMP STORAGE
1848:	083E          	STKINP:         .DS     2               ; SAVES SP IN 'INPUT'
1849:	0840          	LOPVAR:         .DS     2               ; 'FOR' LOOP SAVE AREA
1850:	0842          	LOPINC:         .DS     2               ; INCREMENT
1851:	0844          	LOPLMT:         .DS     2               ; LIMIT
1852:	0846          	LOPLN:          .DS     2               ; LINE NUMBER
1853:	0848          	LOPPT:          .DS     2               ; TEXT POINTER
1854:	084A          	RANPNT:         .DS     2               ; RANDOM NUMBER POINTER
1855:	084C          	STKLMT:         .EQU    $               ; LIMIT FOR STACK
1856:			
1857:	0900          	                .ORG    RAMBGN+$100
1858:			;
1859:	0900          	STACK:                                  ; STACK STARTS HERE AND GROWS DOWN
1860:			
1861:	0900          	TXTBGN:                                 ; TEXT STARTS HERE AND GROWS UP
1862:			;
1863:			
1864:	0F00          	                .ORG    RAMBGN+RAMSZE-$100
1865:	0F00          	TXTEND:                                 ; TEXT SAVE AREA ENDS
1866:			;
1867:			                                        ; VARIABLES @(0), @(1), @(2)
1868:			                                        ; ... stored top-down
1869:			                                        ; i.e. &@(i) = TXTEND-2-2*i
1870:			;
1871:	0F00          	USRSPC:         .DS     128
1872:			
1873:	0F80          	BUFFER:         .DS     127             ; INPUT BUFFER
1874:	0FFF          	BUFEND:         .DS     1               ; BUFFER END
1875:			
1876:	1000          	                .END



Statistics:

     4	passes
     0	jr promotions
   226	symbols
  2048	bytes

    64	macro calls
   203	macro bytes
     0	invented symbols



Symbol Table:

ABS              4DF      1247
AHOW            DC        220
ASORRY           5A7      1447
AWHAT            57A      1402
BS             =08        8
BUFEND           FFF      4095
BUFFER           F80      3968
BYE              51D      1309
CALL             502      1282
CAN            =18        24
CHGSGN           53A      1338
CHKIO            107      263
CHKSGN           537      1335
CI0              110      272
CK1              555      1365
CKHLDE           54F      1359
CR             =0D        13
CRLF            0E        14
CSTART          00        0
CURRNT           838      2104
DEFLT            38F      911
DEL            =7F        127
DIRECT           710      1808
DIVIDE           51E      1310
DV1              529      1321
DV2              52B      1323
ENDCHK           575      1397
ERROR            57D      1405
EX0              713      1811
EX1              715      1813
EX2              72F      1839
EX3              737      1847
EX4              739      1849
EX5              73D      1853
EXEC             713      1811
EXN              725      1829
EXPR1            39D      925
EXPR2            3E1      993
EXPR3            425      1061
EXPR4            492      1170
FI1              56D      1389
FI2              574      1396
FIN              566      1382
FL1              5F3      1523
FL2              607      1543
FNDLN            5EB      1515
FNDLP            5F3      1523
FNDNXT           606      1542
FNDSKP           608      1544
FOR              278      632
FR1              288      648
FR2              292      658
FR3              295      661
FR4              298      664
FR5              29B      667
FR7              2B0      688
FR8              2CE      718
GET              4F5      1269
GETLN            5AC      1452
GL1              5B0      1456
GL3              5D3      1491
GL4              5E4      1508
GOSUB            240      576
GOTO             1CD      461
HOW             ED        237
IFF              32D      813
INIT             115      277
INPERR           33C      828
INPUT            346      838
IODATA         =01        1
IOSTAT         =02        2
IO_RX_BIT      =01        1
IP1              346      838
IP2              351      849
IP3              361      865
IP4              388      904
IP5              38E      910
LET              394      916
LF             =0A        10
LIST             1DB      475
LOPINC           842      2114
LOPLMT           844      2116
LOPLN            846      2118
LOPPT            848      2120
LOPVAR           840      2112
LS1              1E4      484
LSTROM           7F5      2037
LT1              39C      924
MD1              6C7      1735
MVDOWN           6C0      1728
MVUP             6B8      1720
NEW              19F      415
NEXT             2D3      723
NX0              2DA      730
NX1              312      786
NX2              325      805
NX3              2F0      752
NX4              302      770
NX5              323      803
OC1              101      257
OCSW             834      2100
OK              F2        242
PARN             4A6      1190
PN0              650      1616
PN1              65B      1627
PN1A             664      1636
PN2              66A      1642
PN3              678      1656
PN4              679      1657
PN5              684      1668
PN6              68A      1674
PN6A             692      1682
PN7              69C      1692
PNBASE           835      2101
POPA             6CD      1741
PP1              6E6      1766
PR0              208      520
PR1              223      547
PR2              200      512
PR3              228      552
PR5              20F      527
PR6              230      560
PR8              238      568
PRINT            1F2      498
PRTLN            6A1      1697
PRTNUM           641      1601
PRTSTG           610      1552
PS1              611      1553
PT0              50F      1295
PT1              51A      1306
PT2              51B      1307
PU1              70D      1805
PUSHA            6E8      1768
PUT              50A      1290
QHOW            DB        219
QSORRY           5A6      1446
QT1              620      1568
QT1A             623      1571
QT2              629      1577
QT4              62C      1580
QT5              635      1589
QT6              640      1600
QTSTG            61B      1563
QWHAT            579      1401
RA1              4CB      1227
RAMBGN         = 800      2048
RAMSZE         = 800      2048
RANPNT           84A      2122
RCOMP           20        32
REM              329      809
RETURN           25F      607
REXPR           18        24
RFINISH         30        48
RIGNBLK         28        40
RND              4B1      1201
ROMBGN         =00        0
ROUTC           10        16
RTSTC           08        8
RTSTV           38        56
RUN              1AE      430
RUNNXL           1B4      436
RUNSML           1C4      452
RUNTSL           1BD      445
SETVAL           557      1367
SIZE             4E8      1256
SORRY           FB        251
ST2              13D      317
ST3              146      326
ST4              17A      378
STACK            900      2304
STKGOS           83A      2106
STKINP           83E      2110
STKLMT         = 84C      2124
STOP             1A8      424
SUBDE            533      1331
TAB1             745      1861
TAB2             755      1877
TAB4             7A6      1958
TAB5             7CD      1997
TAB6             7D3      2003
TAB8             7DB      2011
TC1             6F        111
TC2             78        120
TIBAS           E2        226
TN1             8E        142
TN2             92        146
TOP              506      1286
TSTNUM          7C        124
TV1             59        89
TV2             5F        95
TX1             B4        180
TX2             C7        199
TXTBGN           900      2304
TXTEND           F00      3840
TXTUNF           836      2102
USR              4FC      1276
USRSPC           F00      3840
VARBGN           800      2048
VARNXT           83C      2108
WHAT            F5        245
WSTART           12A      298
XP17             3CA      970
XP18             3CC      972
XP21             3E9      1001
XP22             3EC      1004
XP23             3EF      1007
XP24             3F6      1014
XP25             407      1031
XP26             40A      1034
XP27             413      1043
XP31             428      1064
XP32             444      1092
XP33             44B      1099
XP34             454      1108
XP35             473      1139
XP36             480      1152
XP40             498      1176
XP41             4A0      1184
XP42             4AD      1197
XP43             4AE      1198
XPEQ             3A3      931
XPGE             3BD      957
XPGT             3C3      963
XPLE             3AF      943
XPLT             3B7      951
XPNE             3A9      937
