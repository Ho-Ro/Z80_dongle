0001   0000             ;Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
0002   0000             ;Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
0003   0000             ;Status bit for read in CHKIO changed to 0x02
0004   0000             ;Status bit for write in OUTC (actually OC3) changed to 0x01
0005   0000             ;Changed UART initialization parameters in INIT
0006   0000             ;Changed ORG statements at end of file to match system with 2K RAM
0007   0000             ;
0008   0000             ;2024-10-11 Ho-Ro:
0009   0000             ;Automatically converted from 8080 syntax to Z80 syntax:
0010   0000             ;https://hc-ddr.hucki.net/wiki/doku.php/cpm/8080_z80
0011   0000             ;Assembler: uz80as for Z80 as well as i8080 (uz80as --target=i8080)
0012   0000             ;Modified for use with Z80 dongle simulator
0013   0000             ;UART data port 1
0014   0000             ;UART status port 2
0015   0000             ;New:
0016   0000             ;Case insensitive input
0017   0000             ;PRINT modifier for hex out: PRINT %16,..
0018   0000             ;Hex numbers: $xxxx
0019   0000             ;2024-10-13 Ho-Ro:
0020   0000             ;build ROM version (2K ROM / 6.5K RAM) and RAM version (2K prog RAM / 2K free RAM)
0021   0000             ;add command "HALT" (halts Z80, returns to dongle analyser program)
0022   0000             ;2024-10-15 Ho-Ro:
0023   0000             ;PRINT modifier %nn switches to unsigned number format, e.g.:
0024   0000             ;PRINT %10,$FFFF -> 65535
0025   0000             ;2024-10-17 Ho-Ro:
0026   0000             ;PUT ADDR, VAL, VAL, VAL,...
0027   0000             ;constants RAM (TXTBGN), TOP (TXTEND) and SIZE (TXTEND-TXTUNF)
0028   0000             ;function USR(para) that calls machine code at TOP (128 bytes free)
0029   0000             ;with parameter in HL, returning the result in HL, default is RET at TOP
0030   0000             ;
0031   0000             ;*************************************************************
0032   0000             ;
0033   0000             ;                 TINY BASIC FOR INTEL 8080
0034   0000             ;                       VERSION 2.0
0035   0000             ;                     BY LI-CHEN WANG
0036   0000             ;                  MODIFIED AND TRANSLATED
0037   0000             ;                    TO INTEL MNEMONICS
0038   0000             ;                     BY ROGER RAUSKOLB
0039   0000             ;                      10 OCTOBER,1976
0040   0000             ;                        @COPYLEFT
0041   0000             ;                   ALL WRONGS RESERVED
0042   0000             ;
0043   0000             ;*************************************************************
0044   0000             ;
0045   0000             ; *** ZERO PAGE SUBROUTINES ***
0046   0000             ;
0047   0000             ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
0048   0000             ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
0049   0000             ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
0050   0000             ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
0051   0000             ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
0052   0000             ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
0053   0000             ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
0054   0000             ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
0055   0000             ;
0056   0000             
0057   0000             ; Memory map
0058   0000             ROMBGN          .EQU            $0000           ; Execution must start here
0059   0000             RAMBGN          .EQU            $0800           ; 2K ROM
0060   0000             
0061   0000~            #IFDEF          MAKE_ROM
0062   0000~            ; 2K CODE IN ROM and 6.5K DATA IN RAM FOR Z80_dongle
0063   0000~            RAMSZE          .EQU            $1A00
0064   0000             #ELSE
0065   0000             ; 2K CODE IN RAM & 2K DATA IN RAM AS TEST VERSION
0066   0000             RAMSZE          .EQU            $0800
0067   0000             #ENDIF
0068   0000             
0069   0000             ; IO map
0070   0000             IODATA          .EQU            1
0071   0000             IOSTAT          .EQU            2
0072   0000             IO_RX_BIT       .EQU            $01
0073   0000             
0074   0000             ; Control character
0075   0000             BS              .EQU            08H             ; ^H, BACKSPACE
0076   0000             CR              .EQU            0DH             ; ^M, CARRIAGE RETURN
0077   0000             LF              .EQU            0AH             ; ^J, LINE FEED
0078   0000             CAN             .EQU            18H             ; ^X, CANCEL
0079   0000             DEL             .EQU            7FH             ; DELETE
0080   0000             
0081   0000             
0082   0000             ; Store a label address as BIG endian with bit A15 set
0083   0000             #DEFINE DWA(LABEL) .DB (LABEL >> 8) | $80 \ .DB (LABEL & $FF)
0084   0000             
0085   0000             ; if CHAR = A THEN JUMP RELATIVE TO LABEL
0086   0000             #DEFINE TSTCH(CHAR,LABEL) RST RTSTC \ .DB CHAR \ .DB LABEL-$-1
0087   0000             
0088   0000             
0089   0000             .ORG            ROMBGN
0090   0000             
0091   0000             ;RSTART          .EQU    $
0092   0000 31 00 10    START:          LD      SP,STACK        ;*** COLD START ***
0093   0003 3E FF                       LD      A,0FFH
0094   0005 C3 D4 06                    JP      INIT
0095   0008             
0096   0008             RTSTC           .EQU    $       ;*** RST 1 @ $0008 ***
0097   0008 E3          TSTC:           EX      (SP),HL
0098   0009 EF                          RST     RIGNBLK ;IGNORE BLANKS AND
0099   000A BE                          CP      (HL)    ;TEST CHARACTER
0100   000B C3 70 00                    JP      TC1     ;REST OF THIS IS AT TC1
0101   000E             
0102   000E 3E 0D       CRLF:           LD      A,CR    ;*** CRLF ***
0103   0010             ;
0104   0010             ROUTC           .EQU    $       ;*** RST 2 @ $0010 ***
0105   0010 D3 01       OUTC:           OUT     (IODATA),A      ;Out to data port
0106   0012 FE 0D                       CP      CR      ;WAS IT CR?
0107   0014 C0                          RET     NZ      ;NO, FINISHED
0108   0015 C3 E9 06                    JP      OC1     ;REST OF THIS IS AT OC1
0109   0018             
0110   0018             REXPR           .EQU    $       ;*** RST 3 @ $0018 ***
0111   0018 CD AE 03    EXPR:           CALL    EXPR2
0112   001B E5                          PUSH    HL      ;EVALUATE AN EXPRESSION
0113   001C C3 6A 03                    JP      EXPR1   ;REST OF IT AT EXPR1
0114   001F 57          .DB             "W"
0115   0020             
0116   0020             RCOMP           .EQU    $       ;*** RST 4 @ $0020 ***
0117   0020 7C          COMP:           LD      A,H
0118   0021 BA                          CP      D       ;COMPARE HL WITH DE
0119   0022 C0                          RET     NZ      ;RETURN CORRECT C AND
0120   0023 7D                          LD      A,L     ;Z FLAGS
0121   0024 BB                          CP      E       ;BUT OLD A IS LOST
0122   0025 C9                          RET
0123   0026 41 4E       .DB             "AN"
0124   0028             
0125   0028             RIGNBLK         .EQU    $       ;*** RST 5 @ $0028 ***
0126   0028 1A          IGNBLK:         LD      A,(DE)
0127   0029 FE 20                       CP      20H     ;IGNORE BLANKS
0128   002B C0                          RET     NZ      ;IN TEXT (WHERE DE->)
0129   002C 13                          INC     DE      ;AND RETURN THE FIRST
0130   002D C3 28 00                    JP      IGNBLK  ;NON-BLANK CHAR. IN A
0131   0030             
0132   0030             RFINISH         .EQU    $       ;*** RST 6 @ $0030 ***
0133   0030 F1          FINISH:         POP     AF
0134   0031 CD 16 05                    CALL    FIN     ;CHECK END OF COMMAND
0135   0034 C3 29 05                    JP      QWHAT   ;PRINT "WHAT?" IF WRONG
0136   0037 47          .DB             "G"
0137   0038             
0138   0038             RTSTV           .EQU    $       ;*** RST 7 @ $0038 ***
0139   0038 EF          TSTV:           RST     RIGNBLK ;IGNBLK
0140   0039 D6 40                       SUB     '@'     ;TEST VARIABLES
0141   003B D8                          RET     C       ;C: < '@', NOT A VARIABLE
0142   003C C2 5A 00                    JP      NZ,TV1  ;NZ: NOT THE '@' ARRAY
0143   003F             ;
0144   003F 13                          INC     DE      ;IT IS THE "@" ARRAY
0145   0040 CD 4E 04                    CALL    PARN    ;@ SHOULD BE FOLLOWED
0146   0043 29                          ADD     HL,HL   ;BY (EXPR) AS ITS INDEX
0147   0044 DA D2 00                    JP      C,QHOW  ;IS INDEX TOO BIG (>0x7FFF)?
0148   0047 23                          INC     HL      ;ADD TWO BYTES
0149   0048 23                          INC     HL      ;FOR @(0)
0150   0049 D5                          PUSH    DE      ;WILL IT OVERWRITE
0151   004A EB                          EX      DE,HL   ;TEXT?
0152   004B CD 8C 04                    CALL    SIZE    ;FIND SIZE OF FREE RAM
0153   004E E7                          RST     RCOMP   ;AND CHECK THAT
0154   004F DA 57 05                    JP      C,ASORRY  ;IF SO, SAY "SORRY"
0155   0052 21 00 0E                    LD      HL,TXTEND ;IF NOT GET ADDRESS
0156   0055 CD DC 04                    CALL    SUBDE   ;OF @(EXPR) AND PUT IT
0157   0058 D1                          POP     DE      ;IN HL (top-down from TXTEND)
0158   0059 C9                          RET             ;C FLAG IS CLEARED
0159   005A             ;
0160   005A                             ; VARIABLES 'A'..'Z'
0161   005A FE 21       TV1:            CP      21H     ;>='a'?
0162   005C 38 02                       JR      C,TV2   ;NO
0163   005E D6 20                       SUB     20H     ;MAKE UPPER CASE
0164   0060 FE 1B       TV2:            CP      1BH     ;<='Z'
0165   0062 3F                          CCF             ;IF NOT RETURN C FLAG
0166   0063 D8                          RET     C
0167   0064 13                          INC     DE      ;IT IS 'A'=1 THROUGH 'Z'=26
0168   0065 21 7E 0E                    LD      HL,VARBGN-2       ;COMPUTE ADDRESS OF
0169   0068 07                          RLCA            ;THAT VARIABLE
0170   0069 85                          ADD     A,L     ;AND RETURN IT IN HL
0171   006A 6F                          LD      L,A     ;WITH C FLAG CLEARED
0172   006B 3E 00                       LD      A,0
0173   006D 8C                          ADC     A,H
0174   006E 67                          LD      H,A
0175   006F C9                          RET
0176   0070             
0177   0070             ;TSTC:          EX      (SP),HL ;*** TSTC OR RST 1 ***
0178   0070             ;               RST  RIGNBLK    ;THIS IS AT LOC. 8
0179   0070             ;               CMP     (HL)    ;AND THEN JUMP HERE
0180   0070             ;               JP      TC1     ;REST OF THIS IS AT TC1
0181   0070 23          TC1:            INC     HL      ;COMPARE THE BYTE THAT
0182   0071 28 07                       JR      Z,TC2   ;FOLLOWS THE RST INST.
0183   0073 C5                          PUSH    BC      ;WITH THE TEXT (DE->)
0184   0074 4E                          LD      C,(HL)  ;IF NOT =, ADD THE 2ND
0185   0075 06 00                       LD      B,0     ;BYTE THAT FOLLOWS THE
0186   0077 09                          ADD     HL,BC   ;RST TO THE OLD PC
0187   0078 C1                          POP     BC      ;I.E., DO A RELATIVE
0188   0079 1B                          DEC     DE      ;JUMP IF NOT =
0189   007A 13          TC2:            INC     DE      ;IF =, SKIP THOSE BYTES
0190   007B 23                          INC     HL      ;AND CONTINUE
0191   007C E3                          EX      (SP),HL
0192   007D C9                          RET
0193   007E             
0194   007E 21 00 00    TSTNUM:         LD      HL,0    ;*** TSTNUM ***
0195   0081 44                          LD      B,H     ;TEST IF THE TEXT IS
0196   0082 EF                          RST     RIGNBLK ;A NUMBER
0197   0083 FE 24                       CP      '$'     ;HEX NUMBER?
0198   0085 28 23                       JR      Z,TX1   ;YES
0199   0087 FE 30       TN1:            CP      '0'     ;IF NOT, RETURN 0 IN
0200   0089 D8                          RET     C       ;B AND HL
0201   008A FE 3A                       CP      '9'+1   ;IF NUMBERS, CONVERT
0202   008C D0                          RET     NC      ;TO BINARY IN HL AND
0203   008D 3E F0                       LD      A,0F0H  ;SET B TO # OF DIGITS
0204   008F A4                          AND     H       ;IF H>15, THERE IS NO
0205   0090 C2 D2 00                    JP      NZ,QHOW ;ROOM FOR NEXT DIGIT
0206   0093 04                          INC     B       ;B COUNTS # OF DIGITS
0207   0094 C5                          PUSH    BC
0208   0095 44                          LD      B,H     ;HL=10*HL+(NEW DIGIT)
0209   0096 4D                          LD      C,L
0210   0097 29                          ADD     HL,HL   ; 2*HL
0211   0098 29                          ADD     HL,HL   ; 4*HL
0212   0099 09                          ADD     HL,BC   ; 5*HL
0213   009A 29                          ADD     HL,HL   ;10*HL
0214   009B 1A                          LD      A,(DE)  ;AND (DIGIT) IS FROM
0215   009C 13                          INC     DE      ;STRIPPING THE ASCII
0216   009D E6 0F                       AND     0FH     ;CODE
0217   009F 85                          ADD     A,L
0218   00A0 6F                          LD      L,A
0219   00A1 3E 00                       LD      A,0
0220   00A3 8C                          ADC     A,H
0221   00A4 67                          LD      H,A
0222   00A5 C1                          POP     BC
0223   00A6 1A                          LD      A,(DE)  ;DO THIS DIGIT AFTER
0224   00A7 F2 87 00                    JP      P,TN1   ;DIGIT. S SAYS OVERFLOW
0225   00AA             
0226   00AA 13          TX1:            INC     DE      ;SKIP TO NEXT HEX
0227   00AB 1A                          LD      A,(DE)  ;GET HEX DIGIT
0228   00AC FE 30                       CP      '0'     ;< '0'
0229   00AE D8                          RET     C       ;ERROR
0230   00AF FE 3A                       CP      '9'+1   ;<= '9'
0231   00B1 38 0A                       JR      C,TX2   ;OK '0'..'9'
0232   00B3 FE 41                       CP      'A'     ;< 'A'
0233   00B5 D8                          RET     C       ;ERROR, >'9' && < 'A'
0234   00B6 E6 5F                       AND     5FH     ;CONVERT ALPHA TO UPPER
0235   00B8 FE 47                       CP      'F'+1   ;> 'F'
0236   00BA D0                          RET     NC      ;ERROR
0237   00BB D6 07                       SUB     'A'-'0'-10      ;SKIP GAP '9' -> 'A'
0238   00BD E6 0F       TX2:            AND     0FH     ;GET HEX CODE 0..F
0239   00BF C5                          PUSH    BC
0240   00C0 47                          LD      B,A     ;SAVE HEX CODE
0241   00C1 3E F0                       LD      A,0F0H  ;IF H>15
0242   00C3 A4                          AND     H       ;THERE IS NO ROOM
0243   00C4 78                          LD      A,B
0244   00C5 C1                          POP     BC
0245   00C6 C2 D2 00                    JP      NZ,QHOW ;FOR NEXT DIGIT
0246   00C9             
0247   00C9 04                          INC     B       ;B COUNTS # OF DIGITS
0248   00CA 29                          ADD     HL,HL   ;2*HL
0249   00CB 29                          ADD     HL,HL   ;4*HL
0250   00CC 29                          ADD     HL,HL   ;8*HL
0251   00CD 29                          ADD     HL,HL   ;16*HL
0252   00CE B5                          OR      L       ;PUT HEX CODE INTO
0253   00CF 6F                          LD      L,A     ;THE 4 LSB OF HL
0254   00D0                             ;MOV  A,H
0255   00D0                             ;ORA  A
0256   00D0 18 D8                       JR      TX1     ;DIGIT AFTER DIGIT
0257   00D2             
0258   00D2 D5          QHOW:           PUSH    DE      ;*** ERROR "HOW?" ***
0259   00D3 11 D9 00    AHOW:           LD      DE,HOW
0260   00D6 C3 2D 05                    JP      ERROR
0261   00D9             
0262   00D9 48 4F 57 3F HOW:            .DB             "HOW?"
0263   00DD 0D          .DB             CR
0264   00DE             
0265   00DE 4F 4B       OK:             .DB             "OK"
0266   00E0 0D          .DB             CR
0267   00E1             
0268   00E1 57 48 41 54 WHAT:           .DB             "WHAT?"
0268   00E5 3F 
0269   00E6 0D          .DB             CR
0270   00E7             
0271   00E7 53 4F 52 52 SORRY:          .DB             "SORRY"
0271   00EB 59 
0272   00EC 0D          .DB             CR
0273   00ED             
0274   00ED             ;*************************************************************
0275   00ED             ;
0276   00ED             ; *** MAIN ***
0277   00ED             ;
0278   00ED             ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
0279   00ED             ; AND STORES IT IN THE MEMORY.
0280   00ED             ;
0281   00ED             ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
0282   00ED             ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
0283   00ED             ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
0284   00ED             ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
0285   00ED             ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
0286   00ED             ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
0287   00ED             ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
0288   00ED             ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
0289   00ED             ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
0290   00ED             ;
0291   00ED             ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
0292   00ED             ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
0293   00ED             ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
0294   00ED             ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
0295   00ED             ;
0296   00ED             ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
0297   00ED             ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
0298   00ED             ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
0299   00ED             ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
0300   00ED             ;
0301   00ED             ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
0302   00ED             ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
0303   00ED             ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
0304   00ED             ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
0305   00ED             ;
0306   00ED 3E C9       INIT1:          LD      A,$C9   ;PUT RET OPCODE
0307   00EF 32 00 0E                    LD      (USRSPC),A ; AT USR CODE SPACE
0308   00F2 31 00 10    WSTART:         LD      SP,STACK
0309   00F5 CD 0E 00    ST1:            CALL    CRLF    ;AND JUMP TO HERE
0310   00F8 11 DE 00                    LD      DE,OK   ;DE->STRING
0311   00FB 97                          SUB     A       ;A=0
0312   00FC CD C1 05                    CALL    PRTSTG  ;PRINT STRING UNTIL CR
0313   00FF 21 06 01                    LD      HL,ST2+1        ;LITERAL 0
0314   0102 22 B8 0E                    LD      (CURRNT),HL     ;CURRENT->LINE # = 0
0315   0105 21 00 00    ST2:            LD      HL,0
0316   0108 22 C0 0E                    LD      (LOPVAR),HL
0317   010B 22 BA 0E                    LD      (STKGOS),HL
0318   010E 3E 3E       ST3:            LD      A,'>'   ;PROMPT '>' AND
0319   0110 CD 5D 05                    CALL    GETLN   ;READ A LINE
0320   0113 D5                          PUSH    DE      ;DE->END OF LINE
0321   0114 11 CC 0E                    LD      DE,BUFFER       ;DE->BEGINNING OF LINE
0322   0117 CD 7E 00                    CALL    TSTNUM  ;TEST IF IT IS A NUMBER
0323   011A EF                          RST     RIGNBLK
0324   011B 7C                          LD      A,H     ;HL=VALUE OF THE # OR
0325   011C B5                          OR      L       ;0 IF NO # WAS FOUND
0326   011D C1                          POP     BC      ;BC->END OF LINE
0327   011E CA 08 07                    JP      Z,DIRECT
0328   0121 1B                          DEC     DE      ;BACKUP DE AND SAVE
0329   0122 7C                          LD      A,H     ;VALUE OF LINE # THERE
0330   0123 12                          LD      (DE),A
0331   0124 1B                          DEC     DE
0332   0125 7D                          LD      A,L
0333   0126 12                          LD      (DE),A
0334   0127 C5                          PUSH    BC      ;BC,DE->BEGIN, END
0335   0128 D5                          PUSH    DE
0336   0129 79                          LD      A,C
0337   012A 93                          SUB     E
0338   012B F5                          PUSH    AF      ;A=# OF BYTES IN LINE
0339   012C CD 9C 05                    CALL    FNDLN   ;FIND THIS LINE IN SAVE
0340   012F D5                          PUSH    DE      ;AREA, DE->SAVE AREA
0341   0130 20 10                       JR      NZ,ST4  ;NZ:NOT FOUND, INSERT
0342   0132 D5                          PUSH    DE      ;Z:FOUND, DELETE IT
0343   0133 CD B7 05                    CALL    FNDNXT  ;FIND NEXT LINE
0344   0136                                             ;DE->NEXT LINE
0345   0136 C1                          POP     BC      ;BC->LINE TO BE DELETED
0346   0137 2A B6 0E                    LD      HL,(TXTUNF)     ;HL->UNFILLED SAVE AREA
0347   013A CD 7A 06                    CALL    MVUP    ;MOVE UP TO DELETE
0348   013D 60                          LD      H,B     ;TXTUNF->UNFILLED AREA
0349   013E 69                          LD      L,C
0350   013F 22 B6 0E                    LD      (TXTUNF),HL     ;UPDATE
0351   0142 C1          ST4:            POP     BC      ;GET READY TO INSERT
0352   0143 2A B6 0E                    LD      HL,(TXTUNF)     ;BUT FIRST CHECK IF
0353   0146 F1                          POP     AF      ;THE LENGTH OF NEW LINE
0354   0147 E5                          PUSH    HL      ;IS 3 (LINE # AND CR)
0355   0148 FE 03                       CP      3       ;THEN DO NOT INSERT
0356   014A CA F2 00                    JP      Z,WSTART ;MUST CLEAR THE STACK
0357   014D 85                          ADD     A,L     ;COMPUTE NEW TXTUNF
0358   014E 6F                          LD      L,A
0359   014F 3E 00                       LD      A,0
0360   0151 8C                          ADC     A,H
0361   0152 67                          LD      H,A     ;HL->NEW UNFILLED AREA
0362   0153 11 00 0E                    LD      DE,TXTEND       ;CHECK TO SEE IF THERE
0363   0156 E7                          RST     RCOMP   ;COMP HL,DE - IS ENOUGH SPACE
0364   0157 D2 56 05                    JP      NC,QSORRY       ;SORRY, NO ROOM FOR IT
0365   015A 22 B6 0E                    LD      (TXTUNF),HL     ;OK, UPDATE TXTUNF
0366   015D D1                          POP     DE      ;DE->OLD UNFILLED AREA
0367   015E CD 82 06                    CALL    MVDOWN
0368   0161 D1                          POP     DE      ;DE->BEGIN, HL->END
0369   0162 E1                          POP     HL
0370   0163 CD 7A 06                    CALL    MVUP    ;MOVE NEW LINE TO SAVE
0371   0166 18 A6                       JR      ST3     ;AREA
0372   0168             
0373   0168             ;*************************************************************
0374   0168             ;
0375   0168             ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
0376   0168             ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
0377   0168             ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
0378   0168             ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
0379   0168             ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
0380   0168             ;
0381   0168             ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'WSTART'
0382   0168             ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
0383   0168             ; GO BACK TO 'WSTART'.
0384   0168             ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
0385   0168             ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
0386   0168             ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'WSTART', ELSE
0387   0168             ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
0388   0168             ;*************************************************************
0389   0168             ;
0390   0168             ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
0391   0168             ;
0392   0168             ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
0393   0168             ;
0394   0168             ; 'STOP(CR)' GOES BACK TO 'WSTART'
0395   0168             ;
0396   0168             ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
0397   0168             ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
0398   0168             ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
0399   0168             ;
0400   0168             ; THERE ARE 3 MORE ENTRIES IN 'RUN':
0401   0168             ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
0402   0168             ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
0403   0168             ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
0404   0168             ;
0405   0168             ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
0406   0168             ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
0407   0168             ;
0408   0168 CD 25 05    NEW:            CALL    ENDCHK  ;*** NEW(CR) ***
0409   016B 21 00 08                    LD      HL,TXTBGN
0410   016E 22 B6 0E                    LD      (TXTUNF),HL
0411   0171             ;
0412   0171 CD 25 05    STOP:           CALL    ENDCHK  ;*** STOP(CR) ***
0413   0174 C3 F2 00                    JP      WSTART
0414   0177             
0415   0177 CD 25 05    RUN:            CALL    ENDCHK  ;*** RUN(CR) ***
0416   017A 11 00 08                    LD      DE,TXTBGN       ;FIRST SAVED LINE
0417   017D             ;
0418   017D 21 00 00    RUNNXL:         LD      HL,0    ;*** RUNNXL ***
0419   0180 CD A4 05                    CALL    FNDLP   ;FIND WHATEVER LINE #
0420   0183 DA F2 00                    JP      C,WSTART ;C:PASSED TXTUNF, QUIT
0421   0186             ;
0422   0186 EB          RUNTSL:         EX      DE,HL   ;*** RUNTSL ***
0423   0187 22 B8 0E                    LD      (CURRNT),HL     ;SET 'CURRENT'->LINE #
0424   018A EB                          EX      DE,HL
0425   018B 13                          INC     DE      ;BUMP PASS LINE #
0426   018C 13                          INC     DE
0427   018D             ;
0428   018D CD EF 06    RUNSML:         CALL    CHKIO   ;*** RUNSML ***
0429   0190 21 4C 07                    LD      HL,TAB2-1       ;FIND COMMAND IN TAB2
0430   0193 C3 0B 07                    JP      EXEC    ;AND EXECUTE IT
0431   0196             
0432   0196 DF          GOTO:           RST     REXPR   ;*** GOTO EXPR ***
0433   0197 D5                          PUSH    DE      ;SAVE FOR ERROR ROUTINE
0434   0198 CD 25 05                    CALL    ENDCHK  ;MUST FIND A CR
0435   019B CD 9C 05                    CALL    FNDLN   ;FIND THE TARGET LINE
0436   019E C2 D3 00                    JP      NZ,AHOW ;NO SUCH LINE #
0437   01A1 F1                          POP     AF      ;CLEAR THE PUSH DE
0438   01A2 C3 86 01                    JP      RUNTSL  ;GO DO IT
0439   01A5             ;
0440   01A5             ;*************************************************************
0441   01A5             ;
0442   01A5             ; *** LIST *** & PRINT ***
0443   01A5             ;
0444   01A5             ; LIST HAS TWO FORMS:
0445   01A5             ; 'LIST(CR)' LISTS ALL SAVED LINES
0446   01A5             ; 'LIST #(CR)' START LIST AT THIS LINE #
0447   01A5             ; YOU CAN STOP THE LISTING BY CONTROL C KEY
0448   01A5             ;
0449   01A5             ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
0450   01A5             ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
0451   01A5             ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
0452   01A5             ;
0453   01A5             ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
0454   01A5             ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
0455   01A5             ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
0456   01A5             ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
0457   01A5             ; SPECIFIED, 8 POSITIONS WILL BE USED.
0458   01A5             ;
0459   01A5             ; NUMBER BASE IS SET BY PERCENT SIGN FOLLOEWED BY A NUMBER
0460   01A5             ; BETWEEN 2 and 16. VALUES ARE PRINTED AS UNSIGNED TO THIS BASE
0461   01A5             ; FOR THE REST OF THIS PRINT COMMAND UNLESS CHANGED BY
0462   01A5             ; ANOTHER BASE. IF NO BASE IS PROVIDED NUMBERS ARE SIGNED DECIMAL.
0463   01A5             ;
0464   01A5             ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
0465   01A5             ; DOUBLE QUOTES.
0466   01A5             ;
0467   01A5             ; A BACK-ARROW (UNDERLINE) ALONE MEANS GENERATE A (CR) WITHOUT (LF).
0468   01A5             ;
0469   01A5             ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
0470   01A5             ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
0471   01A5             ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
0472   01A5             ;
0473   01A5 CD 7E 00    LIST:           CALL    TSTNUM  ;TEST IF THERE IS A #
0474   01A8 CD 25 05                    CALL    ENDCHK  ;IF NO # WE GET A 0
0475   01AB CD 9C 05                    CALL    FNDLN   ;FIND THIS OR NEXT LINE
0476   01AE DA F2 00    LS1:            JP      C,WSTART ;C:PASSED TXTUNF
0477   01B1 CD 63 06                    CALL    PRTLN   ;PRINT THE LINE
0478   01B4 CD EF 06                    CALL    CHKIO   ;STOP IF HIT CONTROL-C
0479   01B7 CD A4 05                    CALL    FNDLP   ;FIND NEXT LINE
0480   01BA 18 F2                       JR      LS1     ;AND LOOP BACK
0481   01BC             
0482   01BC 0E 08       PRINT:          LD      C,8     ;C = # OF SPACES
0483   01BE AF                          XOR     A       ;DEFAULT BASE FOR PRTNUM
0484   01BF 32 B5 0E                    LD      (PNBASE),A
0485   01C2 CF                          TSTCH(';',PR2)  ;IF NULL LIST & ";"
0485   01C3 3B          
0485   01C4 06          
0486   01C5 CD 0E 00                    CALL    CRLF    ;GIVE CR-LF AND
0487   01C8 C3 8D 01                    JP      RUNSML  ;CONTINUE SAME LINE
0488   01CB CF          PR2:            TSTCH(CR,PR0)   ;IF NULL LIST (CR)
0488   01CC 0D          
0488   01CD 06          
0489   01CE CD 0E 00                    CALL    CRLF    ;ALSO GIVE CR-LF AND
0490   01D1 C3 7D 01                    JP      RUNNXL  ;GO TO NEXT LINE
0491   01D4 CF          PR0:            TSTCH('#',PR5)  ;ELSE IS IT FORMAT?
0491   01D5 23          
0491   01D6 04          
0492   01D7 DF                          RST     REXPR   ;YES, EVALUATE EXPR.
0493   01D8 4D                          LD      C,L     ;AND SAVE IT IN C
0494   01D9 18 19                       JR      PR3     ;LOOK FOR MORE TO PRINT
0495   01DB CF          PR5:            TSTCH('%',PR1)  ;ELSE IS IT PRTNUM BASE?
0495   01DC 25          
0495   01DD 11          
0496   01DE DF                          RST     REXPR   ;YES, EVALUATE EXPR.
0497   01DF 7D                          LD      A,L     ;GET THE LOW PART
0498   01E0 FE 01                       CP      1       ;EITHER 0 OR >= 2?
0499   01E2 CA D2 00                    JP      Z,QHOW  ;ERROR
0500   01E5 FE 11                       CP      17      ;BASE > 16?
0501   01E7 D2 D2 00                    JP      NC,QHOW ;ERROR
0502   01EA 32 B5 0E                    LD      (PNBASE),A      ;IN PNBASE
0503   01ED 18 05                       JR      PR3     ;LOOK FOR MORE TO PRINT
0504   01EF CD CC 05    PR1:            CALL    QTSTG   ;OR IS IT A STRING?
0505   01F2 18 10                       JR      PR8     ;IF NOT, MUST BE EXPR.
0506   01F4 CF          PR3:            TSTCH($2C,PR6)  ;IF ",", GO FIND NEXT
0506   01F5 2C          
0506   01F6 05          
0507   01F7 CD 16 05                    CALL    FIN     ;IN THE LIST.
0508   01FA 18 D8                       JR      PR0     ;LIST CONTINUES
0509   01FC AF          PR6:            XOR     A       ;END OF LIST REACHED
0510   01FD 32 B5 0E                    LD      (PNBASE),A      ;RESET DEFAULT BASE
0511   0200 CD 0E 00                    CALL    CRLF    ;LIST ENDS WITH CRLF
0512   0203 F7                          RST     RFINISH ;FINISH
0513   0204 DF          PR8:            RST     REXPR   ;EVALUATE THE EXPR
0514   0205 C5                          PUSH    BC
0515   0206 CD FC 05                    CALL    PRTNUM  ;PRINT THE VALUE
0516   0209 C1                          POP     BC
0517   020A 18 E8                       JR      PR3     ;MORE TO PRINT?
0518   020C             ;
0519   020C             ;*************************************************************
0520   020C             ;
0521   020C             ; *** GOSUB *** & RETURN ***
0522   020C             ;
0523   020C             ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
0524   020C             ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
0525   020C             ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
0526   020C             ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
0527   020C             ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
0528   020C             ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
0529   020C             ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
0530   020C             ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
0531   020C             ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
0532   020C             ;
0533   020C             ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
0534   020C             ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
0535   020C             ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
0536   020C             ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
0537   020C             ;
0538   020C CD AB 06    GOSUB:          CALL    PUSHA   ;SAVE THE CURRENT "FOR"
0539   020F DF                          RST     REXPR   ;PARAMETERS
0540   0210 D5                          PUSH    DE      ;AND TEXT POINTER
0541   0211 CD 9C 05                    CALL    FNDLN   ;FIND THE TARGET LINE
0542   0214 C2 D3 00                    JP      NZ,AHOW ;NOT THERE. SAY "HOW?"
0543   0217 2A B8 0E                    LD      HL,(CURRNT)     ;FOUND IT, SAVE OLD
0544   021A E5                          PUSH    HL      ;'CURRNT' OLD 'STKGOS'
0545   021B 2A BA 0E                    LD      HL,(STKGOS)
0546   021E E5                          PUSH    HL
0547   021F 21 00 00                    LD      HL,0    ;AND LOAD NEW ONES
0548   0222 22 C0 0E                    LD      (LOPVAR),HL
0549   0225 39                          ADD     HL,SP
0550   0226 22 BA 0E                    LD      (STKGOS),HL
0551   0229 C3 86 01                    JP      RUNTSL  ;THEN RUN THAT LINE
0552   022C CD 25 05    RETURN:         CALL    ENDCHK  ;THERE MUST BE A CR
0553   022F 2A BA 0E                    LD      HL,(STKGOS)     ;OLD STACK POINTER
0554   0232 7C                          LD      A,H     ;0 MEANS NOT EXIST
0555   0233 B5                          OR      L
0556   0234 CA 29 05                    JP      Z,QWHAT ;SO, WE SAY: "WHAT?"
0557   0237 F9                          LD      SP,HL   ;ELSE, RESTORE IT
0558   0238 E1                          POP     HL
0559   0239 22 BA 0E                    LD      (STKGOS),HL     ;AND THE OLD 'STKGOS'
0560   023C E1                          POP     HL
0561   023D 22 B8 0E                    LD      (CURRNT),HL     ;AND THE OLD 'CURRNT'
0562   0240 D1                          POP     DE      ;OLD TEXT POINTER
0563   0241 CD 8F 06                    CALL    POPA    ;OLD "FOR" PARAMETERS
0564   0244 F7                          RST     RFINISH ;AND WE ARE BACK HOME
0565   0245             ;
0566   0245             ;*************************************************************
0567   0245             ;
0568   0245             ; *** FOR *** & NEXT ***
0569   0245             ;
0570   0245             ; 'FOR' HAS TWO FORMS:
0571   0245             ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
0572   0245             ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
0573   0245             ; EXP3=1.  (I.E., WITH A STEP OF +1.)
0574   0245             ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
0575   0245             ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
0576   0245             ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
0577   0245             ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
0578   0245             ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
0579   0245             ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
0580   0245             ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
0581   0245             ; BEFORE THE NEW ONE OVERWRITES IT.
0582   0245             ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
0583   0245             ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
0584   0245             ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
0585   0245             ; (PURGED FROM THE STACK..)
0586   0245             ;
0587   0245             ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
0588   0245             ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
0589   0245             ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
0590   0245             ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
0591   0245             ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
0592   0245             ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
0593   0245             ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
0594   0245             ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
0595   0245             ; IS PURGED AND EXECUTION CONTINUES.
0596   0245             ;
0597   0245 CD AB 06    FOR:            CALL    PUSHA           ;SAVE THE OLD SAVE AREA
0598   0248 CD 03 05                    CALL    SETVAL          ;SET THE CONTROL VAR.
0599   024B 2B                          DEC     HL              ;HL IS ITS ADDRESS
0600   024C 22 C0 0E                    LD      (LOPVAR),HL     ;SAVE THAT
0601   024F 21 C4 07                    LD      HL,TAB5-1       ;USE 'EXEC' TO LOOK
0602   0252 C3 0B 07                    JP      EXEC            ;FOR THE WORD 'TO'
0603   0255 DF          FR1:            RST     REXPR           ;EVALUATE THE LIMIT
0604   0256 22 C4 0E                    LD      (LOPLMT),HL     ;SAVE THAT
0605   0259 21 CA 07                    LD      HL,TAB6-1       ;USE 'EXEC' TO LOOK
0606   025C C3 0B 07                    JP      EXEC            ;FOR THE WORD 'STEP'
0607   025F DF          FR2:            RST     REXPR           ;FOUND IT, GET STEP
0608   0260 18 03                       JR      FR4
0609   0262 21 01 00    FR3:            LD      HL,1H           ;NOT FOUND, SET TO 1
0610   0265 22 C2 0E    FR4:            LD      (LOPINC),HL     ;SAVE THAT TOO
0611   0268 2A B8 0E    FR5:            LD      HL,(CURRNT)     ;SAVE CURRENT LINE #
0612   026B 22 C6 0E                    LD      (LOPLN),HL
0613   026E EB                          EX      DE,HL           ;AND TEXT POINTER
0614   026F 22 C8 0E                    LD      (LOPPT),HL
0615   0272 01 0A 00                    LD      BC,0AH          ;DIG INTO STACK TO
0616   0275 2A C0 0E                    LD      HL,(LOPVAR)     ;FIND 'LOPVAR'
0617   0278 EB                          EX      DE,HL
0618   0279 60                          LD      H,B
0619   027A 68                          LD      L,B             ;HL=0 NOW
0620   027B 39                          ADD     HL,SP           ;HERE IS THE STACK
0621   027C 3E                          .DB     3EH             ;SKIP "ADD HL,BC"
0622   027D 09          FR7:            ADD     HL,BC           ;EACH LEVEL IS 10 DEEP
0623   027E 7E                          LD      A,(HL)          ;GET THAT OLD 'LOPVAR'
0624   027F 23                          INC     HL
0625   0280 B6                          OR      (HL)
0626   0281 28 18                       JR      Z,FR8           ;0 SAYS NO MORE IN IT
0627   0283 7E                          LD      A,(HL)
0628   0284 2B                          DEC     HL
0629   0285 BA                          CP      D               ;SAME AS THIS ONE?
0630   0286 20 F5                       JR      NZ,FR7
0631   0288 7E                          LD      A,(HL)          ;THE OTHER HALF?
0632   0289 BB                          CP      E
0633   028A 20 F1                       JR      NZ,FR7
0634   028C EB                          EX      DE,HL           ;YES, FOUND ONE
0635   028D 21 00 00                    LD      HL,0H
0636   0290 39                          ADD     HL,SP           ;TRY TO MOVE SP
0637   0291 44                          LD      B,H
0638   0292 4D                          LD      C,L
0639   0293 21 0A 00                    LD      HL,0AH
0640   0296 19                          ADD     HL,DE
0641   0297 CD 82 06                    CALL    MVDOWN          ;AND PURGE 10 WORDS
0642   029A F9                          LD      SP,HL           ;IN THE STACK
0643   029B 2A C8 0E    FR8:            LD      HL,(LOPPT)      ;JOB DONE, RESTORE DE
0644   029E EB                          EX      DE,HL
0645   029F F7                          RST     RFINISH         ;AND CONTINUE
0646   02A0             ;
0647   02A0 FF          NEXT:           RST     RTSTV           ;GET ADDRESS OF VAR.
0648   02A1 DA 29 05                    JP      C,QWHAT         ;NO VARIABLE, "WHAT?"
0649   02A4 22 BC 0E                    LD      (VARNXT),HL     ;YES, SAVE IT
0650   02A7 D5          NX0:            PUSH    DE              ;SAVE TEXT POINTER
0651   02A8 EB                          EX      DE,HL
0652   02A9 2A C0 0E                    LD      HL,(LOPVAR)     ;GET VAR. IN 'FOR'
0653   02AC 7C                          LD      A,H
0654   02AD B5                          OR      L               ;0 SAYS NEVER HAD ONE
0655   02AE CA 2A 05                    JP      Z,AWHAT         ;SO WE ASK: "WHAT?"
0656   02B1 E7                          RST     RCOMP           ;ELSE WE CHECK THEM
0657   02B2 28 09                       JR      Z,NX3           ;OK, THEY AGREE
0658   02B4 D1                          POP     DE              ;NO, LET'S SEE
0659   02B5 CD 8F 06                    CALL    POPA            ;PURGE CURRENT LOOP
0660   02B8 2A BC 0E                    LD      HL,(VARNXT)     ;AND POP ONE LEVEL
0661   02BB 18 EA                       JR      NX0             ;GO CHECK AGAIN
0662   02BD 5E          NX3:            LD      E,(HL)          ;COME HERE WHEN AGREED
0663   02BE 23                          INC     HL
0664   02BF 56                          LD      D,(HL)          ;DE=VALUE OF VAR.
0665   02C0 2A C2 0E                    LD      HL,(LOPINC)
0666   02C3 E5                          PUSH    HL
0667   02C4 7C                          LD      A,H
0668   02C5 AA                          XOR     D
0669   02C6 7A                          LD      A,D
0670   02C7 19                          ADD     HL,DE           ;ADD ONE STEP
0671   02C8 FA CF 02                    JP      M,NX4
0672   02CB AC                          XOR     H
0673   02CC FA F0 02                    JP      M,NX5
0674   02CF EB          NX4:            EX      DE,HL
0675   02D0 2A C0 0E                    LD      HL,(LOPVAR)     ;PUT IT BACK
0676   02D3 73                          LD      (HL),E
0677   02D4 23                          INC     HL
0678   02D5 72                          LD      (HL),D
0679   02D6 2A C4 0E                    LD      HL,(LOPLMT)     ;HL->LIMIT
0680   02D9 F1                          POP     AF              ;OLD HL
0681   02DA B7                          OR      A
0682   02DB F2 DF 02                    JP      P,NX1           ;STEP > 0
0683   02DE EB                          EX      DE,HL           ;STEP < 0
0684   02DF CD FB 04    NX1:            CALL    CKHLDE          ;COMPARE WITH LIMIT
0685   02E2 D1                          POP     DE              ;RESTORE TEXT POINTER
0686   02E3 38 0D                       JR      C,NX2           ;OUTSIDE LIMIT
0687   02E5 2A C6 0E                    LD      HL,(LOPLN)      ;WITHIN LIMIT, GO
0688   02E8 22 B8 0E                    LD      (CURRNT),HL     ;BACK TO THE SAVED
0689   02EB 2A C8 0E                    LD      HL,(LOPPT)      ;'CURRNT' AND TEXT
0690   02EE EB                          EX      DE,HL           ;POINTER
0691   02EF F7                          RST     RFINISH
0692   02F0 E1          NX5:            POP     HL
0693   02F1 D1                          POP     DE
0694   02F2 CD 8F 06    NX2:            CALL    POPA            ;PURGE THIS LOOP
0695   02F5 F7                          RST     RFINISH
0696   02F6             ;
0697   02F6             ;*************************************************************
0698   02F6             ;
0699   02F6             ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
0700   02F6             ;
0701   02F6             ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
0702   02F6             ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
0703   02F6             ;
0704   02F6             ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
0705   02F6             ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
0706   02F6             ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
0707   02F6             ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
0708   02F6             ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
0709   02F6             ; EXECUTION CONTINUES AT THE NEXT LINE.
0710   02F6             ;
0711   02F6             ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
0712   02F6             ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
0713   02F6             ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
0714   02F6             ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
0715   02F6             ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
0716   02F6             ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
0717   02F6             ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
0718   02F6             ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
0719   02F6             ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
0720   02F6             ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
0721   02F6             ;
0722   02F6             ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
0723   02F6             ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
0724   02F6             ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
0725   02F6             ; THIS IS HANDLED IN 'INPERR'.
0726   02F6             ;
0727   02F6             ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
0728   02F6             ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
0729   02F6             ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
0730   02F6             ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
0731   02F6             ; THIS IS DONE BY 'DEFLT'.
0732   02F6             ;
0733   02F6 21 00 00    REM:            LD      HL,0H   ;*** REM ***
0734   02F9 3E          .DB             3EH             ;SKIP RST, THIS IS LIKE 'IF 0'
0735   02FA             ;
0736   02FA DF          IFF:            RST     REXPR   ;*** IF ***
0737   02FB 7C                          LD      A,H     ;IS THE EXPR.=0?
0738   02FC B5                          OR      L
0739   02FD C2 8D 01                    JP      NZ,RUNSML       ;NO, CONTINUE
0740   0300 CD B9 05                    CALL    FNDSKP  ;YES, SKIP REST OF LINE
0741   0303 D2 86 01                    JP      NC,RUNTSL       ;AND RUN THE NEXT LINE
0742   0306 C3 F2 00                    JP      WSTART  ;IF NO NEXT, RE-START
0743   0309             ;
0744   0309 2A BE 0E    INPERR:         LD      HL,(STKINP)     ;*** INPERR ***
0745   030C F9                          LD      SP,HL   ;RESTORE OLD SP
0746   030D E1                          POP     HL      ;AND OLD 'CURRNT'
0747   030E 22 B8 0E                    LD      (CURRNT),HL
0748   0311 D1                          POP     DE      ;AND OLD TEXT POINTER
0749   0312 D1                          POP     DE      ;REDO INPUT
0750   0313             ;
0751   0313             INPUT:          ;*** INPUT ***
0752   0313 D5          IP1:            PUSH    DE      ;SAVE IN CASE OF ERROR
0753   0314 CD CC 05                    CALL    QTSTG   ;IS NEXT ITEM A STRING?
0754   0317 18 05                       JR      IP2     ;NO
0755   0319 FF                          RST     RTSTV   ;YES, BUT FOLLOWED BY A
0756   031A 38 39                       JR      C,IP4   ;VARIABLE?   NO.
0757   031C 18 10                       JR      IP3     ;YES.  INPUT VARIABLE
0758   031E D5          IP2:            PUSH    DE      ;SAVE FOR 'PRTSTG'
0759   031F FF                          RST     RTSTV   ;MUST BE VARIABLE NOW
0760   0320 DA 29 05                    JP      C,QWHAT ;"WHAT?" IT IS NOT?
0761   0323 1A                          LD      A,(DE)  ;GET READY FOR 'PRTSTG'
0762   0324 4F                          LD      C,A
0763   0325 97                          SUB     A
0764   0326 12                          LD      (DE),A
0765   0327 D1                          POP     DE
0766   0328 CD C1 05                    CALL    PRTSTG  ;PRINT STRING AS PROMPT
0767   032B 79                          LD      A,C     ;RESTORE TEXT
0768   032C 1B                          DEC     DE
0769   032D 12                          LD      (DE),A
0770   032E D5          IP3:            PUSH    DE      ;SAVE TEXT POINTER
0771   032F EB                          EX      DE,HL
0772   0330 2A B8 0E                    LD      HL,(CURRNT)     ;ALSO SAVE 'CURRNT'
0773   0333 E5                          PUSH    HL
0774   0334 21 13 03                    LD      HL,IP1  ;A NEGATIVE NUMBER
0775   0337 22 B8 0E                    LD      (CURRNT),HL     ;AS A FLAG
0776   033A 21 00 00                    LD      HL,0H   ;SAVE SP TOO
0777   033D 39                          ADD     HL,SP
0778   033E 22 BE 0E                    LD      (STKINP),HL
0779   0341 D5                          PUSH    DE      ;OLD HL
0780   0342 3E 3A                       LD      A,':'   ;PRINT THIS TOO
0781   0344 CD 5D 05                    CALL    GETLN   ;AND GET A LINE
0782   0347 11 CC 0E                    LD      DE,BUFFER       ;POINTS TO BUFFER
0783   034A DF                          RST     REXPR   ;EVALUATE INPUT
0784   034B             ;NOP                             ;CAN BE 'CALL ENDCHK'
0785   034B             ;NOP
0786   034B             ;NOP
0787   034B D1                          POP     DE      ;OK, GET OLD HL
0788   034C EB                          EX      DE,HL
0789   034D 73                          LD      (HL),E  ;SAVE VALUE IN VAR.
0790   034E 23                          INC     HL
0791   034F 72                          LD      (HL),D
0792   0350 E1                          POP     HL      ;GET OLD 'CURRNT'
0793   0351 22 B8 0E                    LD      (CURRNT),HL
0794   0354 D1                          POP     DE      ;AND OLD TEXT POINTER
0795   0355 F1          IP4:            POP     AF      ;PURGE JUNK IN STACK
0796   0356 CF                          TSTCH($2C,IP5)  ;IS NEXT CH. ','?
0796   0357 2C          
0796   0358 02          
0797   0359 18 B8                       JR      IP1     ;YES, MORE ITEMS.
0798   035B F7          IP5:            RST     RFINISH
0799   035C             ;
0800   035C 1A          DEFLT:          LD      A,(DE)  ;***  DEFLT ***
0801   035D FE 0D                       CP      CR      ;EMPTY LINE IS OK
0802   035F 28 08                       JR      Z,LT1   ;ELSE IT IS 'LET'
0803   0361             ;
0804   0361 CD 03 05    LET:            CALL    SETVAL  ;*** LET ***
0805   0364 CF                          TSTCH($2C,LT1)  ;SET VALUE TO VAR.
0805   0365 2C          
0805   0366 02          
0806   0367 18 F8                       JR      LET     ;ITEM BY ITEM
0807   0369 F7          LT1:            RST     RFINISH ;UNTIL FINISH
0808   036A             ;
0809   036A             ;*************************************************************
0810   036A             ;
0811   036A             ; *** EXPR ***
0812   036A             ;
0813   036A             ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
0814   036A             ; <EXPR>::<EXPR2>
0815   036A             ;         <EXPR2><REL.OP.><EXPR2>
0816   036A             ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
0817   036A             ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
0818   036A             ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
0819   036A             ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
0820   036A             ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
0821   036A             ; <EXPR4>::=<VARIABLE>
0822   036A             ;           <FUNCTION>
0823   036A             ;           (<EXPR>)
0824   036A             ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
0825   036A             ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
0826   036A             ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
0827   036A             ;
0828   036A             ;EXPR:          CALL    EXPR2   ;THIS IS AT LOC. 18
0829   036A             ;               PUSH    HL      ;SAVE <EXPR2> VALUE
0830   036A             ;               JP      EXPR1   ;REST OF IT AT EXPR1
0831   036A 21 D2 07    EXPR1:          LD      HL,TAB8-1       ;LOOKUP REL.OP.
0832   036D C3 0B 07                    JP      EXEC    ;GO DO IT
0833   0370             ;
0834   0370 CD 99 03    XP11:           CALL    XP18    ;REL.OP.">="
0835   0373 D8                          RET     C       ;NO, RETURN HL=0
0836   0374 6F                          LD      L,A     ;YES, RETURN HL=1
0837   0375 C9                          RET
0838   0376             ;
0839   0376 CD 99 03    XP12:           CALL    XP18    ;REL.OP."#"
0840   0379 C8                          RET     Z       ;FALSE, RETURN HL=0
0841   037A 6F                          LD      L,A     ;TRUE, RETURN HL=1
0842   037B C9                          RET
0843   037C             ;
0844   037C CD 99 03    XP13:           CALL    XP18    ;REL.OP.">"
0845   037F C8                          RET     Z       ;FALSE
0846   0380 D8                          RET     C       ;ALSO FALSE, HL=0
0847   0381 6F                          LD      L,A     ;TRUE, HL=1
0848   0382 C9                          RET
0849   0383             ;
0850   0383 CD 99 03    XP14:           CALL    XP18    ;REL.OP."<="
0851   0386 6F                          LD      L,A     ;SET HL=1
0852   0387 C8                          RET     Z       ;REL. TRUE, RETURN
0853   0388 D8                          RET     C
0854   0389 6C                          LD      L,H     ;ELSE SET HL=0
0855   038A C9                          RET
0856   038B             ;
0857   038B CD 99 03    XP15:           CALL    XP18    ;REL.OP."="
0858   038E C0                          RET     NZ      ;FALSE, RETURN HL=0
0859   038F 6F                          LD      L,A     ;ELSE SET HL=1
0860   0390 C9                          RET
0861   0391             ;
0862   0391 CD 99 03    XP16:           CALL    XP18    ;REL.OP."<"
0863   0394 D0                          RET     NC      ;FALSE, RETURN HL=0
0864   0395 6F                          LD      L,A     ;ELSE SET HL=1
0865   0396 C9                          RET
0866   0397             ;
0867   0397 E1          XP17:           POP     HL      ;NOT .REL.OP
0868   0398 C9                          RET             ;RETURN HL=<EXPR2>
0869   0399             ;
0870   0399 79          XP18:           LD      A,C     ;SUBROUTINE FOR ALL
0871   039A E1                          POP     HL      ;REL.OP.'S
0872   039B C1                          POP     BC
0873   039C E5                          PUSH    HL      ;REVERSE TOP OF STACK
0874   039D C5                          PUSH    BC
0875   039E 4F                          LD      C,A
0876   039F CD AE 03                    CALL    EXPR2   ;GET 2ND <EXPR2>
0877   03A2 EB                          EX      DE,HL   ;VALUE IN DE NOW
0878   03A3 E3                          EX      (SP),HL ;1ST <EXPR2> IN HL
0879   03A4 CD FB 04                    CALL    CKHLDE  ;COMPARE 1ST WITH 2ND
0880   03A7 D1                          POP     DE      ;RESTORE TEXT POINTER
0881   03A8 21 00 00                    LD      HL,0H   ;SET HL=0, A=1
0882   03AB 3E 01                       LD      A,1
0883   03AD C9                          RET
0884   03AE             ;
0885   03AE CF          EXPR2:          TSTCH('-',XP21) ;NEGATIVE SIGN?
0885   03AF 2D          
0885   03B0 05          
0886   03B1 21 00 00                    LD      HL,0H   ;YES, FAKE '0-'
0887   03B4 18 21                       JR      XP26    ;TREAT LIKE SUBTRACT
0888   03B6             ;
0889   03B6 CF          XP21:           TSTCH('+',XP22) ;POSITIVE SIGN? IGNORE
0889   03B7 2B          
0889   03B8 00          
0890   03B9 CD E0 03    XP22:           CALL    EXPR3   ;1ST <EXPR3>
0891   03BC CF          XP23:           TSTCH('+',XP25) ;ADD?
0891   03BD 2B          
0891   03BE 15          
0892   03BF E5                          PUSH    HL      ;YES, SAVE VALUE
0893   03C0 CD E0 03                    CALL    EXPR3   ;GET 2ND <EXPR3>
0894   03C3 EB          XP24:           EX      DE,HL   ;2ND IN DE
0895   03C4 E3                          EX      (SP),HL ;1ST IN HL
0896   03C5 7C                          LD      A,H     ;COMPARE SIGN
0897   03C6 AA                          XOR     D
0898   03C7 7A                          LD      A,D
0899   03C8 19                          ADD     HL,DE
0900   03C9 D1                          POP     DE      ;RESTORE TEXT POINTER
0901   03CA FA BC 03                    JP      M,XP23  ;1ST AND 2ND SIGN DIFFER
0902   03CD AC                          XOR     H       ;1ST AND 2ND SIGN EQUAL
0903   03CE F2 BC 03                    JP      P,XP23  ;SO IS RESULT
0904   03D1             ;
0905   03D1 C3 D2 00                    JP      QHOW    ;ELSE WE HAVE OVERFLOW
0906   03D4             ;
0907   03D4 CF          XP25:           TSTCH('-',XP42) ;SUBTRACT?
0907   03D5 2D          
0907   03D6 7E          
0908   03D7 E5          XP26:           PUSH    HL      ;YES, SAVE 1ST <EXPR3>
0909   03D8 CD E0 03                    CALL    EXPR3   ;GET 2ND <EXPR3>
0910   03DB CD E6 04                    CALL    CHGSGN  ;NEGATE
0911   03DE 18 E3                       JR      XP24    ;AND ADD THEM
0912   03E0             ;
0913   03E0 CD 3A 04    EXPR3:          CALL    EXPR4   ;GET 1ST <EXPR4>
0914   03E3 CF          XP31:           TSTCH('*',XP34) ;MULTIPLY?
0914   03E4 2A          
0914   03E5 28          
0915   03E6 E5                          PUSH    HL      ;YES, SAVE 1ST
0916   03E7 CD 3A 04                    CALL    EXPR4   ;AND GET 2ND <EXPR4>
0917   03EA 06 00                       LD      B,0H    ;CLEAR B FOR SIGN
0918   03EC CD E3 04                    CALL    CHKSGN  ;CHECK SIGN
0919   03EF E3                          EX      (SP),HL ;1ST IN HL
0920   03F0 CD E3 04                    CALL    CHKSGN  ;CHECK SIGN OF 1ST
0921   03F3 EB                          EX      DE,HL
0922   03F4 E3                          EX      (SP),HL
0923   03F5 7C                          LD      A,H     ;IS HL > 255 ?
0924   03F6 B7                          OR      A
0925   03F7 28 06                       JR      Z,XP32  ;NO
0926   03F9 7A                          LD      A,D     ;YES, HOW ABOUT DE
0927   03FA B2                          OR      D
0928   03FB EB                          EX      DE,HL   ;PUT SMALLER IN HL
0929   03FC C2 D3 00                    JP      NZ,AHOW ;ALSO >, WILL OVERFLOW
0930   03FF 7D          XP32:           LD      A,L     ;THIS IS DUMB
0931   0400 21 00 00                    LD      HL,0H   ;CLEAR RESULT
0932   0403 B7                          OR      A       ;ADD AND COUNT
0933   0404 28 27                       JR      Z,XP35
0934   0406 19          XP33:           ADD     HL,DE
0935   0407 38 CA                       JR      C,AHOW  ;OVERFLOW
0936   0409 3D                          DEC     A
0937   040A 20 FA                       JR      NZ,XP33
0938   040C 18 1F                       JR      XP35    ;FINISHED
0939   040E             ;
0940   040E CF          XP34:           TSTCH('/',XP42) ;DIVIDE?
0940   040F 2F          
0940   0410 44          
0941   0411 E5                          PUSH    HL      ;YES, SAVE 1ST <EXPR4>
0942   0412 CD 3A 04                    CALL    EXPR4   ;AND GET THE SECOND ONE
0943   0415 06 00                       LD      B,0H    ;CLEAR B FOR SIGN
0944   0417 CD E3 04                    CALL    CHKSGN  ;CHECK SIGN OF 2ND
0945   041A E3                          EX      (SP),HL ;GET 1ST IN HL
0946   041B CD E3 04                    CALL    CHKSGN  ;CHECK SIGN OF 1ST
0947   041E EB                          EX      DE,HL
0948   041F E3                          EX      (SP),HL
0949   0420 EB                          EX      DE,HL
0950   0421 7A                          LD      A,D     ;DIVIDE BY 0?
0951   0422 B3                          OR      E
0952   0423 CA D3 00                    JP      Z,AHOW  ;SAY "HOW?"
0953   0426 C5                          PUSH    BC      ;ELSE SAVE SIGN
0954   0427 CD C7 04                    CALL    DIVIDE  ;USE SUBROUTINE
0955   042A 60                          LD      H,B     ;RESULT IN HL NOW
0956   042B 69                          LD      L,C
0957   042C C1                          POP     BC      ;GET SIGN BACK
0958   042D D1          XP35:           POP     DE      ;AND TEXT POINTER
0959   042E 7C                          LD      A,H     ;HL MUST BE +
0960   042F B7                          OR      A
0961   0430 FA D2 00                    JP      M,QHOW  ;ELSE IT IS OVERFLOW
0962   0433 78                          LD      A,B
0963   0434 B7                          OR      A
0964   0435 FC E6 04                    CALL    M,CHGSGN        ;CHANGE SIGN IF NEEDED
0965   0438 18 A9                       JR      XP31    ;LOOK FOR MORE TERMS
0966   043A             ;
0967   043A 21 9E 07    EXPR4:          LD      HL,TAB4-1       ;FIND FUNCTION IN TAB4
0968   043D C3 0B 07                    JP      EXEC    ;AND GO DO IT
0969   0440             ;
0970   0440 FF          XP40:           RST     RTSTV   ;NO, NOT A FUNCTION
0971   0441 38 05                       JR      C,XP41  ;NOR A VARIABLE
0972   0443 7E                          LD      A,(HL)  ;VARIABLE
0973   0444 23                          INC     HL
0974   0445 66                          LD      H,(HL)  ;VALUE IN HL
0975   0446 6F                          LD      L,A
0976   0447 C9                          RET
0977   0448             ;
0978   0448 CD 7E 00    XP41:           CALL    TSTNUM  ;OR IS IT A NUMBER
0979   044B 78                          LD      A,B     ;# OF DIGIT
0980   044C B7                          OR      A
0981   044D C0                          RET     NZ      ;OK
0982   044E CF          PARN:           TSTCH($28,XP43) ; '('
0982   044F 28          
0982   0450 05          
0983   0451 DF                          RST     REXPR   ;"(EXPR)"
0984   0452 CF                          TSTCH($29,XP43) ; ')'
0984   0453 29          
0984   0454 01          
0985   0455 C9          XP42:           RET
0986   0456 C3 29 05    XP43:           JP      QWHAT   ;ELSE SAY: "WHAT?"
0987   0459             
0988   0459 CD 4E 04    RND:            CALL    PARN    ;*** RND(EXPR) ***
0989   045C 7C                          LD      A,H     ;EXPR MUST BE +
0990   045D B7                          OR      A
0991   045E FA D2 00                    JP      M,QHOW
0992   0461 B5                          OR      L       ;AND NON-ZERO
0993   0462 CA D2 00                    JP      Z,QHOW
0994   0465 D5                          PUSH    DE      ;SAVE BOTH
0995   0466 E5                          PUSH    HL
0996   0467 2A CA 0E                    LD      HL,(RANPNT)     ;GET MEMORY AS RANDOM
0997   046A 11 F1 07                    LD      DE,LSTROM       ;NUMBER
0998   046D E7                          RST     RCOMP
0999   046E 38 03                       JR      C,RA1   ;WRAP AROUND IF LAST
1000   0470 21 00 00                    LD      HL,START
1001   0473 5E          RA1:            LD      E,(HL)
1002   0474 23                          INC     HL
1003   0475 56                          LD      D,(HL)
1004   0476 22 CA 0E                    LD      (RANPNT),HL
1005   0479 E1                          POP     HL
1006   047A EB                          EX      DE,HL
1007   047B C5                          PUSH    BC
1008   047C CD C7 04                    CALL    DIVIDE  ;RND(N)=MOD(M,N)+1
1009   047F C1                          POP     BC
1010   0480 D1                          POP     DE
1011   0481 23                          INC     HL
1012   0482 C9                          RET
1013   0483             
1014   0483 CD 4E 04    ABS:            CALL    PARN    ;*** ABS(EXPR) ***
1015   0486 1B                          DEC     DE
1016   0487 CD E3 04                    CALL    CHKSGN  ;CHECK SIGN AND CHANGE IF HL < 0
1017   048A 13                          INC     DE
1018   048B C9                          RET
1019   048C             
1020   048C 2A B6 0E    SIZE:           LD      HL,(TXTUNF)     ;*** RETURN SIZE IN HL ***
1021   048F D5                          PUSH    DE              ;GET THE NUMBER OF FREE
1022   0490 EB                          EX      DE,HL           ;BYTES BETWEEN 'TXTUNF'
1023   0491 21 00 0E                    LD      HL,TXTEND       ;AND 'TXTEND'
1024   0494 CD DC 04                    CALL    SUBDE
1025   0497 D1                          POP     DE
1026   0498 C9                          RET
1027   0499             
1028   0499 CD 4E 04    GET:            CALL    PARN    ;*** GET(ADDR) ***
1029   049C 6E                          LD      L,(HL)  ;GET CONTENT OF (HL)
1030   049D 26 00                       LD      H,0     ;RETURN RESULT IN HL
1031   049F C9                          RET
1032   04A0             
1033   04A0 CD 4E 04    USR:            CALL    PARN    ;*** USR(PARA) ***
1034   04A3 C3 00 0E                    JP      USRSPC  ;GET para in HL and JP to prog
1035   04A6             ;                               ;There you should:
1036   04A6             ;               ...             ;    - Do the work
1037   04A6             ;               ...             ;    - Put result in HL
1038   04A6             ;               RET             ;$C9 - RET to BASIC
1039   04A6             
1040   04A6             
1041   04A6 21 00 08    RAM:            LD      HL,TXTBGN ; *** RAM *** START OF TEXT AREA
1042   04A9 C9                          RET
1043   04AA             
1044   04AA             
1045   04AA 21 00 0E    TOP:            LD      HL,TXTEND ; *** TOP *** END OF TEXT AREA
1046   04AD C9                          RET
1047   04AE             
1048   04AE             
1049   04AE 2A B6 0E    UNF:            LD      HL,(TXTUNF) ; *** UNF *** START OF UNFILLED TEXT AREA
1050   04B1 C9                          RET
1051   04B2             
1052   04B2             
1053   04B2 DF          PUT:            RST     REXPR   ;*** PUT ADDR, VAL1 [,VAL2, VAL3,..]
1054   04B3 CF                          TSTCH($2C,PT2)  ; 1ST ',' SEPARATES THE VALUE(S)
1054   04B4 2C          
1054   04B5 0D          
1055   04B6 E5                          PUSH    HL      ;SAVE ADDR
1056   04B7 DF          PT0:            RST     REXPR   ;GET VAL IN HL
1057   04B8 7D                          LD      A,L     ;LOW BYTE OF VAL
1058   04B9 E1                          POP     HL      ;GET ADDR
1059   04BA 77                          LD      (HL),A  ;PUT VALUE IN RAM
1060   04BB CF                          TSTCH($2C,PT1)  ;READY UNLESS ","
1060   04BC 2C          
1060   04BD 04          
1061   04BE 23                          INC     HL      ;NEXT ADDR
1062   04BF E5                          PUSH    HL
1063   04C0 18 F5                       JR      PT0     ;LIST CONTINUES
1064   04C2             ;
1065   04C2 F7          PT1:            RST     RFINISH ;READY
1066   04C3             ;
1067   04C3 C3 29 05    PT2:            JP      QWHAT   ;ELSE SAY: "WHAT?"
1068   04C6             
1069   04C6             
1070   04C6             
1071   04C6             
1072   04C6 76          HALT:           HALT            ;HALT CPU (return to analyser)
1073   04C7             ;
1074   04C7             ;*************************************************************
1075   04C7             ;
1076   04C7             ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1077   04C7             ;
1078   04C7             ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1079   04C7             ;
1080   04C7             ; 'SUBDE' SUBSTRACTS DE FROM HL
1081   04C7             ;
1082   04C7             ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1083   04C7             ; SIGN AND FLIP SIGN OF B.
1084   04C7             ;
1085   04C7             ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1086   04C7             ;
1087   04C7             ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1088   04C7             ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1089   04C7             ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1090   04C7             ;
1091   04C7 E5          DIVIDE:         PUSH    HL      ;*** DIVIDE ***
1092   04C8 6C                          LD      L,H     ;DIVIDE H BY DE
1093   04C9 26 00                       LD      H,0
1094   04CB CD D2 04                    CALL    DV1
1095   04CE 41                          LD      B,C     ;SAVE RESULT IN B
1096   04CF 7D                          LD      A,L     ;(REMINDER+L)/DE
1097   04D0 E1                          POP     HL
1098   04D1 67                          LD      H,A
1099   04D2 0E FF       DV1:            LD      C,0FFH  ;RESULT IN C
1100   04D4 0C          DV2:            INC     C       ;DUMB ROUTINE
1101   04D5 CD DC 04                    CALL    SUBDE   ;DIVIDE BY SUBTRACT
1102   04D8 30 FA                       JR      NC,DV2  ;AND COUNT
1103   04DA 19                          ADD     HL,DE
1104   04DB C9                          RET
1105   04DC             ;
1106   04DC 7D          SUBDE:          LD      A,L     ;*** SUBDE ***
1107   04DD 93                          SUB     E       ;SUBSTRACT DE FROM
1108   04DE 6F                          LD      L,A     ;HL
1109   04DF 7C                          LD      A,H
1110   04E0 9A                          SBC     A,D
1111   04E1 67                          LD      H,A
1112   04E2 C9                          RET
1113   04E3             ;
1114   04E3 7C          CHKSGN:         LD      A,H     ;*** CHKSGN ***
1115   04E4 B7                          OR      A       ;CHECK SIGN OF HL
1116   04E5 F0                          RET     P       ;IF HL >=0 RETURN
1117   04E6             ;
1118   04E6 7C          CHGSGN:         LD      A,H     ;*** CHGSGN ***
1119   04E7 B5                          OR      L       ;CHECK VALUE OF HL
1120   04E8 C8                          RET     Z       ;IF HL == 0 RETURN
1121   04E9             ;
1122   04E9 7C                          LD      A,H
1123   04EA F5                          PUSH    AF      ;SAVE SIGN
1124   04EB 2F                          CPL             ;CHANGE SIGN OF HL
1125   04EC 67                          LD      H,A
1126   04ED 7D                          LD      A,L
1127   04EE 2F                          CPL
1128   04EF 6F                          LD      L,A
1129   04F0 23                          INC     HL      ;HL = -HL
1130   04F1 F1                          POP     AF      ;GET ORIGINAL SIGN
1131   04F2 AC                          XOR     H       ;COMPARE
1132   04F3 F2 D2 00                    JP      P,QHOW  ;ERROR IF SIGN UNCHANGED (HL=$8000)
1133   04F6 78                          LD      A,B     ;AND ALSO FLIP B
1134   04F7 EE 80                       XOR     80H
1135   04F9 47                          LD      B,A
1136   04FA C9                          RET
1137   04FB             
1138   04FB 7C          CKHLDE:         LD      A,H
1139   04FC AA                          XOR     D       ;SAME SIGN?
1140   04FD F2 01 05                    JP      P,CK1   ;YES, COMPARE
1141   0500 EB                          EX      DE,HL   ;NO, XCH AND COMP
1142   0501 E7          CK1:            RST     RCOMP
1143   0502 C9                          RET
1144   0503             ;
1145   0503             ;*************************************************************
1146   0503             ;
1147   0503             ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1148   0503             ;
1149   0503             ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1150   0503             ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1151   0503             ; TO THAT VALUE.
1152   0503             ;
1153   0503             ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1154   0503             ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1155   0503             ; NEXT LINE AND CONTINUE FROM THERE.
1156   0503             ;
1157   0503             ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1158   0503             ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1159   0503             ;
1160   0503             ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1161   0503             ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1162   0503             ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1163   0503             ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1164   0503             ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1165   0503             ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1166   0503             ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1167   0503             ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1168   0503             ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1169   0503             ;
1170   0503             ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1171   0503             ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1172   0503             ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1173   0503             ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1174   0503             ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1175   0503             ;
1176   0503 FF          SETVAL:         RST     RTSTV   ;*** SETVAL ***
1177   0504 DA 29 05                    JP      C,QWHAT ;"WHAT?" NO VARIABLE
1178   0507 E5                          PUSH    HL      ;SAVE ADDRESS OF VAR.
1179   0508 CF                          TSTCH('=',SV1)  ;PASS "=" SIGN
1179   0509 3D          
1179   050A 08          
1180   050B DF                          RST     REXPR   ;EVALUATE EXPR.
1181   050C 44                          LD      B,H     ;VALUE IS IN BC NOW
1182   050D 4D                          LD      C,L
1183   050E E1                          POP     HL      ;GET ADDRESS
1184   050F 71                          LD      (HL),C  ;SAVE VALUE
1185   0510 23                          INC     HL
1186   0511 70                          LD      (HL),B
1187   0512 C9                          RET
1188   0513 C3 29 05    SV1:            JP      QWHAT   ;NO "=" SIGN
1189   0516             
1190   0516 CF          FIN:            TSTCH(';',FI1)  ;*** FIN ***
1190   0517 3B          
1190   0518 04          
1191   0519 F1                          POP     AF      ;";", PURGE RET. ADDR.
1192   051A C3 8D 01                    JP      RUNSML  ;CONTINUE SAME LINE
1193   051D CF          FI1:            TSTCH(CR,FI2)   ;NOT ";", IS IT CR?
1193   051E 0D          
1193   051F 04          
1194   0520 F1                          POP     AF      ;YES, PURGE RET. ADDR.
1195   0521 C3 7D 01                    JP      RUNNXL  ;RUN NEXT LINE
1196   0524 C9          FI2:            RET             ;ELSE RETURN TO CALLER
1197   0525             
1198   0525 EF          ENDCHK:         RST     RIGNBLK ;IGNBLK
1199   0526 FE 0D                       CP      CR      ;END WITH CR?
1200   0528 C8                          RET     Z       ;OK, ELSE SAY: "WHAT?"
1201   0529             ;
1202   0529 D5          QWHAT:          PUSH    DE      ;*** QWHAT ***
1203   052A 11 E1 00    AWHAT:          LD      DE,WHAT ;*** AWHAT ***
1204   052D 97          ERROR:          SUB     A       ;*** ERROR ***
1205   052E CD C1 05                    CALL    PRTSTG  ;PRINT 'WHAT?', 'HOW?'
1206   0531 D1                          POP     DE      ;OR 'SORRY'
1207   0532 1A                          LD      A,(DE)  ;SAVE THE CHARACTER
1208   0533 F5                          PUSH    AF      ;AT WHERE OLD DE ->
1209   0534 97                          SUB     A       ;AND PUT A 0 THERE
1210   0535 12                          LD      (DE),A
1211   0536 2A B8 0E                    LD      HL,(CURRNT)     ;GET CURRENT LINE #
1212   0539 E5                          PUSH    HL
1213   053A 7E                          LD      A,(HL)  ;CHECK THE VALUE
1214   053B 23                          INC     HL
1215   053C B6                          OR      (HL)
1216   053D D1                          POP     DE
1217   053E CA F2 00                    JP      Z,WSTART ;IF ZERO, JUST RESTART
1218   0541 7E                          LD      A,(HL)  ;IF NEGATIVE,
1219   0542 B7                          OR      A
1220   0543 FA 09 03                    JP      M,INPERR        ;REDO INPUT
1221   0546 CD 63 06                    CALL    PRTLN   ;ELSE PRINT THE LINE
1222   0549 1B                          DEC     DE      ;UPTO WHERE THE 0 IS
1223   054A F1                          POP     AF      ;RESTORE THE CHARACTER
1224   054B 12                          LD      (DE),A
1225   054C 3E 3F                       LD      A,'?'   ;PRINT A "?"
1226   054E D7                          RST     ROUTC
1227   054F 97                          SUB     A       ;AND THE REST OF THE
1228   0550 CD C1 05                    CALL    PRTSTG  ;LINE
1229   0553 C3 F2 00                    JP      WSTART  ;THEN RESTART
1230   0556             ;
1231   0556 D5          QSORRY:         PUSH    DE      ;*** QSORRY ***
1232   0557 11 E7 00    ASORRY:         LD      DE,SORRY        ;*** ASORRY ***
1233   055A C3 2D 05                    JP      ERROR
1234   055D             ;
1235   055D             ;*************************************************************
1236   055D             ;
1237   055D             ; *** GETLN *** FNDLN (& FRIENDS) ***
1238   055D             ;
1239   055D             ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1240   055D             ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1241   055D             ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1242   055D             ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1243   055D             ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1244   055D             ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1245   055D             ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1246   055D             ;
1247   055D             ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1248   055D             ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1249   055D             ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1250   055D             ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1251   055D             ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1252   055D             ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1253   055D             ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1254   055D             ; LINE, FLAGS ARE C & NZ.
1255   055D             ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1256   055D             ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1257   055D             ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1258   055D             ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1259   055D             ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1260   055D             ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1261   055D             ;
1262   055D D7          GETLN:          RST     ROUTC   ;*** GETLN ***
1263   055E 11 CC 0E                    LD      DE,BUFFER       ;PROMPT AND INIT.
1264   0561 CD EF 06    GL1:            CALL    CHKIO   ;CHECK KEYBOARD
1265   0564 28 FB                       JR      Z,GL1   ;NO INPUT, WAIT
1266   0566 FE 08                       CP      BS      ;BS, DELETE LAST CHARACTER?
1267   0568 28 1A                       JR      Z,GL3   ;YES
1268   056A FE 7F                       CP      DEL     ;DEL, DELETE LAST CHARACTER?
1269   056C 28 16                       JR      Z,GL3   ;YES
1270   056E D7                          RST     ROUTC   ;INPUT, ECHO BACK
1271   056F FE 0A                       CP      LF      ;IGNORE LF
1272   0571 28 EE                       JR      Z,GL1
1273   0573 B7                          OR      A       ;IGNORE NULL
1274   0574 28 EB                       JR      Z,GL1
1275   0576 FE 18                       CP      CAN     ;^X, DELETE THE WHOLE LINE?
1276   0578 28 1B                       JR      Z,GL4   ;YES
1277   057A 12                          LD      (DE),A  ;ELSE SAVE INPUT
1278   057B 13                          INC     DE      ;AND BUMP POINTER
1279   057C FE 0D                       CP      CR      ;WAS IT CR?
1280   057E C8                          RET     Z       ;YES, END OF LINE
1281   057F 7B                          LD      A,E     ;ELSE MORE FREE ROOM?
1282   0580 FE 1C                       CP      BUFEND & 0FFH
1283   0582 20 DD                       JR      NZ,GL1  ;YES, GET NEXT INPUT
1284   0584 7B          GL3:            LD      A,E     ;DELETE LAST CHARACTER
1285   0585 FE CC                       CP      BUFFER & 0FFH   ;BUT DO WE HAVE ANY?
1286   0587 28 0C                       JR      Z,GL4   ;NO, REDO WHOLE LINE
1287   0589 1B                          DEC     DE      ;YES, BACKUP POINTER
1288   058A 3E 08                       LD      A,BS    ;AND ECHO A BACKSPACE
1289   058C D7                          RST     ROUTC
1290   058D 3E 20                       LD      A,' '   ;AND ECHO A BLANK
1291   058F D7                          RST     ROUTC
1292   0590 3E 08                       LD      A,BS    ;AND ECHO A BACKSPACE
1293   0592 D7                          RST     ROUTC
1294   0593 18 CC                       JR      GL1     ;GO GET NEXT INPUT
1295   0595 CD 0E 00    GL4:            CALL    CRLF    ;REDO ENTIRE LINE
1296   0598 3E 5E                       LD      A,'^'   ;CR, LF AND UP-ARROW
1297   059A 18 C1                       JR      GETLN
1298   059C             ;
1299   059C 7C          FNDLN:          LD      A,H     ;*** FNDLN ***
1300   059D B7                          OR      A       ;CHECK SIGN OF HL
1301   059E FA D2 00                    JP      M,QHOW  ;IT CANNOT BE -
1302   05A1 11 00 08                    LD      DE,TXTBGN       ;INIT TEXT POINTER
1303   05A4             ;
1304   05A4             FNDLP:          ;*** FDLNP ***
1305   05A4 E5          FL1:            PUSH    HL      ;SAVE LINE #
1306   05A5 2A B6 0E                    LD      HL,(TXTUNF)     ;CHECK IF WE PASSED END
1307   05A8 2B                          DEC     HL
1308   05A9 E7                          RST     RCOMP
1309   05AA E1                          POP     HL      ;GET LINE # BACK
1310   05AB D8                          RET     C       ;C,NZ PASSED END
1311   05AC 1A                          LD      A,(DE)  ;WE DID NOT, GET BYTE 1
1312   05AD 95                          SUB     L       ;IS THIS THE LINE?
1313   05AE 47                          LD      B,A     ;COMPARE LOW ORDER
1314   05AF 13                          INC     DE
1315   05B0 1A                          LD      A,(DE)  ;GET BYTE 2
1316   05B1 9C                          SBC     A,H     ;COMPARE HIGH ORDER
1317   05B2 38 04                       JR      C,FL2   ;NO, NOT THERE YET
1318   05B4 1B                          DEC     DE      ;ELSE WE EITHER FOUND
1319   05B5 B0                          OR      B       ;IT, OR IT IS NOT THERE
1320   05B6 C9                          RET     ;NC,Z:FOUND, NC,NZ:NO
1321   05B7             ;
1322   05B7             FNDNXT:         ;*** FNDNXT ***
1323   05B7 13                          INC     DE      ;FIND NEXT LINE
1324   05B8 13          FL2:            INC     DE      ;JUST PASSED BYTE 1 & 2
1325   05B9             ;
1326   05B9 1A          FNDSKP:         LD      A,(DE)  ;*** FNDSKP ***
1327   05BA FE 0D                       CP      CR      ;TRY TO FIND CR
1328   05BC 20 FA                       JR      NZ,FL2  ;KEEP LOOKING
1329   05BE 13                          INC     DE      ;FOUND CR, SKIP OVER
1330   05BF 18 E3                       JR      FL1     ;CHECK IF END OF TEXT
1331   05C1             ;
1332   05C1             ;*************************************************************
1333   05C1             ;
1334   05C1             ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1335   05C1             ;
1336   05C1             ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1337   05C1             ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1338   05C1             ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1339   05C1             ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1340   05C1             ;
1341   05C1             ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1342   05C1             ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1343   05C1             ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1344   05C1             ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1345   05C1             ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1346   05C1             ; OVER (USUALLY A JUMP INSTRUCTION.
1347   05C1             ;
1348   05C1             ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1349   05C1             ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1350   05C1             ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1351   05C1             ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1352   05C1             ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1353   05C1             ;
1354   05C1             ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1355   05C1             ;
1356   05C1 47          PRTSTG:         LD      B,A     ;*** PRTSTG ***
1357   05C2 1A          PS1:            LD      A,(DE)  ;GET A CHARACTER
1358   05C3 13                          INC     DE      ;BUMP POINTER
1359   05C4 B8                          CP      B       ;SAME AS OLD A?
1360   05C5 C8                          RET     Z       ;YES, RETURN
1361   05C6 D7                          RST     ROUTC   ;ELSE PRINT IT
1362   05C7 FE 0D                       CP      CR      ;WAS IT A CR?
1363   05C9 20 F7                       JR      NZ,PS1  ;NO, NEXT
1364   05CB C9                          RET             ;YES, RETURN
1365   05CC             ;
1366   05CC CF          QTSTG:          TSTCH($22,QT3)  ;*** QTSTG ***
1366   05CD 22          
1366   05CE 0F          
1367   05CF 3E 22                       LD      A,22H   ;IT IS A '"'
1368   05D1 CD C1 05    QT1:            CALL    PRTSTG  ;PRINT UNTIL ANOTHER
1369   05D4 FE 0D       QT1A:           CP      CR      ;WAS LAST ONE A CR?
1370   05D6 E1                          POP     HL      ;RETURN ADDRESS
1371   05D7 CA 7D 01                    JP      Z,RUNNXL        ;WAS CR, RUN NEXT LINE
1372   05DA 23          QT2:            INC     HL      ;SKIP 3 BYTES ON RETURN
1373   05DB 23                          INC     HL
1374   05DC 23                          INC     HL
1375   05DD E9                          JP      (HL)    ;RETURN
1376   05DE CF          QT3:            TSTCH($27,QT4)  ;IS IT A "'"?
1376   05DF 27          
1376   05E0 04          
1377   05E1 3E 27                       LD      A,27H   ;YES, DO THE SAME
1378   05E3 18 EC                       JR      QT1     ;AS IN '"'
1379   05E5 CF          QT4:            TSTCH($5F,QT5)  ;IS IT UNDERLINE?
1379   05E6 5F          
1379   05E7 06          
1380   05E8 3E 8D                       LD      A,08DH  ;YES, CR WITHOUT LF
1381   05EA D7                          RST     ROUTC
1382   05EB E1                          POP     HL      ;RETURN ADDRESS
1383   05EC 18 EC                       JR      QT2
1384   05EE CF          QT5:            TSTCH(5EH,QT5)  ;RST 1, is it '^'?
1384   05EF 5E          
1384   05F0 FD          
1385   05F1 1A                          LD      A,(DE)
1386   05F2 EE 40                       XOR     40H
1387   05F4 CD 10 00                    CALL    OUTC
1388   05F7 1A                          LD      A,(DE)
1389   05F8 13                          INC     DE
1390   05F9 18 D9                       JR      QT1A
1391   05FB C9          QT6:            RET             ;NONE OF ABOVE
1392   05FC             
1393   05FC             PRTNUM:                         ;*** PRINT NUMBER IN HL ***
1394   05FC 3A B5 0E                    LD      A,(PNBASE)      ;GET NUMBER BASE
1395   05FF B7                          OR      A
1396   0600 28 0B                       JR      Z,PN0   ;0: DEFAULT DEC
1397   0602 FE 10                       CP      16      ;HEX NUMBER?
1398   0604 C2 18 06                    JP      NZ,PN1  ;NO
1399   0607 06 24                       LD      B,'$'   ;PRINT LEADING '$'
1400   0609 0D                          DEC     C       ;'$' TAKES SPACE
1401   060A C3 18 06                    JP      PN1     ;HEX IS UNSIGNED
1402   060D 06 00       PN0:            LD      B,0     ;NO PREFIX YET
1403   060F CD E3 04                    CALL    CHKSGN  ;CHECK SIGN
1404   0612 F2 18 06                    JP      P,PN1   ;NO SIGN
1405   0615 06 2D                       LD      B,'-'   ;B=SIGN
1406   0617 0D                          DEC     C       ;'-' TAKES SPACE
1407   0618 D5          PN1:            PUSH    DE
1408   0619 3A B5 0E                    LD      A,(PNBASE)
1409   061C B7                          OR      A       ;DEFAULT DECIMAL?
1410   061D 20 02                       JR      NZ,PN1A
1411   061F 3E 0A                       LD      A,10
1412   0621 5F          PN1A:           LD      E,A
1413   0622 AF                          XOR     A
1414   0623 57                          LD      D,A
1415   0624 D5                          PUSH    DE      ;SAVE AS A FLAG
1416   0625 0D                          DEC     C       ;C=SPACES
1417   0626 C5                          PUSH    BC      ;SAVE SIGN & SPACE
1418   0627 CD C7 04    PN2:            CALL    DIVIDE  ;DIVIDE HL BY NUMBER BASE
1419   062A 78                          LD      A,B     ;RESULT 0?
1420   062B B1                          OR      C
1421   062C CA 37 06                    JP      Z,PN3   ;YES, WE GOT ALL
1422   062F E3                          EX      (SP),HL ;NO, SAVE REMAINDER
1423   0630 2D                          DEC     L       ;AND COUNT SPACE
1424   0631 E5                          PUSH    HL      ;HL IS OLD BC
1425   0632 60                          LD      H,B     ;MOVE RESULT TO BC
1426   0633 69                          LD      L,C
1427   0634 C3 27 06                    JP      PN2     ;AND DIVIDE AGAIN
1428   0637             ;
1429   0637 C1          PN3:            POP     BC      ;WE GOT ALL DIGITS IN
1430   0638 0D          PN4:            DEC     C       ;THE STACK
1431   0639 79                          LD      A,C     ;LOOK AT SPACE COUNT
1432   063A B7                          OR      A
1433   063B FA 44 06                    JP      M,PN5   ;NO LEADING BLANKS
1434   063E 3E 20                       LD      A,' '   ;LEADING BLANKS
1435   0640 D7                          RST     ROUTC
1436   0641 C3 38 06                    JP      PN4     ;MORE?
1437   0644 78          PN5:            LD      A,B     ;PRINT SIGN OR '$'
1438   0645 B7                          OR      A
1439   0646 C4 10 00                    CALL    NZ,OUTC
1440   0649 5D                          LD      E,L     ;LAST REMAINDER IN E
1441   064A 3A B5 0E    PN6:            LD      A,(PNBASE)      ;GET NUMBER BASE
1442   064D B7                          OR      A       ;DEFAULT DECIMAL?
1443   064E 20 02                       JR      NZ,PN6A
1444   0650 3E 0A                       LD      A,10
1445   0652 BB          PN6A:           CP      E       ;IT IS FLAG FOR NO MORE
1446   0653 7B                          LD      A,E     ;CHECK DIGIT IN E
1447   0654 D1                          POP     DE
1448   0655 C8                          RET     Z       ;IF SO, RETURN
1449   0656 FE 0A                       CP      10      ;0-9? < A hex?
1450   0658 DA 5D 06                    JP      C,PN7   ;Skip Add 7
1451   065B C6 07                       ADD     A,'A'-'0'-10    ;Bring it up to ASCII A-F
1452   065D C6 30       PN7:            ADD     A,'0'   ;ELSE CONVERT TO ASCII
1453   065F D7                          RST     ROUTC   ;AND PRINT THE DIGIT
1454   0660 C3 4A 06                    JP      PN6     ;GO BACK FOR MORE
1455   0663             
1456   0663 AF          PRTLN:          XOR     A       ;SET 10 AS DEFAULT BASE
1457   0664 32 B5 0E                    LD      (PNBASE),A      ;FOR PRTNUM
1458   0667 1A                          LD      A,(DE)
1459   0668 6F                          LD      L,A     ;LOW ORDER LINE #
1460   0669 13                          INC     DE
1461   066A 1A                          LD      A,(DE)  ;HIGH ORDER
1462   066B 67                          LD      H,A
1463   066C 13                          INC     DE
1464   066D 0E 04                       LD      C,4     ;PRINT 4 DIGIT LINE #
1465   066F CD FC 05                    CALL    PRTNUM
1466   0672 3E 20                       LD      A,' '   ;FOLLOWED BY A BLANK
1467   0674 D7                          RST     ROUTC
1468   0675 97                          SUB     A       ;AND THEN THE NEXT
1469   0676 CD C1 05                    CALL    PRTSTG
1470   0679 C9                          RET
1471   067A             ;
1472   067A             ;*************************************************************
1473   067A             ;
1474   067A             ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1475   067A             ;
1476   067A             ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1477   067A             ; DE = HL
1478   067A             ;
1479   067A             ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1480   067A             ; UNTIL DE = BC
1481   067A             ;
1482   067A             ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1483   067A             ; STACK
1484   067A             ;
1485   067A             ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1486   067A             ; STACK
1487   067A             ;
1488   067A E7          MVUP:           RST     RCOMP   ;*** MVUP ***
1489   067B C8                          RET     Z       ;DE = HL, RETURN
1490   067C 1A                          LD      A,(DE)  ;GET ONE BYTE
1491   067D 02                          LD      (BC),A  ;MOVE IT
1492   067E 13                          INC     DE      ;INCREASE BOTH POINTERS
1493   067F 03                          INC     BC
1494   0680 18 F8                       JR      MVUP    ;UNTIL DONE
1495   0682             ;
1496   0682 78          MVDOWN:         LD      A,B     ;*** MVDOWN ***
1497   0683 92                          SUB     D       ;TEST IF DE = BC
1498   0684 20 03                       JR      NZ,MD1  ;NO, GO MOVE
1499   0686 79                          LD      A,C     ;MAYBE, OTHER BYTE?
1500   0687 93                          SUB     E
1501   0688 C8                          RET     Z       ;YES, RETURN
1502   0689 1B          MD1:            DEC     DE      ;ELSE MOVE A BYTE
1503   068A 2B                          DEC     HL      ;BUT FIRST DECREASE
1504   068B 1A                          LD      A,(DE)  ;BOTH POINTERS AND
1505   068C 77                          LD      (HL),A  ;THEN DO IT
1506   068D 18 F3                       JR      MVDOWN  ;LOOP BACK
1507   068F             ;
1508   068F C1          POPA:           POP     BC      ;BC = RETURN ADDR.
1509   0690 E1                          POP     HL      ;RESTORE LOPVAR, BUT
1510   0691 22 C0 0E                    LD      (LOPVAR),HL     ;=0 MEANS NO MORE
1511   0694 7C                          LD      A,H
1512   0695 B5                          OR      L
1513   0696 CA A9 06                    JP      Z,PP1   ;YEP, GO RETURN
1514   0699 E1                          POP     HL      ;NOP, RESTORE OTHERS
1515   069A 22 C2 0E                    LD      (LOPINC),HL
1516   069D E1                          POP     HL
1517   069E 22 C4 0E                    LD      (LOPLMT),HL
1518   06A1 E1                          POP     HL
1519   06A2 22 C6 0E                    LD      (LOPLN),HL
1520   06A5 E1                          POP     HL
1521   06A6 22 C8 0E                    LD      (LOPPT),HL
1522   06A9 C5          PP1:            PUSH    BC      ;BC = RETURN ADDR.
1523   06AA C9                          RET
1524   06AB             ;
1525   06AB 21 1D 0F    PUSHA:          LD      HL,STKLMT       ;*** PUSHA ***
1526   06AE CD E6 04                    CALL    CHGSGN
1527   06B1 C1                          POP     BC      ;BC=RETURN ADDRESS
1528   06B2 39                          ADD     HL,SP   ;IS STACK NEAR THE TOP?
1529   06B3 D2 56 05                    JP      NC,QSORRY       ;YES, SORRY FOR THAT
1530   06B6 2A C0 0E                    LD      HL,(LOPVAR)     ;ELSE SAVE LOOP VAR'S
1531   06B9 7C                          LD      A,H     ;BUT IF LOPVAR IS 0
1532   06BA B5                          OR      L       ;THAT WILL BE ALL
1533   06BB CA D1 06                    JP      Z,PU1
1534   06BE 2A C8 0E                    LD      HL,(LOPPT)      ;ELSE, MORE TO SAVE
1535   06C1 E5                          PUSH    HL
1536   06C2 2A C6 0E                    LD      HL,(LOPLN)
1537   06C5 E5                          PUSH    HL
1538   06C6 2A C4 0E                    LD      HL,(LOPLMT)
1539   06C9 E5                          PUSH    HL
1540   06CA 2A C2 0E                    LD      HL,(LOPINC)
1541   06CD E5                          PUSH    HL
1542   06CE 2A C0 0E                    LD      HL,(LOPVAR)
1543   06D1 E5          PU1:            PUSH    HL
1544   06D2 C5                          PUSH    BC      ;BC = RETURN ADDR.
1545   06D3 C9                          RET
1546   06D4             
1547   06D4             ;*************************************************************
1548   06D4             ; *** INIT ***
1549   06D4             ;
1550   06D4             ; PUT IO INITIALISATION HERE, E.G. FOR THE SERIAL INTERFACE
1551   06D4             ;
1552   06D4             ; *** OUTC *** CHKIO ***
1553   06D4             ;
1554   06D4             ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1555   06D4             ; OUTC WILL OUTPUT THE BYTE IN A.
1556   06D4             ; IF THAT IS A CR, A LF IS ALSO SEND OUT.
1557   06D4             ; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
1558   06D4             ; ALL REGISTERS ARE RESTORED.
1559   06D4             ;
1560   06D4             ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1561   06D4             ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1562   06D4             ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1563   06D4             ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1564   06D4             ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1565   06D4             ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
1566   06D4             ;
1567   06D4             ;THIS IS AT LOC. 0
1568   06D4             ;START:         LD      SP,STACK        ;*** COLD START ***
1569   06D4             ;               LD      A,0FFH
1570   06D4             ;               JP      INIT
1571   06D4             
1572   06D4 11 FE 06    INIT:           LD      DE,MSG1
1573   06D7 CD C1 05                    CALL    PRTSTG
1574   06DA 21 00 00                    LD      HL,START
1575   06DD 22 CA 0E                    LD      (RANPNT),HL
1576   06E0 21 00 08                    LD      HL,TXTBGN
1577   06E3 22 B6 0E                    LD      (TXTUNF),HL
1578   06E6 C3 ED 00                    JP      INIT1
1579   06E9             
1580   06E9             ;THIS IS AT LOC. 10
1581   06E9             ;OUTC:          OUT     (IODATA),A      ;Out to data port
1582   06E9             ;               CP      CR      ;WAS IT CR?
1583   06E9             ;               RET     NZ      ;NO, FINISHED
1584   06E9             ;               JP      OC1     ;REST OF THIS IS AT OC1
1585   06E9 3E 0A       OC1:            LD      A,LF    ;YES, WE SEND LF TOO
1586   06EB D7                          RST     ROUTC   ;THIS IS RECURSIVE
1587   06EC 3E 0D                       LD      A,CR    ;GET CR BACK IN A
1588   06EE C9                          RET
1589   06EF             
1590   06EF DB 02       CHKIO:          IN      A,(IOSTAT)      ;*** CHKIO ***
1591   06F1 E6 01                       AND     IO_RX_BIT       ;MASK STATUS BIT
1592   06F3 C8                          RET     Z       ;NOT READY, RETURN "Z"
1593   06F4 DB 01                       IN      A,(IODATA)      ;READY, READ DATA
1594   06F6 E6 7F                       AND     7FH     ;MASK BIT 7 OFF
1595   06F8 FE 03       CI0:            CP      03H     ;IS IT CONTROL-C?
1596   06FA C0                          RET     NZ      ;NO, RETURN "NZ"
1597   06FB C3 F2 00                    JP      WSTART  ;YES, RESTART TBI
1598   06FE             ;
1599   06FE 54 69 6E 79 MSG1:           .DB     "TinyBASIC"
1599   0702 42 41 53 49 
1599   0706 43 
1600   0707 0D                          .DB     CR
1601   0708             
1602   0708             
1603   0708             ;*************************************************************
1604   0708             ;
1605   0708             ; *** DIRECT *** EXEC *** TABLES ***
1606   0708             ;
1607   0708             ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1608   0708             ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1609   0708             ; OF CODE ACCORDING TO THE TABLE.
1610   0708             ;
1611   0708             ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1612   0708             ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1613   0708             ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1614   0708             ; ALL DIRECT AND STATEMENT COMMANDS.
1615   0708             ;
1616   0708             ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1617   0708             ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1618   0708             ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1619   0708             ;
1620   0708             
1621   0708 21 3C 07    DIRECT:         LD      HL,TAB1-1       ;*** DIRECT ***
1622   070B             ;
1623   070B             EXEC:           ;*** EXEC ***
1624   070B EF          EX0:            RST     RIGNBLK ;IGNORE LEADING BLANKS
1625   070C D5                          PUSH    DE      ;SAVE POINTER
1626   070D 1A          EX1:            LD      A,(DE)  ;IF FOUND '.' IN STRING
1627   070E 13                          INC     DE      ;BEFORE ANY MISMATCH
1628   070F FE 2E                       CP      2EH     ;WE DECLARE A MATCH
1629   0711 28 1C                       JR      Z,EX3
1630   0713 FE 61                       CP      'a'     ;< 'a' ?
1631   0715 38 06                       JR      C,EXN   ;NO ALPHA CHAR
1632   0717 FE 7B                       CP      'z'+1   ;> 'z'
1633   0719 30 02                       JR      NC,EXN  ;NO ALPHA CHAR
1634   071B E6 5F                       AND     5FH     ;MASK LOWER CASE TO UPPER CASE
1635   071D             EXN:
1636   071D 23                          INC     HL      ;HL->TABLE
1637   071E BE                          CP      (HL)    ;IF MATCH, TEST NEXT
1638   071F 28 EC                       JR      Z,EX1
1639   0721 3E 7F                       LD      A,07FH  ;ELSE SEE IF BIT 7
1640   0723 1B                          DEC     DE      ;OF TABLE IS SET, WHICH
1641   0724 BE                          CP      (HL)    ;IS THE JUMP ADDR. (HI)
1642   0725 38 0E                       JR      C,EX5   ;C:YES, MATCHED
1643   0727 23          EX2:            INC     HL      ;NC:NO, FIND JUMP ADDR.
1644   0728 BE                          CP      (HL)
1645   0729 30 FC                       JR      NC,EX2
1646   072B 23                          INC     HL      ;BUMP TO NEXT TAB. ITEM
1647   072C D1                          POP     DE      ;RESTORE STRING POINTER
1648   072D 18 DC                       JR      EX0     ;TEST AGAINST NEXT ITEM
1649   072F 3E 7F       EX3:            LD      A,07FH  ;PARTIAL MATCH, FIND
1650   0731 23          EX4:            INC     HL      ;JUMP ADDR., WHICH IS
1651   0732 BE                          CP      (HL)    ;FLAGGED BY BIT 7
1652   0733 30 FC                       JR      NC,EX4
1653   0735 7E          EX5:            LD      A,(HL)  ;LOAD HL WITH THE JUMP
1654   0736 23                          INC     HL      ;ADDRESS FROM THE TABLE
1655   0737 6E                          LD      L,(HL)
1656   0738                                             ;ADDRESSES ARE BIG-ENDIAN
1657   0738                                             ;WITH MSB SET to 1
1658   0738             #IF             $ < 8000H
1659   0738 E6 7F                       AND     7FH     ;MASK OFF HIGH ADDRESS BIT
1660   073A             #ENDIF
1661   073A 67                          LD      H,A
1662   073B F1                          POP     AF      ;CLEAN UP THE GARBAGE
1663   073C E9                          JP      (HL)    ;AND WE GO DO IT
1664   073D             ;
1665   073D             
1666   073D             ; THE TABLES CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1667   073D             ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1668   073D             ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1669   073D             ; BYTE SET TO 1.
1670   073D             ; This is done by the macro 'DWA'.
1671   073D             ; If the program is executed from an address < 0x8000
1672   073D             ; take care to mask this bit in program part 'EXEC'.
1673   073D             ;
1674   073D             ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.
1675   073D             ; IF THE STRING DOES NOT MATCH ANY OF THE OTHER ITEMS,
1676   073D             ; IT WILL MATCH THIS NULL ITEM AS DEFAULT.
1677   073D             
1678   073D             ;
1679   073D             TAB1:           ;DIRECT ONLY COMMANDS
1680   073D 4C 49 53 54                 .DB     "LIST"
1681   0741 81                          DWA(LIST)
1681   0742 A5          
1682   0743 52 55 4E                    .DB     "RUN"
1683   0746 81                          DWA(RUN)
1683   0747 77          
1684   0748 4E 45 57                    .DB     "NEW"
1685   074B 81                          DWA(NEW)
1685   074C 68          
1686   074D             ;
1687   074D             TAB2:           ;DIRECT OR PROGRAM STATEMENT
1688   074D 4E 45 58 54                 .DB     "NEXT"
1689   0751 82                          DWA(NEXT)
1689   0752 A0          
1690   0753 4C 45 54                    .DB     "LET"           ; can be omitted
1691   0756 83                          DWA(LET)
1691   0757 61          
1692   0758 49 46                       .DB     "IF"
1693   075A 82                          DWA(IFF)
1693   075B FA          
1694   075C 47 4F 54 4F                 .DB     "GOTO"
1695   0760 81                          DWA(GOTO)
1695   0761 96          
1696   0762 47 4F 53 55                 .DB     "GOSUB"
1696   0766 42 
1697   0767 82                          DWA(GOSUB)
1697   0768 0C          
1698   0769 52 45 54 55                 .DB     "RETURN"
1698   076D 52 4E 
1699   076F 82                          DWA(RETURN)
1699   0770 2C          
1700   0771 52 45 4D                    .DB     "REM"
1701   0774 82                          DWA(REM)
1701   0775 F6          
1702   0776 46 4F 52                    .DB     "FOR"
1703   0779 82                          DWA(FOR)
1703   077A 45          
1704   077B 49 4E 50 55                 .DB     "INPUT"         ; wait for KBD input
1704   077F 54 
1705   0780 83                          DWA(INPUT)
1705   0781 13          
1706   0782 50 52 49 4E                 .DB     "PRINT"
1706   0786 54 
1707   0787 81                          DWA(PRINT)
1707   0788 BC          
1708   0789 3F                          .DB     "?"             ; short for PRINT
1709   078A 81                          DWA(PRINT)
1709   078B BC          
1710   078C 50 55 54                    .DB     "PUT"           ; PUT ADDR, VAL, VAL,...
1711   078F 84                          DWA(PUT)
1711   0790 B2          
1712   0791 53 54 4F 50                 .DB     "STOP"          ; warm start
1713   0795 81                          DWA(STOP)
1713   0796 71          
1714   0797 48 41 4C 54                 .DB     "HALT"          ; HALT CPU (return to analyser)
1715   079B 84                          DWA(HALT)
1715   079C C6          
1716   079D 83                          DWA(DEFLT)              ;END OF LIST
1716   079E 5C          
1717   079F             ;
1718   079F             TAB4:           ;FUNCTIONS AND CONSTANTS
1719   079F 52 4E 44                    .DB     "RND"           ;fkt RND(RANGE)
1720   07A2 84                          DWA(RND)
1720   07A3 59          
1721   07A4 41 42 53                    .DB     "ABS"           ;fkt ABS(VALUE)
1722   07A7 84                          DWA(ABS)
1722   07A8 83          
1723   07A9 47 45 54                    .DB     "GET"          ;fkt GET(ADR) get byte from memory
1724   07AC 84                          DWA(GET)
1724   07AD 99          
1725   07AE 55 53 52                    .DB     "USR"           ;fkt USR(PARA) call usr fkt at TOP
1726   07B1 84                          DWA(USR)                ; and return a result in HL
1726   07B2 A0          
1727   07B3 53 49 5A 45                 .DB     "SIZE"          ;const SIZE - no parantesis, get free mem
1728   07B7 84                          DWA(SIZE)
1728   07B8 8C          
1729   07B9 52 41 4D                    .DB     "RAM"           ;const RAM - no par., get TEXT begin
1730   07BC 84                          DWA(RAM)
1730   07BD A6          
1731   07BE 54 4F 50                    .DB     "TOP"           ;const TOP - no par., get TEXT TOP
1732   07C1 84                          DWA(TOP)
1732   07C2 AA          
1733   07C3 84                          DWA(XP40)               ;END OF LIST
1733   07C4 40          
1734   07C5             ;
1735   07C5             TAB5:           ;"TO" IN "FOR"
1736   07C5 54 4F                       .DB     "TO"
1737   07C7 82                          DWA(FR1)
1737   07C8 55          
1738   07C9 85                          DWA(QWHAT)              ;END OF LIST
1738   07CA 29          
1739   07CB             ;
1740   07CB             TAB6:           ;"STEP" IN "FOR"
1741   07CB 53 54 45 50                 .DB     "STEP"
1742   07CF 82                          DWA(FR2)
1742   07D0 5F          
1743   07D1 82                          DWA(FR3)                ;END OF LIST
1743   07D2 62          
1744   07D3             ;
1745   07D3             TAB8:           ;RELATION OPERATORS
1746   07D3 3E 3D                       .DB     ">="
1747   07D5 83                          DWA(XP11)
1747   07D6 70          
1748   07D7 21 3D                       .DB     "!="
1749   07D9 83                          DWA(XP12)
1749   07DA 76          
1750   07DB 23                          .DB     "#"
1751   07DC 83                          DWA(XP12)
1751   07DD 76          
1752   07DE 3E                          .DB     ">"
1753   07DF 83                          DWA(XP13)
1753   07E0 7C          
1754   07E1 3D 3D                       .DB     "=="
1755   07E3 83                          DWA(XP15)
1755   07E4 8B          
1756   07E5 3D                          .DB     "="
1757   07E6 83                          DWA(XP15)
1757   07E7 8B          
1758   07E8 3C 3D                       .DB     "<="
1759   07EA 83                          DWA(XP14)
1759   07EB 83          
1760   07EC 3C                          .DB     "<"
1761   07ED 83                          DWA(XP16)
1761   07EE 91          
1762   07EF 83                          DWA(XP17)               ;END OF REL OPERATOR LIST
1762   07F0 97          
1763   07F1             ;
1764   07F1             LSTROM:                                 ;ALL ABOVE CAN BE ROM
1765   07F1             
1766   07F1             ; Check if the program code overflows the ROM size
1767   07F1             ;
1768   07F1~            #IF $ > RAMBGN
1769   07F1~                            .ECHO   "\n\n*** The ROM section is "
1770   07F1~                            .ECHO   $ - RAMBGN
1771   07F1~                            .ECHO   " bytes too long! ***\n\n\n"
1772   07F1             #ELSE
1773   07F1                             .ECHO   "ROM size: "
1774   07F1                             .ECHO   $
1775   07F1                             .ECHO   " bytes\n"
1776   07F1             #ENDIF
1777   07F1             ;
1778   07F1             ;
1779   07F1             ;*************************************************************
1780   07F1             
1781   07F1             
1782   0800                             .ORG            RAMBGN          ;HERE DOWN MUST BE RAM
1783   0800             
1784   0800             ;*************************************************************
1785   0800             ;
1786   0800             ;
1787   0800             TXTBGN:
1788   0800             ;
1789   0E00                             .ORG            RAMBGN+RAMSZE-$200
1790   0E00             ;
1791   0E00             TXTEND:         .EQU            $               ;TEXT SAVE AREA ENDS
1792   0E00                                                             ;VARIABLEs '@(0)', '@(1), @(2)
1793   0E00                                                             ;... stored top-down
1794   0E00                                                             ;i.e. &@(i) = TXTEND-2-2*i
1795   0E00             USRSPC:         .DS             128
1796   0E80             ;
1797   0E80             VARBGN:         .DS             2*26            ;VARIABLES 'A'..'Z'
1798   0EB4             OCSW:           .DS             1               ;SWITCH FOR OUTPUT
1799   0EB5             PNBASE:         .DS             1               ;BASE FOR PRTNUM
1800   0EB6             TXTUNF:         .DS             2               ;->UNFILLED TEXT AREA
1801   0EB8             CURRNT:         .DS             2               ;POINTS TO CURRENT LINE
1802   0EBA             STKGOS:         .DS             2               ;SAVES SP IN 'GOSUB'
1803   0EBC             VARNXT:         .DS             2               ;TEMP STORAGE
1804   0EBE             STKINP:         .DS             2               ;SAVES SP IN 'INPUT'
1805   0EC0             LOPVAR:         .DS             2               ;'FOR' LOOP SAVE AREA
1806   0EC2             LOPINC:         .DS             2               ;INCREMENT
1807   0EC4             LOPLMT:         .DS             2               ;LIMIT
1808   0EC6             LOPLN:          .DS             2               ;LINE NUMBER
1809   0EC8             LOPPT:          .DS             2               ;TEXT POINTER
1810   0ECA             RANPNT:         .DS             2               ;RANDOM NUMBER POINTER
1811   0ECC             BUFFER:         .DS             80              ;INPUT BUFFER
1812   0F1C             BUFEND:         .DS             1               ;BUFFER ENDS
1813   0F1D             STKLMT:         .DS             1               ;TOP LIMIT FOR STACK
1814   0F1E             ;
1815   1000                             .ORG            RAMBGN+RAMSZE   ;RAM END
1816   1000             STACK:          .EQU            $               ;STACK STARTS HERE
1817   1000             ;
1818   1000                             .END
