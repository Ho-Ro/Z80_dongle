0001   0000             ;Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
0002   0000             ;Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
0003   0000             ;Status bit for read in CHKIO changed to 0x02
0004   0000             ;Status bit for write in OUTC (actually OC3) changed to 0x01
0005   0000             ;Changed UART initialization parameters in INIT
0006   0000             ;Changed ORG statements at end of file to match system with 2K RAM
0007   0000             ;
0008   0000             ;2024-10-11 Ho-Ro:
0009   0000             ;Automatically converted from 8080 syntax to Z80 syntax:
0010   0000             ;https://hc-ddr.hucki.net/wiki/doku.php/cpm/8080_z80
0011   0000             ;Assembler: uz80as for Z80 as well as i8080 (uz80as --target=i8080)
0012   0000             ;Modified for use with Z80 dongle simulator
0013   0000             ;UART data port 1
0014   0000             ;UART status port 2
0015   0000             ;New:
0016   0000             ;Case insensitive input
0017   0000             ;PEEK and DEEK
0018   0000             ;PRINT modifier for hex out: PRINT %16,..
0019   0000             ;Hex numbers: $xxxx
0020   0000             ;2024-10-13 Ho-Ro:
0021   0000             ;build ROM version (2K ROM / 6.5K RAM) and RAM version (2K prog RAM / 4K free RAM)
0022   0000             ;change "SIZE" to "FREE" (free RAM), add command "RAM" (all RAM)
0023   0000             ;add command "HALT" (halts Z80, returns to dongle analyser program)
0024   0000             ;2024-10-15 Ho-Ro:
0025   0000             ;PRINT modifier %nn switches to unsigned number format, e.g.:
0026   0000             ;PRINT %10,$FFFF -> 65535
0027   0000             ;POKE ADDR, VAL, VAL, VAL,...
0028   0000             ;*************************************************************
0029   0000             ;
0030   0000             ;                 TINY BASIC FOR INTEL 8080
0031   0000             ;                       VERSION 2.0
0032   0000             ;                     BY LI-CHEN WANG
0033   0000             ;                  MODIFIED AND TRANSLATED
0034   0000             ;                    TO INTEL MNEMONICS
0035   0000             ;                     BY ROGER RAUSKOLB
0036   0000             ;                      10 OCTOBER,1976
0037   0000             ;                        @COPYLEFT
0038   0000             ;                   ALL WRONGS RESERVED
0039   0000             ;
0040   0000             ;*************************************************************
0041   0000             ;
0042   0000             ; *** ZERO PAGE SUBROUTINES ***
0043   0000             ;
0044   0000             ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
0045   0000             ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
0046   0000             ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
0047   0000             ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
0048   0000             ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
0049   0000             ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
0050   0000             ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
0051   0000             ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
0052   0000             ;
0053   0000             
0054   0000             ; Memory map
0055   0000             ROMBGN          .EQU            $0000           ; Execution must start here
0056   0000             RAMBGN          .EQU            $0800           ; 2K ROM
0057   0000             
0058   0000~            #IFDEF          MAKE_ROM
0059   0000~            ; 2K CODE IN ROM and 6.5K DATA IN RAM
0060   0000~            RAMSZE          .EQU            $1A00
0061   0000             #ELSE
0062   0000             ; 2K CODE IN RAM & 4K DATA IN RAM
0063   0000             RAMSZE          .EQU            $1000
0064   0000             #ENDIF
0065   0000             
0066   0000             ; IO map
0067   0000             IODATA          .EQU            1
0068   0000             IOSTAT          .EQU            2
0069   0000             IO_RX_BIT       .EQU            $01
0070   0000             
0071   0000             ; Control character
0072   0000             BS              .EQU            08H             ; ^H, BACKSPACE
0073   0000             CR              .EQU            0DH             ; ^M, CARRIAGE RETURN
0074   0000             LF              .EQU            0AH             ; ^J, LINE FEED
0075   0000             CAN             .EQU            18H             ; ^X, CANCEL
0076   0000             DEL             .EQU            7FH             ; DELETE
0077   0000             
0078   0000             
0079   0000             ; Store a label address as BIG endian with bit A15 set
0080   0000             #DEFINE DWA(LABEL) .DB (LABEL >> 8) | $80 \ .DB (LABEL & $FF)
0081   0000             
0082   0000             ; if CHAR = A THEN JUMP RELATIVE TO LABEL
0083   0000             #DEFINE TSTCH(CHAR,LABEL) RST RTSTC \ .DB CHAR \ .DB LABEL-$-1
0084   0000             
0085   0000             
0086   0000             .ORG            ROMBGN
0087   0000             
0088   0000             ;RSTART          .EQU    $
0089   0000 31 00 18    START:          LD      SP,STACK        ;*** COLD START ***
0090   0003 3E FF                       LD      A,0FFH
0091   0005 C3 C9 06                    JP      INIT
0092   0008             
0093   0008             RTSTC           .EQU    $       ;*** RST 1 @ $0008 ***
0094   0008 E3          TSTC:           EX      (SP),HL
0095   0009 EF                          RST     RIGNBLK ;IGNORE BLANKS AND
0096   000A BE                          CP      (HL)    ;TEST CHARACTER
0097   000B C3 6E 00                    JP      TC1     ;REST OF THIS IS AT TC1
0098   000E             
0099   000E 3E 0D       CRLF:           LD      A,CR    ;*** CRLF ***
0100   0010             ;
0101   0010             ROUTC           .EQU    $       ;*** RST 2 @ $0010 ***
0102   0010 D3 01       OUTC:           OUT     (IODATA),A      ;Out to data port
0103   0012 FE 0D                       CP      CR      ;WAS IT CR?
0104   0014 C0                          RET     NZ      ;NO, FINISHED
0105   0015 C3 DE 06                    JP      OC1     ;REST OF THIS IS AT OC1
0106   0018             
0107   0018             REXPR           .EQU    $       ;*** RST 3 @ $0018 ***
0108   0018 CD A7 03    EXPR:           CALL    EXPR2
0109   001B E5                          PUSH    HL      ;EVALUATE AN EXPRESSION
0110   001C C3 63 03                    JP      EXPR1   ;REST OF IT AT EXPR1
0111   001F 57          .DB             "W"
0112   0020             
0113   0020             RCOMP           .EQU    $       ;*** RST 4 @ $0020 ***
0114   0020 7C          COMP:           LD      A,H
0115   0021 BA                          CP      D       ;COMPARE HL WITH DE
0116   0022 C0                          RET     NZ      ;RETURN CORRECT C AND
0117   0023 7D                          LD      A,L     ;Z FLAGS
0118   0024 BB                          CP      E       ;BUT OLD A IS LOST
0119   0025 C9                          RET
0120   0026 41 4E       .DB             "AN"
0121   0028             
0122   0028             RIGNBLK         .EQU    $       ;*** RST 5 @ $0028 ***
0123   0028 1A          IGNBLK:         LD      A,(DE)
0124   0029 FE 20                       CP      20H     ;IGNORE BLANKS
0125   002B C0                          RET     NZ      ;IN TEXT (WHERE DE->)
0126   002C 13                          INC     DE      ;AND RETURN THE FIRST
0127   002D C3 28 00                    JP      IGNBLK  ;NON-BLANK CHAR. IN A
0128   0030             
0129   0030             RFINISH         .EQU    $       ;*** RST 6 @ $0030 ***
0130   0030 F1          FINISH:         POP     AF
0131   0031 CD 0B 05                    CALL    FIN     ;CHECK END OF COMMAND
0132   0034 C3 1E 05                    JP      QWHAT   ;PRINT "WHAT?" IF WRONG
0133   0037 47          .DB             "G"
0134   0038             
0135   0038             RTSTV           .EQU    $       ;*** RST 7 @ $0038 ***
0136   0038 EF          TSTV:           RST     RIGNBLK ;IGNBLK
0137   0039 D6 40                       SUB     '@'     ;TEST VARIABLES
0138   003B D8                          RET     C       ;C: < '@', NOT A VARIABLE
0139   003C C2 58 00                    JP      NZ,TV1  ;NZ: NOT THE '@' ARRAY
0140   003F 13                          INC     DE      ;IT IS THE "@" ARRAY
0141   0040 CD 47 04                    CALL    PARN    ;@ SHOULD BE FOLLOWED
0142   0043 29                          ADD     HL,HL   ;BY (EXPR) AS ITS INDEX
0143   0044 DA D0 00                    JP      C,QHOW  ;IS INDEX TOO BIG (>0x7FFF)?
0144   0047 D5                          PUSH    DE      ;WILL IT OVERWRITE
0145   0048 EB                          EX      DE,HL   ;TEXT?
0146   0049 CD 85 04                    CALL    FREE    ;FIND SIZE OF FREE RAM
0147   004C E7                          RST     RCOMP   ;AND CHECK THAT
0148   004D DA 4C 05                    JP      C,ASORRY        ;IF SO, SAY "SORRY"
0149   0050 21 00 17                    LD      HL,ARRBGN       ;IF NOT GET ADDRESS
0150   0053 CD D1 04                    CALL    SUBDE   ;OF @(EXPR) AND PUT IT
0151   0056 D1                          POP     DE      ;IN HL (top-down from TXTEND)
0152   0057 C9                          RET             ;C FLAG IS CLEARED
0153   0058             ;
0154   0058                             ; VARIABLES 'A'..'Z'
0155   0058 FE 21       TV1:            CP      21H     ;>='a'?
0156   005A 38 02                       JR      C,TV2   ;NO
0157   005C D6 20                       SUB     20H     ;MAKE UPPER CASE
0158   005E FE 1B       TV2:            CP      1BH     ;<='Z'
0159   0060 3F                          CCF             ;IF NOT RETURN C FLAG
0160   0061 D8                          RET     C
0161   0062 13                          INC     DE      ;IT IS 'A'=1 THROUGH 'Z'=26
0162   0063 21 00 17                    LD      HL,VARBGN-2       ;COMPUTE ADDRESS OF
0163   0066 07                          RLCA            ;THAT VARIABLE
0164   0067 85                          ADD     A,L     ;AND RETURN IT IN HL
0165   0068 6F                          LD      L,A     ;WITH C FLAG CLEARED
0166   0069 3E 00                       LD      A,0
0167   006B 8C                          ADC     A,H
0168   006C 67                          LD      H,A
0169   006D C9                          RET
0170   006E             
0171   006E             ;TSTC:          EX      (SP),HL ;*** TSTC OR RST 1 ***
0172   006E             ;               RST  RIGNBLK    ;THIS IS AT LOC. 8
0173   006E             ;               CMP     (HL)    ;AND THEN JUMP HERE
0174   006E             ;               JP      TC1     ;REST OF THIS IS AT TC1
0175   006E 23          TC1:            INC     HL      ;COMPARE THE BYTE THAT
0176   006F 28 07                       JR      Z,TC2   ;FOLLOWS THE RST INST.
0177   0071 C5                          PUSH    BC      ;WITH THE TEXT (DE->)
0178   0072 4E                          LD      C,(HL)  ;IF NOT =, ADD THE 2ND
0179   0073 06 00                       LD      B,0     ;BYTE THAT FOLLOWS THE
0180   0075 09                          ADD     HL,BC   ;RST TO THE OLD PC
0181   0076 C1                          POP     BC      ;I.E., DO A RELATIVE
0182   0077 1B                          DEC     DE      ;JUMP IF NOT =
0183   0078 13          TC2:            INC     DE      ;IF =, SKIP THOSE BYTES
0184   0079 23                          INC     HL      ;AND CONTINUE
0185   007A E3                          EX      (SP),HL
0186   007B C9                          RET
0187   007C             
0188   007C 21 00 00    TSTNUM:         LD      HL,0    ;*** TSTNUM ***
0189   007F 44                          LD      B,H     ;TEST IF THE TEXT IS
0190   0080 EF                          RST     RIGNBLK ;A NUMBER
0191   0081 FE 24                       CP      '$'     ;HEX NUMBER?
0192   0083 28 23                       JR      Z,TX1   ;YES
0193   0085 FE 30       TN1:            CP      '0'     ;IF NOT, RETURN 0 IN
0194   0087 D8                          RET     C       ;B AND HL
0195   0088 FE 3A                       CP      '9'+1   ;IF NUMBERS, CONVERT
0196   008A D0                          RET     NC      ;TO BINARY IN HL AND
0197   008B 3E F0                       LD      A,0F0H  ;SET B TO # OF DIGITS
0198   008D A4                          AND     H       ;IF H>15, THERE IS NO
0199   008E C2 D0 00                    JP      NZ,QHOW ;ROOM FOR NEXT DIGIT
0200   0091 04                          INC     B       ;B COUNTS # OF DIGITS
0201   0092 C5                          PUSH    BC
0202   0093 44                          LD      B,H     ;HL=10*HL+(NEW DIGIT)
0203   0094 4D                          LD      C,L
0204   0095 29                          ADD     HL,HL   ; 2*HL
0205   0096 29                          ADD     HL,HL   ; 4*HL
0206   0097 09                          ADD     HL,BC   ; 5*HL
0207   0098 29                          ADD     HL,HL   ;10*HL
0208   0099 1A                          LD      A,(DE)  ;AND (DIGIT) IS FROM
0209   009A 13                          INC     DE      ;STRIPPING THE ASCII
0210   009B E6 0F                       AND     0FH     ;CODE
0211   009D 85                          ADD     A,L
0212   009E 6F                          LD      L,A
0213   009F 3E 00                       LD      A,0
0214   00A1 8C                          ADC     A,H
0215   00A2 67                          LD      H,A
0216   00A3 C1                          POP     BC
0217   00A4 1A                          LD      A,(DE)  ;DO THIS DIGIT AFTER
0218   00A5 F2 85 00                    JP      P,TN1   ;DIGIT. S SAYS OVERFLOW
0219   00A8             
0220   00A8 13          TX1:            INC     DE      ;SKIP TO NEXT HEX
0221   00A9 1A                          LD      A,(DE)  ;GET HEX DIGIT
0222   00AA FE 30                       CP      '0'     ;< '0'
0223   00AC D8                          RET     C       ;ERROR
0224   00AD FE 3A                       CP      '9'+1   ;<= '9'
0225   00AF 38 0A                       JR      C,TX2   ;OK '0'..'9'
0226   00B1 FE 41                       CP      'A'     ;< 'A'
0227   00B3 D8                          RET     C       ;ERROR, >'9' && < 'A'
0228   00B4 E6 5F                       AND     5FH     ;CONVERT ALPHA TO UPPER
0229   00B6 FE 47                       CP      'F'+1   ;> 'F'
0230   00B8 D0                          RET     NC      ;ERROR
0231   00B9 D6 07                       SUB     'A'-'0'-10      ;SKIP GAP '9' -> 'A'
0232   00BB E6 0F       TX2:            AND     0FH     ;GET HEX CODE 0..F
0233   00BD C5                          PUSH    BC
0234   00BE 47                          LD      B,A     ;SAVE HEX CODE
0235   00BF 3E F0                       LD      A,0F0H  ;IF H>15
0236   00C1 A4                          AND     H       ;THERE IS NO ROOM
0237   00C2 78                          LD      A,B
0238   00C3 C1                          POP     BC
0239   00C4 C2 D0 00                    JP      NZ,QHOW ;FOR NEXT DIGIT
0240   00C7             
0241   00C7 04                          INC     B       ;B COUNTS # OF DIGITS
0242   00C8 29                          ADD     HL,HL   ;2*HL
0243   00C9 29                          ADD     HL,HL   ;4*HL
0244   00CA 29                          ADD     HL,HL   ;8*HL
0245   00CB 29                          ADD     HL,HL   ;16*HL
0246   00CC B5                          OR      L       ;PUT HEX CODE INTO
0247   00CD 6F                          LD      L,A     ;THE 4 LSB OF HL
0248   00CE                             ;MOV  A,H
0249   00CE                             ;ORA  A
0250   00CE 18 D8                       JR      TX1     ;DIGIT AFTER DIGIT
0251   00D0             
0252   00D0 D5          QHOW:           PUSH    DE      ;*** ERROR "HOW?" ***
0253   00D1 11 D7 00    AHOW:           LD      DE,HOW
0254   00D4 C3 22 05                    JP      ERROR
0255   00D7             
0256   00D7 48 4F 57 3F HOW:            .DB             "HOW?"
0257   00DB 0D          .DB             CR
0258   00DC             
0259   00DC 4F 4B       OK:             .DB             "OK"
0260   00DE 0D          .DB             CR
0261   00DF             
0262   00DF 57 48 41 54 WHAT:           .DB             "WHAT?"
0262   00E3 3F 
0263   00E4 0D          .DB             CR
0264   00E5             
0265   00E5 53 4F 52 52 SORRY:          .DB             "SORRY"
0265   00E9 59 
0266   00EA 0D          .DB             CR
0267   00EB             
0268   00EB             ;*************************************************************
0269   00EB             ;
0270   00EB             ; *** MAIN ***
0271   00EB             ;
0272   00EB             ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
0273   00EB             ; AND STORES IT IN THE MEMORY.
0274   00EB             ;
0275   00EB             ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
0276   00EB             ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
0277   00EB             ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
0278   00EB             ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
0279   00EB             ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
0280   00EB             ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
0281   00EB             ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
0282   00EB             ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
0283   00EB             ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
0284   00EB             ;
0285   00EB             ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
0286   00EB             ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
0287   00EB             ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
0288   00EB             ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
0289   00EB             ;
0290   00EB             ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
0291   00EB             ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
0292   00EB             ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
0293   00EB             ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
0294   00EB             ;
0295   00EB             ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
0296   00EB             ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
0297   00EB             ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
0298   00EB             ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
0299   00EB             ;
0300   00EB 31 00 18    RESTART:        LD      SP,STACK
0301   00EE CD 0E 00    ST1:            CALL    CRLF    ;AND JUMP TO HERE
0302   00F1 11 DC 00                    LD      DE,OK   ;DE->STRING
0303   00F4 97                          SUB     A       ;A=0
0304   00F5 CD B6 05                    CALL    PRTSTG  ;PRINT STRING UNTIL CR
0305   00F8 21 FF 00                    LD      HL,ST2+1        ;LITERAL 0
0306   00FB 22 3A 17                    LD      (CURRNT),HL     ;CURRENT->LINE # = 0
0307   00FE 21 00 00    ST2:            LD      HL,0
0308   0101 22 42 17                    LD      (LOPVAR),HL
0309   0104 22 3C 17                    LD      (STKGOS),HL
0310   0107 3E 3E       ST3:            LD      A,'>'   ;PROMPT '>' AND
0311   0109 CD 52 05                    CALL    GETLN   ;READ A LINE
0312   010C D5                          PUSH    DE      ;DE->END OF LINE
0313   010D 11 4E 17                    LD      DE,BUFFER       ;DE->BEGINNING OF LINE
0314   0110 CD 7C 00                    CALL    TSTNUM  ;TEST IF IT IS A NUMBER
0315   0113 EF                          RST     RIGNBLK
0316   0114 7C                          LD      A,H     ;HL=VALUE OF THE # OR
0317   0115 B5                          OR      L       ;0 IF NO # WAS FOUND
0318   0116 C1                          POP     BC      ;BC->END OF LINE
0319   0117 CA FD 06                    JP      Z,DIRECT
0320   011A 1B                          DEC     DE      ;BACKUP DE AND SAVE
0321   011B 7C                          LD      A,H     ;VALUE OF LINE # THERE
0322   011C 12                          LD      (DE),A
0323   011D 1B                          DEC     DE
0324   011E 7D                          LD      A,L
0325   011F 12                          LD      (DE),A
0326   0120 C5                          PUSH    BC      ;BC,DE->BEGIN, END
0327   0121 D5                          PUSH    DE
0328   0122 79                          LD      A,C
0329   0123 93                          SUB     E
0330   0124 F5                          PUSH    AF      ;A=# OF BYTES IN LINE
0331   0125 CD 91 05                    CALL    FNDLN   ;FIND THIS LINE IN SAVE
0332   0128 D5                          PUSH    DE      ;AREA, DE->SAVE AREA
0333   0129 20 10                       JR      NZ,ST4  ;NZ:NOT FOUND, INSERT
0334   012B D5                          PUSH    DE      ;Z:FOUND, DELETE IT
0335   012C CD AC 05                    CALL    FNDNXT  ;FIND NEXT LINE
0336   012F                                             ;DE->NEXT LINE
0337   012F C1                          POP     BC      ;BC->LINE TO BE DELETED
0338   0130 2A 38 17                    LD      HL,(TXTUNF)     ;HL->UNFILLED SAVE AREA
0339   0133 CD 6F 06                    CALL    MVUP    ;MOVE UP TO DELETE
0340   0136 60                          LD      H,B     ;TXTUNF->UNFILLED AREA
0341   0137 69                          LD      L,C
0342   0138 22 38 17                    LD      (TXTUNF),HL     ;UPDATE
0343   013B C1          ST4:            POP     BC      ;GET READY TO INSERT
0344   013C 2A 38 17                    LD      HL,(TXTUNF)     ;BUT FIRST CHECK IF
0345   013F F1                          POP     AF      ;THE LENGTH OF NEW LINE
0346   0140 E5                          PUSH    HL      ;IS 3 (LINE # AND CR)
0347   0141 FE 03                       CP      3       ;THEN DO NOT INSERT
0348   0143 CA EB 00                    JP      Z,RESTART       ;MUST CLEAR THE STACK
0349   0146 85                          ADD     A,L     ;COMPUTE NEW TXTUNF
0350   0147 6F                          LD      L,A
0351   0148 3E 00                       LD      A,0
0352   014A 8C                          ADC     A,H
0353   014B 67                          LD      H,A     ;HL->NEW UNFILLED AREA
0354   014C 11 00 17                    LD      DE,TXTEND       ;CHECK TO SEE IF THERE
0355   014F E7                          RST     RCOMP   ;COMP HL,DE - IS ENOUGH SPACE
0356   0150 D2 4B 05                    JP      NC,QSORRY       ;SORRY, NO ROOM FOR IT
0357   0153 22 38 17                    LD      (TXTUNF),HL     ;OK, UPDATE TXTUNF
0358   0156 D1                          POP     DE      ;DE->OLD UNFILLED AREA
0359   0157 CD 77 06                    CALL    MVDOWN
0360   015A D1                          POP     DE      ;DE->BEGIN, HL->END
0361   015B E1                          POP     HL
0362   015C CD 6F 06                    CALL    MVUP    ;MOVE NEW LINE TO SAVE
0363   015F 18 A6                       JR      ST3     ;AREA
0364   0161             
0365   0161             ;*************************************************************
0366   0161             ;
0367   0161             ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
0368   0161             ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
0369   0161             ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
0370   0161             ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
0371   0161             ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
0372   0161             ;
0373   0161             ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RESTART'
0374   0161             ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
0375   0161             ; GO BACK TO 'RESTART'.
0376   0161             ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
0377   0161             ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
0378   0161             ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RESTART', ELSE
0379   0161             ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
0380   0161             ;*************************************************************
0381   0161             ;
0382   0161             ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
0383   0161             ;
0384   0161             ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
0385   0161             ;
0386   0161             ; 'STOP(CR)' GOES BACK TO 'RESTART'
0387   0161             ;
0388   0161             ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
0389   0161             ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
0390   0161             ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
0391   0161             ;
0392   0161             ; THERE ARE 3 MORE ENTRIES IN 'RUN':
0393   0161             ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
0394   0161             ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
0395   0161             ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
0396   0161             ;
0397   0161             ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
0398   0161             ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
0399   0161             ;
0400   0161 CD 1A 05    NEW:            CALL    ENDCHK  ;*** NEW(CR) ***
0401   0164 21 00 08                    LD      HL,TXTBGN
0402   0167 22 38 17                    LD      (TXTUNF),HL
0403   016A             ;
0404   016A CD 1A 05    STOP:           CALL    ENDCHK  ;*** STOP(CR) ***
0405   016D C3 EB 00                    JP      RESTART
0406   0170             
0407   0170 CD 1A 05    RUN:            CALL    ENDCHK  ;*** RUN(CR) ***
0408   0173 11 00 08                    LD      DE,TXTBGN       ;FIRST SAVED LINE
0409   0176             ;
0410   0176 21 00 00    RUNNXL:         LD      HL,0    ;*** RUNNXL ***
0411   0179 CD 99 05                    CALL    FNDLP   ;FIND WHATEVER LINE #
0412   017C DA EB 00                    JP      C,RESTART       ;C:PASSED TXTUNF, QUIT
0413   017F             ;
0414   017F EB          RUNTSL:         EX      DE,HL   ;*** RUNTSL ***
0415   0180 22 3A 17                    LD      (CURRNT),HL     ;SET 'CURRENT'->LINE #
0416   0183 EB                          EX      DE,HL
0417   0184 13                          INC     DE      ;BUMP PASS LINE #
0418   0185 13                          INC     DE
0419   0186             ;
0420   0186 CD E4 06    RUNSML:         CALL    CHKIO   ;*** RUNSML ***
0421   0189 21 41 07                    LD      HL,TAB2-1       ;FIND COMMAND IN TAB2
0422   018C C3 00 07                    JP      EXEC    ;AND EXECUTE IT
0423   018F             
0424   018F DF          GOTO:           RST     REXPR   ;*** GOTO EXPR ***
0425   0190 D5                          PUSH    DE      ;SAVE FOR ERROR ROUTINE
0426   0191 CD 1A 05                    CALL    ENDCHK  ;MUST FIND A CR
0427   0194 CD 91 05                    CALL    FNDLN   ;FIND THE TARGET LINE
0428   0197 C2 D1 00                    JP      NZ,AHOW ;NO SUCH LINE #
0429   019A F1                          POP     AF      ;CLEAR THE PUSH DE
0430   019B C3 7F 01                    JP      RUNTSL  ;GO DO IT
0431   019E             ;
0432   019E             ;*************************************************************
0433   019E             ;
0434   019E             ; *** LIST *** & PRINT ***
0435   019E             ;
0436   019E             ; LIST HAS TWO FORMS:
0437   019E             ; 'LIST(CR)' LISTS ALL SAVED LINES
0438   019E             ; 'LIST #(CR)' START LIST AT THIS LINE #
0439   019E             ; YOU CAN STOP THE LISTING BY CONTROL C KEY
0440   019E             ;
0441   019E             ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
0442   019E             ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
0443   019E             ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
0444   019E             ;
0445   019E             ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
0446   019E             ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
0447   019E             ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
0448   019E             ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
0449   019E             ; SPECIFIED, 8 POSITIONS WILL BE USED.
0450   019E             ;
0451   019E             ; NUMBER BASE IS SET BY PERCENT SIGN FOLLOEWED BY A NUMBER
0452   019E             ; BETWEEN 2 and 16. VALUES ARE PRINTED AS UNSIGNED TO THIS BASE
0453   019E             ; FOR THE REST OF THIS PRINT COMMAND UNLESS CHANGED BY
0454   019E             ; ANOTHER BASE. IF NO BASE IS PROVIDED NUMBERS ARE SIGNED DECIMAL.
0455   019E             ;
0456   019E             ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
0457   019E             ; DOUBLE QUOTES.
0458   019E             ;
0459   019E             ; A BACK-ARROW (UNDERLINE) ALONE MEANS GENERATE A (CR) WITHOUT (LF).
0460   019E             ;
0461   019E             ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
0462   019E             ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
0463   019E             ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
0464   019E             ;
0465   019E CD 7C 00    LIST:           CALL    TSTNUM  ;TEST IF THERE IS A #
0466   01A1 CD 1A 05                    CALL    ENDCHK  ;IF NO # WE GET A 0
0467   01A4 CD 91 05                    CALL    FNDLN   ;FIND THIS OR NEXT LINE
0468   01A7 DA EB 00    LS1:            JP      C,RESTART       ;C:PASSED TXTUNF
0469   01AA CD 58 06                    CALL    PRTLN   ;PRINT THE LINE
0470   01AD CD E4 06                    CALL    CHKIO   ;STOP IF HIT CONTROL-C
0471   01B0 CD 99 05                    CALL    FNDLP   ;FIND NEXT LINE
0472   01B3 18 F2                       JR      LS1     ;AND LOOP BACK
0473   01B5             
0474   01B5 0E 08       PRINT:          LD      C,8     ;C = # OF SPACES
0475   01B7 AF                          XOR     A       ;DEFAULT BASE FOR PRTNUM
0476   01B8 32 37 17                    LD      (PNBASE),A
0477   01BB CF                          TSTCH(';',PR2)  ;IF NULL LIST & ";"
0477   01BC 3B          
0477   01BD 06          
0478   01BE CD 0E 00                    CALL    CRLF    ;GIVE CR-LF AND
0479   01C1 C3 86 01                    JP      RUNSML  ;CONTINUE SAME LINE
0480   01C4 CF          PR2:            TSTCH(CR,PR0)   ;IF NULL LIST (CR)
0480   01C5 0D          
0480   01C6 06          
0481   01C7 CD 0E 00                    CALL    CRLF    ;ALSO GIVE CR-LF AND
0482   01CA C3 76 01                    JP      RUNNXL  ;GO TO NEXT LINE
0483   01CD CF          PR0:            TSTCH('#',PR5)  ;ELSE IS IT FORMAT?
0483   01CE 23          
0483   01CF 04          
0484   01D0 DF                          RST     REXPR   ;YES, EVALUATE EXPR.
0485   01D1 4D                          LD      C,L     ;AND SAVE IT IN C
0486   01D2 18 19                       JR      PR3     ;LOOK FOR MORE TO PRINT
0487   01D4 CF          PR5:            TSTCH('%',PR1)  ;ELSE IS IT PRTNUM BASE?
0487   01D5 25          
0487   01D6 11          
0488   01D7 DF                          RST     REXPR   ;YES, EVALUATE EXPR.
0489   01D8 7D                          LD      A,L     ;GET THE LOW PART
0490   01D9 FE 01                       CP      1       ;EITHER 0 OR >= 2?
0491   01DB CA D0 00                    JP      Z,QHOW  ;ERROR
0492   01DE FE 11                       CP      17      ;BASE > 16?
0493   01E0 D2 D0 00                    JP      NC,QHOW ;ERROR
0494   01E3 32 37 17                    LD      (PNBASE),A      ;IN PNBASE
0495   01E6 18 05                       JR      PR3     ;LOOK FOR MORE TO PRINT
0496   01E8 CD C1 05    PR1:            CALL    QTSTG   ;OR IS IT A STRING?
0497   01EB 18 10                       JR      PR8     ;IF NOT, MUST BE EXPR.
0498   01ED CF          PR3:            TSTCH($2C,PR6)  ;IF ",", GO FIND NEXT
0498   01EE 2C          
0498   01EF 05          
0499   01F0 CD 0B 05                    CALL    FIN     ;IN THE LIST.
0500   01F3 18 D8                       JR      PR0     ;LIST CONTINUES
0501   01F5 AF          PR6:            XOR     A       ;END OF LIST REACHED
0502   01F6 32 37 17                    LD      (PNBASE),A      ;RESET DEFAULT BASE
0503   01F9 CD 0E 00                    CALL    CRLF    ;LIST ENDS WITH CRLF
0504   01FC F7                          RST     RFINISH ;FINISH
0505   01FD DF          PR8:            RST     REXPR   ;EVALUATE THE EXPR
0506   01FE C5                          PUSH    BC
0507   01FF CD F1 05                    CALL    PRTNUM  ;PRINT THE VALUE
0508   0202 C1                          POP     BC
0509   0203 18 E8                       JR      PR3     ;MORE TO PRINT?
0510   0205             ;
0511   0205             ;*************************************************************
0512   0205             ;
0513   0205             ; *** GOSUB *** & RETURN ***
0514   0205             ;
0515   0205             ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
0516   0205             ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
0517   0205             ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
0518   0205             ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
0519   0205             ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
0520   0205             ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
0521   0205             ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
0522   0205             ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
0523   0205             ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
0524   0205             ;
0525   0205             ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
0526   0205             ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
0527   0205             ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
0528   0205             ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
0529   0205             ;
0530   0205 CD A0 06    GOSUB:          CALL    PUSHA   ;SAVE THE CURRENT "FOR"
0531   0208 DF                          RST     REXPR   ;PARAMETERS
0532   0209 D5                          PUSH    DE      ;AND TEXT POINTER
0533   020A CD 91 05                    CALL    FNDLN   ;FIND THE TARGET LINE
0534   020D C2 D1 00                    JP      NZ,AHOW ;NOT THERE. SAY "HOW?"
0535   0210 2A 3A 17                    LD      HL,(CURRNT)     ;FOUND IT, SAVE OLD
0536   0213 E5                          PUSH    HL      ;'CURRNT' OLD 'STKGOS'
0537   0214 2A 3C 17                    LD      HL,(STKGOS)
0538   0217 E5                          PUSH    HL
0539   0218 21 00 00                    LD      HL,0    ;AND LOAD NEW ONES
0540   021B 22 42 17                    LD      (LOPVAR),HL
0541   021E 39                          ADD     HL,SP
0542   021F 22 3C 17                    LD      (STKGOS),HL
0543   0222 C3 7F 01                    JP      RUNTSL  ;THEN RUN THAT LINE
0544   0225 CD 1A 05    RETURN:         CALL    ENDCHK  ;THERE MUST BE A CR
0545   0228 2A 3C 17                    LD      HL,(STKGOS)     ;OLD STACK POINTER
0546   022B 7C                          LD      A,H     ;0 MEANS NOT EXIST
0547   022C B5                          OR      L
0548   022D CA 1E 05                    JP      Z,QWHAT ;SO, WE SAY: "WHAT?"
0549   0230 F9                          LD      SP,HL   ;ELSE, RESTORE IT
0550   0231 E1                          POP     HL
0551   0232 22 3C 17                    LD      (STKGOS),HL     ;AND THE OLD 'STKGOS'
0552   0235 E1                          POP     HL
0553   0236 22 3A 17                    LD      (CURRNT),HL     ;AND THE OLD 'CURRNT'
0554   0239 D1                          POP     DE      ;OLD TEXT POINTER
0555   023A CD 84 06                    CALL    POPA    ;OLD "FOR" PARAMETERS
0556   023D F7                          RST     RFINISH ;AND WE ARE BACK HOME
0557   023E             ;
0558   023E             ;*************************************************************
0559   023E             ;
0560   023E             ; *** FOR *** & NEXT ***
0561   023E             ;
0562   023E             ; 'FOR' HAS TWO FORMS:
0563   023E             ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
0564   023E             ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
0565   023E             ; EXP3=1.  (I.E., WITH A STEP OF +1.)
0566   023E             ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
0567   023E             ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
0568   023E             ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
0569   023E             ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
0570   023E             ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
0571   023E             ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
0572   023E             ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
0573   023E             ; BEFORE THE NEW ONE OVERWRITES IT.
0574   023E             ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
0575   023E             ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
0576   023E             ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
0577   023E             ; (PURGED FROM THE STACK..)
0578   023E             ;
0579   023E             ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
0580   023E             ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
0581   023E             ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
0582   023E             ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
0583   023E             ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
0584   023E             ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
0585   023E             ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
0586   023E             ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
0587   023E             ; IS PURGED AND EXECUTION CONTINUES.
0588   023E             ;
0589   023E CD A0 06    FOR:            CALL    PUSHA           ;SAVE THE OLD SAVE AREA
0590   0241 CD F8 04                    CALL    SETVAL          ;SET THE CONTROL VAR.
0591   0244 2B                          DEC     HL              ;HL IS ITS ADDRESS
0592   0245 22 42 17                    LD      (LOPVAR),HL     ;SAVE THAT
0593   0248 21 B7 07                    LD      HL,TAB5-1       ;USE 'EXEC' TO LOOK
0594   024B C3 00 07                    JP      EXEC            ;FOR THE WORD 'TO'
0595   024E DF          FR1:            RST     REXPR           ;EVALUATE THE LIMIT
0596   024F 22 46 17                    LD      (LOPLMT),HL     ;SAVE THAT
0597   0252 21 BD 07                    LD      HL,TAB6-1       ;USE 'EXEC' TO LOOK
0598   0255 C3 00 07                    JP      EXEC            ;FOR THE WORD 'STEP'
0599   0258 DF          FR2:            RST     REXPR           ;FOUND IT, GET STEP
0600   0259 18 03                       JR      FR4
0601   025B 21 01 00    FR3:            LD      HL,1H           ;NOT FOUND, SET TO 1
0602   025E 22 44 17    FR4:            LD      (LOPINC),HL     ;SAVE THAT TOO
0603   0261 2A 3A 17    FR5:            LD      HL,(CURRNT)     ;SAVE CURRENT LINE #
0604   0264 22 48 17                    LD      (LOPLN),HL
0605   0267 EB                          EX      DE,HL           ;AND TEXT POINTER
0606   0268 22 4A 17                    LD      (LOPPT),HL
0607   026B 01 0A 00                    LD      BC,0AH          ;DIG INTO STACK TO
0608   026E 2A 42 17                    LD      HL,(LOPVAR)     ;FIND 'LOPVAR'
0609   0271 EB                          EX      DE,HL
0610   0272 60                          LD      H,B
0611   0273 68                          LD      L,B             ;HL=0 NOW
0612   0274 39                          ADD     HL,SP           ;HERE IS THE STACK
0613   0275 3E                          .DB     3EH             ;SKIP "ADD HL,BC"
0614   0276 09          FR7:            ADD     HL,BC           ;EACH LEVEL IS 10 DEEP
0615   0277 7E                          LD      A,(HL)          ;GET THAT OLD 'LOPVAR'
0616   0278 23                          INC     HL
0617   0279 B6                          OR      (HL)
0618   027A 28 18                       JR      Z,FR8           ;0 SAYS NO MORE IN IT
0619   027C 7E                          LD      A,(HL)
0620   027D 2B                          DEC     HL
0621   027E BA                          CP      D               ;SAME AS THIS ONE?
0622   027F 20 F5                       JR      NZ,FR7
0623   0281 7E                          LD      A,(HL)          ;THE OTHER HALF?
0624   0282 BB                          CP      E
0625   0283 20 F1                       JR      NZ,FR7
0626   0285 EB                          EX      DE,HL           ;YES, FOUND ONE
0627   0286 21 00 00                    LD      HL,0H
0628   0289 39                          ADD     HL,SP           ;TRY TO MOVE SP
0629   028A 44                          LD      B,H
0630   028B 4D                          LD      C,L
0631   028C 21 0A 00                    LD      HL,0AH
0632   028F 19                          ADD     HL,DE
0633   0290 CD 77 06                    CALL    MVDOWN          ;AND PURGE 10 WORDS
0634   0293 F9                          LD      SP,HL           ;IN THE STACK
0635   0294 2A 4A 17    FR8:            LD      HL,(LOPPT)      ;JOB DONE, RESTORE DE
0636   0297 EB                          EX      DE,HL
0637   0298 F7                          RST     RFINISH         ;AND CONTINUE
0638   0299             ;
0639   0299 FF          NEXT:           RST     RTSTV           ;GET ADDRESS OF VAR.
0640   029A DA 1E 05                    JP      C,QWHAT         ;NO VARIABLE, "WHAT?"
0641   029D 22 3E 17                    LD      (VARNXT),HL     ;YES, SAVE IT
0642   02A0 D5          NX0:            PUSH    DE              ;SAVE TEXT POINTER
0643   02A1 EB                          EX      DE,HL
0644   02A2 2A 42 17                    LD      HL,(LOPVAR)     ;GET VAR. IN 'FOR'
0645   02A5 7C                          LD      A,H
0646   02A6 B5                          OR      L               ;0 SAYS NEVER HAD ONE
0647   02A7 CA 1F 05                    JP      Z,AWHAT         ;SO WE ASK: "WHAT?"
0648   02AA E7                          RST     RCOMP           ;ELSE WE CHECK THEM
0649   02AB 28 09                       JR      Z,NX3           ;OK, THEY AGREE
0650   02AD D1                          POP     DE              ;NO, LET'S SEE
0651   02AE CD 84 06                    CALL    POPA            ;PURGE CURRENT LOOP
0652   02B1 2A 3E 17                    LD      HL,(VARNXT)     ;AND POP ONE LEVEL
0653   02B4 18 EA                       JR      NX0             ;GO CHECK AGAIN
0654   02B6 5E          NX3:            LD      E,(HL)          ;COME HERE WHEN AGREED
0655   02B7 23                          INC     HL
0656   02B8 56                          LD      D,(HL)          ;DE=VALUE OF VAR.
0657   02B9 2A 44 17                    LD      HL,(LOPINC)
0658   02BC E5                          PUSH    HL
0659   02BD 7C                          LD      A,H
0660   02BE AA                          XOR     D
0661   02BF 7A                          LD      A,D
0662   02C0 19                          ADD     HL,DE           ;ADD ONE STEP
0663   02C1 FA C8 02                    JP      M,NX4
0664   02C4 AC                          XOR     H
0665   02C5 FA E9 02                    JP      M,NX5
0666   02C8 EB          NX4:            EX      DE,HL
0667   02C9 2A 42 17                    LD      HL,(LOPVAR)     ;PUT IT BACK
0668   02CC 73                          LD      (HL),E
0669   02CD 23                          INC     HL
0670   02CE 72                          LD      (HL),D
0671   02CF 2A 46 17                    LD      HL,(LOPLMT)     ;HL->LIMIT
0672   02D2 F1                          POP     AF              ;OLD HL
0673   02D3 B7                          OR      A
0674   02D4 F2 D8 02                    JP      P,NX1           ;STEP > 0
0675   02D7 EB                          EX      DE,HL           ;STEP < 0
0676   02D8 CD F0 04    NX1:            CALL    CKHLDE          ;COMPARE WITH LIMIT
0677   02DB D1                          POP     DE              ;RESTORE TEXT POINTER
0678   02DC 38 0D                       JR      C,NX2           ;OUTSIDE LIMIT
0679   02DE 2A 48 17                    LD      HL,(LOPLN)      ;WITHIN LIMIT, GO
0680   02E1 22 3A 17                    LD      (CURRNT),HL     ;BACK TO THE SAVED
0681   02E4 2A 4A 17                    LD      HL,(LOPPT)      ;'CURRNT' AND TEXT
0682   02E7 EB                          EX      DE,HL           ;POINTER
0683   02E8 F7                          RST     RFINISH
0684   02E9 E1          NX5:            POP     HL
0685   02EA D1                          POP     DE
0686   02EB CD 84 06    NX2:            CALL    POPA            ;PURGE THIS LOOP
0687   02EE F7                          RST     RFINISH
0688   02EF             ;
0689   02EF             ;*************************************************************
0690   02EF             ;
0691   02EF             ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
0692   02EF             ;
0693   02EF             ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
0694   02EF             ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
0695   02EF             ;
0696   02EF             ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
0697   02EF             ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
0698   02EF             ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
0699   02EF             ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
0700   02EF             ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
0701   02EF             ; EXECUTION CONTINUES AT THE NEXT LINE.
0702   02EF             ;
0703   02EF             ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
0704   02EF             ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
0705   02EF             ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
0706   02EF             ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
0707   02EF             ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
0708   02EF             ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
0709   02EF             ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
0710   02EF             ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
0711   02EF             ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
0712   02EF             ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
0713   02EF             ;
0714   02EF             ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
0715   02EF             ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
0716   02EF             ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
0717   02EF             ; THIS IS HANDLED IN 'INPERR'.
0718   02EF             ;
0719   02EF             ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
0720   02EF             ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
0721   02EF             ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
0722   02EF             ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
0723   02EF             ; THIS IS DONE BY 'DEFLT'.
0724   02EF             ;
0725   02EF 21 00 00    REM:            LD      HL,0H   ;*** REM ***
0726   02F2 3E          .DB             3EH             ;SKIP RST, THIS IS LIKE 'IF 0'
0727   02F3             ;
0728   02F3 DF          IFF:            RST     REXPR   ;*** IF ***
0729   02F4 7C                          LD      A,H     ;IS THE EXPR.=0?
0730   02F5 B5                          OR      L
0731   02F6 C2 86 01                    JP      NZ,RUNSML       ;NO, CONTINUE
0732   02F9 CD AE 05                    CALL    FNDSKP  ;YES, SKIP REST OF LINE
0733   02FC D2 7F 01                    JP      NC,RUNTSL       ;AND RUN THE NEXT LINE
0734   02FF C3 EB 00                    JP      RESTART ;IF NO NEXT, RE-START
0735   0302             ;
0736   0302 2A 40 17    INPERR:         LD      HL,(STKINP)     ;*** INPERR ***
0737   0305 F9                          LD      SP,HL   ;RESTORE OLD SP
0738   0306 E1                          POP     HL      ;AND OLD 'CURRNT'
0739   0307 22 3A 17                    LD      (CURRNT),HL
0740   030A D1                          POP     DE      ;AND OLD TEXT POINTER
0741   030B D1                          POP     DE      ;REDO INPUT
0742   030C             ;
0743   030C             INPUT:          ;*** INPUT ***
0744   030C D5          IP1:            PUSH    DE      ;SAVE IN CASE OF ERROR
0745   030D CD C1 05                    CALL    QTSTG   ;IS NEXT ITEM A STRING?
0746   0310 18 05                       JR      IP2     ;NO
0747   0312 FF                          RST     RTSTV   ;YES, BUT FOLLOWED BY A
0748   0313 38 39                       JR      C,IP4   ;VARIABLE?   NO.
0749   0315 18 10                       JR      IP3     ;YES.  INPUT VARIABLE
0750   0317 D5          IP2:            PUSH    DE      ;SAVE FOR 'PRTSTG'
0751   0318 FF                          RST     RTSTV   ;MUST BE VARIABLE NOW
0752   0319 DA 1E 05                    JP      C,QWHAT ;"WHAT?" IT IS NOT?
0753   031C 1A                          LD      A,(DE)  ;GET READY FOR 'PRTSTG'
0754   031D 4F                          LD      C,A
0755   031E 97                          SUB     A
0756   031F 12                          LD      (DE),A
0757   0320 D1                          POP     DE
0758   0321 CD B6 05                    CALL    PRTSTG  ;PRINT STRING AS PROMPT
0759   0324 79                          LD      A,C     ;RESTORE TEXT
0760   0325 1B                          DEC     DE
0761   0326 12                          LD      (DE),A
0762   0327 D5          IP3:            PUSH    DE      ;SAVE TEXT POINTER
0763   0328 EB                          EX      DE,HL
0764   0329 2A 3A 17                    LD      HL,(CURRNT)     ;ALSO SAVE 'CURRNT'
0765   032C E5                          PUSH    HL
0766   032D 21 0C 03                    LD      HL,IP1  ;A NEGATIVE NUMBER
0767   0330 22 3A 17                    LD      (CURRNT),HL     ;AS A FLAG
0768   0333 21 00 00                    LD      HL,0H   ;SAVE SP TOO
0769   0336 39                          ADD     HL,SP
0770   0337 22 40 17                    LD      (STKINP),HL
0771   033A D5                          PUSH    DE      ;OLD HL
0772   033B 3E 3A                       LD      A,':'   ;PRINT THIS TOO
0773   033D CD 52 05                    CALL    GETLN   ;AND GET A LINE
0774   0340 11 4E 17                    LD      DE,BUFFER       ;POINTS TO BUFFER
0775   0343 DF                          RST     REXPR   ;EVALUATE INPUT
0776   0344             ;NOP                             ;CAN BE 'CALL ENDCHK'
0777   0344             ;NOP
0778   0344             ;NOP
0779   0344 D1                          POP     DE      ;OK, GET OLD HL
0780   0345 EB                          EX      DE,HL
0781   0346 73                          LD      (HL),E  ;SAVE VALUE IN VAR.
0782   0347 23                          INC     HL
0783   0348 72                          LD      (HL),D
0784   0349 E1                          POP     HL      ;GET OLD 'CURRNT'
0785   034A 22 3A 17                    LD      (CURRNT),HL
0786   034D D1                          POP     DE      ;AND OLD TEXT POINTER
0787   034E F1          IP4:            POP     AF      ;PURGE JUNK IN STACK
0788   034F CF                          TSTCH($2C,IP5)  ;IS NEXT CH. ','?
0788   0350 2C          
0788   0351 02          
0789   0352 18 B8                       JR      IP1     ;YES, MORE ITEMS.
0790   0354 F7          IP5:            RST     RFINISH
0791   0355             ;
0792   0355 1A          DEFLT:          LD      A,(DE)  ;***  DEFLT ***
0793   0356 FE 0D                       CP      CR      ;EMPTY LINE IS OK
0794   0358 28 08                       JR      Z,LT1   ;ELSE IT IS 'LET'
0795   035A             ;
0796   035A CD F8 04    LET:            CALL    SETVAL  ;*** LET ***
0797   035D CF                          TSTCH($2C,LT1)  ;SET VALUE TO VAR.
0797   035E 2C          
0797   035F 02          
0798   0360 18 F8                       JR      LET     ;ITEM BY ITEM
0799   0362 F7          LT1:            RST     RFINISH ;UNTIL FINISH
0800   0363             ;
0801   0363             ;*************************************************************
0802   0363             ;
0803   0363             ; *** EXPR ***
0804   0363             ;
0805   0363             ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
0806   0363             ; <EXPR>::<EXPR2>
0807   0363             ;         <EXPR2><REL.OP.><EXPR2>
0808   0363             ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
0809   0363             ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
0810   0363             ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
0811   0363             ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
0812   0363             ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
0813   0363             ; <EXPR4>::=<VARIABLE>
0814   0363             ;           <FUNCTION>
0815   0363             ;           (<EXPR>)
0816   0363             ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
0817   0363             ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
0818   0363             ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
0819   0363             ;
0820   0363             ;EXPR:          CALL    EXPR2   ;THIS IS AT LOC. 18
0821   0363             ;               PUSH    HL      ;SAVE <EXPR2> VALUE
0822   0363             ;               JP      EXPR1   ;REST OF IT AT EXPR1
0823   0363 21 C5 07    EXPR1:          LD      HL,TAB8-1       ;LOOKUP REL.OP.
0824   0366 C3 00 07                    JP      EXEC    ;GO DO IT
0825   0369             ;
0826   0369 CD 92 03    XP11:           CALL    XP18    ;REL.OP.">="
0827   036C D8                          RET     C       ;NO, RETURN HL=0
0828   036D 6F                          LD      L,A     ;YES, RETURN HL=1
0829   036E C9                          RET
0830   036F             ;
0831   036F CD 92 03    XP12:           CALL    XP18    ;REL.OP."#"
0832   0372 C8                          RET     Z       ;FALSE, RETURN HL=0
0833   0373 6F                          LD      L,A     ;TRUE, RETURN HL=1
0834   0374 C9                          RET
0835   0375             ;
0836   0375 CD 92 03    XP13:           CALL    XP18    ;REL.OP.">"
0837   0378 C8                          RET     Z       ;FALSE
0838   0379 D8                          RET     C       ;ALSO FALSE, HL=0
0839   037A 6F                          LD      L,A     ;TRUE, HL=1
0840   037B C9                          RET
0841   037C             ;
0842   037C CD 92 03    XP14:           CALL    XP18    ;REL.OP."<="
0843   037F 6F                          LD      L,A     ;SET HL=1
0844   0380 C8                          RET     Z       ;REL. TRUE, RETURN
0845   0381 D8                          RET     C
0846   0382 6C                          LD      L,H     ;ELSE SET HL=0
0847   0383 C9                          RET
0848   0384             ;
0849   0384 CD 92 03    XP15:           CALL    XP18    ;REL.OP."="
0850   0387 C0                          RET     NZ      ;FALSE, RETURN HL=0
0851   0388 6F                          LD      L,A     ;ELSE SET HL=1
0852   0389 C9                          RET
0853   038A             ;
0854   038A CD 92 03    XP16:           CALL    XP18    ;REL.OP."<"
0855   038D D0                          RET     NC      ;FALSE, RETURN HL=0
0856   038E 6F                          LD      L,A     ;ELSE SET HL=1
0857   038F C9                          RET
0858   0390             ;
0859   0390 E1          XP17:           POP     HL      ;NOT .REL.OP
0860   0391 C9                          RET             ;RETURN HL=<EXPR2>
0861   0392             ;
0862   0392 79          XP18:           LD      A,C     ;SUBROUTINE FOR ALL
0863   0393 E1                          POP     HL      ;REL.OP.'S
0864   0394 C1                          POP     BC
0865   0395 E5                          PUSH    HL      ;REVERSE TOP OF STACK
0866   0396 C5                          PUSH    BC
0867   0397 4F                          LD      C,A
0868   0398 CD A7 03                    CALL    EXPR2   ;GET 2ND <EXPR2>
0869   039B EB                          EX      DE,HL   ;VALUE IN DE NOW
0870   039C E3                          EX      (SP),HL ;1ST <EXPR2> IN HL
0871   039D CD F0 04                    CALL    CKHLDE  ;COMPARE 1ST WITH 2ND
0872   03A0 D1                          POP     DE      ;RESTORE TEXT POINTER
0873   03A1 21 00 00                    LD      HL,0H   ;SET HL=0, A=1
0874   03A4 3E 01                       LD      A,1
0875   03A6 C9                          RET
0876   03A7             ;
0877   03A7 CF          EXPR2:          TSTCH('-',XP21) ;NEGATIVE SIGN?
0877   03A8 2D          
0877   03A9 05          
0878   03AA 21 00 00                    LD      HL,0H   ;YES, FAKE '0-'
0879   03AD 18 21                       JR      XP26    ;TREAT LIKE SUBTRACT
0880   03AF             ;
0881   03AF CF          XP21:           TSTCH('+',XP22) ;POSITIVE SIGN? IGNORE
0881   03B0 2B          
0881   03B1 00          
0882   03B2 CD D9 03    XP22:           CALL    EXPR3   ;1ST <EXPR3>
0883   03B5 CF          XP23:           TSTCH('+',XP25) ;ADD?
0883   03B6 2B          
0883   03B7 15          
0884   03B8 E5                          PUSH    HL      ;YES, SAVE VALUE
0885   03B9 CD D9 03                    CALL    EXPR3   ;GET 2ND <EXPR3>
0886   03BC EB          XP24:           EX      DE,HL   ;2ND IN DE
0887   03BD E3                          EX      (SP),HL ;1ST IN HL
0888   03BE 7C                          LD      A,H     ;COMPARE SIGN
0889   03BF AA                          XOR     D
0890   03C0 7A                          LD      A,D
0891   03C1 19                          ADD     HL,DE
0892   03C2 D1                          POP     DE      ;RESTORE TEXT POINTER
0893   03C3 FA B5 03                    JP      M,XP23  ;1ST AND 2ND SIGN DIFFER
0894   03C6 AC                          XOR     H       ;1ST AND 2ND SIGN EQUAL
0895   03C7 F2 B5 03                    JP      P,XP23  ;SO IS RESULT
0896   03CA             ;
0897   03CA C3 D0 00                    JP      QHOW    ;ELSE WE HAVE OVERFLOW
0898   03CD             ;
0899   03CD CF          XP25:           TSTCH('-',XP42) ;SUBTRACT?
0899   03CE 2D          
0899   03CF 7E          
0900   03D0 E5          XP26:           PUSH    HL      ;YES, SAVE 1ST <EXPR3>
0901   03D1 CD D9 03                    CALL    EXPR3   ;GET 2ND <EXPR3>
0902   03D4 CD DB 04                    CALL    CHGSGN  ;NEGATE
0903   03D7 18 E3                       JR      XP24    ;AND ADD THEM
0904   03D9             ;
0905   03D9 CD 33 04    EXPR3:          CALL    EXPR4   ;GET 1ST <EXPR4>
0906   03DC CF          XP31:           TSTCH('*',XP34) ;MULTIPLY?
0906   03DD 2A          
0906   03DE 28          
0907   03DF E5                          PUSH    HL      ;YES, SAVE 1ST
0908   03E0 CD 33 04                    CALL    EXPR4   ;AND GET 2ND <EXPR4>
0909   03E3 06 00                       LD      B,0H    ;CLEAR B FOR SIGN
0910   03E5 CD D8 04                    CALL    CHKSGN  ;CHECK SIGN
0911   03E8 E3                          EX      (SP),HL ;1ST IN HL
0912   03E9 CD D8 04                    CALL    CHKSGN  ;CHECK SIGN OF 1ST
0913   03EC EB                          EX      DE,HL
0914   03ED E3                          EX      (SP),HL
0915   03EE 7C                          LD      A,H     ;IS HL > 255 ?
0916   03EF B7                          OR      A
0917   03F0 28 06                       JR      Z,XP32  ;NO
0918   03F2 7A                          LD      A,D     ;YES, HOW ABOUT DE
0919   03F3 B2                          OR      D
0920   03F4 EB                          EX      DE,HL   ;PUT SMALLER IN HL
0921   03F5 C2 D1 00                    JP      NZ,AHOW ;ALSO >, WILL OVERFLOW
0922   03F8 7D          XP32:           LD      A,L     ;THIS IS DUMB
0923   03F9 21 00 00                    LD      HL,0H   ;CLEAR RESULT
0924   03FC B7                          OR      A       ;ADD AND COUNT
0925   03FD 28 27                       JR      Z,XP35
0926   03FF 19          XP33:           ADD     HL,DE
0927   0400 38 CF                       JR      C,AHOW  ;OVERFLOW
0928   0402 3D                          DEC     A
0929   0403 20 FA                       JR      NZ,XP33
0930   0405 18 1F                       JR      XP35    ;FINISHED
0931   0407             ;
0932   0407 CF          XP34:           TSTCH('/',XP42) ;DIVIDE?
0932   0408 2F          
0932   0409 44          
0933   040A E5                          PUSH    HL      ;YES, SAVE 1ST <EXPR4>
0934   040B CD 33 04                    CALL    EXPR4   ;AND GET THE SECOND ONE
0935   040E 06 00                       LD      B,0H    ;CLEAR B FOR SIGN
0936   0410 CD D8 04                    CALL    CHKSGN  ;CHECK SIGN OF 2ND
0937   0413 E3                          EX      (SP),HL ;GET 1ST IN HL
0938   0414 CD D8 04                    CALL    CHKSGN  ;CHECK SIGN OF 1ST
0939   0417 EB                          EX      DE,HL
0940   0418 E3                          EX      (SP),HL
0941   0419 EB                          EX      DE,HL
0942   041A 7A                          LD      A,D     ;DIVIDE BY 0?
0943   041B B3                          OR      E
0944   041C CA D1 00                    JP      Z,AHOW  ;SAY "HOW?"
0945   041F C5                          PUSH    BC      ;ELSE SAVE SIGN
0946   0420 CD BC 04                    CALL    DIVIDE  ;USE SUBROUTINE
0947   0423 60                          LD      H,B     ;RESULT IN HL NOW
0948   0424 69                          LD      L,C
0949   0425 C1                          POP     BC      ;GET SIGN BACK
0950   0426 D1          XP35:           POP     DE      ;AND TEXT POINTER
0951   0427 7C                          LD      A,H     ;HL MUST BE +
0952   0428 B7                          OR      A
0953   0429 FA D0 00                    JP      M,QHOW  ;ELSE IT IS OVERFLOW
0954   042C 78                          LD      A,B
0955   042D B7                          OR      A
0956   042E FC DB 04                    CALL    M,CHGSGN        ;CHANGE SIGN IF NEEDED
0957   0431 18 A9                       JR      XP31    ;LOOK FOR MORE TERMS
0958   0433             ;
0959   0433 21 94 07    EXPR4:          LD      HL,TAB4-1       ;FIND FUNCTION IN TAB4
0960   0436 C3 00 07                    JP      EXEC    ;AND GO DO IT
0961   0439             ;
0962   0439 FF          XP40:           RST     RTSTV   ;NO, NOT A FUNCTION
0963   043A 38 05                       JR      C,XP41  ;NOR A VARIABLE
0964   043C 7E                          LD      A,(HL)  ;VARIABLE
0965   043D 23                          INC     HL
0966   043E 66                          LD      H,(HL)  ;VALUE IN HL
0967   043F 6F                          LD      L,A
0968   0440 C9                          RET
0969   0441             ;
0970   0441 CD 7C 00    XP41:           CALL    TSTNUM  ;OR IS IT A NUMBER
0971   0444 78                          LD      A,B     ;# OF DIGIT
0972   0445 B7                          OR      A
0973   0446 C0                          RET     NZ      ;OK
0974   0447 CF          PARN:           TSTCH($28,XP43) ; '('
0974   0448 28          
0974   0449 05          
0975   044A DF                          RST     REXPR   ;"(EXPR)"
0976   044B CF                          TSTCH($29,XP43) ; ')'
0976   044C 29          
0976   044D 01          
0977   044E C9          XP42:           RET
0978   044F C3 1E 05    XP43:           JP      QWHAT   ;ELSE SAY: "WHAT?"
0979   0452             
0980   0452 CD 47 04    RND:            CALL    PARN    ;*** RND(EXPR) ***
0981   0455 7C                          LD      A,H     ;EXPR MUST BE +
0982   0456 B7                          OR      A
0983   0457 FA D0 00                    JP      M,QHOW
0984   045A B5                          OR      L       ;AND NON-ZERO
0985   045B CA D0 00                    JP      Z,QHOW
0986   045E D5                          PUSH    DE      ;SAVE BOTH
0987   045F E5                          PUSH    HL
0988   0460 2A 4C 17                    LD      HL,(RANPNT)     ;GET MEMORY AS RANDOM
0989   0463 11 E4 07                    LD      DE,LSTROM       ;NUMBER
0990   0466 E7                          RST     RCOMP
0991   0467 38 03                       JR      C,RA1   ;WRAP AROUND IF LAST
0992   0469 21 00 00                    LD      HL,START
0993   046C 5E          RA1:            LD      E,(HL)
0994   046D 23                          INC     HL
0995   046E 56                          LD      D,(HL)
0996   046F 22 4C 17                    LD      (RANPNT),HL
0997   0472 E1                          POP     HL
0998   0473 EB                          EX      DE,HL
0999   0474 C5                          PUSH    BC
1000   0475 CD BC 04                    CALL    DIVIDE  ;RND(N)=MOD(M,N)+1
1001   0478 C1                          POP     BC
1002   0479 D1                          POP     DE
1003   047A 23                          INC     HL
1004   047B C9                          RET
1005   047C             
1006   047C CD 47 04    ABS:            CALL    PARN    ;*** ABS(EXPR) ***
1007   047F 1B                          DEC     DE
1008   0480 CD D8 04                    CALL    CHKSGN  ;CHECK SIGN AND CHANGE IF HL < 0
1009   0483 13                          INC     DE
1010   0484 C9                          RET
1011   0485             
1012   0485 2A 38 17    FREE:           LD      HL,(TXTUNF)     ;*** RETURN FREE IN HL ***
1013   0488 D5                          PUSH    DE              ;GET THE NUMBER OF FREE
1014   0489 EB                          EX      DE,HL           ;BYTES BETWEEN 'TXTUNF'
1015   048A 21 00 17                    LD      HL,TXTEND       ;AND 'TXTEND'
1016   048D CD D1 04                    CALL    SUBDE
1017   0490 D1                          POP     DE
1018   0491 C9                          RET
1019   0492             
1020   0492 CD 47 04    PEEK:           CALL    PARN    ;*** PEEK(ADDR) ***
1021   0495 6E                          LD      L,(HL)  ;GET CONTENT OF (HL)
1022   0496 26 00                       LD      H,0     ;RETURN RESULT IN HL
1023   0498 C9                          RET
1024   0499             
1025   0499 CD 47 04    DEEK:           CALL    PARN    ;*** DEEK(ADDR) ***
1026   049C D5                          PUSH    DE
1027   049D 5E                          LD      E,(HL)  ;GET LOW CONTENT OF (HL)
1028   049E 23                          INC     HL
1029   049F 56                          LD      D,(HL)  ;GET HIGH CONTENT OF (HL)
1030   04A0 EB                          EX      DE,HL   ;RETURN RESULT IN HL
1031   04A1 D1                          POP     DE
1032   04A2 C9                          RET
1033   04A3             
1034   04A3 DF          POKE:           RST     REXPR   ;*** POKE ADDR, VAL1 [,VAL2, VAL3,..]
1035   04A4 CF                          TSTCH($2C,PK2)  ; 1ST ',' SEPARATES THE VALUE(S)
1035   04A5 2C          
1035   04A6 0D          
1036   04A7 E5                          PUSH    HL      ;SAVE ADDR
1037   04A8 DF          PK0:            RST     REXPR   ;GET VAL IN HL
1038   04A9 7D                          LD      A,L     ;LOW BYTE OF VAL
1039   04AA E1                          POP     HL      ;GET ADDR
1040   04AB 77                          LD      (HL),A  ;PUT VALUE IN RAM
1041   04AC CF                          TSTCH($2C,PK1)  ;READY UNLESS ","
1041   04AD 2C          
1041   04AE 04          
1042   04AF 23                          INC     HL      ;NEXT ADDR
1043   04B0 E5                          PUSH    HL
1044   04B1 18 F5                       JR      PK0     ;LIST CONTINUES
1045   04B3             ;
1046   04B3 F7          PK1:            RST     RFINISH ;READY
1047   04B4             ;
1048   04B4             PK2:            ;POP     HL
1049   04B4 C3 1E 05                    JP      QWHAT   ;ELSE SAY: "WHAT?"
1050   04B7             
1051   04B7             
1052   04B7 21 00 10    RAM:            LD      HL,RAMSZE ; *** RAM ***
1053   04BA C9                          RET
1054   04BB             
1055   04BB             
1056   04BB 76          HALT:           HALT            ;HALT CPU (return to analyser)
1057   04BC             ;
1058   04BC             ;*************************************************************
1059   04BC             ;
1060   04BC             ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1061   04BC             ;
1062   04BC             ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1063   04BC             ;
1064   04BC             ; 'SUBDE' SUBSTRACTS DE FROM HL
1065   04BC             ;
1066   04BC             ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1067   04BC             ; SIGN AND FLIP SIGN OF B.
1068   04BC             ;
1069   04BC             ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1070   04BC             ;
1071   04BC             ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1072   04BC             ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1073   04BC             ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1074   04BC             ;
1075   04BC E5          DIVIDE:         PUSH    HL      ;*** DIVIDE ***
1076   04BD 6C                          LD      L,H     ;DIVIDE H BY DE
1077   04BE 26 00                       LD      H,0
1078   04C0 CD C7 04                    CALL    DV1
1079   04C3 41                          LD      B,C     ;SAVE RESULT IN B
1080   04C4 7D                          LD      A,L     ;(REMINDER+L)/DE
1081   04C5 E1                          POP     HL
1082   04C6 67                          LD      H,A
1083   04C7 0E FF       DV1:            LD      C,0FFH  ;RESULT IN C
1084   04C9 0C          DV2:            INC     C       ;DUMB ROUTINE
1085   04CA CD D1 04                    CALL    SUBDE   ;DIVIDE BY SUBTRACT
1086   04CD 30 FA                       JR      NC,DV2  ;AND COUNT
1087   04CF 19                          ADD     HL,DE
1088   04D0 C9                          RET
1089   04D1             ;
1090   04D1 7D          SUBDE:          LD      A,L     ;*** SUBDE ***
1091   04D2 93                          SUB     E       ;SUBSTRACT DE FROM
1092   04D3 6F                          LD      L,A     ;HL
1093   04D4 7C                          LD      A,H
1094   04D5 9A                          SBC     A,D
1095   04D6 67                          LD      H,A
1096   04D7 C9                          RET
1097   04D8             ;
1098   04D8 7C          CHKSGN:         LD      A,H     ;*** CHKSGN ***
1099   04D9 B7                          OR      A       ;CHECK SIGN OF HL
1100   04DA F0                          RET     P       ;IF HL >=0 RETURN
1101   04DB             ;
1102   04DB 7C          CHGSGN:         LD      A,H     ;*** CHGSGN ***
1103   04DC B5                          OR      L       ;CHECK VALUE OF HL
1104   04DD C8                          RET     Z       ;IF HL == 0 RETURN
1105   04DE             ;
1106   04DE 7C                          LD      A,H
1107   04DF F5                          PUSH    AF      ;SAVE SIGN
1108   04E0 2F                          CPL             ;CHANGE SIGN OF HL
1109   04E1 67                          LD      H,A
1110   04E2 7D                          LD      A,L
1111   04E3 2F                          CPL
1112   04E4 6F                          LD      L,A
1113   04E5 23                          INC     HL      ;HL = -HL
1114   04E6 F1                          POP     AF      ;GET ORIGINAL SIGN
1115   04E7 AC                          XOR     H       ;COMPARE
1116   04E8 F2 D0 00                    JP      P,QHOW  ;ERROR IF SIGN UNCHANGED (HL=$8000)
1117   04EB 78                          LD      A,B     ;AND ALSO FLIP B
1118   04EC EE 80                       XOR     80H
1119   04EE 47                          LD      B,A
1120   04EF C9                          RET
1121   04F0             
1122   04F0 7C          CKHLDE:         LD      A,H
1123   04F1 AA                          XOR     D       ;SAME SIGN?
1124   04F2 F2 F6 04                    JP      P,CK1   ;YES, COMPARE
1125   04F5 EB                          EX      DE,HL   ;NO, XCH AND COMP
1126   04F6 E7          CK1:            RST     RCOMP
1127   04F7 C9                          RET
1128   04F8             ;
1129   04F8             ;*************************************************************
1130   04F8             ;
1131   04F8             ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1132   04F8             ;
1133   04F8             ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1134   04F8             ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1135   04F8             ; TO THAT VALUE.
1136   04F8             ;
1137   04F8             ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1138   04F8             ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1139   04F8             ; NEXT LINE AND CONTINUE FROM THERE.
1140   04F8             ;
1141   04F8             ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1142   04F8             ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1143   04F8             ;
1144   04F8             ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1145   04F8             ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1146   04F8             ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1147   04F8             ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1148   04F8             ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1149   04F8             ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1150   04F8             ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1151   04F8             ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1152   04F8             ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1153   04F8             ;
1154   04F8             ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1155   04F8             ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1156   04F8             ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1157   04F8             ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1158   04F8             ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1159   04F8             ;
1160   04F8 FF          SETVAL:         RST     RTSTV   ;*** SETVAL ***
1161   04F9 DA 1E 05                    JP      C,QWHAT ;"WHAT?" NO VARIABLE
1162   04FC E5                          PUSH    HL      ;SAVE ADDRESS OF VAR.
1163   04FD CF                          TSTCH('=',SV1)  ;PASS "=" SIGN
1163   04FE 3D          
1163   04FF 08          
1164   0500 DF                          RST     REXPR   ;EVALUATE EXPR.
1165   0501 44                          LD      B,H     ;VALUE IS IN BC NOW
1166   0502 4D                          LD      C,L
1167   0503 E1                          POP     HL      ;GET ADDRESS
1168   0504 71                          LD      (HL),C  ;SAVE VALUE
1169   0505 23                          INC     HL
1170   0506 70                          LD      (HL),B
1171   0507 C9                          RET
1172   0508 C3 1E 05    SV1:            JP      QWHAT   ;NO "=" SIGN
1173   050B             
1174   050B CF          FIN:            TSTCH(';',FI1)  ;*** FIN ***
1174   050C 3B          
1174   050D 04          
1175   050E F1                          POP     AF      ;";", PURGE RET. ADDR.
1176   050F C3 86 01                    JP      RUNSML  ;CONTINUE SAME LINE
1177   0512 CF          FI1:            TSTCH(CR,FI2)   ;NOT ";", IS IT CR?
1177   0513 0D          
1177   0514 04          
1178   0515 F1                          POP     AF      ;YES, PURGE RET. ADDR.
1179   0516 C3 76 01                    JP      RUNNXL  ;RUN NEXT LINE
1180   0519 C9          FI2:            RET             ;ELSE RETURN TO CALLER
1181   051A             
1182   051A EF          ENDCHK:         RST     RIGNBLK ;IGNBLK
1183   051B FE 0D                       CP      CR      ;END WITH CR?
1184   051D C8                          RET     Z       ;OK, ELSE SAY: "WHAT?"
1185   051E             ;
1186   051E D5          QWHAT:          PUSH    DE      ;*** QWHAT ***
1187   051F 11 DF 00    AWHAT:          LD      DE,WHAT ;*** AWHAT ***
1188   0522 97          ERROR:          SUB     A       ;*** ERROR ***
1189   0523 CD B6 05                    CALL    PRTSTG  ;PRINT 'WHAT?', 'HOW?'
1190   0526 D1                          POP     DE      ;OR 'SORRY'
1191   0527 1A                          LD      A,(DE)  ;SAVE THE CHARACTER
1192   0528 F5                          PUSH    AF      ;AT WHERE OLD DE ->
1193   0529 97                          SUB     A       ;AND PUT A 0 THERE
1194   052A 12                          LD      (DE),A
1195   052B 2A 3A 17                    LD      HL,(CURRNT)     ;GET CURRENT LINE #
1196   052E E5                          PUSH    HL
1197   052F 7E                          LD      A,(HL)  ;CHECK THE VALUE
1198   0530 23                          INC     HL
1199   0531 B6                          OR      (HL)
1200   0532 D1                          POP     DE
1201   0533 CA EB 00                    JP      Z,RESTART       ;IF ZERO, JUST RESTART
1202   0536 7E                          LD      A,(HL)  ;IF NEGATIVE,
1203   0537 B7                          OR      A
1204   0538 FA 02 03                    JP      M,INPERR        ;REDO INPUT
1205   053B CD 58 06                    CALL    PRTLN   ;ELSE PRINT THE LINE
1206   053E 1B                          DEC     DE      ;UPTO WHERE THE 0 IS
1207   053F F1                          POP     AF      ;RESTORE THE CHARACTER
1208   0540 12                          LD      (DE),A
1209   0541 3E 3F                       LD      A,'?'   ;PRINT A "?"
1210   0543 D7                          RST     ROUTC
1211   0544 97                          SUB     A       ;AND THE REST OF THE
1212   0545 CD B6 05                    CALL    PRTSTG  ;LINE
1213   0548 C3 EB 00                    JP      RESTART ;THEN RESTART
1214   054B             ;
1215   054B D5          QSORRY:         PUSH    DE      ;*** QSORRY ***
1216   054C 11 E5 00    ASORRY:         LD      DE,SORRY        ;*** ASORRY ***
1217   054F C3 22 05                    JP      ERROR
1218   0552             ;
1219   0552             ;*************************************************************
1220   0552             ;
1221   0552             ; *** GETLN *** FNDLN (& FRIENDS) ***
1222   0552             ;
1223   0552             ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1224   0552             ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1225   0552             ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1226   0552             ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1227   0552             ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1228   0552             ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1229   0552             ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1230   0552             ;
1231   0552             ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1232   0552             ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1233   0552             ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1234   0552             ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1235   0552             ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1236   0552             ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1237   0552             ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1238   0552             ; LINE, FLAGS ARE C & NZ.
1239   0552             ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1240   0552             ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1241   0552             ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1242   0552             ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1243   0552             ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1244   0552             ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1245   0552             ;
1246   0552 D7          GETLN:          RST     ROUTC   ;*** GETLN ***
1247   0553 11 4E 17                    LD      DE,BUFFER       ;PROMPT AND INIT.
1248   0556 CD E4 06    GL1:            CALL    CHKIO   ;CHECK KEYBOARD
1249   0559 28 FB                       JR      Z,GL1   ;NO INPUT, WAIT
1250   055B FE 08                       CP      BS      ;BS, DELETE LAST CHARACTER?
1251   055D 28 1A                       JR      Z,GL3   ;YES
1252   055F FE 7F                       CP      DEL     ;DEL, DELETE LAST CHARACTER?
1253   0561 28 16                       JR      Z,GL3   ;YES
1254   0563 D7                          RST     ROUTC   ;INPUT, ECHO BACK
1255   0564 FE 0A                       CP      LF      ;IGNORE LF
1256   0566 28 EE                       JR      Z,GL1
1257   0568 B7                          OR      A       ;IGNORE NULL
1258   0569 28 EB                       JR      Z,GL1
1259   056B FE 18                       CP      CAN     ;^X, DELETE THE WHOLE LINE?
1260   056D 28 1B                       JR      Z,GL4   ;YES
1261   056F 12                          LD      (DE),A  ;ELSE SAVE INPUT
1262   0570 13                          INC     DE      ;AND BUMP POINTER
1263   0571 FE 0D                       CP      CR      ;WAS IT CR?
1264   0573 C8                          RET     Z       ;YES, END OF LINE
1265   0574 7B                          LD      A,E     ;ELSE MORE FREE ROOM?
1266   0575 FE 8E                       CP      BUFEND & 0FFH
1267   0577 20 DD                       JR      NZ,GL1  ;YES, GET NEXT INPUT
1268   0579 7B          GL3:            LD      A,E     ;DELETE LAST CHARACTER
1269   057A FE 4E                       CP      BUFFER & 0FFH   ;BUT DO WE HAVE ANY?
1270   057C 28 0C                       JR      Z,GL4   ;NO, REDO WHOLE LINE
1271   057E 1B                          DEC     DE      ;YES, BACKUP POINTER
1272   057F 3E 08                       LD      A,BS    ;AND ECHO A BACKSPACE
1273   0581 D7                          RST     ROUTC
1274   0582 3E 20                       LD      A,' '   ;AND ECHO A BLANK
1275   0584 D7                          RST     ROUTC
1276   0585 3E 08                       LD      A,BS    ;AND ECHO A BACKSPACE
1277   0587 D7                          RST     ROUTC
1278   0588 18 CC                       JR      GL1     ;GO GET NEXT INPUT
1279   058A CD 0E 00    GL4:            CALL    CRLF    ;REDO ENTIRE LINE
1280   058D 3E 5E                       LD      A,'^'   ;CR, LF AND UP-ARROW
1281   058F 18 C1                       JR      GETLN
1282   0591             ;
1283   0591 7C          FNDLN:          LD      A,H     ;*** FNDLN ***
1284   0592 B7                          OR      A       ;CHECK SIGN OF HL
1285   0593 FA D0 00                    JP      M,QHOW  ;IT CANNOT BE -
1286   0596 11 00 08                    LD      DE,TXTBGN       ;INIT TEXT POINTER
1287   0599             ;
1288   0599             FNDLP:          ;*** FDLNP ***
1289   0599 E5          FL1:            PUSH    HL      ;SAVE LINE #
1290   059A 2A 38 17                    LD      HL,(TXTUNF)     ;CHECK IF WE PASSED END
1291   059D 2B                          DEC     HL
1292   059E E7                          RST     RCOMP
1293   059F E1                          POP     HL      ;GET LINE # BACK
1294   05A0 D8                          RET     C       ;C,NZ PASSED END
1295   05A1 1A                          LD      A,(DE)  ;WE DID NOT, GET BYTE 1
1296   05A2 95                          SUB     L       ;IS THIS THE LINE?
1297   05A3 47                          LD      B,A     ;COMPARE LOW ORDER
1298   05A4 13                          INC     DE
1299   05A5 1A                          LD      A,(DE)  ;GET BYTE 2
1300   05A6 9C                          SBC     A,H     ;COMPARE HIGH ORDER
1301   05A7 38 04                       JR      C,FL2   ;NO, NOT THERE YET
1302   05A9 1B                          DEC     DE      ;ELSE WE EITHER FOUND
1303   05AA B0                          OR      B       ;IT, OR IT IS NOT THERE
1304   05AB C9                          RET     ;NC,Z:FOUND, NC,NZ:NO
1305   05AC             ;
1306   05AC             FNDNXT:         ;*** FNDNXT ***
1307   05AC 13                          INC     DE      ;FIND NEXT LINE
1308   05AD 13          FL2:            INC     DE      ;JUST PASSED BYTE 1 & 2
1309   05AE             ;
1310   05AE 1A          FNDSKP:         LD      A,(DE)  ;*** FNDSKP ***
1311   05AF FE 0D                       CP      CR      ;TRY TO FIND CR
1312   05B1 20 FA                       JR      NZ,FL2  ;KEEP LOOKING
1313   05B3 13                          INC     DE      ;FOUND CR, SKIP OVER
1314   05B4 18 E3                       JR      FL1     ;CHECK IF END OF TEXT
1315   05B6             ;
1316   05B6             ;*************************************************************
1317   05B6             ;
1318   05B6             ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1319   05B6             ;
1320   05B6             ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1321   05B6             ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1322   05B6             ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1323   05B6             ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1324   05B6             ;
1325   05B6             ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1326   05B6             ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1327   05B6             ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1328   05B6             ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1329   05B6             ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1330   05B6             ; OVER (USUALLY A JUMP INSTRUCTION.
1331   05B6             ;
1332   05B6             ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1333   05B6             ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1334   05B6             ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1335   05B6             ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1336   05B6             ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1337   05B6             ;
1338   05B6             ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1339   05B6             ;
1340   05B6 47          PRTSTG:         LD      B,A     ;*** PRTSTG ***
1341   05B7 1A          PS1:            LD      A,(DE)  ;GET A CHARACTER
1342   05B8 13                          INC     DE      ;BUMP POINTER
1343   05B9 B8                          CP      B       ;SAME AS OLD A?
1344   05BA C8                          RET     Z       ;YES, RETURN
1345   05BB D7                          RST     ROUTC   ;ELSE PRINT IT
1346   05BC FE 0D                       CP      CR      ;WAS IT A CR?
1347   05BE 20 F7                       JR      NZ,PS1  ;NO, NEXT
1348   05C0 C9                          RET             ;YES, RETURN
1349   05C1             ;
1350   05C1 CF          QTSTG:          TSTCH($22,QT3)  ;*** QTSTG ***
1350   05C2 22          
1350   05C3 0F          
1351   05C4 3E 22                       LD      A,22H   ;IT IS A '"'
1352   05C6 CD B6 05    QT1:            CALL    PRTSTG  ;PRINT UNTIL ANOTHER
1353   05C9 FE 0D       QT1A:           CP      CR      ;WAS LAST ONE A CR?
1354   05CB E1                          POP     HL      ;RETURN ADDRESS
1355   05CC CA 76 01                    JP      Z,RUNNXL        ;WAS CR, RUN NEXT LINE
1356   05CF 23          QT2:            INC     HL      ;SKIP 3 BYTES ON RETURN
1357   05D0 23                          INC     HL
1358   05D1 23                          INC     HL
1359   05D2 E9                          JP      (HL)    ;RETURN
1360   05D3 CF          QT3:            TSTCH($27,QT4)  ;IS IT A "'"?
1360   05D4 27          
1360   05D5 04          
1361   05D6 3E 27                       LD      A,27H   ;YES, DO THE SAME
1362   05D8 18 EC                       JR      QT1     ;AS IN '"'
1363   05DA CF          QT4:            TSTCH($5F,QT5)  ;IS IT UNDERLINE?
1363   05DB 5F          
1363   05DC 06          
1364   05DD 3E 8D                       LD      A,08DH  ;YES, CR WITHOUT LF
1365   05DF D7                          RST     ROUTC
1366   05E0 E1                          POP     HL      ;RETURN ADDRESS
1367   05E1 18 EC                       JR      QT2
1368   05E3 CF          QT5:            TSTCH(5EH,QT5)  ;RST 1, is it '^'?
1368   05E4 5E          
1368   05E5 FD          
1369   05E6 1A                          LD      A,(DE)
1370   05E7 EE 40                       XOR     40H
1371   05E9 CD 10 00                    CALL    OUTC
1372   05EC 1A                          LD      A,(DE)
1373   05ED 13                          INC     DE
1374   05EE 18 D9                       JR      QT1A
1375   05F0 C9          QT6:            RET             ;NONE OF ABOVE
1376   05F1             
1377   05F1             PRTNUM:                         ;*** PRINT NUMBER IN HL ***
1378   05F1 3A 37 17                    LD      A,(PNBASE)      ;GET NUMBER BASE
1379   05F4 B7                          OR      A
1380   05F5 28 0B                       JR      Z,PN0   ;0: DEFAULT DEC
1381   05F7 FE 10                       CP      16      ;HEX NUMBER?
1382   05F9 C2 0D 06                    JP      NZ,PN1  ;NO
1383   05FC 06 24                       LD      B,'$'   ;PRINT LEADING '$'
1384   05FE 0D                          DEC     C       ;'$' TAKES SPACE
1385   05FF C3 0D 06                    JP      PN1     ;HEX IS UNSIGNED
1386   0602 06 00       PN0:            LD      B,0     ;NO PREFIX YET
1387   0604 CD D8 04                    CALL    CHKSGN  ;CHECK SIGN
1388   0607 F2 0D 06                    JP      P,PN1   ;NO SIGN
1389   060A 06 2D                       LD      B,'-'   ;B=SIGN
1390   060C 0D                          DEC     C       ;'-' TAKES SPACE
1391   060D D5          PN1:            PUSH    DE
1392   060E 3A 37 17                    LD      A,(PNBASE)
1393   0611 B7                          OR      A       ;DEFAULT DECIMAL?
1394   0612 20 02                       JR      NZ,PN1A
1395   0614 3E 0A                       LD      A,10
1396   0616 5F          PN1A:           LD      E,A
1397   0617 AF                          XOR     A
1398   0618 57                          LD      D,A
1399   0619 D5                          PUSH    DE      ;SAVE AS A FLAG
1400   061A 0D                          DEC     C       ;C=SPACES
1401   061B C5                          PUSH    BC      ;SAVE SIGN & SPACE
1402   061C CD BC 04    PN2:            CALL    DIVIDE  ;DIVIDE HL BY NUMBER BASE
1403   061F 78                          LD      A,B     ;RESULT 0?
1404   0620 B1                          OR      C
1405   0621 CA 2C 06                    JP      Z,PN3   ;YES, WE GOT ALL
1406   0624 E3                          EX      (SP),HL ;NO, SAVE REMAINDER
1407   0625 2D                          DEC     L       ;AND COUNT SPACE
1408   0626 E5                          PUSH    HL      ;HL IS OLD BC
1409   0627 60                          LD      H,B     ;MOVE RESULT TO BC
1410   0628 69                          LD      L,C
1411   0629 C3 1C 06                    JP      PN2     ;AND DIVIDE AGAIN
1412   062C             ;
1413   062C C1          PN3:            POP     BC      ;WE GOT ALL DIGITS IN
1414   062D 0D          PN4:            DEC     C       ;THE STACK
1415   062E 79                          LD      A,C     ;LOOK AT SPACE COUNT
1416   062F B7                          OR      A
1417   0630 FA 39 06                    JP      M,PN5   ;NO LEADING BLANKS
1418   0633 3E 20                       LD      A,' '   ;LEADING BLANKS
1419   0635 D7                          RST     ROUTC
1420   0636 C3 2D 06                    JP      PN4     ;MORE?
1421   0639 78          PN5:            LD      A,B     ;PRINT SIGN OR '$'
1422   063A B7                          OR      A
1423   063B C4 10 00                    CALL    NZ,OUTC
1424   063E 5D                          LD      E,L     ;LAST REMAINDER IN E
1425   063F 3A 37 17    PN6:            LD      A,(PNBASE)      ;GET NUMBER BASE
1426   0642 B7                          OR      A       ;DEFAULT DECIMAL?
1427   0643 20 02                       JR      NZ,PN6A
1428   0645 3E 0A                       LD      A,10
1429   0647 BB          PN6A:           CP      E       ;IT IS FLAG FOR NO MORE
1430   0648 7B                          LD      A,E     ;CHECK DIGIT IN E
1431   0649 D1                          POP     DE
1432   064A C8                          RET     Z       ;IF SO, RETURN
1433   064B FE 0A                       CP      10      ;0-9? < A hex?
1434   064D DA 52 06                    JP      C,PN7   ;Skip Add 7
1435   0650 C6 07                       ADD     A,'A'-'0'-10    ;Bring it up to ASCII A-F
1436   0652 C6 30       PN7:            ADD     A,'0'   ;ELSE CONVERT TO ASCII
1437   0654 D7                          RST     ROUTC   ;AND PRINT THE DIGIT
1438   0655 C3 3F 06                    JP      PN6     ;GO BACK FOR MORE
1439   0658             
1440   0658 AF          PRTLN:          XOR     A       ;SET 10 AS DEFAULT BASE
1441   0659 32 37 17                    LD      (PNBASE),A      ;FOR PRTNUM
1442   065C 1A                          LD      A,(DE)
1443   065D 6F                          LD      L,A     ;LOW ORDER LINE #
1444   065E 13                          INC     DE
1445   065F 1A                          LD      A,(DE)  ;HIGH ORDER
1446   0660 67                          LD      H,A
1447   0661 13                          INC     DE
1448   0662 0E 04                       LD      C,4     ;PRINT 4 DIGIT LINE #
1449   0664 CD F1 05                    CALL    PRTNUM
1450   0667 3E 20                       LD      A,' '   ;FOLLOWED BY A BLANK
1451   0669 D7                          RST     ROUTC
1452   066A 97                          SUB     A       ;AND THEN THE NEXT
1453   066B CD B6 05                    CALL    PRTSTG
1454   066E C9                          RET
1455   066F             ;
1456   066F             ;*************************************************************
1457   066F             ;
1458   066F             ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1459   066F             ;
1460   066F             ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1461   066F             ; DE = HL
1462   066F             ;
1463   066F             ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1464   066F             ; UNTIL DE = BC
1465   066F             ;
1466   066F             ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1467   066F             ; STACK
1468   066F             ;
1469   066F             ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1470   066F             ; STACK
1471   066F             ;
1472   066F E7          MVUP:           RST     RCOMP   ;*** MVUP ***
1473   0670 C8                          RET     Z       ;DE = HL, RETURN
1474   0671 1A                          LD      A,(DE)  ;GET ONE BYTE
1475   0672 02                          LD      (BC),A  ;MOVE IT
1476   0673 13                          INC     DE      ;INCREASE BOTH POINTERS
1477   0674 03                          INC     BC
1478   0675 18 F8                       JR      MVUP    ;UNTIL DONE
1479   0677             ;
1480   0677 78          MVDOWN:         LD      A,B     ;*** MVDOWN ***
1481   0678 92                          SUB     D       ;TEST IF DE = BC
1482   0679 20 03                       JR      NZ,MD1  ;NO, GO MOVE
1483   067B 79                          LD      A,C     ;MAYBE, OTHER BYTE?
1484   067C 93                          SUB     E
1485   067D C8                          RET     Z       ;YES, RETURN
1486   067E 1B          MD1:            DEC     DE      ;ELSE MOVE A BYTE
1487   067F 2B                          DEC     HL      ;BUT FIRST DECREASE
1488   0680 1A                          LD      A,(DE)  ;BOTH POINTERS AND
1489   0681 77                          LD      (HL),A  ;THEN DO IT
1490   0682 18 F3                       JR      MVDOWN  ;LOOP BACK
1491   0684             ;
1492   0684 C1          POPA:           POP     BC      ;BC = RETURN ADDR.
1493   0685 E1                          POP     HL      ;RESTORE LOPVAR, BUT
1494   0686 22 42 17                    LD      (LOPVAR),HL     ;=0 MEANS NO MORE
1495   0689 7C                          LD      A,H
1496   068A B5                          OR      L
1497   068B CA 9E 06                    JP      Z,PP1   ;YEP, GO RETURN
1498   068E E1                          POP     HL      ;NOP, RESTORE OTHERS
1499   068F 22 44 17                    LD      (LOPINC),HL
1500   0692 E1                          POP     HL
1501   0693 22 46 17                    LD      (LOPLMT),HL
1502   0696 E1                          POP     HL
1503   0697 22 48 17                    LD      (LOPLN),HL
1504   069A E1                          POP     HL
1505   069B 22 4A 17                    LD      (LOPPT),HL
1506   069E C5          PP1:            PUSH    BC      ;BC = RETURN ADDR.
1507   069F C9                          RET
1508   06A0             ;
1509   06A0 21 8F 17    PUSHA:          LD      HL,STKLMT       ;*** PUSHA ***
1510   06A3 CD DB 04                    CALL    CHGSGN
1511   06A6 C1                          POP     BC      ;BC=RETURN ADDRESS
1512   06A7 39                          ADD     HL,SP   ;IS STACK NEAR THE TOP?
1513   06A8 D2 4B 05                    JP      NC,QSORRY       ;YES, SORRY FOR THAT
1514   06AB 2A 42 17                    LD      HL,(LOPVAR)     ;ELSE SAVE LOOP VAR'S
1515   06AE 7C                          LD      A,H     ;BUT IF LOPVAR IS 0
1516   06AF B5                          OR      L       ;THAT WILL BE ALL
1517   06B0 CA C6 06                    JP      Z,PU1
1518   06B3 2A 4A 17                    LD      HL,(LOPPT)      ;ELSE, MORE TO SAVE
1519   06B6 E5                          PUSH    HL
1520   06B7 2A 48 17                    LD      HL,(LOPLN)
1521   06BA E5                          PUSH    HL
1522   06BB 2A 46 17                    LD      HL,(LOPLMT)
1523   06BE E5                          PUSH    HL
1524   06BF 2A 44 17                    LD      HL,(LOPINC)
1525   06C2 E5                          PUSH    HL
1526   06C3 2A 42 17                    LD      HL,(LOPVAR)
1527   06C6 E5          PU1:            PUSH    HL
1528   06C7 C5                          PUSH    BC      ;BC = RETURN ADDR.
1529   06C8 C9                          RET
1530   06C9             
1531   06C9             ;*************************************************************
1532   06C9             ; *** INIT ***
1533   06C9             ;
1534   06C9             ; PUT IO INITIALISATION HERE, E.G. FOR THE SERIAL INTERFACE
1535   06C9             ;
1536   06C9             ; *** OUTC *** CHKIO ***
1537   06C9             ;
1538   06C9             ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1539   06C9             ; OUTC WILL OUTPUT THE BYTE IN A.
1540   06C9             ; IF THAT IS A CR, A LF IS ALSO SEND OUT.
1541   06C9             ; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
1542   06C9             ; ALL REGISTERS ARE RESTORED.
1543   06C9             ;
1544   06C9             ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1545   06C9             ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1546   06C9             ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1547   06C9             ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1548   06C9             ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1549   06C9             ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
1550   06C9             ;
1551   06C9             ;THIS IS AT LOC. 0
1552   06C9             ;START:         LD      SP,STACK        ;*** COLD START ***
1553   06C9             ;               LD      A,0FFH
1554   06C9             ;               JP      INIT
1555   06C9             
1556   06C9 11 F3 06    INIT:           LD      DE,MSG1
1557   06CC CD B6 05                    CALL    PRTSTG
1558   06CF 21 00 00                    LD      HL,START
1559   06D2 22 4C 17                    LD      (RANPNT),HL
1560   06D5 21 00 08                    LD      HL,TXTBGN
1561   06D8 22 38 17                    LD      (TXTUNF),HL
1562   06DB C3 EB 00                    JP      RESTART
1563   06DE             
1564   06DE             ;THIS IS AT LOC. 10
1565   06DE             ;OUTC:          OUT     (IODATA),A      ;Out to data port
1566   06DE             ;               CP      CR      ;WAS IT CR?
1567   06DE             ;               RET     NZ      ;NO, FINISHED
1568   06DE             ;               JP      OC1     ;REST OF THIS IS AT OC1
1569   06DE 3E 0A       OC1:            LD      A,LF    ;YES, WE SEND LF TOO
1570   06E0 D7                          RST     ROUTC   ;THIS IS RECURSIVE
1571   06E1 3E 0D                       LD      A,CR    ;GET CR BACK IN A
1572   06E3 C9                          RET
1573   06E4             
1574   06E4 DB 02       CHKIO:          IN      A,(IOSTAT)      ;*** CHKIO ***
1575   06E6 E6 01                       AND     IO_RX_BIT       ;MASK STATUS BIT
1576   06E8 C8                          RET     Z       ;NOT READY, RETURN "Z"
1577   06E9 DB 01                       IN      A,(IODATA)      ;READY, READ DATA
1578   06EB E6 7F                       AND     7FH     ;MASK BIT 7 OFF
1579   06ED FE 03       CI0:            CP      03H     ;IS IT CONTROL-C?
1580   06EF C0                          RET     NZ      ;NO, RETURN "NZ"
1581   06F0 C3 EB 00                    JP      RESTART ;YES, RESTART TBI
1582   06F3             ;
1583   06F3 54 69 6E 79 MSG1:           .DB     "TinyBASIC"
1583   06F7 42 41 53 49 
1583   06FB 43 
1584   06FC 0D                          .DB     CR
1585   06FD             
1586   06FD             
1587   06FD             ;*************************************************************
1588   06FD             ;
1589   06FD             ; *** DIRECT *** EXEC *** TABLES ***
1590   06FD             ;
1591   06FD             ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1592   06FD             ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1593   06FD             ; OF CODE ACCORDING TO THE TABLE.
1594   06FD             ;
1595   06FD             ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1596   06FD             ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1597   06FD             ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1598   06FD             ; ALL DIRECT AND STATEMENT COMMANDS.
1599   06FD             ;
1600   06FD             ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1601   06FD             ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1602   06FD             ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1603   06FD             ;
1604   06FD             
1605   06FD 21 31 07    DIRECT:         LD      HL,TAB1-1       ;*** DIRECT ***
1606   0700             ;
1607   0700             EXEC:           ;*** EXEC ***
1608   0700 EF          EX0:            RST     RIGNBLK ;IGNORE LEADING BLANKS
1609   0701 D5                          PUSH    DE      ;SAVE POINTER
1610   0702 1A          EX1:            LD      A,(DE)  ;IF FOUND '.' IN STRING
1611   0703 13                          INC     DE      ;BEFORE ANY MISMATCH
1612   0704 FE 2E                       CP      2EH     ;WE DECLARE A MATCH
1613   0706 28 1C                       JR      Z,EX3
1614   0708 FE 61                       CP      'a'     ;< 'a' ?
1615   070A 38 06                       JR      C,EXN   ;NO ALPHA CHAR
1616   070C FE 7B                       CP      'z'+1   ;> 'z'
1617   070E 30 02                       JR      NC,EXN  ;NO ALPHA CHAR
1618   0710 E6 5F                       AND     5FH     ;MASK LOWER CASE TO UPPER CASE
1619   0712             EXN:
1620   0712 23                          INC     HL      ;HL->TABLE
1621   0713 BE                          CP      (HL)    ;IF MATCH, TEST NEXT
1622   0714 28 EC                       JR      Z,EX1
1623   0716 3E 7F                       LD      A,07FH  ;ELSE SEE IF BIT 7
1624   0718 1B                          DEC     DE      ;OF TABLE IS SET, WHICH
1625   0719 BE                          CP      (HL)    ;IS THE JUMP ADDR. (HI)
1626   071A 38 0E                       JR      C,EX5   ;C:YES, MATCHED
1627   071C 23          EX2:            INC     HL      ;NC:NO, FIND JUMP ADDR.
1628   071D BE                          CP      (HL)
1629   071E 30 FC                       JR      NC,EX2
1630   0720 23                          INC     HL      ;BUMP TO NEXT TAB. ITEM
1631   0721 D1                          POP     DE      ;RESTORE STRING POINTER
1632   0722 18 DC                       JR      EX0     ;TEST AGAINST NEXT ITEM
1633   0724 3E 7F       EX3:            LD      A,07FH  ;PARTIAL MATCH, FIND
1634   0726 23          EX4:            INC     HL      ;JUMP ADDR., WHICH IS
1635   0727 BE                          CP      (HL)    ;FLAGGED BY BIT 7
1636   0728 30 FC                       JR      NC,EX4
1637   072A 7E          EX5:            LD      A,(HL)  ;LOAD HL WITH THE JUMP
1638   072B 23                          INC     HL      ;ADDRESS FROM THE TABLE
1639   072C 6E                          LD      L,(HL)
1640   072D                                             ;ADDRESSES ARE BIG-ENDIAN
1641   072D                                             ;WITH MSB SET to 1
1642   072D             #IF             $ < 8000H
1643   072D E6 7F                       AND     7FH     ;MASK OFF HIGH ADDRESS BIT
1644   072F             #ENDIF
1645   072F 67                          LD      H,A
1646   0730 F1                          POP     AF      ;CLEAN UP THE GARBAGE
1647   0731 E9                          JP      (HL)    ;AND WE GO DO IT
1648   0732             ;
1649   0732             
1650   0732             ; THE TABLES CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1651   0732             ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1652   0732             ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1653   0732             ; BYTE SET TO 1.
1654   0732             ; This is done by the macro 'DWA'.
1655   0732             ; If the program is executed from an address < 0x8000
1656   0732             ; take care to mask this bit in program part 'EXEC'.
1657   0732             ;
1658   0732             ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.
1659   0732             ; IF THE STRING DOES NOT MATCH ANY OF THE OTHER ITEMS,
1660   0732             ; IT WILL MATCH THIS NULL ITEM AS DEFAULT.
1661   0732             
1662   0732             ;
1663   0732             TAB1:           ;DIRECT ONLY COMMANDS
1664   0732 4C 49 53 54                 .DB     "LIST"
1665   0736 81                          DWA(LIST)
1665   0737 9E          
1666   0738 52 55 4E                    .DB     "RUN"
1667   073B 81                          DWA(RUN)
1667   073C 70          
1668   073D 4E 45 57                    .DB     "NEW"
1669   0740 81                          DWA(NEW)
1669   0741 61          
1670   0742             ;
1671   0742             TAB2:           ;DIRECT OR PROGRAM STATEMENT
1672   0742 4E 45 58 54                 .DB     "NEXT"
1673   0746 82                          DWA(NEXT)
1673   0747 99          
1674   0748 4C 45 54                    .DB     "LET"
1675   074B 83                          DWA(LET)
1675   074C 5A          
1676   074D 49 46                       .DB     "IF"
1677   074F 82                          DWA(IFF)
1677   0750 F3          
1678   0751 47 4F 54 4F                 .DB     "GOTO"
1679   0755 81                          DWA(GOTO)
1679   0756 8F          
1680   0757 47 4F 53 55                 .DB     "GOSUB"
1680   075B 42 
1681   075C 82                          DWA(GOSUB)
1681   075D 05          
1682   075E 52 45 54 55                 .DB     "RETURN"
1682   0762 52 4E 
1683   0764 82                          DWA(RETURN)
1683   0765 25          
1684   0766 52 45 4D                    .DB     "REM"
1685   0769 82                          DWA(REM)
1685   076A EF          
1686   076B 46 4F 52                    .DB     "FOR"
1687   076E 82                          DWA(FOR)
1687   076F 3E          
1688   0770 49 4E 50 55                 .DB     "INPUT"
1688   0774 54 
1689   0775 83                          DWA(INPUT)
1689   0776 0C          
1690   0777 50 52 49 4E                 .DB     "PRINT"
1690   077B 54 
1691   077C 81                          DWA(PRINT)
1691   077D B5          
1692   077E 3F                          .DB     "?"
1693   077F 81                          DWA(PRINT)
1693   0780 B5          
1694   0781 50 4F 4B 45                 .DB     "POKE"          ; POKE ADDR, VAL, VAL,...
1695   0785 84                          DWA(POKE)
1695   0786 A3          
1696   0787 53 54 4F 50                 .DB     "STOP"
1697   078B 81                          DWA(STOP)
1697   078C 6A          
1698   078D 48 41 4C 54                 .DB     "HALT"          ;HALT CPU (return to analyser)
1699   0791 84                          DWA(HALT)
1699   0792 BB          
1700   0793 83                          DWA(DEFLT)              ;END OF LIST
1700   0794 55          
1701   0795             ;
1702   0795             TAB4:           ;FUNCTIONS
1703   0795 52 4E 44                    .DB     "RND"           ;RND(RANGE)
1704   0798 84                          DWA(RND)
1704   0799 52          
1705   079A 41 42 53                    .DB     "ABS"           ;ABS(VALUE)
1706   079D 84                          DWA(ABS)
1706   079E 7C          
1707   079F 46 52 45 45                 .DB     "FREE"          ;FREE - no parantesis, get free mem
1708   07A3 84                          DWA(FREE)
1708   07A4 85          
1709   07A5 50 45 45 4B                 .DB     "PEEK"          ;PEEK(ADR) get byte from memory
1710   07A9 84                          DWA(PEEK)
1710   07AA 92          
1711   07AB 44 45 45 4B                 .DB     "DEEK"          ;DEEK(ADR) get word from memory
1712   07AF 84                          DWA(DEEK)
1712   07B0 99          
1713   07B1 52 41 4D                    .DB     "RAM"           ;RAM - no par., get RAM size
1714   07B4 84                          DWA(RAM)
1714   07B5 B7          
1715   07B6 84                          DWA(XP40)               ;END OF LIST
1715   07B7 39          
1716   07B8             ;
1717   07B8             TAB5:           ;"TO" IN "FOR"
1718   07B8 54 4F                       .DB     "TO"
1719   07BA 82                          DWA(FR1)
1719   07BB 4E          
1720   07BC 85                          DWA(QWHAT)              ;END OF LIST
1720   07BD 1E          
1721   07BE             ;
1722   07BE             TAB6:           ;"STEP" IN "FOR"
1723   07BE 53 54 45 50                 .DB     "STEP"
1724   07C2 82                          DWA(FR2)
1724   07C3 58          
1725   07C4 82                          DWA(FR3)                ;END OF LIST
1725   07C5 5B          
1726   07C6             ;
1727   07C6             TAB8:           ;RELATION OPERATORS
1728   07C6 3E 3D                       .DB     ">="
1729   07C8 83                          DWA(XP11)
1729   07C9 69          
1730   07CA 21 3D                       .DB     "!="
1731   07CC 83                          DWA(XP12)
1731   07CD 6F          
1732   07CE 23                          .DB     "#"
1733   07CF 83                          DWA(XP12)
1733   07D0 6F          
1734   07D1 3E                          .DB     ">"
1735   07D2 83                          DWA(XP13)
1735   07D3 75          
1736   07D4 3D 3D                       .DB     "=="
1737   07D6 83                          DWA(XP15)
1737   07D7 84          
1738   07D8 3D                          .DB     "="
1739   07D9 83                          DWA(XP15)
1739   07DA 84          
1740   07DB 3C 3D                       .DB     "<="
1741   07DD 83                          DWA(XP14)
1741   07DE 7C          
1742   07DF 3C                          .DB     "<"
1743   07E0 83                          DWA(XP16)
1743   07E1 8A          
1744   07E2 83                          DWA(XP17)               ;END OF REL OPERATOR LIST
1744   07E3 90          
1745   07E4             ;
1746   07E4             LSTROM:                                 ;ALL ABOVE CAN BE ROM
1747   07E4             
1748   07E4             ; Check if the program code overflows the ROM size
1749   07E4             ;
1750   07E4~            #IF $ > RAMBGN
1751   07E4~                            .ECHO   "\n\n*** The ROM section is "
1752   07E4~                            .ECHO   $ - RAMBGN
1753   07E4~                            .ECHO   " bytes too long! ***\n\n\n"
1754   07E4             #ELSE
1755   07E4                             .ECHO   "ROM size: "
1756   07E4                             .ECHO   $
1757   07E4                             .ECHO   " bytes\n"
1758   07E4             #ENDIF
1759   07E4             ;
1760   07E4             ;
1761   07E4             ;*************************************************************
1762   07E4             
1763   07E4             
1764   0800                             .ORG            RAMBGN          ;HERE DOWN MUST BE RAM
1765   0800             
1766   0800             ;*************************************************************
1767   0800             ;
1768   0800             ;
1769   0800             TXTBGN:
1770   0800             ;
1771   1700                             .ORG            RAMBGN+RAMSZE-$100
1772   1700             ;
1773   1700             TXTEND:         .EQU            $               ;TEXT SAVE AREA ENDS
1774   1700             ARRBGN:         .DS             2               ;VARIABLEs '@(0)', '@(1), @(2)
1775   1702                                                             ;... stored top-down
1776   1702                                                             ;i.e. &@(i) = TXTEND-2*i
1777   1702             ;
1778   1702             VARBGN:         .DS             2*26            ;VARIABLES 'A'..'Z'
1779   1736             OCSW:           .DS             1               ;SWITCH FOR OUTPUT
1780   1737             PNBASE:         .DS             1               ;BASE FOR PRTNUM
1781   1738             TXTUNF:         .DS             2               ;->UNFILLED TEXT AREA
1782   173A             CURRNT:         .DS             2               ;POINTS TO CURRENT LINE
1783   173C             STKGOS:         .DS             2               ;SAVES SP IN 'GOSUB'
1784   173E             VARNXT:         .DS             2               ;TEMP STORAGE
1785   1740             STKINP:         .DS             2               ;SAVES SP IN 'INPUT'
1786   1742             LOPVAR:         .DS             2               ;'FOR' LOOP SAVE AREA
1787   1744             LOPINC:         .DS             2               ;INCREMENT
1788   1746             LOPLMT:         .DS             2               ;LIMIT
1789   1748             LOPLN:          .DS             2               ;LINE NUMBER
1790   174A             LOPPT:          .DS             2               ;TEXT POINTER
1791   174C             RANPNT:         .DS             2               ;RANDOM NUMBER POINTER
1792   174E             BUFFER:         .DS             64              ;INPUT BUFFER
1793   178E             BUFEND:         .DS             1               ;BUFFER ENDS
1794   178F             STKLMT:         .DS             1               ;TOP LIMIT FOR STACK
1795   1790             ;
1796   1800                             .ORG            RAMBGN+RAMSZE   ;RAM END
1797   1800             STACK:          .EQU            $               ;STACK STARTS HERE
1798   1800             ;
1799   1800                             .END
