   1:			; Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
   2:			; Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
   3:			; Status bit for read in CHKIO changed to 0x02
   4:			; Status bit for write in OUTC (actually OC3) changed to 0x01
   5:			; Changed UART initialization parameters in INIT
   6:			; Changed ORG statements at end of file to match system with 2K RAM
   7:			;
   8:			; 2024-10-11 Ho-Ro:
   9:			; Automatically converted from 8080 syntax to Z80 syntax:
  10:			; https://hc-ddr.hucki.net/wiki/doku.php/cpm/8080_z80
  11:			; Assembler: uz80as for Z80 as well as i8080 (uz80as --target=i8080)
  12:			; Modified for use with Z80 dongle simulator
  13:			; UART data port 1
  14:			; UART status port 2
  15:			; New:
  16:			; Case insensitive input
  17:			; PRINT modifier for hex out: PRINT %16,..
  18:			; Hex numbers: $xxxx
  19:			; 2024-10-13 Ho-Ro:
  20:			; build ROM version (2K ROM / 6.5K RAM) and RAM version (2K prog RAM / 2K free RAM)
  21:			; add command "BYE" (halts Z80, returns to dongle analyser program)
  22:			; 2024-10-15 Ho-Ro:
  23:			; PRINT modifier %nn switches to unsigned number format, e.g.:
  24:			; PRINT %10,$FFFF -> 65535
  25:			; 2024-10-17 Ho-Ro:
  26:			; PUT ADDR, VAL, VAL, VAL,...
  27:			; constants RAM (TXTBGN), TOP (TXTEND) and SIZE (TXTEND-TXTUNF)
  28:			; function USR(para) that calls machine code at TOP (128 bytes free)
  29:			; with parameter in HL, returning the result in HL, default is RET at TOP
  30:			; Changed to the more authentic zmac syntax (https://github.com/gp48k/zmac)
  31:			; 2024-10-30 Ho-Ro:
  32:			; add operator '|' and '&'; remove RAM and TXT; 2044 bytes
  33:			; 2024-11-03 Ho-Ro:
  34:			; replace JP -> JR, add function CALL(ADR), add char constant 'x', 2047 bytes
  35:			; *************************************************************
  36:			;
  37:			;                 TINY BASIC FOR INTEL 8080
  38:			;                       VERSION 2.0
  39:			;                     BY LI-CHEN WANG
  40:			;                  MODIFIED AND TRANSLATED
  41:			;                    TO INTEL MNEMONICS
  42:			;                     BY ROGER RAUSKOLB
  43:			;                      10 OCTOBER,1976
  44:			;                        @COPYLEFT
  45:			;                   ALL WRONGS RESERVED
  46:			;
  47:			; *************************************************************
  48:			;
  49:			; *** ZERO PAGE SUBROUTINES ***
  50:			;
  51:			; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
  52:			; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
  53:			; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
  54:			; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
  55:			; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
  56:			; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
  57:			; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
  58:			; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
  59:			;
  60:			
  61:			                .Z80
  62:			
  63:			; Memory map
  64:	0000          	ROMBGN:         .EQU    $0000           ; Execution must start here
  65:	0800          	RAMBGN:         .EQU    $0800           ; 2K ROM
  66:			
  67:	0000          	                .IFDEF  MAKE_ROM
  70:			                .ELSE
  71:			; 2K CODE IN RAM & 2K DATA IN RAM AS TEST VERSION
  72:	0800          	RAMSZE:         .EQU    $0800
  73:			                .ENDIF
  74:			
  75:			; IO map
  76:	0001          	IODATA:         .EQU    1
  77:	0002          	IOSTAT:         .EQU    2
  78:	0001          	IO_RX_BIT:      .EQU    $01
  79:			
  80:			; Control character
  81:	0008          	BS:             .EQU    $08             ; ^H, BACKSPACE
  82:	000D          	CR:             .EQU    $0D             ; ^M, CARRIAGE RETURN
  83:	000A          	LF:             .EQU    $0A             ; ^J, LINE FEED
  84:	0018          	CAN:            .EQU    $18             ; ^X, CANCEL
  85:	007F          	DEL:            .EQU    $7F             ; DELETE
  86:			
  87:			
  88:			; Store a label address as BIG endian with bit A15 set
  89:			
  90:			DWA             .MACRO   LABEL
  91:			                .DB     HIGH LABEL | $80
  92:			                .DB     LOW LABEL
  93:			                .ENDM
  94:			
  95:			; if CHAR != A THEN JUMP RELATIVE TO LABEL
  96:			
  97:			TSTC            .MACRO   CHAR,LABEL
  98:			                RST     RTSTC
  99:			                .DB     CHAR
 100:			                .DB     LABEL-$-1
 101:			                .ENDM
 102:			
 103:			
 104:	0000          	                .ORG    ROMBGN
 105:			
 106:	0000  310009  	CSTART:         LD      SP,STACK        ; *** COLD START ***
 107:	0003  3EC9    	                LD      A,$C9           ; must be 2 byte
 108:	0005  C31501  	                JP      INIT            ; as delimiter for PRTSTG
 109:			
 110:			
 111:	0008  E3      	RTSTC:          EX      (SP),HL         ; *** RST 1 @ $0008 ***
 112:	0009  EF      	                RST     RIGNBLK         ; IGNORE BLANKS AND
 113:	000A  BE      	                CP      (HL)            ; TEST CHARACTER
 114:	000B  23      	                INC     HL              ; COMPARE THE FOLLOWING BYTE
 115:	000C  1861    	                JR      TC1             ; REST OF THIS IS AT TC1
 116:			
 117:			
 118:	000E  3E0D    	CRLF:           LD      A,CR            ; *** CRLF ***
 119:			                                        ; *** RST 2 @ $0010 ***
 120:	0010  D301    	ROUTC:          OUT     (IODATA),A      ; Out to data port
 121:	0012  FE0D    	                CP      CR              ; WAS IT CR?
 122:	0014  C0      	                RET     NZ              ; NO, FINISHED
 123:	0015  C30101  	                JP      OC1             ; REST OF THIS IS AT OC1
 124:			
 125:			
 126:	0018  CDDA03  	REXPR:          CALL    EXPR2           ; *** RST 3 @ $0018 ***
 127:	001B  E5      	                PUSH    HL              ; EVALUATE AN EXPRESSION
 128:	001C  C39603  	                JP      EXPR1           ; REST OF IT AT EXPR1
 129:	001F  57      	                .DB     'W'             ; FILL ONE BYTE
 130:			
 131:			
 132:	0020  7C      	RCOMP:          LD      A,H             ; *** RST 4 @ $0020 ***
 133:	0021  BA      	                CP      D               ; COMPARE HL WITH DE
 134:	0022  C0      	                RET     NZ              ; RETURN CORRECT C AND
 135:	0023  7D      	                LD      A,L             ; Z FLAGS
 136:	0024  BB      	                CP      E               ; BUT OLD A IS LOST
 137:	0025  C9      	                RET
 138:	0026  00      	                NOP
 139:	0027  41      	                .DB     'A'             ; FILL ONE BYTE
 140:			
 141:			
 142:	0028  1A      	RIGNBLK:        LD      A,(DE)          ; *** RST 5 @ $0028 ***
 143:	0029  FE20    	                CP      20H             ; IGNORE BLANKS
 144:	002B  C0      	                RET     NZ              ; IN TEXT (WHERE DE->)
 145:	002C  13      	                INC     DE              ; AND RETURN THE FIRST
 146:	002D  18F9    	                JR      RIGNBLK         ; NON-BLANK CHAR. IN A
 147:	002F  4E      	                .DB     'N'             ; FILL ONE BYTE
 148:			
 149:			
 150:	0030  F1      	RFINISH:        POP     AF              ; *** RST 6 @ $0030 ***
 151:	0031  CD5E05  	                CALL    FIN             ; CHECK END OF COMMAND
 152:	0034  C37105  	                JP      QWHAT           ; PRINT "WHAT?" IF WRONG
 153:	0037  47      	                .DB     'G'             ; FILL ONE BYTE
 154:			
 155:			
 156:	0038  EF      	RTSTV:          RST     RIGNBLK         ; *** RST 7 @ $0038 ***
 157:	0039  D640    	RTV1:           SUB     '@'             ; TEST VARIABLES
 158:	003B  D8      	                RET     C               ; C: < '@', NOT A VARIABLE
 159:	003C  201B    	                JR      NZ,TV1          ; NZ: NOT THE '@' ARRAY
 160:			;
 161:	003E  13      	                INC     DE              ; IT IS THE "@" ARRAY
 162:	003F  CD9E04  	                CALL    PARN            ; @ SHOULD BE FOLLOWED
 163:	0042  29      	                ADD     HL,HL           ; BY (EXPR) AS ITS INDEX
 164:	0043  DADB00  	                JP      C,QHOW          ; IS INDEX TOO BIG (>0x7FFF)?
 165:	0046  23      	                INC     HL              ; ADD TWO BYTES
 166:	0047  23      	                INC     HL              ; FOR @(0)
 167:	0048  D5      	                PUSH    DE              ; WILL IT OVERWRITE
 168:	0049  EB      	                EX      DE,HL           ; TEXT?
 169:	004A  CDE004  	                CALL    SIZE            ; FIND SIZE OF FREE RAM
 170:	004D  E7      	                RST     RCOMP           ; AND CHECK THAT
 171:	004E  DA9F05  	                JP      C,ASORRY        ; IF SO, SAY "SORRY"
 172:	0051  21000F  	                LD      HL,TXTEND       ; IF NOT GET ADDRESS
 173:	0054  CD2B05  	                CALL    SUBDE           ; OF @(EXPR) AND PUT IT
 174:	0057  D1      	                POP     DE              ; IN HL (top-down from TXTEND)
 175:	0058  C9      	                RET                     ; C FLAG IS CLEARED
 176:			                                        ; VARIABLES 'A'..'Z' -> 1..26
 177:	0059  FE21    	TV1:            CP      21H             ; >='a'?
 178:	005B  3802    	                JR      C,TV2           ; NO
 179:	005D  D620    	                SUB     20H             ; MAKE UPPER CASE
 180:	005F  FE1B    	TV2:            CP      1BH             ; <='Z'
 181:	0061  3F      	                CCF                     ; IF NOT RETURN C FLAG
 182:	0062  D8      	                RET     C
 183:	0063  13      	                INC     DE              ; IT IS 'A'=1 THROUGH 'Z'=26
 184:	0064  21FE07  	                LD      HL,VARBGN-2     ; COMPUTE ADDRESS OF
 185:	0067  07      	                RLCA                    ; THAT VARIABLE
 186:	0068  85      	                ADD     A,L             ; AND RETURN IT IN HL
 187:	0069  6F      	                LD      L,A             ; WITH C FLAG CLEARED
 188:	006A  3E00    	                LD      A,0
 189:	006C  8C      	                ADC     A,H
 190:	006D  67      	                LD      H,A
 191:	006E  C9      	                RET
 192:			
 193:			; RTSTC:        EX      (SP),HL         ; *** TSTC OR RST 1 ***
 194:			;               RST     RIGNBLK         ; THIS IS AT LOC. 8
 195:			;               CMP     (HL)            ; AND THEN JUMP HERE
 196:			;               INC     HL              ; COMPARE THE FOLLOWING BYTE
 197:			;               JR      TC1             ; REST OF THIS IS AT TC1
 198:			;
 199:	006F  2807    	TC1:            JR      Z,TC2           ; FOLLOWS THE RST INST.
 200:	0071  C5      	                PUSH    BC              ; WITH THE TEXT (DE->)
 201:	0072  4E      	                LD      C,(HL)          ; IF NOT =, ADD THE 2ND
 202:	0073  0600    	                LD      B,0             ; BYTE THAT FOLLOWS THE
 203:	0075  09      	                ADD     HL,BC           ; RST TO THE OLD PC
 204:	0076  C1      	                POP     BC              ; I.E., DO A RELATIVE
 205:	0077  1B      	                DEC     DE              ; JUMP IF NOT =
 206:	0078  13      	TC2:            INC     DE              ; IF =, SKIP THOSE BYTES
 207:	0079  23      	                INC     HL              ; AND CONTINUE
 208:	007A  E3      	                EX      (SP),HL
 209:	007B  C9      	                RET
 210:			
 211:	007C  210000  	TSTNUM:         LD      HL,0            ; *** TSTNUM ***
 212:	007F  44      	                LD      B,H             ; TEST IF THE TEXT IS A NUMBER
 213:	0080  CF270B  	                TSTC    "'",TN1         ; If not char const 'x' check for number
 214:	0083  1A      	                LD      A,(DE)          ; Get the char
 215:	0084  6F      	                LD      L,A
 216:	0085  13      	                INC     DE              ; Skip char
 217:	0086  1A      	                LD      A,(DE)          ; Followed by
 218:	0087  FE27    	                CP      "'"             ; closing "'"?
 219:	0089  206A    	                JR      NZ,WHAT         ; No -> syntax error
 220:	008B  13      	                INC     DE              ; Skip the closing "'"
 221:	008C  04      	                INC     B               ; At least 1 digit
 222:	008D  C9      	                RET
 223:			;
 224:	008E  FE24    	TN1:            CP      '$'             ; HEX NUMBER?
 225:	0090  2822    	                JR      Z,TX1           ; YES
 226:	0092  FE30    	TN2:            CP      '0'             ; IF NOT A DIGIT,
 227:	0094  D8      	                RET     C               ; RETURN 0 IN B AND HL
 228:	0095  FE3A    	                CP      '9'+1           ; IF NUMBERS, CONVERT
 229:	0097  D0      	                RET     NC              ; TO BINARY IN HL AND
 230:	0098  3EF0    	                LD      A,0F0H          ; SET B TO # OF DIGITS
 231:	009A  A4      	                AND     H               ; IF H>15, THERE IS NO
 232:	009B  203E    	                JR      NZ,QHOW         ; ROOM FOR NEXT DIGIT
 233:	009D  04      	                INC     B               ; B COUNTS # OF DIGITS
 234:	009E  C5      	                PUSH    BC
 235:	009F  44      	                LD      B,H             ; HL=10*HL+(NEW DIGIT)
 236:	00A0  4D      	                LD      C,L
 237:	00A1  29      	                ADD     HL,HL           ; 2*HL
 238:	00A2  29      	                ADD     HL,HL           ; 4*HL
 239:	00A3  09      	                ADD     HL,BC           ; 5*HL
 240:	00A4  29      	                ADD     HL,HL           ; 10*HL
 241:	00A5  1A      	                LD      A,(DE)          ; AND (DIGIT) IS FROM
 242:	00A6  13      	                INC     DE              ; STRIPPING THE ASCII
 243:	00A7  E60F    	                AND     0FH             ; CODE
 244:	00A9  85      	                ADD     A,L
 245:	00AA  6F      	                LD      L,A
 246:	00AB  3E00    	                LD      A,0
 247:	00AD  8C      	                ADC     A,H
 248:	00AE  67      	                LD      H,A
 249:	00AF  C1      	                POP     BC
 250:	00B0  1A      	                LD      A,(DE)          ; DO THIS DIGIT AFTER
 251:	00B1  F29200  	                JP      P,TN2           ; DIGIT. S SAYS OVERFLOW
 252:			;
 253:	00B4  13      	TX1:            INC     DE              ; SKIP TO NEXT DIGIT POSITION
 254:	00B5  1A      	                LD      A,(DE)          ; GET HEX DIGIT
 255:	00B6  FE30    	                CP      '0'             ; < '0'
 256:	00B8  D8      	                RET     C               ; ERROR
 257:	00B9  FE3A    	                CP      '9'+1           ; <= '9'
 258:	00BB  380A    	                JR      C,TX2           ; OK '0'..'9'
 259:	00BD  FE41    	                CP      'A'             ; < 'A'
 260:	00BF  D8      	                RET     C               ; ERROR, >'9' && < 'A'
 261:	00C0  E65F    	                AND     5FH             ; CONVERT ALPHA TO UPPER
 262:	00C2  FE47    	                CP      'F'+1           ; > 'F'
 263:	00C4  D0      	                RET     NC              ; ERROR
 264:	00C5  D607    	                SUB     'A'-'0'-10      ; SKIP GAP '9' -> 'A'
 265:	00C7  E60F    	TX2:            AND     0FH             ; GET HEX CODE 0..F
 266:	00C9  C5      	                PUSH    BC
 267:	00CA  47      	                LD      B,A             ; SAVE HEX CODE
 268:	00CB  3EF0    	                LD      A,0F0H          ; IF H>15
 269:	00CD  A4      	                AND     H               ; THERE IS NO ROOM
 270:	00CE  78      	                LD      A,B
 271:	00CF  C1      	                POP     BC
 272:	00D0  2009    	                JR      NZ,QHOW         ; FOR NEXT DIGIT
 273:			
 274:	00D2  04      	                INC     B               ; B COUNTS # OF DIGITS
 275:	00D3  29      	                ADD     HL,HL           ; 2*HL
 276:	00D4  29      	                ADD     HL,HL           ; 4*HL
 277:	00D5  29      	                ADD     HL,HL           ; 8*HL
 278:	00D6  29      	                ADD     HL,HL           ; 16*HL
 279:	00D7  B5      	                OR      L               ; PUT HEX CODE INTO
 280:	00D8  6F      	                LD      L,A             ; THE 4 LSB OF HL
 281:	00D9  18D9    	                JR      TX1             ; DIGIT AFTER DIGIT
 282:			
 283:	00DB  D5      	QHOW:           PUSH    DE              ; *** ERROR "HOW?" ***
 284:	00DC  11ED00  	AHOW:           LD      DE,HOW
 285:	00DF  C37505  	                JP      ERROR
 286:			
 287:	00E2  54696E79	TIBAS:          .DB     "TinyBASIC2"
	      42415349
	      4332
 288:	00EC  0D      	                .DB     CR
 289:			
 290:	00ED  484F573F	HOW:            .DB     "HOW?"
 291:	00F1  0D      	                .DB     CR
 292:			
 293:	00F2  4F4B    	OK:             .DB     "OK"
 294:	00F4  0D      	                .DB     CR
 295:			
 296:	00F5  57484154	WHAT:           .DB     "WHAT?"
	      3F
 297:	00FA  0D      	                .DB     CR
 298:			
 299:	00FB  534F5252	SORRY:          .DB     "SORRY"
	      59
 300:	0100  0D      	                .DB     CR
 301:			
 302:			;
 303:			; *************************************************************
 304:			;
 305:			; *** ROUTC *** CHKIO ***
 306:			;
 307:			; THESE ARE THE ONLY I/O ROUTINES IN TBI.
 308:			; OUTC WILL OUTPUT THE BYTE IN A.
 309:			; IF THAT IS A CR, A LF IS ALSO SEND OUT.
 310:			; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
 311:			; ALL REGISTERS ARE RESTORED.
 312:			;
 313:			; 'CHKIO' CHECKS THE INPUT.
 314:			; IF NO INPUT, IT WILL RETURN TO THE CALLER WITH THE Z FLAG SET.
 315:			; IF THERE IS INPUT, Z FLAG IS CLEARED AND THE INPUT BYTE IS IN A.
 316:			; IF A CONTROL-C IS READ, 'CHKIO' WILL RESTART TBI
 317:			; AND DO NOT RETURN TO THE CALLER.
 318:			;
 319:			
 320:			; THIS IS AT LOC. 10
 321:			; ROUTC:        OUT     (IODATA),A      ; Out to data port
 322:			;               CP      CR              ; WAS IT CR?
 323:			;               RET     NZ              ; NO, FINISHED
 324:			;               JP      OC1             ; REST OF THIS IS AT OC1
 325:			;
 326:	0101  3E0A    	OC1:            LD      A,LF            ; YES, WE SEND LF TOO
 327:	0103  D7      	                RST     ROUTC           ; THIS IS RECURSIVE
 328:	0104  3E0D    	                LD      A,CR            ; GET CR BACK IN A
 329:	0106  C9      	                RET
 330:			
 331:	0107  DB02    	CHKIO:          IN      A,(IOSTAT)      ; *** CHKIO ***
 332:	0109  E601    	                AND     IO_RX_BIT       ; MASK STATUS BIT
 333:	010B  C8      	                RET     Z               ; NOT READY, RETURN "Z"
 334:	010C  DB01    	                IN      A,(IODATA)      ; READY, READ DATA
 335:	010E  E67F    	                AND     7FH             ; MASK BIT 7 OFF
 336:	0110  FE03    	CI0:            CP      03H             ; IS IT CONTROL-C?
 337:	0112  C0      	                RET     NZ              ; NO, RETURN "NZ"
 338:	0113  1815    	                JR      WSTART          ; YES, RESTART TBI
 339:			
 340:			;
 341:			; *************************************************************
 342:			;
 343:			
 344:			;
 345:			; *************************************************************
 346:			;
 347:			; *** INIT ***
 348:			;
 349:			; PUT IO INITIALISATION HERE, E.G. FOR THE SERIAL INTERFACE
 350:			;
 351:			; *** MAIN ***
 352:			;
 353:			; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
 354:			; AND STORES IT IN THE MEMORY.
 355:			;
 356:			; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
 357:			; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
 358:			; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
 359:			; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
 360:			; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
 361:			; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
 362:			; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
 363:			; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
 364:			; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
 365:			;
 366:			; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
 367:			; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
 368:			; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
 369:			; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
 370:			;
 371:			; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
 372:			; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
 373:			; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
 374:			; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
 375:			;
 376:			; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
 377:			; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
 378:			; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
 379:			; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
 380:			;
 381:			;
 382:			                                        ; THIS IS AT LOC. 0
 383:			; CSTART:       LD      SP,STACK        ; *** COLD START ***
 384:			;               LD      A,$C9           ; must be 2 byte
 385:			;               JP      INIT            ; as delimiter for PRTSTG
 386:			;
 387:	0115          	INIT:
 388:	0115  32000F  	                LD      (USRSPC),A      ; "RET" AT USR CODE SPACE
 389:	0118  11E200  	                LD      DE,TIBAS        ; COLD START MESSAGE
 390:	011B  CD0906  	                CALL    PRTSTG
 391:	011E  210000  	                LD      HL,CSTART       ; INIT RANDOM POINTER
 392:	0121  224A08  	                LD      (RANPNT),HL
 393:	0124  210009  	                LD      HL,TXTBGN       ; UNFILLED TEXT
 394:	0127  223608  	                LD      (TXTUNF),HL
 395:			;
 396:	012A  310009  	WSTART:         LD      SP,STACK        ; *** WARM START ***
 397:	012D  CD0E00  	                CALL    CRLF            ; AND JUMP TO HERE
 398:	0130  11F200  	                LD      DE,OK           ; DE->STRING
 399:	0133  97      	                SUB     A               ; A=0
 400:	0134  CD0906  	                CALL    PRTSTG          ; PRINT STRING UNTIL CR
 401:	0137  213E01  	                LD      HL,ST2+1        ; HACK ST2+1 -> 0000
 402:	013A  223808  	                LD      (CURRNT),HL     ; CURRENT->LINE # = 0
 403:	013D  210000  	ST2:            LD      HL,0000         ; <- ST2+1
 404:	0140  224008  	                LD      (LOPVAR),HL
 405:	0143  223A08  	                LD      (STKGOS),HL
 406:	0146  3E3E    	ST3:            LD      A,'>'           ; PROMPT '>' AND
 407:	0148  CDA405  	                CALL    GETLN           ; READ A LINE
 408:	014B  D5      	                PUSH    DE              ; DE->END OF LINE
 409:	014C  11800F  	                LD      DE,BUFFER       ; DE->BEGINNING OF LINE
 410:	014F  CD7C00  	                CALL    TSTNUM          ; TEST IF IT IS A NUMBER
 411:	0152  EF      	                RST     RIGNBLK
 412:	0153  7C      	                LD      A,H             ; HL=VALUE OF THE # OR
 413:	0154  B5      	                OR      L               ; 0 IF NO # WAS FOUND
 414:	0155  C1      	                POP     BC              ; BC->END OF LINE
 415:	0156  CA1307  	                JP      Z,DIRECT
 416:	0159  1B      	                DEC     DE              ; BACKUP DE AND SAVE
 417:	015A  7C      	                LD      A,H             ; VALUE OF LINE # THERE
 418:	015B  12      	                LD      (DE),A
 419:	015C  1B      	                DEC     DE
 420:	015D  7D      	                LD      A,L
 421:	015E  12      	                LD      (DE),A
 422:	015F  C5      	                PUSH    BC              ; BC,DE->BEGIN, END
 423:	0160  D5      	                PUSH    DE
 424:	0161  79      	                LD      A,C
 425:	0162  93      	                SUB     E
 426:	0163  F5      	                PUSH    AF              ; A=# OF BYTES IN LINE
 427:	0164  CDE405  	                CALL    FNDLN           ; FIND THIS LINE IN SAVE
 428:	0167  D5      	                PUSH    DE              ; AREA, DE->SAVE AREA
 429:	0168  2010    	                JR      NZ,ST4          ; NZ:NOT FOUND, INSERT
 430:	016A  D5      	                PUSH    DE              ; Z:FOUND, DELETE IT
 431:	016B  CDFF05  	                CALL    FNDNXT          ; FIND NEXT LINE
 432:			                                        ; DE->NEXT LINE
 433:	016E  C1      	                POP     BC              ; BC->LINE TO BE DELETED
 434:	016F  2A3608  	                LD      HL,(TXTUNF)     ; HL->UNFILLED SAVE AREA
 435:	0172  CDBE06  	                CALL    MVUP            ; MOVE UP TO DELETE
 436:	0175  60      	                LD      H,B             ; TXTUNF->UNFILLED AREA
 437:	0176  69      	                LD      L,C
 438:	0177  223608  	                LD      (TXTUNF),HL     ; UPDATE
 439:	017A  C1      	ST4:            POP     BC              ; GET READY TO INSERT
 440:	017B  2A3608  	                LD      HL,(TXTUNF)     ; BUT FIRST CHECK IF
 441:	017E  F1      	                POP     AF              ; THE LENGTH OF NEW LINE
 442:	017F  E5      	                PUSH    HL              ; IS 3 (LINE # AND CR)
 443:	0180  FE03    	                CP      3               ; THEN DO NOT INSERT
 444:	0182  28A6    	                JR      Z,WSTART        ; MUST CLEAR THE STACK
 445:	0184  85      	                ADD     A,L             ; COMPUTE NEW TXTUNF
 446:	0185  6F      	                LD      L,A
 447:	0186  3E00    	                LD      A,0
 448:	0188  8C      	                ADC     A,H
 449:	0189  67      	                LD      H,A             ; HL->NEW UNFILLED AREA
 450:	018A  11000F  	                LD      DE,TXTEND       ; CHECK TO SEE IF THERE
 451:	018D  E7      	                RST     RCOMP           ; COMP HL,DE - IS ENOUGH SPACE
 452:	018E  D29E05  	                JP      NC,QSORRY       ; SORRY, NO ROOM FOR IT
 453:	0191  223608  	                LD      (TXTUNF),HL     ; OK, UPDATE TXTUNF
 454:	0194  D1      	                POP     DE              ; DE->OLD UNFILLED AREA
 455:	0195  CDC606  	                CALL    MVDOWN
 456:	0198  D1      	                POP     DE              ; DE->BEGIN, HL->END
 457:	0199  E1      	                POP     HL
 458:	019A  CDBE06  	                CALL    MVUP            ; MOVE NEW LINE TO SAVE
 459:	019D  18A7    	                JR      ST3             ; AREA
 460:			
 461:			; *************************************************************
 462:			;
 463:			; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
 464:			; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
 465:			; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
 466:			; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
 467:			; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
 468:			;
 469:			; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'WSTART'
 470:			; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
 471:			; GO BACK TO 'WSTART'.
 472:			; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
 473:			; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
 474:			; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'WSTART', ELSE
 475:			; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
 476:			; *************************************************************
 477:			;
 478:			; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
 479:			;
 480:			; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
 481:			;
 482:			; 'STOP(CR)' GOES BACK TO 'WSTART'
 483:			;
 484:			; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
 485:			; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
 486:			; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
 487:			;
 488:			; THERE ARE 3 MORE ENTRIES IN 'RUN':
 489:			; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
 490:			; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
 491:			; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
 492:			;
 493:			; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
 494:			; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
 495:			;
 496:	019F  CD6D05  	NEW:            CALL    ENDCHK          ; *** NEW(CR) ***
 497:	01A2  210009  	                LD      HL,TXTBGN
 498:	01A5  223608  	                LD      (TXTUNF),HL
 499:			;
 500:	01A8  CD6D05  	STOP:           CALL    ENDCHK          ; *** STOP(CR) ***
 501:	01AB  C32A01  	                JP      WSTART
 502:			
 503:	01AE  CD6D05  	RUN:            CALL    ENDCHK          ; *** RUN(CR) ***
 504:	01B1  110009  	                LD      DE,TXTBGN       ; FIRST SAVED LINE
 505:			;
 506:	01B4  210000  	RUNNXL:         LD      HL,0            ; *** RUNNXL ***
 507:	01B7  CDEC05  	                CALL    FNDLP           ; FIND WHATEVER LINE #
 508:	01BA  DA2A01  	                JP      C,WSTART        ; C:PASSED TXTUNF, QUIT
 509:			;
 510:	01BD  ED533808	RUNTSL:         LD      (CURRNT),DE     ; *** RUNTSL ***
 511:	01C1  13      	                INC     DE              ; SET 'CURRENT'->LINE #
 512:	01C2  13      	                INC     DE              ; BUMP PASS LINE #
 513:			;
 514:	01C3  CD0701  	RUNSML:         CALL    CHKIO           ; *** RUNSML ***
 515:	01C6  215707  	                LD      HL,TAB2-1       ; FIND COMMAND IN TAB2
 516:	01C9  C31607  	                JP      EXEC            ; AND EXECUTE IT
 517:			
 518:	01CC  DF      	GOTO:           RST     REXPR           ; *** GOTO EXPR ***
 519:	01CD  D5      	                PUSH    DE              ; SAVE FOR ERROR ROUTINE
 520:	01CE  CD6D05  	                CALL    ENDCHK          ; MUST FIND A CR
 521:	01D1  CDE405  	                CALL    FNDLN           ; FIND THE TARGET LINE
 522:	01D4  C2DC00  	                JP      NZ,AHOW         ; NO SUCH LINE #
 523:	01D7  F1      	                POP     AF              ; CLEAR THE PUSH DE
 524:	01D8  18E3    	                JR      RUNTSL          ; GO DO IT
 525:			;
 526:			; *************************************************************
 527:			;
 528:			; *** LIST *** & PRINT ***
 529:			;
 530:			; LIST HAS TWO FORMS:
 531:			; 'LIST(CR)' LISTS ALL SAVED LINES
 532:			; 'LIST #(CR)' START LIST AT THIS LINE #
 533:			; YOU CAN STOP THE LISTING BY CONTROL C KEY
 534:			;
 535:			; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
 536:			; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
 537:			; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
 538:			;
 539:			; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
 540:			; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
 541:			; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
 542:			; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
 543:			; SPECIFIED, 8 POSITIONS WILL BE USED.
 544:			;
 545:			; NUMBER BASE IS SET BY PERCENT SIGN FOLLOEWED BY A NUMBER
 546:			; BETWEEN 2 and 16. VALUES ARE PRINTED AS UNSIGNED TO THIS BASE
 547:			; FOR THE REST OF THIS PRINT COMMAND UNLESS CHANGED BY
 548:			; ANOTHER BASE. IF NO BASE IS PROVIDED NUMBERS ARE SIGNED DECIMAL.
 549:			;
 550:			; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
 551:			; DOUBLE QUOTES.
 552:			;
 553:			; A BACK-ARROW (UNDERLINE) ALONE MEANS GENERATE A (CR) WITHOUT (LF).
 554:			;
 555:			; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
 556:			; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
 557:			; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
 558:			;
 559:	01DA  CD7C00  	LIST:           CALL    TSTNUM          ; TEST IF THERE IS A #
 560:	01DD  CD6D05  	                CALL    ENDCHK          ; IF NO # WE GET A 0
 561:	01E0  CDE405  	                CALL    FNDLN           ; FIND THIS OR NEXT LINE
 562:	01E3  DA2A01  	LS1:            JP      C,WSTART        ; C:PASSED TXTUNF
 563:	01E6  CDA706  	                CALL    PRTLN           ; PRINT THE LINE
 564:	01E9  CD0701  	                CALL    CHKIO           ; STOP IF HIT CONTROL-C
 565:	01EC  CDEC05  	                CALL    FNDLP           ; FIND NEXT LINE
 566:	01EF  18F2    	                JR      LS1             ; AND LOOP BACK
 567:			
 568:	01F1  AF      	PRINT:          XOR     A               ; DEFAULT BASE FOR PRTNUM
 569:	01F2  323508  	                LD      (PNBASE),A
 570:	01F5  0E08    	                LD      C,8             ; C = # OF SPACES
 571:	01F7  CF3B05  	                TSTC    ';',PR2         ; IF NULL LIST & ";"
 572:	01FA  CD0E00  	                CALL    CRLF            ; GIVE CR-LF AND
 573:	01FD  18C4    	                JR      RUNSML          ; CONTINUE SAME LINE
 574:	01FF  CF0D03  	PR2:            TSTC    CR,PR0          ; IF NULL LIST (CR)
 575:	0202  D7      	                RST     ROUTC           ; ALSO GIVE CR-LF AND
 576:	0203  18AF    	                JR      RUNNXL          ; GO TO NEXT LINE
 577:	0205  CF2304  	PR0:            TSTC    '#',PR5         ; ELSE IS IT FORMAT?
 578:	0208  DF      	                RST     REXPR           ; YES, EVALUATE EXPR.
 579:	0209  4D      	                LD      C,L             ; AND SAVE IT IN C
 580:	020A  1819    	                JR      PR3             ; LOOK FOR MORE TO PRINT
 581:	020C  CF2511  	PR5:            TSTC    '%',PR1         ; ELSE IS IT PRTNUM BASE?
 582:	020F  DF      	                RST     REXPR           ; YES, EVALUATE EXPR.
 583:	0210  7D      	                LD      A,L             ; GET THE LOW PART
 584:	0211  FE01    	                CP      1               ; EITHER 0 OR >= 2?
 585:	0213  CADB00  	                JP      Z,QHOW          ; ERROR
 586:	0216  FE11    	                CP      17              ; BASE > 16?
 587:	0218  D2DB00  	                JP      NC,QHOW         ; ERROR
 588:	021B  323508  	                LD      (PNBASE),A      ; IN PNBASE
 589:	021E  1805    	                JR      PR3             ; LOOK FOR MORE TO PRINT
 590:	0220  CD1406  	PR1:            CALL    QTSTG           ; OR IS IT A STRING?
 591:	0223  1810    	                JR      PR8             ; HACK JR!! IF NOT, MUST BE EXPR.
 592:	0225  CF2C05  	PR3:            TSTC    $2C,PR6         ; IF ",", GO FIND NEXT
 593:	0228  CD5E05  	                CALL    FIN             ; IN THE LIST.
 594:	022B  18D8    	                JR      PR0             ; LIST CONTINUES
 595:	022D  AF      	PR6:            XOR     A               ; END OF LIST REACHED
 596:	022E  323508  	                LD      (PNBASE),A      ; RESET DEFAULT BASE
 597:	0231  CD0E00  	                CALL    CRLF            ; LIST ENDS WITH CRLF
 598:	0234  F7      	                RST     RFINISH         ; FINISH
 599:	0235  DF      	PR8:            RST     REXPR           ; EVALUATE THE EXPR
 600:	0236  C5      	                PUSH    BC
 601:	0237  CD4706  	                CALL    PRTNUM          ; PRINT THE VALUE
 602:	023A  C1      	                POP     BC
 603:	023B  18E8    	                JR      PR3             ; MORE TO PRINT?
 604:			;
 605:			; *************************************************************
 606:			;
 607:			; *** GOSUB *** & RETURN ***
 608:			;
 609:			; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
 610:			; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
 611:			; ETC. ARE SAVED SO THAT EXECUTION CAN BE CONTINUED AFTER THE
 612:			; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
 613:			; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
 614:			; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
 615:			; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
 616:			; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
 617:			; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
 618:			;
 619:			; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
 620:			; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
 621:			; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
 622:			; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
 623:			;
 624:	023D  CDEE06  	GOSUB:          CALL    PUSHA           ; SAVE THE CURRENT "FOR"
 625:	0240  DF      	                RST     REXPR           ; PARAMETERS
 626:	0241  D5      	                PUSH    DE              ; AND TEXT POINTER
 627:	0242  CDE405  	                CALL    FNDLN           ; FIND THE TARGET LINE
 628:	0245  C2DC00  	                JP      NZ,AHOW         ; NOT THERE. SAY "HOW?"
 629:	0248  2A3808  	                LD      HL,(CURRNT)     ; FOUND IT, SAVE OLD
 630:	024B  E5      	                PUSH    HL              ; 'CURRNT' OLD 'STKGOS'
 631:	024C  2A3A08  	                LD      HL,(STKGOS)
 632:	024F  E5      	                PUSH    HL
 633:	0250  ED62    	                SBC     HL,HL           ; CY==0, shorter than LD HL,0
 634:	0252  224008  	                LD      (LOPVAR),HL     ; LOAD NEW ONES
 635:	0255  ED733A08	                LD      (STKGOS),SP
 636:	0259  C3BD01  	                JP      RUNTSL          ; THEN RUN THAT LINE
 637:			;
 638:	025C  CD6D05  	RETURN:         CALL    ENDCHK          ; THERE MUST BE A CR
 639:	025F  2A3A08  	                LD      HL,(STKGOS)     ; OLD STACK POINTER
 640:	0262  7C      	                LD      A,H             ; 0 MEANS NOT EXIST
 641:	0263  B5      	                OR      L
 642:	0264  CA7105  	                JP      Z,QWHAT         ; SO, WE SAY: "WHAT?"
 643:	0267  F9      	                LD      SP,HL           ; ELSE, RESTORE IT
 644:	0268  E1      	                POP     HL
 645:	0269  223A08  	                LD      (STKGOS),HL     ; AND THE OLD 'STKGOS'
 646:	026C  E1      	                POP     HL
 647:	026D  223808  	                LD      (CURRNT),HL     ; AND THE OLD 'CURRNT'
 648:	0270  D1      	                POP     DE              ; OLD TEXT POINTER
 649:	0271  CDD306  	                CALL    POPA            ; OLD "FOR" PARAMETERS
 650:	0274  F7      	                RST     RFINISH         ; AND WE ARE BACK HOME
 651:			;
 652:			; *************************************************************
 653:			;
 654:			; *** FOR *** & NEXT ***
 655:			;
 656:			; 'FOR' HAS TWO FORMS:
 657:			; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
 658:			; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
 659:			; EXP3=1.  (I.E., WITH A STEP OF +1.)
 660:			; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
 661:			; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
 662:			; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
 663:			; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
 664:			; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
 665:			; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
 666:			; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
 667:			; BEFORE THE NEW ONE OVERWRITES IT.
 668:			; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
 669:			; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
 670:			; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
 671:			; (PURGED FROM THE STACK..)
 672:			;
 673:			; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
 674:			; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
 675:			; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
 676:			; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
 677:			; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
 678:			; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
 679:			; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
 680:			; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
 681:			; IS PURGED AND EXECUTION CONTINUES.
 682:			;
 683:	000A          	STKLVL:         .EQU    10              ; SIZE OF ONE STACK LEVEL
 684:	0275  CDEE06  	FOR:            CALL    PUSHA           ; SAVE THE OLD SAVE AREA
 685:	0278  CD4F05  	                CALL    SETVAL          ; SET THE CONTROL VAR.
 686:	027B  2B      	                DEC     HL              ; HL IS ITS ADDRESS
 687:	027C  224008  	                LD      (LOPVAR),HL     ; SAVE THAT
 688:	027F  21CF07  	                LD      HL,TAB5-1       ; USE 'EXEC' TO LOOK
 689:	0282  C31607  	                JP      EXEC            ; FOR THE WORD 'TO'
 690:	0285  DF      	FR1:            RST     REXPR           ; EVALUATE THE LIMIT
 691:	0286  224408  	                LD      (LOPLMT),HL     ; SAVE THAT
 692:	0289  21D507  	                LD      HL,TAB6-1       ; USE 'EXEC' TO LOOK
 693:	028C  C31607  	                JP      EXEC            ; FOR THE WORD 'STEP'
 694:	028F  DF      	FR2:            RST     REXPR           ; FOUND IT, GET STEP
 695:	0290  1803    	                JR      FR4
 696:	0292  210100  	FR3:            LD      HL,1H           ; NOT FOUND, SET TO 1
 697:	0295  224208  	FR4:            LD      (LOPINC),HL     ; SAVE THAT TOO
 698:	0298  2A3808  	FR5:            LD      HL,(CURRNT)     ; SAVE CURRENT LINE #
 699:	029B  224608  	                LD      (LOPLN),HL
 700:	029E  EB      	                EX      DE,HL           ; AND TEXT POINTER
 701:	029F  224808  	                LD      (LOPPT),HL
 702:	02A2  010A00  	                LD      BC,STKLVL       ; DIG INTO STACK TO
 703:	02A5  2A4008  	                LD      HL,(LOPVAR)     ; FIND 'LOPVAR'
 704:	02A8  EB      	                EX      DE,HL
 705:	02A9  60      	                LD      H,B
 706:	02AA  68      	                LD      L,B             ; HL=0 NOW
 707:	02AB  39      	                ADD     HL,SP           ; HERE IS THE STACK
 708:	02AC  3E      	                .DB     3EH             ; HACK SKIP "ADD HL,BC"
 709:	02AD  09      	FR7:            ADD     HL,BC           ; EACH LEVEL IS 10 DEEP
 710:	02AE  7E      	                LD      A,(HL)          ; GET THAT OLD 'LOPVAR'
 711:	02AF  23      	                INC     HL
 712:	02B0  B6      	                OR      (HL)
 713:	02B1  2817    	                JR      Z,FR8           ; 0 SAYS NO MORE IN IT
 714:	02B3  7E      	                LD      A,(HL)
 715:	02B4  2B      	                DEC     HL
 716:	02B5  BA      	                CP      D               ; SAME AS THIS ONE?
 717:	02B6  20F5    	                JR      NZ,FR7
 718:	02B8  7E      	                LD      A,(HL)          ; THE OTHER HALF?
 719:	02B9  BB      	                CP      E
 720:	02BA  20F1    	                JR      NZ,FR7
 721:	02BC  EB      	                EX      DE,HL           ; YES, FOUND ONE
 722:	02BD  ED62    	                SBC     HL,HL           ; CY==0 -> HL:=0
 723:	02BF  39      	                ADD     HL,SP           ; TRY TO MOVE SP
 724:	02C0  44      	                LD      B,H
 725:	02C1  4D      	                LD      C,L
 726:	02C2  210A00  	                LD      HL,STKLVL       ; ONE LEVEL IS 10
 727:	02C5  19      	                ADD     HL,DE           ; BYTES DEEP
 728:	02C6  CDC606  	                CALL    MVDOWN          ; AND PURGE 1 LEVEL
 729:	02C9  F9      	                LD      SP,HL           ; IN THE STACK
 730:	02CA  2A4808  	FR8:            LD      HL,(LOPPT)      ; JOB DONE, RESTORE DE
 731:	02CD  EB      	                EX      DE,HL
 732:	02CE  F7      	                RST     RFINISH         ; AND CONTINUE
 733:			;
 734:	02CF  FF      	NEXT:           RST     RTSTV           ; GET ADDRESS OF VAR.
 735:	02D0  DA7105  	                JP      C,QWHAT         ; NO VARIABLE, "WHAT?"
 736:	02D3  223C08  	                LD      (VARNXT),HL     ; YES, SAVE IT
 737:	02D6  D5      	NX0:            PUSH    DE              ; SAVE TEXT POINTER
 738:	02D7  EB      	                EX      DE,HL
 739:	02D8  2A4008  	                LD      HL,(LOPVAR)     ; GET VAR. IN 'FOR'
 740:	02DB  7C      	                LD      A,H
 741:	02DC  B5      	                OR      L               ; 0 SAYS NEVER HAD ONE
 742:	02DD  CA7205  	                JP      Z,AWHAT         ; SO WE ASK: "WHAT?"
 743:	02E0  E7      	                RST     RCOMP           ; ELSE WE CHECK THEM
 744:	02E1  2809    	                JR      Z,NX3           ; OK, THEY AGREE
 745:	02E3  D1      	                POP     DE              ; NO, LET'S SEE
 746:	02E4  CDD306  	                CALL    POPA            ; PURGE CURRENT LOOP
 747:	02E7  2A3C08  	                LD      HL,(VARNXT)     ; AND POP ONE LEVEL
 748:	02EA  18EA    	                JR      NX0             ; GO CHECK AGAIN
 749:	02EC  5E      	NX3:            LD      E,(HL)          ; COME HERE WHEN AGREED
 750:	02ED  23      	                INC     HL
 751:	02EE  56      	                LD      D,(HL)          ; DE=VALUE OF VAR.
 752:	02EF  2A4208  	                LD      HL,(LOPINC)
 753:	02F2  E5      	                PUSH    HL
 754:	02F3  7C      	                LD      A,H
 755:	02F4  AA      	                XOR     D
 756:	02F5  7A      	                LD      A,D
 757:	02F6  19      	                ADD     HL,DE           ; ADD ONE STEP
 758:	02F7  FAFE02  	                JP      M,NX4
 759:	02FA  AC      	                XOR     H
 760:	02FB  FA1F03  	                JP      M,NX5
 761:	02FE  EB      	NX4:            EX      DE,HL
 762:	02FF  2A4008  	                LD      HL,(LOPVAR)     ; PUT IT BACK
 763:	0302  73      	                LD      (HL),E
 764:	0303  23      	                INC     HL
 765:	0304  72      	                LD      (HL),D
 766:	0305  2A4408  	                LD      HL,(LOPLMT)     ; HL->LIMIT
 767:	0308  F1      	                POP     AF              ; OLD HL
 768:	0309  B7      	                OR      A
 769:	030A  F20E03  	                JP      P,NX1           ; STEP > 0
 770:	030D  EB      	                EX      DE,HL           ; STEP < 0
 771:	030E  CD4705  	NX1:            CALL    CKHLDE          ; COMPARE WITH LIMIT
 772:	0311  D1      	                POP     DE              ; RESTORE TEXT POINTER
 773:	0312  380D    	                JR      C,NX2           ; OUTSIDE LIMIT
 774:	0314  2A4608  	                LD      HL,(LOPLN)      ; WITHIN LIMIT, GO
 775:	0317  223808  	                LD      (CURRNT),HL     ; BACK TO THE SAVED
 776:	031A  2A4808  	                LD      HL,(LOPPT)      ; 'CURRNT' AND TEXT
 777:	031D  EB      	                EX      DE,HL           ; POINTER
 778:	031E  F7      	                RST     RFINISH
 779:	031F  E1      	NX5:            POP     HL
 780:	0320  D1      	                POP     DE
 781:	0321  CDD306  	NX2:            CALL    POPA            ; PURGE THIS LOOP
 782:	0324  F7      	                RST     RFINISH
 783:			;
 784:			; *************************************************************
 785:			;
 786:			; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
 787:			;
 788:			; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
 789:			; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
 790:			;
 791:			; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
 792:			; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
 793:			; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
 794:			; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
 795:			; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
 796:			; EXECUTION CONTINUES AT THE NEXT LINE.
 797:			;
 798:			; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
 799:			; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
 800:			; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
 801:			; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
 802:			; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
 803:			; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
 804:			; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
 805:			; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
 806:			; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
 807:			; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
 808:			;
 809:			; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
 810:			; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
 811:			; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
 812:			; THIS IS HANDLED IN 'INPERR'.
 813:			;
 814:			; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
 815:			; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
 816:			; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
 817:			; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
 818:			; THIS IS DONE BY 'DEFLT'.
 819:			;
 820:	0325  210000  	REM:            LD      HL,0H           ; *** REM ***
 821:	0328  3E      	                .DB     3EH             ; SKIP RST, THIS IS LIKE 'IF 0'
 822:			;
 823:	0329  DF      	IFF:            RST     REXPR           ; *** IF ***
 824:	032A  7C      	                LD      A,H             ; IS THE EXPR.=0?
 825:	032B  B5      	                OR      L
 826:	032C  C2C301  	                JP      NZ,RUNSML       ; NO, CONTINUE
 827:	032F  CD0106  	                CALL    FNDSKP          ; YES, SKIP REST OF LINE
 828:	0332  D2BD01  	                JP      NC,RUNTSL       ; AND RUN THE NEXT LINE
 829:	0335  C32A01  	                JP      WSTART          ; IF NO NEXT, RE-START
 830:			;
 831:	0338  ED7B3E08	INPERR:         LD      SP,(STKINP)     ; *** INPERR *** REST. OLD SP
 832:	033C  E1      	                POP     HL              ; AND OLD 'CURRNT'
 833:	033D  223808  	                LD      (CURRNT),HL
 834:	0340  D1      	                POP     DE              ; AND OLD TEXT POINTER
 835:	0341  D1      	                POP     DE              ; REDO INPUT
 836:			;
 837:	0342          	INPUT:                                  ; *** INPUT ***
 838:	0342  D5      	IP1:            PUSH    DE              ; SAVE IN CASE OF ERROR
 839:	0343  CD1406  	                CALL    QTSTG           ; IS NEXT ITEM A STRING?
 840:	0346  1805    	                JR      IP2             ; HACK JR!! NO
 841:	0348  FF      	                RST     RTSTV           ; YES, BUT FOLLOWED BY A
 842:	0349  3836    	                JR      C,IP4           ; VARIABLE?   NO.
 843:	034B  1810    	                JR      IP3             ; YES.  INPUT VARIABLE
 844:	034D  D5      	IP2:            PUSH    DE              ; SAVE FOR 'PRTSTG'
 845:	034E  FF      	                RST     RTSTV           ; MUST BE VARIABLE NOW
 846:	034F  DA7105  	                JP      C,QWHAT         ; "WHAT?" IT IS NOT?
 847:	0352  1A      	                LD      A,(DE)          ; GET READY FOR 'PRTSTG'
 848:	0353  4F      	                LD      C,A
 849:	0354  97      	                SUB     A
 850:	0355  12      	                LD      (DE),A
 851:	0356  D1      	                POP     DE
 852:	0357  CD0906  	                CALL    PRTSTG          ; PRINT STRING AS PROMPT
 853:	035A  79      	                LD      A,C             ; RESTORE TEXT
 854:	035B  1B      	                DEC     DE
 855:	035C  12      	                LD      (DE),A
 856:	035D  D5      	IP3:            PUSH    DE              ; SAVE TEXT POINTER
 857:	035E  EB      	                EX      DE,HL
 858:	035F  2A3808  	                LD      HL,(CURRNT)     ; ALSO SAVE 'CURRNT'
 859:	0362  E5      	                PUSH    HL
 860:	0363  214203  	                LD      HL,IP1          ; NEGATIVE LINE NUMBER HL -> $E5 $CD
 861:	0366  223808  	                LD      (CURRNT),HL     ; AS A FLAG
 862:	0369  ED733E08	                LD      (STKINP),SP     ; SAVE SP
 863:	036D  D5      	                PUSH    DE              ; OLD HL
 864:	036E  3E3A    	                LD      A,':'           ; PRINT THIS TOO
 865:	0370  CDA405  	                CALL    GETLN           ; AND GET A LINE
 866:	0373  11800F  	                LD      DE,BUFFER       ; POINTS TO BUFFER
 867:	0376  DF      	                RST     REXPR           ; EVALUATE INPUT
 868:	0377  D1      	                POP     DE              ; OK, GET OLD HL
 869:	0378  EB      	                EX      DE,HL
 870:	0379  73      	                LD      (HL),E          ; SAVE VALUE IN VAR.
 871:	037A  23      	                INC     HL
 872:	037B  72      	                LD      (HL),D
 873:	037C  E1      	                POP     HL              ; GET OLD 'CURRNT'
 874:	037D  223808  	                LD      (CURRNT),HL
 875:	0380  D1      	                POP     DE              ; AND OLD TEXT POINTER
 876:	0381  F1      	IP4:            POP     AF              ; PURGE JUNK IN STACK
 877:	0382  CF2C02  	                TSTC    $2C,IP5         ; IS NEXT CH. ','?
 878:	0385  18BB    	                JR      IP1             ; YES, MORE ITEMS.
 879:	0387  F7      	IP5:            RST     RFINISH
 880:			;
 881:	0388  1A      	DEFLT:          LD      A,(DE)          ; ***  DEFLT ***
 882:	0389  FE0D    	                CP      CR              ; EMPTY LINE IS OK
 883:	038B  2808    	                JR      Z,LT1           ; ELSE IT IS 'LET'
 884:			;
 885:	038D  CD4F05  	LET:            CALL    SETVAL          ; *** LET ***
 886:	0390  CF2C02  	                TSTC    $2C,LT1         ; SET VALUE TO VAR.
 887:	0393  18F8    	                JR      LET             ; ITEM BY ITEM
 888:	0395  F7      	LT1:            RST     RFINISH         ; UNTIL FINISH
 889:			;
 890:			; *************************************************************
 891:			;
 892:			; *** EXPR ***
 893:			;
 894:			; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
 895:			; <EXPR>::<EXPR2>
 896:			;         <EXPR2><REL.OP.><EXPR2>
 897:			; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
 898:			; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
 899:			; <EXPR2>::=(+ OR -)<EXPR3>(+ OR - OR |<EXPR3>)(....)
 900:			; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
 901:			; <EXPR3>::=<EXPR4>(* OR / OR &<EXPR4>)(....)
 902:			; <EXPR4>::=<VARIABLE>
 903:			;           <FUNCTION>
 904:			;           (<EXPR>)
 905:			; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
 906:			; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
 907:			; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
 908:			;
 909:			; EXPR:         CALL    EXPR2           ; THIS IS AT LOC. 18
 910:			;               PUSH    HL              ; SAVE <EXPR2> VALUE
 911:			;               JP      EXPR1           ; REST OF IT AT EXPR1
 912:			;
 913:	0396  21DD07  	EXPR1:          LD      HL,TAB8-1       ; LOOKUP REL.OP.
 914:	0399  C31607  	                JP      EXEC            ; GO DO IT
 915:			;
 916:	039C  CDC503  	XPEQ:           CALL    XP18            ; REL.OP."="
 917:	039F  C0      	                RET     NZ              ; FALSE, RETURN HL=0
 918:	03A0  6F      	                LD      L,A             ; ELSE SET HL=1
 919:	03A1  C9      	                RET
 920:			;
 921:	03A2  CDC503  	XPNE:           CALL    XP18            ; REL.OP."#" OR "<>"
 922:	03A5  C8      	                RET     Z               ; FALSE, RETURN HL=0
 923:	03A6  6F      	                LD      L,A             ; TRUE, RETURN HL=1
 924:	03A7  C9      	                RET
 925:			;
 926:	03A8  CDC503  	XPLE:           CALL    XP18            ; REL.OP."<="
 927:	03AB  6F      	                LD      L,A             ; SET HL=1
 928:	03AC  C8      	                RET     Z               ; REL. TRUE, RETURN
 929:	03AD  D8      	                RET     C
 930:	03AE  6C      	                LD      L,H             ; ELSE SET HL=0
 931:	03AF  C9      	                RET
 932:			;
 933:	03B0  CDC503  	XPLT:           CALL    XP18            ; REL.OP."<"
 934:	03B3  D0      	                RET     NC              ; FALSE, RETURN HL=0
 935:	03B4  6F      	                LD      L,A             ; ELSE SET HL=1
 936:	03B5  C9      	                RET
 937:			;
 938:	03B6  CDC503  	XPGE:           CALL    XP18            ; REL.OP.">="
 939:	03B9  D8      	                RET     C               ; NO, RETURN HL=0
 940:	03BA  6F      	                LD      L,A             ; YES, RETURN HL=1
 941:	03BB  C9      	                RET
 942:			;
 943:	03BC  CDC503  	XPGT:           CALL    XP18            ; REL.OP.">"
 944:	03BF  C8      	                RET     Z               ; FALSE
 945:	03C0  D8      	                RET     C               ; ALSO FALSE, HL=0
 946:	03C1  6F      	                LD      L,A             ; TRUE, HL=1
 947:	03C2  C9      	                RET
 948:			;
 949:	03C3  E1      	XP17:           POP     HL              ; NOT .REL.OP
 950:	03C4  C9      	                RET                     ; RETURN HL=<EXPR2>
 951:			;
 952:	03C5  79      	XP18:           LD      A,C             ; SUBROUTINE FOR ALL
 953:	03C6  E1      	                POP     HL              ; REL.OP.'S
 954:	03C7  C1      	                POP     BC
 955:	03C8  E5      	                PUSH    HL              ; REVERSE TOP OF STACK
 956:	03C9  C5      	                PUSH    BC
 957:	03CA  4F      	                LD      C,A
 958:	03CB  CDDA03  	                CALL    EXPR2           ; GET 2ND <EXPR2>
 959:	03CE  EB      	                EX      DE,HL           ; VALUE IN DE NOW
 960:	03CF  E3      	                EX      (SP),HL         ; 1ST <EXPR2> IN HL
 961:	03D0  CD4705  	                CALL    CKHLDE          ; COMPARE 1ST WITH 2ND
 962:	03D3  D1      	                POP     DE              ; RESTORE TEXT POINTER
 963:	03D4  210000  	                LD      HL,0H           ; SET HL=0, A=1
 964:	03D7  3E01    	                LD      A,1
 965:	03D9  C9      	                RET
 966:			;
 967:	03DA  CF2D04  	EXPR2:          TSTC    '-',XP21        ; NEGATIVE SIGN?
 968:	03DD  ED62    	                SBC     HL,HL           ; YES, FAKE '0-'
 969:	03DF  1821    	                JR      XP26            ; TREAT LIKE SUBTRACT
 970:			;
 971:	03E1  CF2B00  	XP21:           TSTC    '+',XP22        ; POSITIVE SIGN? IGNORE
 972:	03E4  CD1D04  	XP22:           CALL    EXPR3           ; 1ST <EXPR3>
 973:	03E7  CF2B15  	XP23:           TSTC    '+',XP25        ; ADD?
 974:	03EA  E5      	                PUSH    HL              ; YES, SAVE VALUE
 975:	03EB  CD1D04  	                CALL    EXPR3           ; GET 2ND <EXPR3>
 976:	03EE  EB      	XP24:           EX      DE,HL           ; 2ND IN DE
 977:	03EF  E3      	                EX      (SP),HL         ; 1ST IN HL
 978:	03F0  7C      	                LD      A,H             ; COMPARE SIGN
 979:	03F1  AA      	                XOR     D
 980:	03F2  7A      	                LD      A,D
 981:	03F3  19      	                ADD     HL,DE
 982:	03F4  D1      	                POP     DE              ; RESTORE TEXT POINTER
 983:	03F5  FAE703  	                JP      M,XP23          ; 1ST AND 2ND SIGN DIFFER
 984:	03F8  AC      	                XOR     H               ; 1ST AND 2ND SIGN EQUAL
 985:	03F9  F2E703  	                JP      P,XP23          ; SO IS RESULT
 986:			;
 987:	03FC  C3DB00  	                JP      QHOW            ; ELSE WE HAVE OVERFLOW
 988:			;
 989:	03FF  CF2D09  	XP25:           TSTC    '-',XP27        ; SUBTRACT?
 990:	0402  E5      	XP26:           PUSH    HL              ; YES, SAVE 1ST <EXPR3>
 991:	0403  CD1D04  	                CALL    EXPR3           ; GET 2ND <EXPR3>
 992:	0406  CD3205  	                CALL    CHGSGN          ; NEGATE
 993:	0409  18E3    	                JR      XP24            ; AND ADD THEM
 994:			
 995:	040B  CF7C97  	XP27:           TSTC    '|',XP42        ; OR?
 996:	040E  E5      	                PUSH    HL              ; YES, SAVE 1ST <EXPR3>
 997:	040F  CD1D04  	                CALL    EXPR3           ; GET 2ND <EXPR3>
 998:	0412  EB      	                EX      DE,HL           ; 2ND IN DE
 999:	0413  E3      	                EX      (SP),HL         ; 1ST IN HL
1000:	0414  7C      	                LD      A,H             ; HL = HL & DE
1001:	0415  B2      	                OR      D
1002:	0416  67      	                LD      H,A
1003:	0417  7D      	                LD      A,L
1004:	0418  B3      	                OR      E
1005:	0419  6F      	                LD      L,A
1006:	041A  D1      	                POP     DE              ; RESTORE TEXT POINTER
1007:	041B  18CA    	                JR      XP23            ; LOOK FOR MORE TERMS
1008:			;
1009:	041D  CD8A04  	EXPR3:          CALL    EXPR4           ; GET 1ST <EXPR4>
1010:	0420  CF2A29  	XP31:           TSTC    '*',XP34        ; MULTIPLY?
1011:	0423  E5      	                PUSH    HL              ; YES, SAVE 1ST
1012:	0424  CD8A04  	                CALL    EXPR4           ; AND GET 2ND <EXPR4>
1013:	0427  0600    	                LD      B,0H            ; CLEAR B FOR SIGN
1014:	0429  CD2F05  	                CALL    CHKSGN          ; CHECK SIGN
1015:	042C  E3      	                EX      (SP),HL         ; 1ST IN HL
1016:	042D  CD2F05  	                CALL    CHKSGN          ; CHECK SIGN OF 1ST
1017:	0430  EB      	                EX      DE,HL
1018:	0431  E3      	                EX      (SP),HL
1019:	0432  7C      	                LD      A,H             ; IS HL > 255 ?
1020:	0433  B7      	                OR      A
1021:	0434  2806    	                JR      Z,XP32          ; NO
1022:	0436  7A      	                LD      A,D             ; YES, HOW ABOUT DE
1023:	0437  B2      	                OR      D
1024:	0438  EB      	                EX      DE,HL           ; PUT SMALLER IN HL
1025:	0439  C2DC00  	                JP      NZ,AHOW         ; ALSO >, WILL OVERFLOW
1026:	043C  7D      	XP32:           LD      A,L             ; THIS IS DUMB
1027:	043D  210000  	                LD      HL,0H           ; CLEAR RESULT
1028:	0440  B7      	                OR      A               ; ADD AND COUNT
1029:	0441  2828    	                JR      Z,XP35
1030:	0443  19      	XP33:           ADD     HL,DE
1031:	0444  DADC00  	                JP      C,AHOW          ; OVERFLOW
1032:	0447  3D      	                DEC     A
1033:	0448  20F9    	                JR      NZ,XP33
1034:	044A  181F    	                JR      XP35            ; FINISHED
1035:			;
1036:	044C  CF2F29  	XP34:           TSTC    '/',XP36        ; DIVIDE?
1037:	044F  E5      	                PUSH    HL              ; YES, SAVE 1ST <EXPR4>
1038:	0450  CD8A04  	                CALL    EXPR4           ; AND GET THE SECOND ONE
1039:	0453  0600    	                LD      B,0H            ; CLEAR B FOR SIGN
1040:	0455  CD2F05  	                CALL    CHKSGN          ; CHECK SIGN OF 2ND
1041:	0458  E3      	                EX      (SP),HL         ; GET 1ST IN HL
1042:	0459  CD2F05  	                CALL    CHKSGN          ; CHECK SIGN OF 1ST
1043:	045C  EB      	                EX      DE,HL
1044:	045D  E3      	                EX      (SP),HL
1045:	045E  EB      	                EX      DE,HL
1046:	045F  7A      	                LD      A,D             ; DIVIDE BY 0?
1047:	0460  B3      	                OR      E
1048:	0461  CADC00  	                JP      Z,AHOW          ; SAY "HOW?"
1049:	0464  C5      	                PUSH    BC              ; ELSE SAVE SIGN
1050:	0465  CD1605  	                CALL    DIVIDE          ; USE SUBROUTINE
1051:	0468  60      	                LD      H,B             ; RESULT IN HL NOW
1052:	0469  69      	                LD      L,C
1053:	046A  C1      	                POP     BC              ; GET SIGN BACK
1054:	046B  D1      	XP35:           POP     DE              ; AND TEXT POINTER
1055:	046C  7C      	                LD      A,H             ; HL MUST BE +
1056:	046D  B7      	                OR      A
1057:	046E  FADB00  	                JP      M,QHOW          ; ELSE IT IS OVERFLOW
1058:	0471  78      	                LD      A,B
1059:	0472  B7      	                OR      A
1060:	0473  FC3205  	                CALL    M,CHGSGN        ; CHANGE SIGN IF NEEDED
1061:	0476  18A8    	                JR      XP31            ; LOOK FOR MORE TERMS
1062:			;
1063:	0478  CF262A  	XP36:           TSTC    '&',XP42        ; AND?
1064:	047B  E5      	                PUSH    HL              ; YES, SAVE 1ST <EXPR4>
1065:	047C  CD8A04  	                CALL    EXPR4           ; AND GET THE SECOND ONE
1066:	047F  EB      	                EX      DE,HL           ; 2ND IN DE
1067:	0480  E3      	                EX      (SP),HL         ; 1ST IN HL
1068:	0481  7C      	                LD      A,H             ; HL = HL & DE
1069:	0482  A2      	                AND     D
1070:	0483  67      	                LD      H,A
1071:	0484  7D      	                LD      A,L
1072:	0485  A3      	                AND     E
1073:	0486  6F      	                LD      L,A
1074:	0487  D1      	                POP     DE              ; RESTORE TEXT POINTER
1075:	0488  1896    	                JR      XP31            ; LOOK FOR MORE TERMS
1076:			
1077:			;
1078:	048A  21A807  	EXPR4:          LD      HL,TAB4-1       ; FIND FUNCTION IN TAB4
1079:	048D  C31607  	                JP      EXEC            ; AND GO DO IT
1080:			;
1081:	0490  FF      	XP40:           RST     RTSTV           ; NO, NOT A FUNCTION
1082:	0491  3805    	                JR      C,XP41          ; NOR A VARIABLE
1083:	0493  7E      	                LD      A,(HL)          ; VARIABLE
1084:	0494  23      	                INC     HL
1085:	0495  66      	                LD      H,(HL)          ; VALUE IN HL
1086:	0496  6F      	                LD      L,A
1087:	0497  C9      	                RET
1088:			;
1089:	0498  CD7C00  	XP41:           CALL    TSTNUM          ; OR IS IT A NUMBER
1090:	049B  78      	                LD      A,B             ; # OF DIGIT
1091:	049C  B7      	                OR      A
1092:	049D  C0      	                RET     NZ              ; OK
1093:	049E  CF2805  	PARN:           TSTC    $28,XP43        ; '('
1094:	04A1  DF      	                RST     REXPR           ; "(EXPR)"
1095:	04A2  CF2901  	                TSTC    $29,XP43        ; ')'
1096:	04A5  C9      	XP42:           RET
1097:	04A6  C37105  	XP43:           JP      QWHAT           ; ELSE SAY: "WHAT?"
1098:			
1099:	04A9  CD9E04  	RND:            CALL    PARN            ; *** RND(EXPR) ***
1100:	04AC  7C      	                LD      A,H             ; EXPR MUST BE +
1101:	04AD  B7      	                OR      A
1102:	04AE  FADB00  	                JP      M,QHOW
1103:	04B1  B5      	                OR      L               ; AND NON-ZERO
1104:	04B2  CADB00  	                JP      Z,QHOW
1105:	04B5  D5      	                PUSH    DE              ; SAVE BOTH
1106:	04B6  E5      	                PUSH    HL
1107:	04B7  2A4A08  	                LD      HL,(RANPNT)     ; GET MEMORY AS RANDOM
1108:	04BA  11F807  	                LD      DE,LSTROM       ; NUMBER
1109:	04BD  E7      	                RST     RCOMP
1110:	04BE  3803    	                JR      C,RA1           ; WRAP AROUND IF LAST
1111:	04C0  210000  	                LD      HL,CSTART
1112:	04C3  ED5F    	RA1:            LD      A,R             ; RFSH REG GIVES TIME DEP. RANDOM
1113:	04C5  AE      	                XOR     (HL)
1114:	04C6  5F      	                LD      E,A
1115:	04C7  23      	                INC     HL
1116:	04C8  AE      	                XOR     (HL)
1117:	04C9  57      	                LD      D,A
1118:	04CA  224A08  	                LD      (RANPNT),HL
1119:	04CD  E1      	                POP     HL
1120:	04CE  EB      	                EX      DE,HL
1121:	04CF  C5      	                PUSH    BC
1122:	04D0  CD1605  	                CALL    DIVIDE          ; RND(N)=MOD(M,N)+1
1123:	04D3  C1      	                POP     BC
1124:	04D4  D1      	                POP     DE
1125:	04D5  23      	                INC     HL
1126:	04D6  C9      	                RET
1127:			
1128:	04D7  CD9E04  	ABS:            CALL    PARN            ; *** ABS(EXPR) ***
1129:	04DA  1B      	                DEC     DE
1130:	04DB  CD2F05  	                CALL    CHKSGN          ; CHECK SIGN AND CHANGE IF HL < 0
1131:	04DE  13      	                INC     DE
1132:	04DF  C9      	                RET
1133:			
1134:	04E0  2A3608  	SIZE:           LD      HL,(TXTUNF)     ; *** RETURN SIZE IN HL ***
1135:	04E3  D5      	                PUSH    DE              ; GET THE NUMBER OF FREE
1136:	04E4  EB      	                EX      DE,HL           ; BYTES BETWEEN 'TXTUNF'
1137:	04E5  21000F  	                LD      HL,TXTEND       ; AND 'TXTEND'
1138:	04E8  CD2B05  	                CALL    SUBDE
1139:	04EB  D1      	                POP     DE
1140:	04EC  C9      	                RET
1141:			
1142:	04ED  CD9E04  	GET:            CALL    PARN            ; *** GET(ADDR) ***
1143:	04F0  6E      	                LD      L,(HL)          ; GET CONTENT OF (HL)
1144:	04F1  2600    	                LD      H,0             ; RETURN RESULT IN HL
1145:	04F3  C9      	                RET
1146:			
1147:	04F4  CD9E04  	USR:            CALL    PARN            ; *** USR(PARA) ***
1148:	04F7  C3000F  	                JP      USRSPC          ; GET para in HL and JP to prog
1149:			;                                       ; There you should:
1150:			;               ...                     ;   - Do the work
1151:			;               ...                     ;   - Put result in HL
1152:			;               RET                     ; $C9 - RET to BASIC
1153:			;                                       ; DEFAULT: (USRSPC)=$C9
1154:			
1155:	04FA  CD9E04  	CALL:           CALL    PARN            ; *** CALL(ADR) ***
1156:	04FD  E9      	                JP      (HL)            ; Get address in HL and jump there
1157:			                                        ; Return value in HL
1158:			
1159:	04FE  21000F  	TOP:            LD      HL,TXTEND       ; *** TOP *** END OF TEXT AREA = USRSPC
1160:	0501  C9      	                RET
1161:			
1162:	0502  DF      	PUT:            RST     REXPR           ; *** PUT ADDR, VAL1 [,VAL2, VAL3,..]
1163:	0503  CF2C0D  	                TSTC    $2C,PT2         ; 1ST ',' SEPARATES THE VALUE(S)
1164:	0506  E5      	                PUSH    HL              ; SAVE ADDR
1165:	0507  DF      	PT0:            RST     REXPR           ; GET VAL IN HL
1166:	0508  7D      	                LD      A,L             ; LOW BYTE OF VAL
1167:	0509  E1      	                POP     HL              ; GET ADDR
1168:	050A  77      	                LD      (HL),A          ; PUT VALUE IN RAM
1169:	050B  CF2C04  	                TSTC    $2C,PT1         ; READY UNLESS ","
1170:	050E  23      	                INC     HL              ; NEXT ADDR
1171:	050F  E5      	                PUSH    HL
1172:	0510  18F5    	                JR      PT0             ; LIST CONTINUES
1173:			;
1174:	0512  F7      	PT1:            RST     RFINISH         ; READY
1175:			;
1176:	0513  185C    	PT2:            JR      QWHAT           ; ELSE SAY: "WHAT?"
1177:			
1178:	0515  76      	BYE:            HALT                    ; HALT CPU (return to analyser)
1179:			
1180:			;
1181:			; *************************************************************
1182:			;
1183:			; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1184:			;
1185:			; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1186:			;
1187:			; 'SUBDE' SUBSTRACTS DE FROM HL
1188:			;
1189:			; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1190:			; SIGN AND FLIP SIGN OF B.
1191:			;
1192:			; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1193:			;
1194:			; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1195:			; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1196:			; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1197:			;
1198:	0516  E5      	DIVIDE:         PUSH    HL              ; *** DIVIDE ***
1199:	0517  6C      	                LD      L,H             ; DIVIDE H BY DE
1200:	0518  2600    	                LD      H,0
1201:	051A  CD2105  	                CALL    DV1
1202:	051D  41      	                LD      B,C             ; SAVE RESULT IN B
1203:	051E  7D      	                LD      A,L             ; (REMINDER+L)/DE
1204:	051F  E1      	                POP     HL
1205:	0520  67      	                LD      H,A
1206:	0521  0EFF    	DV1:            LD      C,0FFH          ; RESULT IN C
1207:	0523  0C      	DV2:            INC     C               ; DUMB ROUTINE
1208:	0524  CD2B05  	                CALL    SUBDE           ; DIVIDE BY SUBTRACT
1209:	0527  30FA    	                JR      NC,DV2          ; AND COUNT
1210:	0529  19      	                ADD     HL,DE
1211:	052A  C9      	                RET
1212:			
1213:	052B  B7      	SUBDE:          OR      A               ; CLR CY
1214:	052C  ED52    	                SBC     HL,DE
1215:	052E  C9      	                RET
1216:			
1217:	052F  7C      	CHKSGN:         LD      A,H             ; *** CHKSGN ***
1218:	0530  B7      	                OR      A               ; CHECK SIGN OF HL
1219:	0531  F0      	                RET     P               ; IF HL >=0 RETURN
1220:			;
1221:	0532  7C      	CHGSGN:         LD      A,H             ; *** CHGSGN ***
1222:	0533  B5      	                OR      L               ; CHECK VALUE OF HL
1223:	0534  C8      	                RET     Z               ; IF HL == 0 RETURN
1224:			;
1225:	0535  7C      	                LD      A,H
1226:	0536  F5      	                PUSH    AF              ; SAVE SIGN
1227:	0537  2F      	                CPL                     ; CHANGE SIGN OF HL
1228:	0538  67      	                LD      H,A
1229:	0539  7D      	                LD      A,L
1230:	053A  2F      	                CPL
1231:	053B  6F      	                LD      L,A
1232:	053C  23      	                INC     HL              ; HL = -HL
1233:	053D  F1      	                POP     AF              ; GET ORIGINAL SIGN
1234:	053E  AC      	                XOR     H               ; COMPARE
1235:	053F  F2DB00  	                JP      P,QHOW          ; ERROR IF SIGN UNCHANGED (HL=$8000)
1236:	0542  78      	                LD      A,B             ; AND ALSO FLIP B
1237:	0543  EE80    	                XOR     80H
1238:	0545  47      	                LD      B,A
1239:	0546  C9      	                RET
1240:			
1241:	0547  7C      	CKHLDE:         LD      A,H
1242:	0548  AA      	                XOR     D               ; SAME SIGN?
1243:	0549  F24D05  	                JP      P,CK1           ; YES, COMPARE
1244:	054C  EB      	                EX      DE,HL           ; NO, XCH AND COMP
1245:	054D  E7      	CK1:            RST     RCOMP
1246:	054E  C9      	                RET
1247:			;
1248:			; *************************************************************
1249:			;
1250:			; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1251:			;
1252:			; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1253:			; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1254:			; TO THAT VALUE.
1255:			;
1256:			; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1257:			; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1258:			; NEXT LINE AND CONTINUE FROM THERE.
1259:			;
1260:			; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1261:			; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1262:			;
1263:			; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1264:			; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1265:			; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1266:			; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1267:			; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1268:			; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1269:			; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1270:			; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1271:			; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1272:			;
1273:			; RELATED TO 'ERROR' ARE THE FOLLOWING:
1274:			; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1275:			; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1276:			; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1277:			; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1278:			;
1279:	054F  FF      	SETVAL:         RST     RTSTV           ; *** SETVAL ***
1280:	0550  381F    	                JR      C,QWHAT         ; "WHAT?" NO VARIABLE
1281:	0552  E5      	                PUSH    HL              ; SAVE ADDRESS OF VAR.
1282:	0553  CF3D1B  	                TSTC    '=',QWHAT       ; PASS "=" SIGN
1283:	0556  DF      	                RST     REXPR           ; EVALUATE EXPR.
1284:	0557  44      	                LD      B,H             ; VALUE IS IN BC NOW
1285:	0558  4D      	                LD      C,L
1286:	0559  E1      	                POP     HL              ; GET ADDRESS
1287:	055A  71      	                LD      (HL),C          ; SAVE VALUE
1288:	055B  23      	                INC     HL
1289:	055C  70      	                LD      (HL),B
1290:	055D  C9      	                RET
1291:			
1292:	055E  CF3B04  	FIN:            TSTC    ';',FI1         ; *** FIN ***
1293:	0561  F1      	                POP     AF              ; ";", PURGE RET. ADDR.
1294:	0562  C3C301  	                JP      RUNSML          ; CONTINUE SAME LINE
1295:	0565  CF0D04  	FI1:            TSTC    CR,FI2          ; NOT ";", IS IT CR?
1296:	0568  F1      	                POP     AF              ; YES, PURGE RET. ADDR.
1297:	0569  C3B401  	                JP      RUNNXL          ; RUN NEXT LINE
1298:	056C  C9      	FI2:            RET                     ; ELSE RETURN TO CALLER
1299:			
1300:	056D  EF      	ENDCHK:         RST     RIGNBLK         ; IGNBLK
1301:	056E  FE0D    	                CP      CR              ; END WITH CR?
1302:	0570  C8      	                RET     Z               ; OK, ELSE SAY: "WHAT?"
1303:			;
1304:	0571  D5      	QWHAT:          PUSH    DE              ; *** QWHAT ***
1305:	0572  11F500  	AWHAT:          LD      DE,WHAT         ; *** AWHAT ***
1306:	0575  97      	ERROR:          SUB     A               ; *** ERROR ***
1307:	0576  CD0906  	                CALL    PRTSTG          ; PRINT 'WHAT?', 'HOW?'
1308:	0579  D1      	                POP     DE              ; OR 'SORRY'
1309:	057A  1A      	                LD      A,(DE)          ; SAVE THE CHARACTER
1310:	057B  F5      	                PUSH    AF              ; AT WHERE OLD DE ->
1311:	057C  97      	                SUB     A               ; AND PUT A 0 THERE
1312:	057D  12      	                LD      (DE),A
1313:	057E  2A3808  	                LD      HL,(CURRNT)     ; GET CURRENT LINE #
1314:	0581  E5      	                PUSH    HL
1315:	0582  7E      	                LD      A,(HL)          ; CHECK THE VALUE
1316:	0583  23      	                INC     HL
1317:	0584  B6      	                OR      (HL)
1318:	0585  D1      	                POP     DE
1319:	0586  CA2A01  	                JP      Z,WSTART        ; IF ZERO, JUST RESTART
1320:	0589  7E      	                LD      A,(HL)          ; IF NEGATIVE,
1321:	058A  B7      	                OR      A
1322:	058B  FA3803  	                JP      M,INPERR        ; REDO INPUT
1323:	058E  CDA706  	                CALL    PRTLN           ; ELSE PRINT THE LINE
1324:	0591  1B      	                DEC     DE              ; UPTO WHERE THE 0 IS
1325:	0592  F1      	                POP     AF              ; RESTORE THE CHARACTER
1326:	0593  12      	                LD      (DE),A
1327:	0594  3E3F    	                LD      A,'?'           ; PRINT A "?"
1328:	0596  D7      	                RST     ROUTC
1329:	0597  97      	                SUB     A               ; AND THE REST OF THE
1330:	0598  CD0906  	                CALL    PRTSTG          ; LINE
1331:	059B  C32A01  	                JP      WSTART          ; THEN RESTART
1332:			;
1333:	059E  D5      	QSORRY:         PUSH    DE              ; *** QSORRY ***
1334:	059F  11FB00  	ASORRY:         LD      DE,SORRY        ; *** ASORRY ***
1335:	05A2  18D1    	                JR      ERROR
1336:			
1337:			;
1338:			; *************************************************************
1339:			;
1340:			; *** GETLN *** FNDLN (& FRIENDS) ***
1341:			;
1342:			; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1343:			; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1344:			; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1345:			; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1346:			; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1347:			; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1348:			; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1349:			;
1350:			; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1351:			; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1352:			; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1353:			; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1354:			; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1355:			; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1356:			; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1357:			; LINE, FLAGS ARE C & NZ.
1358:			; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1359:			; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1360:			; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1361:			; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1362:			; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1363:			; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1364:			;
1365:	05A4  D7      	GETLN:          RST     ROUTC           ; *** GETLN ***
1366:	05A5  11800F  	                LD      DE,BUFFER       ; PROMPT AND INIT.
1367:	05A8  CD0701  	GL1:            CALL    CHKIO           ; CHECK KEYBOARD
1368:	05AB  28FB    	                JR      Z,GL1           ; NO INPUT, WAIT
1369:	05AD  FE0D    	                CP      CR              ; CR?
1370:	05AF  2810    	                JR      Z,GL2           ; PROCESS LINE
1371:	05B1  FE08    	                CP      BS              ; BS, DELETE LAST CHARACTER?
1372:	05B3  2817    	                JR      Z,GL3           ; YES
1373:	05B5  FE7F    	                CP      DEL             ; DEL, DELETE LAST CHARACTER?
1374:	05B7  2813    	                JR      Z,GL3           ; YES
1375:	05B9  FE18    	                CP      CAN             ; ^X, DELETE THE WHOLE LINE?
1376:	05BB  2820    	                JR      Z,GL4           ; YES
1377:	05BD  FE20    	                CP      ' '             ; OTHER CTRL CHAR?
1378:	05BF  38E7    	                JR      C,GL1           ; IGNORE
1379:			;
1380:	05C1  D7      	GL2:            RST     ROUTC           ; VALID INPUT, ECHO
1381:	05C2  12      	                LD      (DE),A          ; SAVE INPUT
1382:	05C3  13      	                INC     DE              ; AND BUMP POINTER
1383:	05C4  FE0D    	                CP      CR              ; WAS IT CR?
1384:	05C6  C8      	                RET     Z               ; YES, END OF LINE
1385:	05C7  7B      	                LD      A,E             ; ELSE MORE FREE ROOM?
1386:	05C8  FEFF    	                CP      LOW BUFEND
1387:	05CA  20DC    	                JR      NZ,GL1          ; YES, GET NEXT INPUT
1388:	05CC  7B      	GL3:            LD      A,E             ; DELETE LAST CHARACTER
1389:	05CD  FE80    	                CP      LOW BUFFER      ; BUT DO WE HAVE ANY?
1390:	05CF  28D7    	                JR      Z,GL1           ; NO, REDO WHOLE LINE
1391:	05D1  1B      	                DEC     DE              ; YES, BACKUP POINTER
1392:	05D2  3E08    	                LD      A,BS            ; AND ECHO A BACKSPACE
1393:	05D4  D7      	                RST     ROUTC
1394:	05D5  3E20    	                LD      A,' '           ; AND ECHO A BLANK
1395:	05D7  D7      	                RST     ROUTC
1396:	05D8  3E08    	                LD      A,BS            ; AND ECHO A BACKSPACE
1397:	05DA  D7      	                RST     ROUTC
1398:	05DB  18CB    	                JR      GL1             ; GO GET NEXT INPUT
1399:	05DD  CD0E00  	GL4:            CALL    CRLF            ; REDO ENTIRE LINE
1400:	05E0  3E5E    	                LD      A,'^'           ; CR, LF AND UP-ARROW
1401:	05E2  18C0    	                JR      GETLN
1402:			;
1403:	05E4  7C      	FNDLN:          LD      A,H             ; *** FNDLN ***
1404:	05E5  B7      	                OR      A               ; CHECK SIGN OF HL
1405:	05E6  FADB00  	                JP      M,QHOW          ; IT CANNOT BE -
1406:	05E9  110009  	                LD      DE,TXTBGN       ; INIT TEXT POINTER
1407:			;
1408:	05EC          	FNDLP:                                  ; *** FDLNP ***
1409:	05EC  E5      	FL1:            PUSH    HL              ; SAVE LINE #
1410:	05ED  2A3608  	                LD      HL,(TXTUNF)     ; CHECK IF WE PASSED END
1411:	05F0  2B      	                DEC     HL
1412:	05F1  E7      	                RST     RCOMP
1413:	05F2  E1      	                POP     HL              ; GET LINE # BACK
1414:	05F3  D8      	                RET     C               ; C,NZ PASSED END
1415:	05F4  1A      	                LD      A,(DE)          ; WE DID NOT, GET BYTE 1
1416:	05F5  95      	                SUB     L               ; IS THIS THE LINE?
1417:	05F6  47      	                LD      B,A             ; COMPARE LOW ORDER
1418:	05F7  13      	                INC     DE
1419:	05F8  1A      	                LD      A,(DE)          ; GET BYTE 2
1420:	05F9  9C      	                SBC     A,H             ; COMPARE HIGH ORDER
1421:	05FA  3804    	                JR      C,FL2           ; NO, NOT THERE YET
1422:	05FC  1B      	                DEC     DE              ; ELSE WE EITHER FOUND
1423:	05FD  B0      	                OR      B               ; IT, OR IT IS NOT THERE
1424:	05FE  C9      	                RET                     ; NC,Z:FOUND, NC,NZ:NO
1425:			;
1426:	05FF          	FNDNXT:                                 ; *** FNDNXT ***
1427:	05FF  13      	                INC     DE              ; FIND NEXT LINE
1428:	0600  13      	FL2:            INC     DE              ; JUST PASSED BYTE 1 AND 2
1429:			;
1430:	0601  1A      	FNDSKP:         LD      A,(DE)          ; *** FNDSKP ***
1431:	0602  FE0D    	                CP      CR              ; TRY TO FIND CR
1432:	0604  20FA    	                JR      NZ,FL2          ; KEEP LOOKING
1433:	0606  13      	                INC     DE              ; FOUND CR, SKIP OVER
1434:	0607  18E3    	                JR      FL1             ; CHECK IF END OF TEXT
1435:			;
1436:			; *************************************************************
1437:			;
1438:			; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1439:			;
1440:			; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1441:			; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1442:			; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1443:			; CALLER).  OLD A IS STORED IN B, OLD B IS LOST. CY = Z = 0
1444:			;
1445:			; 'QTSTG' LOOKS FOR A DOUBLE QUOTE, UNDERLINE, UP ARROW, OR BACKSLASH.
1446:			; - IF DOUBLE QUOTE, PRINT THE STRING IN THE QUOTE UNTIL MATCHING UNQUOTE OR CR.
1447:			; - IF UNDERLINE, OUTPUT A CR WITHOUT A LF.
1448:			; - IF UPARROW PRINT THE ASCII VALUE OF NEXT CHAR XOR 40H, I.E. CTRL CHAR.
1449:			; - IF BACKSLASH TAKE THE NEXT CHAR AS VARIABLE AND PRINT THE BYTE VALUE AS ASCII.
1450:			; - IF NONE OF THESE, RETURN TO CALLER.
1451:			; HACK AFTER THE PRINTING THE NEXT 2 BYTES OF THE CALLER
1452:			;      IS SKIPPED OVER (SHALL BE A "JR" INSTRUCTION).
1453:			;
1454:			; 'PRTNUM' PRINTS THE NUMBER IN HL TO THE BASE 2..16 AS SET WITH %N in PRINT.
1455:			; LEADING BLANKS ARE ADDED IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1456:			; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN C,
1457:			; ALL DIGITS ARE PRINTED ANYWAY.
1458:			; NEGATIVE SIGN IS ALSO PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1459:			;
1460:			; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1461:			;
1462:	0609  47      	PRTSTG:         LD      B,A             ; *** PRTSTG ***
1463:	060A  1A      	PS1:            LD      A,(DE)          ; GET A CHARACTER
1464:	060B  13      	                INC     DE              ; BUMP POINTER
1465:	060C  B8      	PS2:            CP      B               ; SAME AS OLD A?
1466:	060D  C8      	                RET     Z               ; YES, RETURN
1467:	060E  D7      	PS3:            RST     ROUTC           ; ELSE PRINT IT
1468:	060F  FE0D    	                CP      CR              ; WAS IT A CR?
1469:	0611  20F7    	                JR      NZ,PS1          ; NO, NEXT
1470:	0613  C9      	                RET                     ; YES, RETURN
1471:			;
1472:	0614  CF220C  	QTSTG:          TSTC    $22,QT4         ; *** QTSTG *** '"'?
1473:	0617  CD0906  	QT1:            CALL    PRTSTG          ; PRINT UNTIL ANOTHER
1474:	061A  FE0D    	QT1A:           CP      CR              ; WAS LAST ONE A CR?
1475:	061C  E1      	                POP     HL              ; HACK RETURN ADDRESS
1476:	061D  CAB401  	                JP      Z,RUNNXL        ; WAS CR, RUN NEXT LINE
1477:	0620  23      	QT2:            INC     HL              ; !! -> AFTER "CALL QTSTG"
1478:	0621  23      	                INC     HL              ; !!    MUST BE "JR .."
1479:	0622  E9      	                JP      (HL)            ; !! RETURN AFTER THIS "JR"
1480:			;
1481:			;QT3:            TSTC    $27,QT4         ; IS IT A "'"?
1482:			;                LD      A,27H           ; YES, DO THE SAME
1483:			;                JR      QT1             ; AS IN '"'
1484:			;
1485:	0623  CF5F06  	QT4:            TSTC    $5F,QT5         ; IS IT UNDERLINE?
1486:	0626  3E8D    	                LD      A,08DH          ; YES, CR WITHOUT LF
1487:	0628  D7      	QT4A:           RST     ROUTC
1488:	0629  E1      	                POP     HL              ; HACK RETURN ADDRESS
1489:	062A  18F4    	                JR      QT2
1490:			;
1491:	062C  CF5E08  	QT5:            TSTC    5EH,QT6         ; RST 1, is it '^'?
1492:	062F  1A      	                LD      A,(DE)          ; CHR
1493:	0630  EE40    	                XOR     40H             ; CONVERT TO CTRL
1494:	0632  D7      	                RST     ROUTC
1495:	0633  1A      	                LD      A,(DE)          ; RESTORE CHR
1496:	0634  13      	                INC     DE
1497:	0635  18E3    	                JR      QT1A
1498:			;
1499:	0637  CF5C0C  	QT6:            TSTC    '\',QT9         ; RST 1, is it '\'?
1500:	063A  E5      	                PUSH    HL
1501:	063B  1A      	                LD      A,(DE)
1502:	063C  CD3900  	                CALL    RTV1            ; GET VAR
1503:	063F  DA7105  	                JP      C,QWHAT         ; NO VARIABLE, "WHAT?"
1504:	0642  7E      	                LD      A,(HL)          ; GET BYTE VALUE
1505:	0643  E1      	                POP     HL
1506:	0644  18E2    	                JR      QT4A            ; OUTPUT AS ASCII
1507:			;
1508:	0646  C9      	QT9:            RET                     ; NONE OF ABOVE
1509:			
1510:	0647          	PRTNUM:                                 ; *** PRINT NUMBER IN HL ***
1511:	0647  3A3508  	                LD      A,(PNBASE)      ; GET NUMBER BASE
1512:	064A  B7      	                OR      A
1513:	064B  2809    	                JR      Z,PN0           ; 0: DEFAULT DEC
1514:	064D  FE10    	                CP      16              ; HEX NUMBER?
1515:	064F  2010    	                JR      NZ,PN1          ; NO
1516:	0651  0624    	                LD      B,'$'           ; PRINT LEADING '$'
1517:	0653  0D      	                DEC     C               ; '$' TAKES SPACE
1518:	0654  180B    	                JR      PN1             ; HEX IS UNSIGNED
1519:	0656  0600    	PN0:            LD      B,0             ; NO PREFIX YET
1520:	0658  CD2F05  	                CALL    CHKSGN          ; CHECK SIGN
1521:	065B  F26106  	                JP      P,PN1           ; NO SIGN
1522:	065E  062D    	                LD      B,'-'           ; B=SIGN
1523:	0660  0D      	                DEC     C               ; '-' TAKES SPACE
1524:	0661  D5      	PN1:            PUSH    DE
1525:	0662  3A3508  	                LD      A,(PNBASE)
1526:	0665  B7      	                OR      A               ; DEFAULT DECIMAL?
1527:	0666  2002    	                JR      NZ,PN1A
1528:	0668  3E0A    	                LD      A,10
1529:	066A  5F      	PN1A:           LD      E,A
1530:	066B  AF      	                XOR     A
1531:	066C  57      	                LD      D,A
1532:	066D  D5      	                PUSH    DE              ; SAVE AS A FLAG
1533:	066E  0D      	                DEC     C               ; C=SPACES
1534:	066F  C5      	                PUSH    BC              ; SAVE SIGN & SPACE
1535:	0670  CD1605  	PN2:            CALL    DIVIDE          ; DIVIDE HL BY NUMBER BASE
1536:	0673  78      	                LD      A,B             ; RESULT 0?
1537:	0674  B1      	                OR      C
1538:	0675  2807    	                JR      Z,PN3           ; YES, WE GOT ALL
1539:	0677  E3      	                EX      (SP),HL         ; NO, SAVE REMAINDER
1540:	0678  2D      	                DEC     L               ; AND COUNT SPACE
1541:	0679  E5      	                PUSH    HL              ; HL IS OLD BC
1542:	067A  60      	                LD      H,B             ; MOVE RESULT TO BC
1543:	067B  69      	                LD      L,C
1544:	067C  18F2    	                JR      PN2             ; AND DIVIDE AGAIN
1545:			;
1546:	067E  C1      	PN3:            POP     BC              ; WE GOT ALL DIGITS IN
1547:	067F  0D      	PN4:            DEC     C               ; THE STACK
1548:	0680  79      	                LD      A,C             ; LOOK AT SPACE COUNT
1549:	0681  B7      	                OR      A
1550:	0682  FA8A06  	                JP      M,PN5           ; NO LEADING BLANKS
1551:	0685  3E20    	                LD      A,' '           ; LEADING BLANKS
1552:	0687  D7      	                RST     ROUTC
1553:	0688  18F5    	                JR      PN4             ; MORE?
1554:	068A  78      	PN5:            LD      A,B             ; PRINT SIGN OR '$'
1555:	068B  B7      	                OR      A
1556:	068C  C41000  	                CALL    NZ,ROUTC
1557:	068F  5D      	                LD      E,L             ; LAST REMAINDER IN E
1558:	0690  3A3508  	PN6:            LD      A,(PNBASE)      ; GET NUMBER BASE
1559:	0693  B7      	                OR      A               ; DEFAULT DECIMAL?
1560:	0694  2002    	                JR      NZ,PN6A
1561:	0696  3E0A    	                LD      A,10
1562:	0698  BB      	PN6A:           CP      E               ; IT IS FLAG FOR NO MORE
1563:	0699  7B      	                LD      A,E             ; CHECK DIGIT IN E
1564:	069A  D1      	                POP     DE
1565:	069B  C8      	                RET     Z               ; IF SO, RETURN
1566:	069C  FE0A    	                CP      10              ; 0-9? < A hex?
1567:	069E  3802    	                JR      C,PN7           ; Skip Add 7
1568:	06A0  C607    	                ADD     A,'A'-'0'-10    ; Bring it up to ASCII A-F
1569:	06A2  C630    	PN7:            ADD     A,'0'           ; ELSE CONVERT TO ASCII
1570:	06A4  D7      	                RST     ROUTC           ; AND PRINT THE DIGIT
1571:	06A5  18E9    	                JR      PN6             ; GO BACK FOR MORE
1572:			
1573:	06A7  AF      	PRTLN:          XOR     A               ; 0 -> DEFAULT BASE 10 SIGNED
1574:	06A8  323508  	                LD      (PNBASE),A      ; FOR PRTNUM
1575:	06AB  1A      	                LD      A,(DE)
1576:	06AC  6F      	                LD      L,A             ; LOW ORDER LINE #
1577:	06AD  13      	                INC     DE
1578:	06AE  1A      	                LD      A,(DE)          ; HIGH ORDER
1579:	06AF  67      	                LD      H,A
1580:	06B0  13      	                INC     DE
1581:	06B1  0E04    	                LD      C,4             ; PRINT 4 DIGIT LINE #
1582:	06B3  CD4706  	                CALL    PRTNUM
1583:	06B6  3E20    	                LD      A,' '           ; FOLLOWED BY A BLANK
1584:	06B8  D7      	                RST     ROUTC
1585:	06B9  97      	                SUB     A               ; AND THEN THE NEXT
1586:	06BA  CD0906  	                CALL    PRTSTG
1587:	06BD  C9      	                RET
1588:			;
1589:			; *************************************************************
1590:			;
1591:			; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1592:			;
1593:			; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1594:			; DE = HL
1595:			;
1596:			; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1597:			; UNTIL DE = BC
1598:			;
1599:			; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1600:			; STACK: LOPVAR, LOPINC, LOPLMT, LOPLN, LOPPT
1601:			;
1602:			; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1603:			; STACK: LOPPT, LOPLN, LOPLMT, LOPINC, LOPVAR
1604:			;
1605:	06BE  E7      	MVUP:           RST     RCOMP           ; *** MVUP ***
1606:	06BF  C8      	                RET     Z               ; DE = HL, RETURN
1607:	06C0  1A      	                LD      A,(DE)          ; GET ONE BYTE
1608:	06C1  02      	                LD      (BC),A          ; MOVE IT
1609:	06C2  13      	                INC     DE              ; INCREASE BOTH POINTERS
1610:	06C3  03      	                INC     BC
1611:	06C4  18F8    	                JR      MVUP            ; UNTIL DONE
1612:			;
1613:	06C6  78      	MVDOWN:         LD      A,B             ; *** MVDOWN ***
1614:	06C7  92      	                SUB     D               ; TEST IF DE = BC
1615:	06C8  2003    	                JR      NZ,MD1          ; NO, GO MOVE
1616:	06CA  79      	                LD      A,C             ; MAYBE, OTHER BYTE?
1617:	06CB  93      	                SUB     E
1618:	06CC  C8      	                RET     Z               ; YES, RETURN
1619:	06CD  1B      	MD1:            DEC     DE              ; ELSE MOVE A BYTE
1620:	06CE  2B      	                DEC     HL              ; BUT FIRST DECREASE
1621:	06CF  1A      	                LD      A,(DE)          ; BOTH POINTERS AND
1622:	06D0  77      	                LD      (HL),A          ; THEN DO IT
1623:	06D1  18F3    	                JR      MVDOWN          ; LOOP BACK
1624:			;
1625:	06D3  C1      	POPA:           POP     BC              ; BC = RETURN ADDR.
1626:	06D4  E1      	                POP     HL              ; RESTORE LOPVAR, BUT
1627:	06D5  224008  	                LD      (LOPVAR),HL     ; =0 MEANS NO MORE
1628:	06D8  7C      	                LD      A,H
1629:	06D9  B5      	                OR      L
1630:	06DA  2810    	                JR      Z,PP1           ; YEP, GO RETURN
1631:	06DC  E1      	                POP     HL              ; NOP, RESTORE OTHERS
1632:	06DD  224208  	                LD      (LOPINC),HL
1633:	06E0  E1      	                POP     HL
1634:	06E1  224408  	                LD      (LOPLMT),HL
1635:	06E4  E1      	                POP     HL
1636:	06E5  224608  	                LD      (LOPLN),HL
1637:	06E8  E1      	                POP     HL
1638:	06E9  224808  	                LD      (LOPPT),HL
1639:	06EC  C5      	PP1:            PUSH    BC              ; BC = RETURN ADDR.
1640:	06ED  C9      	                RET
1641:			;
1642:	06EE  C1      	PUSHA:          POP     BC              ; *** PUSHA *** BC=RET ADDR
1643:	06EF  21A2F7  	                LD      HL,-STKLMT-18   ; ENOUGH SPACE FOR 6 * PUSH HERE
1644:	06F2  39      	                ADD     HL,SP           ; AND POSSIBLE 3 * PUSH AT GOSUB:
1645:	06F3  D29E05  	                JP      NC,QSORRY       ; NO, SORRY FOR THAT
1646:	06F6  2A4008  	                LD      HL,(LOPVAR)     ; ELSE SAVE LOOP VAR'S
1647:	06F9  7C      	                LD      A,H             ; BUT IF LOPVAR IS 0
1648:	06FA  B5      	                OR      L               ; THAT WILL BE ALL
1649:	06FB  2813    	                JR      Z,PU1
1650:	06FD  2A4808  	                LD      HL,(LOPPT)      ; ELSE, MORE TO SAVE
1651:	0700  E5      	                PUSH    HL
1652:	0701  2A4608  	                LD      HL,(LOPLN)
1653:	0704  E5      	                PUSH    HL
1654:	0705  2A4408  	                LD      HL,(LOPLMT)
1655:	0708  E5      	                PUSH    HL
1656:	0709  2A4208  	                LD      HL,(LOPINC)
1657:	070C  E5      	                PUSH    HL
1658:	070D  2A4008  	                LD      HL,(LOPVAR)
1659:	0710  E5      	PU1:            PUSH    HL
1660:	0711  C5      	                PUSH    BC              ; BC = RETURN ADDR.
1661:	0712  C9      	                RET
1662:			
1663:			; *************************************************************
1664:			;
1665:			; *** DIRECT *** EXEC *** TABLES ***
1666:			;
1667:			; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1668:			; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1669:			; OF CODE ACCORDING TO THE TABLE.
1670:			;
1671:			; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1672:			; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1673:			; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1674:			; ALL DIRECT AND STATEMENT COMMANDS.
1675:			;
1676:			; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1677:			; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1678:			; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1679:			;
1680:			
1681:	0713  214707  	DIRECT:         LD      HL,TAB1-1       ; *** DIRECT ***
1682:			;
1683:	0716          	EXEC:                                   ; *** EXEC ***
1684:	0716  EF      	EX0:            RST     RIGNBLK         ; IGNORE LEADING BLANKS
1685:	0717  D5      	                PUSH    DE              ; SAVE POINTER
1686:	0718  1A      	EX1:            LD      A,(DE)          ; IF FOUND '.' IN STRING
1687:	0719  13      	                INC     DE              ; BEFORE ANY MISMATCH
1688:	071A  FE2E    	                CP      2EH             ; WE DECLARE A MATCH
1689:	071C  281C    	                JR      Z,EX3
1690:	071E  FE61    	                CP      'a'             ; < 'a' ?
1691:	0720  3806    	                JR      C,EXN           ; NO ALPHA CHAR
1692:	0722  FE7B    	                CP      'z'+1           ; > 'z'
1693:	0724  3002    	                JR      NC,EXN          ; NO ALPHA CHAR
1694:	0726  E65F    	                AND     5FH             ; MASK LOWER CASE TO UPPER CASE
1695:	0728          	EXN:
1696:	0728  23      	                INC     HL              ; HL->TABLE
1697:	0729  BE      	                CP      (HL)            ; IF MATCH, TEST NEXT
1698:	072A  28EC    	                JR      Z,EX1
1699:	072C  3E7F    	                LD      A,07FH          ; ELSE SEE IF BIT 7
1700:	072E  1B      	                DEC     DE              ; OF TABLE IS SET, WHICH
1701:	072F  BE      	                CP      (HL)            ; IS THE JUMP ADDR. (HI)
1702:	0730  380E    	                JR      C,EX5           ; C:YES, MATCHED
1703:	0732  23      	EX2:            INC     HL              ; NC:NO, FIND JUMP ADDR.
1704:	0733  BE      	                CP      (HL)
1705:	0734  30FC    	                JR      NC,EX2
1706:	0736  23      	                INC     HL              ; BUMP TO NEXT TAB. ITEM
1707:	0737  D1      	                POP     DE              ; RESTORE STRING POINTER
1708:	0738  18DC    	                JR      EX0             ; TEST AGAINST NEXT ITEM
1709:	073A  3E7F    	EX3:            LD      A,07FH          ; PARTIAL MATCH, FIND
1710:	073C  23      	EX4:            INC     HL              ; JUMP ADDR., WHICH IS
1711:	073D  BE      	                CP      (HL)            ; FLAGGED BY BIT 7
1712:	073E  30FC    	                JR      NC,EX4
1713:	0740  7E      	EX5:            LD      A,(HL)          ; LOAD HL WITH THE JUMP
1714:	0741  23      	                INC     HL              ; ADDRESS FROM THE TABLE
1715:	0742  6E      	                LD      L,(HL)
1716:			                                        ; ADDRESSES ARE BIG-ENDIAN
1717:			                                        ; WITH MSB SET to 1
1718:	0001          	                .IF     $ < 8000H
1719:	0743  E67F    	                AND     7FH             ; MASK OFF HIGH ADDRESS BIT
1720:			                .ENDIF
1721:	0745  67      	                LD      H,A
1722:	0746  F1      	                POP     AF              ; CLEAN UP THE GARBAGE
1723:	0747  E9      	                JP      (HL)            ; AND WE GO DO IT
1724:			;
1725:			
1726:			; THE TABLES CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM IS:
1727:			; - A STRING OF 7 BIT ASCII CHARACTERS
1728:			;   The string shall be defined with ".ASCII" to allow
1729:			;   the creation of the command list document "token.txt"
1730:			; - A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF HIGH BYTE SET.
1731:			;   This is done by the macro 'DWA'.
1732:			; If the program is executed from an address < 0x8000
1733:			; take care to mask this bit in program part 'EXEC'.
1734:			;
1735:			; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.
1736:			; IF THE STRING DOES NOT MATCH ANY OF THE OTHER ITEMS,
1737:			; IT WILL MATCH THIS NULL ITEM AS DEFAULT.
1738:			
1739:			;
1740:	0748          	TAB1:                                   ; DIRECT ONLY COMMANDS
1741:	0748  4C495354	                .ASCII  "LIST"          ; List program code (DIRECT ONLY)
1742:	074C  81DA    	                DWA     LIST
1743:	074E  52554E  	                .ASCII  "RUN"           ; Execute program (DIRECT ONLY)
1744:	0751  81AE    	                DWA     RUN
1745:	0753  4E4557  	                .ASCII  "NEW"           ; Clear program code (DIRECT ONLY)
1746:	0756  819F    	                DWA     NEW
1747:			;
1748:	0758          	TAB2:                                   ; DIRECT OR PROGRAM STATEMENT
1749:	0758  4E455854	                .ASCII  "NEXT"          ; Next loop iteration
1750:	075C  82CF    	                DWA     NEXT
1751:	075E  4C4554  	                .ASCII  "LET"           ; Variable assignment, can be omitted
1752:	0761  838D    	                DWA     LET
1753:	0763  4946    	                .ASCII  "IF"            ; Test condition
1754:	0765  8329    	                DWA     IFF
1755:	0767  474F544F	                .ASCII  "GOTO"          ; Go to program line
1756:	076B  81CC    	                DWA     GOTO
1757:	076D  474F5355	                .ASCII  "GOSUB"         ; Call subroutine
	      42
1758:	0772  823D    	                DWA     GOSUB
1759:	0774  52455455	                .ASCII  "RETURN"        ; Return from subroutine
	      524E
1760:	077A  825C    	                DWA     RETURN
1761:	077C  52454D  	                .ASCII  "REM"           ; Remark, ignore rest of line
1762:	077F  8325    	                DWA     REM
1763:	0781  464F52  	                .ASCII  "FOR"           ; Start a program loop
1764:	0784  8275    	                DWA     FOR
1765:	0786  494E5055	                .ASCII  "INPUT"         ; Wait for KBD input
	      54
1766:	078B  8342    	                DWA     INPUT
1767:	078D  5052494E	                .ASCII  "PRINT"         ; Output values
	      54
1768:	0792  81F1    	                DWA     PRINT
1769:	0794  3F      	                .ASCII  "?"             ; Short for PRINT
1770:	0795  81F1    	                DWA     PRINT
1771:	0797  505554  	                .ASCII  "PUT"           ; PUT ADDR, EXPR, EXPR,... put bytes.. into RAM at ADDR++
1772:	079A  8502    	                DWA     PUT
1773:	079C  53544F50	                .ASCII  "STOP"          ; Warm start
1774:	07A0  81A8    	                DWA     STOP
1775:	07A2  425945  	                .ASCII  "BYE"           ; HALT Z80 CPU (return to analyser)
1776:	07A5  8515    	                DWA     BYE
1777:	07A7  8388    	                DWA     DEFLT           ; END OF LIST
1778:			;
1779:	07A9          	TAB4:                                   ; FUNCTIONS AND CONSTANTS
1780:	07A9  524E44  	                .ASCII  "RND"           ; Function RND(RANGE), get random [0..RANGE[
1781:	07AC  84A9    	                DWA     RND
1782:	07AE  414253  	                .ASCII  "ABS"           ; Function ABS(ARG), return absolute value of ARG
1783:	07B1  84D7    	                DWA     ABS
1784:	07B3  474554  	                .ASCII  "GET"           ; Function GET(ADR), get byte from memory at ADR
1785:	07B6  84ED    	                DWA     GET
1786:	07B8  555352  	                .ASCII  "USR"           ; Function USR(ARG), call function at TOP, return HL
1787:	07BB  84F4    	                DWA     USR
1788:	07BD  43414C4C	                .ASCII  "CALL"          ; Function CALL(ADR), call opcode at ADR
1789:	07C1  84FA    	                DWA     CALL
1790:	07C3  53495A45	                .ASCII  "SIZE"          ; Constant SIZE, get size of free memory
1791:	07C7  84E0    	                DWA     SIZE
1792:	07C9  544F50  	                .ASCII  "TOP"           ; Constant TOP, get address of TEXT TOP = USRSPC
1793:	07CC  84FE    	                DWA     TOP
1794:	07CE  8490    	                DWA     XP40            ; END OF LIST
1795:			;
1796:	07D0          	TAB5:                                   ; "TO" IN "FOR"
1797:	07D0  544F    	                .ASCII  "TO"            ; Final value of loop counter
1798:	07D2  8285    	                DWA     FR1
1799:	07D4  8571    	                DWA     QWHAT           ; END OF LIST
1800:			;
1801:	07D6          	TAB6:                                   ; "STEP" IN "FOR"
1802:	07D6  53544550	                .ASCII  "STEP"          ; Increment value for loop counter
1803:	07DA  828F    	                DWA     FR2
1804:	07DC  8292    	                DWA     FR3             ; END OF LIST
1805:			;
1806:	07DE          	TAB8:                                   ; RELATION OPERATORS
1807:	07DE  3D      	                .ASCII  "="             ; Operator equal
1808:	07DF  839C    	                DWA     XPEQ
1809:	07E1  23      	                .ASCII  "#"             ; Operator not equal
1810:	07E2  83A2    	                DWA     XPNE
1811:	07E4  3C3E    	                .ASCII  "<>"            ; Operator not equal
1812:	07E6  83A2    	                DWA     XPNE
1813:	07E8  3C3D    	                .ASCII  "<="            ; Operator less or equal
1814:	07EA  83A8    	                DWA     XPLE
1815:	07EC  3C      	                .ASCII  "<"             ; Operator less than
1816:	07ED  83B0    	                DWA     XPLT
1817:	07EF  3E3D    	                .ASCII  ">="            ; Operator greater or equal
1818:	07F1  83B6    	                DWA     XPGE
1819:	07F3  3E      	                .ASCII  ">"             ; Operator greater than
1820:	07F4  83BC    	                DWA     XPGT
1821:	07F6  83C3    	                DWA     XP17            ; END OF REL OPERATOR LIST
1822:			
1823:			;
1824:	07F8          	LSTROM:                                 ; ALL ABOVE CAN BE ROM
1825:			
1826:	0008          	BYTES_FREE:     .EQU    RAMBGN-LSTROM
1827:			;
1828:			; CHECK THAT THE PROGRAM DOES NOT EXCEED ROM SIZE
1829:			;
1830:	0001          	                .ASSERT $ <= RAMBGN
1831:			
1832:			
1833:	07F8 ..07FF 00	                .DC     RAMBGN-$,$00    ; fill with $00 until RAMBGN
1834:			;
1835:			;
1836:			; *************************************************************
1837:			
1838:	0800          	                .ORG    RAMBGN          ; HERE DOWN MUST BE RAM
1839:			;
1840:			; *************************************************************
1841:			;
1842:			
1843:	0800          	VARBGN:         .DS     2*26            ; VARIABLES 'A'..'Z'
1844:	0834          	OCSW:           .DS     1               ; SWITCH FOR OUTPUT
1845:	0835          	PNBASE:         .DS     1               ; BASE FOR PRTNUM
1846:	0836          	TXTUNF:         .DS     2               ; ->UNFILLED TEXT AREA
1847:	0838          	CURRNT:         .DS     2               ; POINTS TO CURRENT LINE
1848:	083A          	STKGOS:         .DS     2               ; SAVES SP IN 'GOSUB'
1849:	083C          	VARNXT:         .DS     2               ; TEMP STORAGE
1850:	083E          	STKINP:         .DS     2               ; SAVES SP IN 'INPUT'
1851:	0840          	LOPVAR:         .DS     2               ; 'FOR' LOOP SAVE AREA
1852:	0842          	LOPINC:         .DS     2               ; INCREMENT
1853:	0844          	LOPLMT:         .DS     2               ; LIMIT
1854:	0846          	LOPLN:          .DS     2               ; LINE NUMBER
1855:	0848          	LOPPT:          .DS     2               ; TEXT POINTER
1856:	084A          	RANPNT:         .DS     2               ; RANDOM NUMBER POINTER
1857:	084C          	STKLMT:         .EQU    $               ; BOTTOM LIMIT FOR STACK
1858:			
1859:	0900          	                .ORG    RAMBGN+$100
1860:			;
1861:	0900          	STACK:                                  ; STACK STARTS HERE AND GROWS DOWN
1862:			
1863:	0900          	TXTBGN:                                 ; TEXT STARTS HERE AND GROWS UP
1864:			;
1865:			
1866:	0F00          	                .ORG    RAMBGN+RAMSZE-$100
1867:	0F00          	TXTEND:                                 ; TEXT SAVE AREA ENDS
1868:			;
1869:			                                        ; VARIABLES @(0), @(1), @(2)
1870:			                                        ; ... stored top-down
1871:			                                        ; i.e. &@(i) = TXTEND-2-2*i
1872:			;
1873:	0F00          	USRSPC:         .DS     128
1874:			
1875:	0F80          	BUFFER:         .DS     127             ; INPUT BUFFER
1876:	0FFF          	BUFEND:         .DS     1               ; BUFFER END
1877:			
1878:	1000          	                .END



Statistics:

     4	passes
     0	jr promotions
   234	symbols
  2048	bytes

    65	macro calls
   203	macro bytes
     0	invented symbols



Symbol Table:

ABS              4D7      1239
AHOW            DC        220
ASORRY           59F      1439
AWHAT            572      1394
BS             =08        8
BUFEND           FFF      4095
BUFFER           F80      3968
BYE              515      1301
BYTES_FREE     =08        8
CALL             4FA      1274
CAN            =18        24
CHGSGN           532      1330
CHKIO            107      263
CHKSGN           52F      1327
CI0              110      272
CK1              54D      1357
CKHLDE           547      1351
CR             =0D        13
CRLF            0E        14
CSTART          00        0
CURRNT           838      2104
DEFLT            388      904
DEL            =7F        127
DIRECT           713      1811
DIVIDE           516      1302
DV1              521      1313
DV2              523      1315
ENDCHK           56D      1389
ERROR            575      1397
EX0              716      1814
EX1              718      1816
EX2              732      1842
EX3              73A      1850
EX4              73C      1852
EX5              740      1856
EXEC             716      1814
EXN              728      1832
EXPR1            396      918
EXPR2            3DA      986
EXPR3            41D      1053
EXPR4            48A      1162
FI1              565      1381
FI2              56C      1388
FIN              55E      1374
FL1              5EC      1516
FL2              600      1536
FNDLN            5E4      1508
FNDLP            5EC      1516
FNDNXT           5FF      1535
FNDSKP           601      1537
FOR              275      629
FR1              285      645
FR2              28F      655
FR3              292      658
FR4              295      661
FR5              298      664
FR7              2AD      685
FR8              2CA      714
GET              4ED      1261
GETLN            5A4      1444
GL1              5A8      1448
GL2              5C1      1473
GL3              5CC      1484
GL4              5DD      1501
GOSUB            23D      573
GOTO             1CC      460
HOW             ED        237
IFF              329      809
INIT             115      277
INPERR           338      824
INPUT            342      834
IODATA         =01        1
IOSTAT         =02        2
IO_RX_BIT      =01        1
IP1              342      834
IP2              34D      845
IP3              35D      861
IP4              381      897
IP5              387      903
LET              38D      909
LF             =0A        10
LIST             1DA      474
LOPINC           842      2114
LOPLMT           844      2116
LOPLN            846      2118
LOPPT            848      2120
LOPVAR           840      2112
LS1              1E3      483
LSTROM           7F8      2040
LT1              395      917
MD1              6CD      1741
MVDOWN           6C6      1734
MVUP             6BE      1726
NEW              19F      415
NEXT             2CF      719
NX0              2D6      726
NX1              30E      782
NX2              321      801
NX3              2EC      748
NX4              2FE      766
NX5              31F      799
OC1              101      257
OCSW             834      2100
OK              F2        242
PARN             49E      1182
PN0              656      1622
PN1              661      1633
PN1A             66A      1642
PN2              670      1648
PN3              67E      1662
PN4              67F      1663
PN5              68A      1674
PN6              690      1680
PN6A             698      1688
PN7              6A2      1698
PNBASE           835      2101
POPA             6D3      1747
PP1              6EC      1772
PR0              205      517
PR1              220      544
PR2              1FF      511
PR3              225      549
PR5              20C      524
PR6              22D      557
PR8              235      565
PRINT            1F1      497
PRTLN            6A7      1703
PRTNUM           647      1607
PRTSTG           609      1545
PS1              60A      1546
PS2              60C      1548
PS3              60E      1550
PT0              507      1287
PT1              512      1298
PT2              513      1299
PU1              710      1808
PUSHA            6EE      1774
PUT              502      1282
QHOW            DB        219
QSORRY           59E      1438
QT1              617      1559
QT1A             61A      1562
QT2              620      1568
QT4              623      1571
QT4A             628      1576
QT5              62C      1580
QT6              637      1591
QT9              646      1606
QTSTG            614      1556
QWHAT            571      1393
RA1              4C3      1219
RAMBGN         = 800      2048
RAMSZE         = 800      2048
RANPNT           84A      2122
RCOMP           20        32
REM              325      805
RETURN           25C      604
REXPR           18        24
RFINISH         30        48
RIGNBLK         28        40
RND              4A9      1193
ROMBGN         =00        0
ROUTC           10        16
RTSTC           08        8
RTSTV           38        56
RTV1            39        57
RUN              1AE      430
RUNNXL           1B4      436
RUNSML           1C3      451
RUNTSL           1BD      445
SETVAL           54F      1359
SIZE             4E0      1248
SORRY           FB        251
ST2              13D      317
ST3              146      326
ST4              17A      378
STACK            900      2304
STKGOS           83A      2106
STKINP           83E      2110
STKLMT         = 84C      2124
STKLVL         =0A        10
STOP             1A8      424
SUBDE            52B      1323
TAB1             748      1864
TAB2             758      1880
TAB4             7A9      1961
TAB5             7D0      2000
TAB6             7D6      2006
TAB8             7DE      2014
TC1             6F        111
TC2             78        120
TIBAS           E2        226
TN1             8E        142
TN2             92        146
TOP              4FE      1278
TSTNUM          7C        124
TV1             59        89
TV2             5F        95
TX1             B4        180
TX2             C7        199
TXTBGN           900      2304
TXTEND           F00      3840
TXTUNF           836      2102
USR              4F4      1268
USRSPC           F00      3840
VARBGN           800      2048
VARNXT           83C      2108
WHAT            F5        245
WSTART           12A      298
XP17             3C3      963
XP18             3C5      965
XP21             3E1      993
XP22             3E4      996
XP23             3E7      999
XP24             3EE      1006
XP25             3FF      1023
XP26             402      1026
XP27             40B      1035
XP31             420      1056
XP32             43C      1084
XP33             443      1091
XP34             44C      1100
XP35             46B      1131
XP36             478      1144
XP40             490      1168
XP41             498      1176
XP42             4A5      1189
XP43             4A6      1190
XPEQ             39C      924
XPGE             3B6      950
XPGT             3BC      956
XPLE             3A8      936
XPLT             3B0      944
XPNE             3A2      930
