0001   0000             ;Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
0002   0000             ;Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
0003   0000             ;Status bit for read in CHKIO changed to 0x02
0004   0000             ;Status bit for write in OUTC (actually OC3) changed to 0x01
0005   0000             ;Changed UART initialization parameters in INIT
0006   0000             ;Changed ORG statements at end of file to match system with 2K RAM
0007   0000             ;
0008   0000             ;2024-10-11 Ho-Ro:
0009   0000             ;Automatically converted from 8080 syntax to Z80 syntax:
0010   0000             ;https://hc-ddr.hucki.net/wiki/doku.php/cpm/8080_z80
0011   0000             ;Assembler: uz80as for Z80 as well as i8080 (uz80as --target=i8080)
0012   0000             ;Modified for use with Z80 dongle simulator
0013   0000             ;UART data port 1
0014   0000             ;UART status port 2
0015   0000             ;New:
0016   0000             ;Case insensitive input
0017   0000             ;PRINT modifier for hex out: PRINT %16,..
0018   0000             ;Hex numbers: $xxxx
0019   0000             ;2024-10-13 Ho-Ro:
0020   0000             ;build ROM version (2K ROM / 6.5K RAM) and RAM version (2K prog RAM / 2K free RAM)
0021   0000             ;add command "HALT" (halts Z80, returns to dongle analyser program)
0022   0000             ;2024-10-15 Ho-Ro:
0023   0000             ;PRINT modifier %nn switches to unsigned number format, e.g.:
0024   0000             ;PRINT %10,$FFFF -> 65535
0025   0000             ;2024-10-17 Ho-Ro:
0026   0000             ;PUT ADDR, VAL, VAL, VAL,...
0027   0000             ;constants RAM (TXTBGN), TOP (TXTEND) and SIZE (TXTEND-TXTUNF)
0028   0000             ;function USR(para) that calls machine code at TOP (128 bytes free)
0029   0000             ;with parameter in HL, returning the result in HL, default is RET at TOP
0030   0000             ;
0031   0000             ;*************************************************************
0032   0000             ;
0033   0000             ;                 TINY BASIC FOR INTEL 8080
0034   0000             ;                       VERSION 2.0
0035   0000             ;                     BY LI-CHEN WANG
0036   0000             ;                  MODIFIED AND TRANSLATED
0037   0000             ;                    TO INTEL MNEMONICS
0038   0000             ;                     BY ROGER RAUSKOLB
0039   0000             ;                      10 OCTOBER,1976
0040   0000             ;                        @COPYLEFT
0041   0000             ;                   ALL WRONGS RESERVED
0042   0000             ;
0043   0000             ;*************************************************************
0044   0000             ;
0045   0000             ; *** ZERO PAGE SUBROUTINES ***
0046   0000             ;
0047   0000             ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
0048   0000             ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
0049   0000             ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
0050   0000             ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
0051   0000             ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
0052   0000             ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
0053   0000             ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
0054   0000             ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
0055   0000             ;
0056   0000             
0057   0000             ; Memory map
0058   0000             ROMBGN          .EQU            $0000           ; Execution must start here
0059   0000             RAMBGN          .EQU            $0800           ; 2K ROM
0060   0000             
0061   0000~            #IFDEF          MAKE_ROM
0062   0000~            ; 2K CODE IN ROM and 6.5K DATA IN RAM FOR Z80_dongle
0063   0000~            RAMSZE          .EQU            $1A00
0064   0000             #ELSE
0065   0000             ; 2K CODE IN RAM & 2K DATA IN RAM AS TEST VERSION
0066   0000             RAMSZE          .EQU            $0800
0067   0000             #ENDIF
0068   0000             
0069   0000             ; IO map
0070   0000             IODATA          .EQU            1
0071   0000             IOSTAT          .EQU            2
0072   0000             IO_RX_BIT       .EQU            $01
0073   0000             
0074   0000             ; Control character
0075   0000             BS              .EQU            08H             ; ^H, BACKSPACE
0076   0000             CR              .EQU            0DH             ; ^M, CARRIAGE RETURN
0077   0000             LF              .EQU            0AH             ; ^J, LINE FEED
0078   0000             CAN             .EQU            18H             ; ^X, CANCEL
0079   0000             DEL             .EQU            7FH             ; DELETE
0080   0000             
0081   0000             
0082   0000             ; Store a label address as BIG endian with bit A15 set
0083   0000             #DEFINE DWA(LABEL) .DB (LABEL >> 8) | $80 \ .DB (LABEL & $FF)
0084   0000             
0085   0000             ; if CHAR = A THEN JUMP RELATIVE TO LABEL
0086   0000             #DEFINE TSTCH(CHAR,LABEL) RST RTSTC \ .DB CHAR \ .DB LABEL-$-1
0087   0000             
0088   0000             
0089   0000             .ORG            ROMBGN
0090   0000             
0091   0000             
0092   0000 31 00 10    CSTART:         LD      SP,STACK        ;*** COLD START ***
0093   0003 3E C9                       LD      A,$C9           ;"RET", also not an ASCII char
0094   0005 C3 09 01                    JP      INIT            ;as delimiter for PRTSTG
0095   0008             
0096   0008                             ;*** RST 1 @ $0008 ***
0097   0008 E3          RTSTC:          EX      (SP),HL
0098   0009 EF                          RST     RIGNBLK ;IGNORE BLANKS AND
0099   000A BE                          CP      (HL)    ;TEST CHARACTER
0100   000B C3 70 00                    JP      TC1     ;REST OF THIS IS AT TC1
0101   000E             
0102   000E 3E 0D       CRLF:           LD      A,CR    ;*** CRLF ***
0103   0010             ;
0104   0010                             ;*** RST 2 @ $0010 ***
0105   0010 D3 01       ROUTC:          OUT     (IODATA),A      ;Out to data port
0106   0012 FE 0D                       CP      CR      ;WAS IT CR?
0107   0014 C0                          RET     NZ      ;NO, FINISHED
0108   0015 C3 F5 00                    JP      OC1     ;REST OF THIS IS AT OC1
0109   0018             
0110   0018                             ;*** RST 3 @ $0018 ***
0111   0018 CD DA 03    REXPR:          CALL    EXPR2
0112   001B E5                          PUSH    HL      ;EVALUATE AN EXPRESSION
0113   001C C3 96 03                    JP      EXPR1   ;REST OF IT AT EXPR1
0114   001F 57          .DB             "W"
0115   0020             
0116   0020                             ;*** RST 4 @ $0020 ***
0117   0020 7C          RCOMP:          LD      A,H
0118   0021 BA                          CP      D       ;COMPARE HL WITH DE
0119   0022 C0                          RET     NZ      ;RETURN CORRECT C AND
0120   0023 7D                          LD      A,L     ;Z FLAGS
0121   0024 BB                          CP      E       ;BUT OLD A IS LOST
0122   0025 C9                          RET
0123   0026 41 4E       .DB             "AN"
0124   0028             
0125   0028                             ;*** RST 5 @ $0028 ***
0126   0028 1A          RIGNBLK:        LD      A,(DE)
0127   0029 FE 20                       CP      20H     ;IGNORE BLANKS
0128   002B C0                          RET     NZ      ;IN TEXT (WHERE DE->)
0129   002C 13                          INC     DE      ;AND RETURN THE FIRST
0130   002D C3 28 00                    JP      RIGNBLK  ;NON-BLANK CHAR. IN A
0131   0030             
0132   0030                             ;*** RST 6 @ $0030 ***
0133   0030 F1          RFINISH:        POP     AF
0134   0031 CD 3B 05                    CALL    FIN     ;CHECK END OF COMMAND
0135   0034 C3 4E 05                    JP      QWHAT   ;PRINT "WHAT?" IF WRONG
0136   0037 47          .DB             "G"
0137   0038             
0138   0038                             ;*** RST 7 @ $0038 ***
0139   0038 EF          RTSTV:          RST     RIGNBLK ;IGNBLK
0140   0039 D6 40                       SUB     '@'     ;TEST VARIABLES
0141   003B D8                          RET     C       ;C: < '@', NOT A VARIABLE
0142   003C C2 5A 00                    JP      NZ,TV1  ;NZ: NOT THE '@' ARRAY
0143   003F             ;
0144   003F 13                          INC     DE      ;IT IS THE "@" ARRAY
0145   0040 CD 7A 04                    CALL    PARN    ;@ SHOULD BE FOLLOWED
0146   0043 29                          ADD     HL,HL   ;BY (EXPR) AS ITS INDEX
0147   0044 DA D0 00                    JP      C,QHOW  ;IS INDEX TOO BIG (>0x7FFF)?
0148   0047 23                          INC     HL      ;ADD TWO BYTES
0149   0048 23                          INC     HL      ;FOR @(0)
0150   0049 D5                          PUSH    DE      ;WILL IT OVERWRITE
0151   004A EB                          EX      DE,HL   ;TEXT?
0152   004B CD BC 04                    CALL    SIZE    ;FIND SIZE OF FREE RAM
0153   004E E7                          RST     RCOMP   ;AND CHECK THAT
0154   004F DA 7C 05                    JP      C,ASORRY  ;IF SO, SAY "SORRY"
0155   0052 21 00 0E                    LD      HL,TXTEND ;IF NOT GET ADDRESS
0156   0055 CD 08 05                    CALL    SUBDE   ;OF @(EXPR) AND PUT IT
0157   0058 D1                          POP     DE      ;IN HL (top-down from TXTEND)
0158   0059 C9                          RET             ;C FLAG IS CLEARED
0159   005A             ;
0160   005A                             ; VARIABLES 'A'..'Z'
0161   005A FE 21       TV1:            CP      21H     ;>='a'?
0162   005C 38 02                       JR      C,TV2   ;NO
0163   005E D6 20                       SUB     20H     ;MAKE UPPER CASE
0164   0060 FE 1B       TV2:            CP      1BH     ;<='Z'
0165   0062 3F                          CCF             ;IF NOT RETURN C FLAG
0166   0063 D8                          RET     C
0167   0064 13                          INC     DE      ;IT IS 'A'=1 THROUGH 'Z'=26
0168   0065 21 7E 0E                    LD      HL,VARBGN-2       ;COMPUTE ADDRESS OF
0169   0068 07                          RLCA            ;THAT VARIABLE
0170   0069 85                          ADD     A,L     ;AND RETURN IT IN HL
0171   006A 6F                          LD      L,A     ;WITH C FLAG CLEARED
0172   006B 3E 00                       LD      A,0
0173   006D 8C                          ADC     A,H
0174   006E 67                          LD      H,A
0175   006F C9                          RET
0176   0070             
0177   0070             ;TSTC:          EX      (SP),HL ;*** TSTC OR RST 1 ***
0178   0070             ;               RST  RIGNBLK    ;THIS IS AT LOC. 8
0179   0070             ;               CMP     (HL)    ;AND THEN JUMP HERE
0180   0070             ;               JP      TC1     ;REST OF THIS IS AT TC1
0181   0070 23          TC1:            INC     HL      ;COMPARE THE BYTE THAT
0182   0071 28 07                       JR      Z,TC2   ;FOLLOWS THE RST INST.
0183   0073 C5                          PUSH    BC      ;WITH THE TEXT (DE->)
0184   0074 4E                          LD      C,(HL)  ;IF NOT =, ADD THE 2ND
0185   0075 06 00                       LD      B,0     ;BYTE THAT FOLLOWS THE
0186   0077 09                          ADD     HL,BC   ;RST TO THE OLD PC
0187   0078 C1                          POP     BC      ;I.E., DO A RELATIVE
0188   0079 1B                          DEC     DE      ;JUMP IF NOT =
0189   007A 13          TC2:            INC     DE      ;IF =, SKIP THOSE BYTES
0190   007B 23                          INC     HL      ;AND CONTINUE
0191   007C E3                          EX      (SP),HL
0192   007D C9                          RET
0193   007E             
0194   007E 21 00 00    TSTNUM:         LD      HL,0    ;*** TSTNUM ***
0195   0081 44                          LD      B,H     ;TEST IF THE TEXT IS
0196   0082 EF                          RST     RIGNBLK ;A NUMBER
0197   0083 FE 24                       CP      '$'     ;HEX NUMBER?
0198   0085 28 22                       JR      Z,TX1   ;YES
0199   0087 FE 30       TN1:            CP      '0'     ;IF NOT, RETURN 0 IN
0200   0089 D8                          RET     C       ;B AND HL
0201   008A FE 3A                       CP      '9'+1   ;IF NUMBERS, CONVERT
0202   008C D0                          RET     NC      ;TO BINARY IN HL AND
0203   008D 3E F0                       LD      A,0F0H  ;SET B TO # OF DIGITS
0204   008F A4                          AND     H       ;IF H>15, THERE IS NO
0205   0090 20 3E                       JR      NZ,QHOW ;ROOM FOR NEXT DIGIT
0206   0092 04                          INC     B       ;B COUNTS # OF DIGITS
0207   0093 C5                          PUSH    BC
0208   0094 44                          LD      B,H     ;HL=10*HL+(NEW DIGIT)
0209   0095 4D                          LD      C,L
0210   0096 29                          ADD     HL,HL   ; 2*HL
0211   0097 29                          ADD     HL,HL   ; 4*HL
0212   0098 09                          ADD     HL,BC   ; 5*HL
0213   0099 29                          ADD     HL,HL   ;10*HL
0214   009A 1A                          LD      A,(DE)  ;AND (DIGIT) IS FROM
0215   009B 13                          INC     DE      ;STRIPPING THE ASCII
0216   009C E6 0F                       AND     0FH     ;CODE
0217   009E 85                          ADD     A,L
0218   009F 6F                          LD      L,A
0219   00A0 3E 00                       LD      A,0
0220   00A2 8C                          ADC     A,H
0221   00A3 67                          LD      H,A
0222   00A4 C1                          POP     BC
0223   00A5 1A                          LD      A,(DE)  ;DO THIS DIGIT AFTER
0224   00A6 F2 87 00                    JP      P,TN1   ;DIGIT. S SAYS OVERFLOW
0225   00A9             ;
0226   00A9                                             ;OUTPUT HEX NUMBER
0227   00A9 13          TX1:            INC     DE      ;SKIP TO NEXT HEX
0228   00AA 1A                          LD      A,(DE)  ;GET HEX DIGIT
0229   00AB FE 30                       CP      '0'     ;< '0'
0230   00AD D8                          RET     C       ;ERROR
0231   00AE FE 3A                       CP      '9'+1   ;<= '9'
0232   00B0 38 0A                       JR      C,TX2   ;OK '0'..'9'
0233   00B2 FE 41                       CP      'A'     ;< 'A'
0234   00B4 D8                          RET     C       ;ERROR, >'9' && < 'A'
0235   00B5 E6 5F                       AND     5FH     ;CONVERT ALPHA TO UPPER
0236   00B7 FE 47                       CP      'F'+1   ;> 'F'
0237   00B9 D0                          RET     NC      ;ERROR
0238   00BA D6 07                       SUB     'A'-'0'-10      ;SKIP GAP '9' -> 'A'
0239   00BC E6 0F       TX2:            AND     0FH     ;GET HEX CODE 0..F
0240   00BE C5                          PUSH    BC
0241   00BF 47                          LD      B,A     ;SAVE HEX CODE
0242   00C0 3E F0                       LD      A,0F0H  ;IF H>15
0243   00C2 A4                          AND     H       ;THERE IS NO ROOM
0244   00C3 78                          LD      A,B
0245   00C4 C1                          POP     BC
0246   00C5 20 09                       JR      NZ,QHOW ;FOR NEXT DIGIT
0247   00C7             
0248   00C7 04                          INC     B       ;B COUNTS # OF DIGITS
0249   00C8 29                          ADD     HL,HL   ;2*HL
0250   00C9 29                          ADD     HL,HL   ;4*HL
0251   00CA 29                          ADD     HL,HL   ;8*HL
0252   00CB 29                          ADD     HL,HL   ;16*HL
0253   00CC B5                          OR      L       ;PUT HEX CODE INTO
0254   00CD 6F                          LD      L,A     ;THE 4 LSB OF HL
0255   00CE 18 D9                       JR      TX1     ;DIGIT AFTER DIGIT
0256   00D0             
0257   00D0 D5          QHOW:           PUSH    DE      ;*** ERROR "HOW?" ***
0258   00D1 11 E1 00    AHOW:           LD      DE,HOW
0259   00D4 C3 52 05                    JP      ERROR
0260   00D7             
0261   00D7 54 69 6E 79 TIBAS:          .DB     "TinyBASIC"
0261   00DB 42 41 53 49 
0261   00DF 43 
0262   00E0 0D                          .DB     CR
0263   00E1             
0264   00E1 48 4F 57 3F HOW:            .DB     "HOW?"
0265   00E5 0D                          .DB     CR
0266   00E6             
0267   00E6 4F 4B       OK:             .DB     "OK"
0268   00E8 0D                          .DB     CR
0269   00E9             
0270   00E9 57 48 41 54 WHAT:           .DB     "WHAT?"
0270   00ED 3F 
0271   00EE 0D                          .DB     CR
0272   00EF             
0273   00EF 53 4F 52 52 SORRY:          .DB     "SORRY"
0273   00F3 59 
0274   00F4 0D                          .DB     CR
0275   00F5             
0276   00F5             ;
0277   00F5             ;*************************************************************
0278   00F5             ;
0279   00F5             ; *** ROUTC *** CHKIO ***
0280   00F5             ;
0281   00F5             ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
0282   00F5             ; OUTC WILL OUTPUT THE BYTE IN A.
0283   00F5             ; IF THAT IS A CR, A LF IS ALSO SEND OUT.
0284   00F5             ; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
0285   00F5             ; ALL REGISTERS ARE RESTORED.
0286   00F5             ;
0287   00F5             ; 'CHKIO' CHECKS THE INPUT.
0288   00F5             ; IF NO INPUT, IT WILL RETURN TO THE CALLER WITH THE Z FLAG SET.
0289   00F5             ; IF THERE IS INPUT, Z FLAG IS CLEARED AND THE INPUT BYTE IS IN A.
0290   00F5             ; IF A CONTROL-C IS READ, 'CHKIO' WILL RESTART TBI
0291   00F5             ; AND DO NOT RETURN TO THE CALLER.
0292   00F5             ;
0293   00F5             
0294   00F5             ;THIS IS AT LOC. 10
0295   00F5             ;ROUTC:         OUT     (IODATA),A      ;Out to data port
0296   00F5             ;               CP      CR      ;WAS IT CR?
0297   00F5             ;               RET     NZ      ;NO, FINISHED
0298   00F5             ;               JP      OC1     ;REST OF THIS IS AT OC1
0299   00F5             ;
0300   00F5 3E 0A       OC1:            LD      A,LF    ;YES, WE SEND LF TOO
0301   00F7 D7                          RST     ROUTC   ;THIS IS RECURSIVE
0302   00F8 3E 0D                       LD      A,CR    ;GET CR BACK IN A
0303   00FA C9                          RET
0304   00FB             
0305   00FB DB 02       CHKIO:          IN      A,(IOSTAT)      ;*** CHKIO ***
0306   00FD E6 01                       AND     IO_RX_BIT       ;MASK STATUS BIT
0307   00FF C8                          RET     Z       ;NOT READY, RETURN "Z"
0308   0100 DB 01                       IN      A,(IODATA)      ;READY, READ DATA
0309   0102 E6 7F                       AND     7FH     ;MASK BIT 7 OFF
0310   0104 FE 03       CI0:            CP      03H     ;IS IT CONTROL-C?
0311   0106 C0                          RET     NZ      ;NO, RETURN "NZ"
0312   0107 18 15                       JR      WSTART  ;YES, RESTART TBI
0313   0109             
0314   0109             ;
0315   0109             ;*************************************************************
0316   0109             ;
0317   0109             
0318   0109             ;
0319   0109             ;*************************************************************
0320   0109             ;
0321   0109             ; *** INIT ***
0322   0109             ;
0323   0109             ; PUT IO INITIALISATION HERE, E.G. FOR THE SERIAL INTERFACE
0324   0109             ;
0325   0109             ; *** MAIN ***
0326   0109             ;
0327   0109             ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
0328   0109             ; AND STORES IT IN THE MEMORY.
0329   0109             ;
0330   0109             ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
0331   0109             ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
0332   0109             ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
0333   0109             ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
0334   0109             ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
0335   0109             ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
0336   0109             ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
0337   0109             ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
0338   0109             ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
0339   0109             ;
0340   0109             ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
0341   0109             ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
0342   0109             ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
0343   0109             ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
0344   0109             ;
0345   0109             ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
0346   0109             ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
0347   0109             ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
0348   0109             ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
0349   0109             ;
0350   0109             ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
0351   0109             ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
0352   0109             ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
0353   0109             ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
0354   0109             ;
0355   0109             ;
0356   0109             ;THIS IS AT LOC. 0
0357   0109             ;CSTART:        LD      SP,STACK    ;*** COLD START ***
0358   0109             ;               LD      A,$C9       ;"RET", also != ASCII char
0359   0109             ;               JP      INIT        ;for PRTSTG
0360   0109             ;
0361   0109 32 00 0E    INIT:           LD      (USRSPC),A  ;"RET" AT USR CODE SPACE
0362   010C 11 D7 00                    LD      DE,TIBAS    ;COLD START MESSAGE
0363   010F CD E5 05                    CALL    PRTSTG
0364   0112 21 00 00                    LD      HL,CSTART   ;INIT RANDOM POINTER
0365   0115 22 CA 0E                    LD      (RANPNT),HL
0366   0118 21 00 08                    LD      HL,TXTBGN   ;UNFILLED TEXT
0367   011B 22 B6 0E                    LD      (TXTUNF),HL
0368   011E             ;
0369   011E 31 00 10    WSTART:         LD      SP,STACK    ;*** WARM START ***
0370   0121 CD 0E 00                    CALL    CRLF        ;AND JUMP TO HERE
0371   0124 11 E6 00                    LD      DE,OK       ;DE->STRING
0372   0127 97                          SUB     A           ;A=0
0373   0128 CD E5 05                    CALL    PRTSTG      ;PRINT STRING UNTIL CR
0374   012B 21 32 01                    LD      HL,ST2+1    ;HACK ST2+1 -> 0000
0375   012E 22 B8 0E                    LD      (CURRNT),HL ;CURRENT->LINE # = 0
0376   0131 21 00 00    ST2:            LD      HL,0000     ;
0377   0134 22 C0 0E                    LD      (LOPVAR),HL
0378   0137 22 BA 0E                    LD      (STKGOS),HL
0379   013A 3E 3E       ST3:            LD      A,'>'       ;PROMPT '>' AND
0380   013C CD 81 05                    CALL    GETLN       ;READ A LINE
0381   013F D5                          PUSH    DE          ;DE->END OF LINE
0382   0140 11 CC 0E                    LD      DE,BUFFER   ;DE->BEGINNING OF LINE
0383   0143 CD 7E 00                    CALL    TSTNUM      ;TEST IF IT IS A NUMBER
0384   0146 EF                          RST     RIGNBLK
0385   0147 7C                          LD      A,H         ;HL=VALUE OF THE # OR
0386   0148 B5                          OR      L           ;0 IF NO # WAS FOUND
0387   0149 C1                          POP     BC          ;BC->END OF LINE
0388   014A CA ED 06                    JP      Z,DIRECT
0389   014D 1B                          DEC     DE          ;BACKUP DE AND SAVE
0390   014E 7C                          LD      A,H         ;VALUE OF LINE # THERE
0391   014F 12                          LD      (DE),A
0392   0150 1B                          DEC     DE
0393   0151 7D                          LD      A,L
0394   0152 12                          LD      (DE),A
0395   0153 C5                          PUSH    BC          ;BC,DE->BEGIN, END
0396   0154 D5                          PUSH    DE
0397   0155 79                          LD      A,C
0398   0156 93                          SUB     E
0399   0157 F5                          PUSH    AF          ;A=# OF BYTES IN LINE
0400   0158 CD C0 05                    CALL    FNDLN       ;FIND THIS LINE IN SAVE
0401   015B D5                          PUSH    DE          ;AREA, DE->SAVE AREA
0402   015C 20 10                       JR      NZ,ST4      ;NZ:NOT FOUND, INSERT
0403   015E D5                          PUSH    DE          ;Z:FOUND, DELETE IT
0404   015F CD DB 05                    CALL    FNDNXT      ;FIND NEXT LINE
0405   0162                                                 ;DE->NEXT LINE
0406   0162 C1                          POP     BC          ;BC->LINE TO BE DELETED
0407   0163 2A B6 0E                    LD      HL,(TXTUNF) ;HL->UNFILLED SAVE AREA
0408   0166 CD 95 06                    CALL    MVUP        ;MOVE UP TO DELETE
0409   0169 60                          LD      H,B         ;TXTUNF->UNFILLED AREA
0410   016A 69                          LD      L,C
0411   016B 22 B6 0E                    LD      (TXTUNF),HL ;UPDATE
0412   016E C1          ST4:            POP     BC          ;GET READY TO INSERT
0413   016F 2A B6 0E                    LD      HL,(TXTUNF) ;BUT FIRST CHECK IF
0414   0172 F1                          POP     AF          ;THE LENGTH OF NEW LINE
0415   0173 E5                          PUSH    HL          ;IS 3 (LINE # AND CR)
0416   0174 FE 03                       CP      3           ;THEN DO NOT INSERT
0417   0176 28 A6                       JR      Z,WSTART    ;MUST CLEAR THE STACK
0418   0178 85                          ADD     A,L         ;COMPUTE NEW TXTUNF
0419   0179 6F                          LD      L,A
0420   017A 3E 00                       LD      A,0
0421   017C 8C                          ADC     A,H
0422   017D 67                          LD      H,A         ;HL->NEW UNFILLED AREA
0423   017E 11 00 0E                    LD      DE,TXTEND   ;CHECK TO SEE IF THERE
0424   0181 E7                          RST     RCOMP       ;COMP HL,DE - IS ENOUGH SPACE
0425   0182 D2 7B 05                    JP      NC,QSORRY   ;SORRY, NO ROOM FOR IT
0426   0185 22 B6 0E                    LD      (TXTUNF),HL ;OK, UPDATE TXTUNF
0427   0188 D1                          POP     DE          ;DE->OLD UNFILLED AREA
0428   0189 CD 9D 06                    CALL    MVDOWN
0429   018C D1                          POP     DE          ;DE->BEGIN, HL->END
0430   018D E1                          POP     HL
0431   018E CD 95 06                    CALL    MVUP        ;MOVE NEW LINE TO SAVE
0432   0191 18 A7                       JR      ST3         ;AREA
0433   0193             
0434   0193             ;*************************************************************
0435   0193             ;
0436   0193             ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
0437   0193             ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
0438   0193             ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
0439   0193             ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
0440   0193             ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
0441   0193             ;
0442   0193             ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'WSTART'
0443   0193             ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
0444   0193             ; GO BACK TO 'WSTART'.
0445   0193             ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
0446   0193             ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
0447   0193             ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'WSTART', ELSE
0448   0193             ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
0449   0193             ;*************************************************************
0450   0193             ;
0451   0193             ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
0452   0193             ;
0453   0193             ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
0454   0193             ;
0455   0193             ; 'STOP(CR)' GOES BACK TO 'WSTART'
0456   0193             ;
0457   0193             ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
0458   0193             ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
0459   0193             ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
0460   0193             ;
0461   0193             ; THERE ARE 3 MORE ENTRIES IN 'RUN':
0462   0193             ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
0463   0193             ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
0464   0193             ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
0465   0193             ;
0466   0193             ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
0467   0193             ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
0468   0193             ;
0469   0193 CD 4A 05    NEW:            CALL    ENDCHK  ;*** NEW(CR) ***
0470   0196 21 00 08                    LD      HL,TXTBGN
0471   0199 22 B6 0E                    LD      (TXTUNF),HL
0472   019C             ;
0473   019C CD 4A 05    STOP:           CALL    ENDCHK  ;*** STOP(CR) ***
0474   019F C3 1E 01                    JP      WSTART
0475   01A2             
0476   01A2 CD 4A 05    RUN:            CALL    ENDCHK  ;*** RUN(CR) ***
0477   01A5 11 00 08                    LD      DE,TXTBGN       ;FIRST SAVED LINE
0478   01A8             ;
0479   01A8 21 00 00    RUNNXL:         LD      HL,0    ;*** RUNNXL ***
0480   01AB CD C8 05                    CALL    FNDLP   ;FIND WHATEVER LINE #
0481   01AE DA 1E 01                    JP      C,WSTART ;C:PASSED TXTUNF, QUIT
0482   01B1             ;
0483   01B1 EB          RUNTSL:         EX      DE,HL   ;*** RUNTSL ***
0484   01B2 22 B8 0E                    LD      (CURRNT),HL     ;SET 'CURRENT'->LINE #
0485   01B5 EB                          EX      DE,HL
0486   01B6 13                          INC     DE      ;BUMP PASS LINE #
0487   01B7 13                          INC     DE
0488   01B8             ;
0489   01B8 CD FB 00    RUNSML:         CALL    CHKIO   ;*** RUNSML ***
0490   01BB 21 31 07                    LD      HL,TAB2-1       ;FIND COMMAND IN TAB2
0491   01BE C3 F0 06                    JP      EXEC    ;AND EXECUTE IT
0492   01C1             
0493   01C1 DF          GOTO:           RST     REXPR   ;*** GOTO EXPR ***
0494   01C2 D5                          PUSH    DE      ;SAVE FOR ERROR ROUTINE
0495   01C3 CD 4A 05                    CALL    ENDCHK  ;MUST FIND A CR
0496   01C6 CD C0 05                    CALL    FNDLN   ;FIND THE TARGET LINE
0497   01C9 C2 D1 00                    JP      NZ,AHOW ;NO SUCH LINE #
0498   01CC F1                          POP     AF      ;CLEAR THE PUSH DE
0499   01CD 18 E2                       JR      RUNTSL  ;GO DO IT
0500   01CF             ;
0501   01CF             ;*************************************************************
0502   01CF             ;
0503   01CF             ; *** LIST *** & PRINT ***
0504   01CF             ;
0505   01CF             ; LIST HAS TWO FORMS:
0506   01CF             ; 'LIST(CR)' LISTS ALL SAVED LINES
0507   01CF             ; 'LIST #(CR)' START LIST AT THIS LINE #
0508   01CF             ; YOU CAN STOP THE LISTING BY CONTROL C KEY
0509   01CF             ;
0510   01CF             ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
0511   01CF             ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
0512   01CF             ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
0513   01CF             ;
0514   01CF             ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
0515   01CF             ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
0516   01CF             ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
0517   01CF             ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
0518   01CF             ; SPECIFIED, 8 POSITIONS WILL BE USED.
0519   01CF             ;
0520   01CF             ; NUMBER BASE IS SET BY PERCENT SIGN FOLLOEWED BY A NUMBER
0521   01CF             ; BETWEEN 2 and 16. VALUES ARE PRINTED AS UNSIGNED TO THIS BASE
0522   01CF             ; FOR THE REST OF THIS PRINT COMMAND UNLESS CHANGED BY
0523   01CF             ; ANOTHER BASE. IF NO BASE IS PROVIDED NUMBERS ARE SIGNED DECIMAL.
0524   01CF             ;
0525   01CF             ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
0526   01CF             ; DOUBLE QUOTES.
0527   01CF             ;
0528   01CF             ; A BACK-ARROW (UNDERLINE) ALONE MEANS GENERATE A (CR) WITHOUT (LF).
0529   01CF             ;
0530   01CF             ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
0531   01CF             ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
0532   01CF             ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
0533   01CF             ;
0534   01CF CD 7E 00    LIST:           CALL    TSTNUM  ;TEST IF THERE IS A #
0535   01D2 CD 4A 05                    CALL    ENDCHK  ;IF NO # WE GET A 0
0536   01D5 CD C0 05                    CALL    FNDLN   ;FIND THIS OR NEXT LINE
0537   01D8 DA 1E 01    LS1:            JP      C,WSTART ;C:PASSED TXTUNF
0538   01DB CD 7E 06                    CALL    PRTLN   ;PRINT THE LINE
0539   01DE CD FB 00                    CALL    CHKIO   ;STOP IF HIT CONTROL-C
0540   01E1 CD C8 05                    CALL    FNDLP   ;FIND NEXT LINE
0541   01E4 18 F2                       JR      LS1     ;AND LOOP BACK
0542   01E6             
0543   01E6 0E 08       PRINT:          LD      C,8     ;C = # OF SPACES
0544   01E8 AF                          XOR     A       ;DEFAULT BASE FOR PRTNUM
0545   01E9 32 B5 0E                    LD      (PNBASE),A
0546   01EC CF                          TSTCH(';',PR2)  ;IF NULL LIST & ";"
0546   01ED 3B          
0546   01EE 06          
0547   01EF CD 0E 00                    CALL    CRLF    ;GIVE CR-LF AND
0548   01F2 C3 B8 01                    JP      RUNSML  ;CONTINUE SAME LINE
0549   01F5 CF          PR2:            TSTCH(CR,PR0)   ;IF NULL LIST (CR)
0549   01F6 0D          
0549   01F7 06          
0550   01F8 CD 0E 00                    CALL    CRLF    ;ALSO GIVE CR-LF AND
0551   01FB C3 A8 01                    JP      RUNNXL  ;GO TO NEXT LINE
0552   01FE CF          PR0:            TSTCH('#',PR5)  ;ELSE IS IT FORMAT?
0552   01FF 23          
0552   0200 04          
0553   0201 DF                          RST     REXPR   ;YES, EVALUATE EXPR.
0554   0202 4D                          LD      C,L     ;AND SAVE IT IN C
0555   0203 18 1A                       JR      PR3     ;LOOK FOR MORE TO PRINT
0556   0205 CF          PR5:            TSTCH('%',PR1)  ;ELSE IS IT PRTNUM BASE?
0556   0206 25          
0556   0207 11          
0557   0208 DF                          RST     REXPR   ;YES, EVALUATE EXPR.
0558   0209 7D                          LD      A,L     ;GET THE LOW PART
0559   020A FE 01                       CP      1       ;EITHER 0 OR >= 2?
0560   020C CA D0 00                    JP      Z,QHOW  ;ERROR
0561   020F FE 11                       CP      17      ;BASE > 16?
0562   0211 D2 D0 00                    JP      NC,QHOW ;ERROR
0563   0214 32 B5 0E                    LD      (PNBASE),A      ;IN PNBASE
0564   0217 18 06                       JR      PR3     ;LOOK FOR MORE TO PRINT
0565   0219 CD F0 05    PR1:            CALL    QTSTG   ;OR IS IT A STRING?
0566   021C C3 2F 02                    JP      PR8     ;HACK JP!! IF NOT, MUST BE EXPR.
0567   021F CF          PR3:            TSTCH($2C,PR6)  ;IF ",", GO FIND NEXT
0567   0220 2C          
0567   0221 05          
0568   0222 CD 3B 05                    CALL    FIN     ;IN THE LIST.
0569   0225 18 D7                       JR      PR0     ;LIST CONTINUES
0570   0227 AF          PR6:            XOR     A       ;END OF LIST REACHED
0571   0228 32 B5 0E                    LD      (PNBASE),A      ;RESET DEFAULT BASE
0572   022B CD 0E 00                    CALL    CRLF    ;LIST ENDS WITH CRLF
0573   022E F7                          RST     RFINISH ;FINISH
0574   022F DF          PR8:            RST     REXPR   ;EVALUATE THE EXPR
0575   0230 C5                          PUSH    BC
0576   0231 CD 1E 06                    CALL    PRTNUM  ;PRINT THE VALUE
0577   0234 C1                          POP     BC
0578   0235 18 E8                       JR      PR3     ;MORE TO PRINT?
0579   0237             ;
0580   0237             ;*************************************************************
0581   0237             ;
0582   0237             ; *** GOSUB *** & RETURN ***
0583   0237             ;
0584   0237             ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
0585   0237             ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
0586   0237             ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
0587   0237             ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
0588   0237             ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
0589   0237             ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
0590   0237             ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
0591   0237             ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
0592   0237             ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
0593   0237             ;
0594   0237             ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
0595   0237             ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
0596   0237             ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
0597   0237             ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
0598   0237             ;
0599   0237 CD C5 06    GOSUB:          CALL    PUSHA   ;SAVE THE CURRENT "FOR"
0600   023A DF                          RST     REXPR   ;PARAMETERS
0601   023B D5                          PUSH    DE      ;AND TEXT POINTER
0602   023C CD C0 05                    CALL    FNDLN   ;FIND THE TARGET LINE
0603   023F C2 D1 00                    JP      NZ,AHOW ;NOT THERE. SAY "HOW?"
0604   0242 2A B8 0E                    LD      HL,(CURRNT)     ;FOUND IT, SAVE OLD
0605   0245 E5                          PUSH    HL      ;'CURRNT' OLD 'STKGOS'
0606   0246 2A BA 0E                    LD      HL,(STKGOS)
0607   0249 E5                          PUSH    HL
0608   024A 21 00 00                    LD      HL,0    ;AND LOAD NEW ONES
0609   024D 22 C0 0E                    LD      (LOPVAR),HL
0610   0250 39                          ADD     HL,SP
0611   0251 22 BA 0E                    LD      (STKGOS),HL
0612   0254 C3 B1 01                    JP      RUNTSL  ;THEN RUN THAT LINE
0613   0257             ;
0614   0257 CD 4A 05    RETURN:         CALL    ENDCHK  ;THERE MUST BE A CR
0615   025A 2A BA 0E                    LD      HL,(STKGOS)     ;OLD STACK POINTER
0616   025D 7C                          LD      A,H     ;0 MEANS NOT EXIST
0617   025E B5                          OR      L
0618   025F CA 4E 05                    JP      Z,QWHAT ;SO, WE SAY: "WHAT?"
0619   0262 F9                          LD      SP,HL   ;ELSE, RESTORE IT
0620   0263 E1                          POP     HL
0621   0264 22 BA 0E                    LD      (STKGOS),HL     ;AND THE OLD 'STKGOS'
0622   0267 E1                          POP     HL
0623   0268 22 B8 0E                    LD      (CURRNT),HL     ;AND THE OLD 'CURRNT'
0624   026B D1                          POP     DE      ;OLD TEXT POINTER
0625   026C CD AA 06                    CALL    POPA    ;OLD "FOR" PARAMETERS
0626   026F F7                          RST     RFINISH ;AND WE ARE BACK HOME
0627   0270             ;
0628   0270             ;*************************************************************
0629   0270             ;
0630   0270             ; *** FOR *** & NEXT ***
0631   0270             ;
0632   0270             ; 'FOR' HAS TWO FORMS:
0633   0270             ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
0634   0270             ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
0635   0270             ; EXP3=1.  (I.E., WITH A STEP OF +1.)
0636   0270             ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
0637   0270             ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
0638   0270             ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
0639   0270             ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
0640   0270             ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
0641   0270             ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
0642   0270             ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
0643   0270             ; BEFORE THE NEW ONE OVERWRITES IT.
0644   0270             ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
0645   0270             ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
0646   0270             ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
0647   0270             ; (PURGED FROM THE STACK..)
0648   0270             ;
0649   0270             ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
0650   0270             ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
0651   0270             ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
0652   0270             ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
0653   0270             ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
0654   0270             ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
0655   0270             ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
0656   0270             ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
0657   0270             ; IS PURGED AND EXECUTION CONTINUES.
0658   0270             ;
0659   0270 CD C5 06    FOR:            CALL    PUSHA           ;SAVE THE OLD SAVE AREA
0660   0273 CD 2C 05                    CALL    SETVAL          ;SET THE CONTROL VAR.
0661   0276 2B                          DEC     HL              ;HL IS ITS ADDRESS
0662   0277 22 C0 0E                    LD      (LOPVAR),HL     ;SAVE THAT
0663   027A 21 A9 07                    LD      HL,TAB5-1       ;USE 'EXEC' TO LOOK
0664   027D C3 F0 06                    JP      EXEC            ;FOR THE WORD 'TO'
0665   0280 DF          FR1:            RST     REXPR           ;EVALUATE THE LIMIT
0666   0281 22 C4 0E                    LD      (LOPLMT),HL     ;SAVE THAT
0667   0284 21 AF 07                    LD      HL,TAB6-1       ;USE 'EXEC' TO LOOK
0668   0287 C3 F0 06                    JP      EXEC            ;FOR THE WORD 'STEP'
0669   028A DF          FR2:            RST     REXPR           ;FOUND IT, GET STEP
0670   028B 18 03                       JR      FR4
0671   028D 21 01 00    FR3:            LD      HL,1H           ;NOT FOUND, SET TO 1
0672   0290 22 C2 0E    FR4:            LD      (LOPINC),HL     ;SAVE THAT TOO
0673   0293 2A B8 0E    FR5:            LD      HL,(CURRNT)     ;SAVE CURRENT LINE #
0674   0296 22 C6 0E                    LD      (LOPLN),HL
0675   0299 EB                          EX      DE,HL           ;AND TEXT POINTER
0676   029A 22 C8 0E                    LD      (LOPPT),HL
0677   029D 01 0A 00                    LD      BC,0AH          ;DIG INTO STACK TO
0678   02A0 2A C0 0E                    LD      HL,(LOPVAR)     ;FIND 'LOPVAR'
0679   02A3 EB                          EX      DE,HL
0680   02A4 60                          LD      H,B
0681   02A5 68                          LD      L,B             ;HL=0 NOW
0682   02A6 39                          ADD     HL,SP           ;HERE IS THE STACK
0683   02A7 3E                          .DB     3EH             ;HACK SKIP "ADD HL,BC"
0684   02A8 09          FR7:            ADD     HL,BC           ;EACH LEVEL IS 10 DEEP
0685   02A9 7E                          LD      A,(HL)          ;GET THAT OLD 'LOPVAR'
0686   02AA 23                          INC     HL
0687   02AB B6                          OR      (HL)
0688   02AC 28 18                       JR      Z,FR8           ;0 SAYS NO MORE IN IT
0689   02AE 7E                          LD      A,(HL)
0690   02AF 2B                          DEC     HL
0691   02B0 BA                          CP      D               ;SAME AS THIS ONE?
0692   02B1 20 F5                       JR      NZ,FR7
0693   02B3 7E                          LD      A,(HL)          ;THE OTHER HALF?
0694   02B4 BB                          CP      E
0695   02B5 20 F1                       JR      NZ,FR7
0696   02B7 EB                          EX      DE,HL           ;YES, FOUND ONE
0697   02B8 21 00 00                    LD      HL,0H
0698   02BB 39                          ADD     HL,SP           ;TRY TO MOVE SP
0699   02BC 44                          LD      B,H
0700   02BD 4D                          LD      C,L
0701   02BE 21 0A 00                    LD      HL,0AH
0702   02C1 19                          ADD     HL,DE
0703   02C2 CD 9D 06                    CALL    MVDOWN          ;AND PURGE 10 WORDS
0704   02C5 F9                          LD      SP,HL           ;IN THE STACK
0705   02C6 2A C8 0E    FR8:            LD      HL,(LOPPT)      ;JOB DONE, RESTORE DE
0706   02C9 EB                          EX      DE,HL
0707   02CA F7                          RST     RFINISH         ;AND CONTINUE
0708   02CB             ;
0709   02CB FF          NEXT:           RST     RTSTV           ;GET ADDRESS OF VAR.
0710   02CC DA 4E 05                    JP      C,QWHAT         ;NO VARIABLE, "WHAT?"
0711   02CF 22 BC 0E                    LD      (VARNXT),HL     ;YES, SAVE IT
0712   02D2 D5          NX0:            PUSH    DE              ;SAVE TEXT POINTER
0713   02D3 EB                          EX      DE,HL
0714   02D4 2A C0 0E                    LD      HL,(LOPVAR)     ;GET VAR. IN 'FOR'
0715   02D7 7C                          LD      A,H
0716   02D8 B5                          OR      L               ;0 SAYS NEVER HAD ONE
0717   02D9 CA 4F 05                    JP      Z,AWHAT         ;SO WE ASK: "WHAT?"
0718   02DC E7                          RST     RCOMP           ;ELSE WE CHECK THEM
0719   02DD 28 09                       JR      Z,NX3           ;OK, THEY AGREE
0720   02DF D1                          POP     DE              ;NO, LET'S SEE
0721   02E0 CD AA 06                    CALL    POPA            ;PURGE CURRENT LOOP
0722   02E3 2A BC 0E                    LD      HL,(VARNXT)     ;AND POP ONE LEVEL
0723   02E6 18 EA                       JR      NX0             ;GO CHECK AGAIN
0724   02E8 5E          NX3:            LD      E,(HL)          ;COME HERE WHEN AGREED
0725   02E9 23                          INC     HL
0726   02EA 56                          LD      D,(HL)          ;DE=VALUE OF VAR.
0727   02EB 2A C2 0E                    LD      HL,(LOPINC)
0728   02EE E5                          PUSH    HL
0729   02EF 7C                          LD      A,H
0730   02F0 AA                          XOR     D
0731   02F1 7A                          LD      A,D
0732   02F2 19                          ADD     HL,DE           ;ADD ONE STEP
0733   02F3 FA FA 02                    JP      M,NX4
0734   02F6 AC                          XOR     H
0735   02F7 FA 1B 03                    JP      M,NX5
0736   02FA EB          NX4:            EX      DE,HL
0737   02FB 2A C0 0E                    LD      HL,(LOPVAR)     ;PUT IT BACK
0738   02FE 73                          LD      (HL),E
0739   02FF 23                          INC     HL
0740   0300 72                          LD      (HL),D
0741   0301 2A C4 0E                    LD      HL,(LOPLMT)     ;HL->LIMIT
0742   0304 F1                          POP     AF              ;OLD HL
0743   0305 B7                          OR      A
0744   0306 F2 0A 03                    JP      P,NX1           ;STEP > 0
0745   0309 EB                          EX      DE,HL           ;STEP < 0
0746   030A CD 24 05    NX1:            CALL    CKHLDE          ;COMPARE WITH LIMIT
0747   030D D1                          POP     DE              ;RESTORE TEXT POINTER
0748   030E 38 0D                       JR      C,NX2           ;OUTSIDE LIMIT
0749   0310 2A C6 0E                    LD      HL,(LOPLN)      ;WITHIN LIMIT, GO
0750   0313 22 B8 0E                    LD      (CURRNT),HL     ;BACK TO THE SAVED
0751   0316 2A C8 0E                    LD      HL,(LOPPT)      ;'CURRNT' AND TEXT
0752   0319 EB                          EX      DE,HL           ;POINTER
0753   031A F7                          RST     RFINISH
0754   031B E1          NX5:            POP     HL
0755   031C D1                          POP     DE
0756   031D CD AA 06    NX2:            CALL    POPA            ;PURGE THIS LOOP
0757   0320 F7                          RST     RFINISH
0758   0321             ;
0759   0321             ;*************************************************************
0760   0321             ;
0761   0321             ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
0762   0321             ;
0763   0321             ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
0764   0321             ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
0765   0321             ;
0766   0321             ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
0767   0321             ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
0768   0321             ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
0769   0321             ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
0770   0321             ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
0771   0321             ; EXECUTION CONTINUES AT THE NEXT LINE.
0772   0321             ;
0773   0321             ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
0774   0321             ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
0775   0321             ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
0776   0321             ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
0777   0321             ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
0778   0321             ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
0779   0321             ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
0780   0321             ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
0781   0321             ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
0782   0321             ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
0783   0321             ;
0784   0321             ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
0785   0321             ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
0786   0321             ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
0787   0321             ; THIS IS HANDLED IN 'INPERR'.
0788   0321             ;
0789   0321             ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
0790   0321             ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
0791   0321             ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
0792   0321             ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
0793   0321             ; THIS IS DONE BY 'DEFLT'.
0794   0321             ;
0795   0321 21 00 00    REM:            LD      HL,0H   ;*** REM ***
0796   0324 3E          .DB             3EH             ;SKIP RST, THIS IS LIKE 'IF 0'
0797   0325             ;
0798   0325 DF          IFF:            RST     REXPR   ;*** IF ***
0799   0326 7C                          LD      A,H     ;IS THE EXPR.=0?
0800   0327 B5                          OR      L
0801   0328 C2 B8 01                    JP      NZ,RUNSML       ;NO, CONTINUE
0802   032B CD DD 05                    CALL    FNDSKP  ;YES, SKIP REST OF LINE
0803   032E D2 B1 01                    JP      NC,RUNTSL       ;AND RUN THE NEXT LINE
0804   0331 C3 1E 01                    JP      WSTART  ;IF NO NEXT, RE-START
0805   0334             ;
0806   0334 2A BE 0E    INPERR:         LD      HL,(STKINP)     ;*** INPERR ***
0807   0337 F9                          LD      SP,HL   ;RESTORE OLD SP
0808   0338 E1                          POP     HL      ;AND OLD 'CURRNT'
0809   0339 22 B8 0E                    LD      (CURRNT),HL
0810   033C D1                          POP     DE      ;AND OLD TEXT POINTER
0811   033D D1                          POP     DE      ;REDO INPUT
0812   033E             ;
0813   033E             INPUT:          ;*** INPUT ***
0814   033E D5          IP1:            PUSH    DE      ;SAVE IN CASE OF ERROR
0815   033F CD F0 05                    CALL    QTSTG   ;IS NEXT ITEM A STRING?
0816   0342 C3 4A 03                    JP      IP2     ;HACK JP!! NO
0817   0345 FF                          RST     RTSTV   ;YES, BUT FOLLOWED BY A
0818   0346 38 39                       JR      C,IP4   ;VARIABLE?   NO.
0819   0348 18 10                       JR      IP3     ;YES.  INPUT VARIABLE
0820   034A D5          IP2:            PUSH    DE      ;SAVE FOR 'PRTSTG'
0821   034B FF                          RST     RTSTV   ;MUST BE VARIABLE NOW
0822   034C DA 4E 05                    JP      C,QWHAT ;"WHAT?" IT IS NOT?
0823   034F 1A                          LD      A,(DE)  ;GET READY FOR 'PRTSTG'
0824   0350 4F                          LD      C,A
0825   0351 97                          SUB     A
0826   0352 12                          LD      (DE),A
0827   0353 D1                          POP     DE
0828   0354 CD E5 05                    CALL    PRTSTG  ;PRINT STRING AS PROMPT
0829   0357 79                          LD      A,C     ;RESTORE TEXT
0830   0358 1B                          DEC     DE
0831   0359 12                          LD      (DE),A
0832   035A D5          IP3:            PUSH    DE      ;SAVE TEXT POINTER
0833   035B EB                          EX      DE,HL
0834   035C 2A B8 0E                    LD      HL,(CURRNT)     ;ALSO SAVE 'CURRNT'
0835   035F E5                          PUSH    HL
0836   0360 21 3E 03                    LD      HL,IP1  ;A NEGATIVE NUMBER
0837   0363 22 B8 0E                    LD      (CURRNT),HL     ;AS A FLAG
0838   0366 21 00 00                    LD      HL,0H   ;SAVE SP TOO
0839   0369 39                          ADD     HL,SP
0840   036A 22 BE 0E                    LD      (STKINP),HL
0841   036D D5                          PUSH    DE      ;OLD HL
0842   036E 3E 3A                       LD      A,':'   ;PRINT THIS TOO
0843   0370 CD 81 05                    CALL    GETLN   ;AND GET A LINE
0844   0373 11 CC 0E                    LD      DE,BUFFER       ;POINTS TO BUFFER
0845   0376 DF                          RST     REXPR   ;EVALUATE INPUT
0846   0377                             ;NOP            ;??? CAN BE 'CALL ENDCHK'
0847   0377                             ;NOP
0848   0377                             ;NOP
0849   0377 D1                          POP     DE      ;OK, GET OLD HL
0850   0378 EB                          EX      DE,HL
0851   0379 73                          LD      (HL),E  ;SAVE VALUE IN VAR.
0852   037A 23                          INC     HL
0853   037B 72                          LD      (HL),D
0854   037C E1                          POP     HL      ;GET OLD 'CURRNT'
0855   037D 22 B8 0E                    LD      (CURRNT),HL
0856   0380 D1                          POP     DE      ;AND OLD TEXT POINTER
0857   0381 F1          IP4:            POP     AF      ;PURGE JUNK IN STACK
0858   0382 CF                          TSTCH($2C,IP5)  ;IS NEXT CH. ','?
0858   0383 2C          
0858   0384 02          
0859   0385 18 B7                       JR      IP1     ;YES, MORE ITEMS.
0860   0387 F7          IP5:            RST     RFINISH
0861   0388             ;
0862   0388 1A          DEFLT:          LD      A,(DE)  ;***  DEFLT ***
0863   0389 FE 0D                       CP      CR      ;EMPTY LINE IS OK
0864   038B 28 08                       JR      Z,LT1   ;ELSE IT IS 'LET'
0865   038D             ;
0866   038D CD 2C 05    LET:            CALL    SETVAL  ;*** LET ***
0867   0390 CF                          TSTCH($2C,LT1)  ;SET VALUE TO VAR.
0867   0391 2C          
0867   0392 02          
0868   0393 18 F8                       JR      LET     ;ITEM BY ITEM
0869   0395 F7          LT1:            RST     RFINISH ;UNTIL FINISH
0870   0396             ;
0871   0396             ;*************************************************************
0872   0396             ;
0873   0396             ; *** EXPR ***
0874   0396             ;
0875   0396             ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
0876   0396             ; <EXPR>::<EXPR2>
0877   0396             ;         <EXPR2><REL.OP.><EXPR2>
0878   0396             ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
0879   0396             ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
0880   0396             ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
0881   0396             ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
0882   0396             ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
0883   0396             ; <EXPR4>::=<VARIABLE>
0884   0396             ;           <FUNCTION>
0885   0396             ;           (<EXPR>)
0886   0396             ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
0887   0396             ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
0888   0396             ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
0889   0396             ;
0890   0396             ;EXPR:          CALL    EXPR2   ;THIS IS AT LOC. 18
0891   0396             ;               PUSH    HL      ;SAVE <EXPR2> VALUE
0892   0396             ;               JP      EXPR1   ;REST OF IT AT EXPR1
0893   0396 21 B7 07    EXPR1:          LD      HL,TAB8-1       ;LOOKUP REL.OP.
0894   0399 C3 F0 06                    JP      EXEC    ;GO DO IT
0895   039C             ;
0896   039C CD C5 03    XP11:           CALL    XP18    ;REL.OP.">="
0897   039F D8                          RET     C       ;NO, RETURN HL=0
0898   03A0 6F                          LD      L,A     ;YES, RETURN HL=1
0899   03A1 C9                          RET
0900   03A2             ;
0901   03A2 CD C5 03    XP12:           CALL    XP18    ;REL.OP."#" OR "!="
0902   03A5 C8                          RET     Z       ;FALSE, RETURN HL=0
0903   03A6 6F                          LD      L,A     ;TRUE, RETURN HL=1
0904   03A7 C9                          RET
0905   03A8             ;
0906   03A8 CD C5 03    XP13:           CALL    XP18    ;REL.OP.">"
0907   03AB C8                          RET     Z       ;FALSE
0908   03AC D8                          RET     C       ;ALSO FALSE, HL=0
0909   03AD 6F                          LD      L,A     ;TRUE, HL=1
0910   03AE C9                          RET
0911   03AF             ;
0912   03AF CD C5 03    XP14:           CALL    XP18    ;REL.OP."<="
0913   03B2 6F                          LD      L,A     ;SET HL=1
0914   03B3 C8                          RET     Z       ;REL. TRUE, RETURN
0915   03B4 D8                          RET     C
0916   03B5 6C                          LD      L,H     ;ELSE SET HL=0
0917   03B6 C9                          RET
0918   03B7             ;
0919   03B7 CD C5 03    XP15:           CALL    XP18    ;REL.OP."=" OR "=="
0920   03BA C0                          RET     NZ      ;FALSE, RETURN HL=0
0921   03BB 6F                          LD      L,A     ;ELSE SET HL=1
0922   03BC C9                          RET
0923   03BD             ;
0924   03BD CD C5 03    XP16:           CALL    XP18    ;REL.OP."<"
0925   03C0 D0                          RET     NC      ;FALSE, RETURN HL=0
0926   03C1 6F                          LD      L,A     ;ELSE SET HL=1
0927   03C2 C9                          RET
0928   03C3             ;
0929   03C3 E1          XP17:           POP     HL      ;NOT .REL.OP
0930   03C4 C9                          RET             ;RETURN HL=<EXPR2>
0931   03C5             ;
0932   03C5 79          XP18:           LD      A,C     ;SUBROUTINE FOR ALL
0933   03C6 E1                          POP     HL      ;REL.OP.'S
0934   03C7 C1                          POP     BC
0935   03C8 E5                          PUSH    HL      ;REVERSE TOP OF STACK
0936   03C9 C5                          PUSH    BC
0937   03CA 4F                          LD      C,A
0938   03CB CD DA 03                    CALL    EXPR2   ;GET 2ND <EXPR2>
0939   03CE EB                          EX      DE,HL   ;VALUE IN DE NOW
0940   03CF E3                          EX      (SP),HL ;1ST <EXPR2> IN HL
0941   03D0 CD 24 05                    CALL    CKHLDE  ;COMPARE 1ST WITH 2ND
0942   03D3 D1                          POP     DE      ;RESTORE TEXT POINTER
0943   03D4 21 00 00                    LD      HL,0H   ;SET HL=0, A=1
0944   03D7 3E 01                       LD      A,1
0945   03D9 C9                          RET
0946   03DA             ;
0947   03DA CF          EXPR2:          TSTCH('-',XP21) ;NEGATIVE SIGN?
0947   03DB 2D          
0947   03DC 05          
0948   03DD 21 00 00                    LD      HL,0H   ;YES, FAKE '0-'
0949   03E0 18 21                       JR      XP26    ;TREAT LIKE SUBTRACT
0950   03E2             ;
0951   03E2 CF          XP21:           TSTCH('+',XP22) ;POSITIVE SIGN? IGNORE
0951   03E3 2B          
0951   03E4 00          
0952   03E5 CD 0C 04    XP22:           CALL    EXPR3   ;1ST <EXPR3>
0953   03E8 CF          XP23:           TSTCH('+',XP25) ;ADD?
0953   03E9 2B          
0953   03EA 15          
0954   03EB E5                          PUSH    HL      ;YES, SAVE VALUE
0955   03EC CD 0C 04                    CALL    EXPR3   ;GET 2ND <EXPR3>
0956   03EF EB          XP24:           EX      DE,HL   ;2ND IN DE
0957   03F0 E3                          EX      (SP),HL ;1ST IN HL
0958   03F1 7C                          LD      A,H     ;COMPARE SIGN
0959   03F2 AA                          XOR     D
0960   03F3 7A                          LD      A,D
0961   03F4 19                          ADD     HL,DE
0962   03F5 D1                          POP     DE      ;RESTORE TEXT POINTER
0963   03F6 FA E8 03                    JP      M,XP23  ;1ST AND 2ND SIGN DIFFER
0964   03F9 AC                          XOR     H       ;1ST AND 2ND SIGN EQUAL
0965   03FA F2 E8 03                    JP      P,XP23  ;SO IS RESULT
0966   03FD             ;
0967   03FD C3 D0 00                    JP      QHOW    ;ELSE WE HAVE OVERFLOW
0968   0400             ;
0969   0400 CF          XP25:           TSTCH('-',XP42) ;SUBTRACT?
0969   0401 2D          
0969   0402 7E          
0970   0403 E5          XP26:           PUSH    HL      ;YES, SAVE 1ST <EXPR3>
0971   0404 CD 0C 04                    CALL    EXPR3   ;GET 2ND <EXPR3>
0972   0407 CD 0F 05                    CALL    CHGSGN  ;NEGATE
0973   040A 18 E3                       JR      XP24    ;AND ADD THEM
0974   040C             ;
0975   040C CD 66 04    EXPR3:          CALL    EXPR4   ;GET 1ST <EXPR4>
0976   040F CF          XP31:           TSTCH('*',XP34) ;MULTIPLY?
0976   0410 2A          
0976   0411 28          
0977   0412 E5                          PUSH    HL      ;YES, SAVE 1ST
0978   0413 CD 66 04                    CALL    EXPR4   ;AND GET 2ND <EXPR4>
0979   0416 06 00                       LD      B,0H    ;CLEAR B FOR SIGN
0980   0418 CD 0C 05                    CALL    CHKSGN  ;CHECK SIGN
0981   041B E3                          EX      (SP),HL ;1ST IN HL
0982   041C CD 0C 05                    CALL    CHKSGN  ;CHECK SIGN OF 1ST
0983   041F EB                          EX      DE,HL
0984   0420 E3                          EX      (SP),HL
0985   0421 7C                          LD      A,H     ;IS HL > 255 ?
0986   0422 B7                          OR      A
0987   0423 28 06                       JR      Z,XP32  ;NO
0988   0425 7A                          LD      A,D     ;YES, HOW ABOUT DE
0989   0426 B2                          OR      D
0990   0427 EB                          EX      DE,HL   ;PUT SMALLER IN HL
0991   0428 C2 D1 00                    JP      NZ,AHOW ;ALSO >, WILL OVERFLOW
0992   042B 7D          XP32:           LD      A,L     ;THIS IS DUMB
0993   042C 21 00 00                    LD      HL,0H   ;CLEAR RESULT
0994   042F B7                          OR      A       ;ADD AND COUNT
0995   0430 28 27                       JR      Z,XP35
0996   0432 19          XP33:           ADD     HL,DE
0997   0433 38 9C                       JR      C,AHOW  ;OVERFLOW
0998   0435 3D                          DEC     A
0999   0436 20 FA                       JR      NZ,XP33
1000   0438 18 1F                       JR      XP35    ;FINISHED
1001   043A             ;
1002   043A CF          XP34:           TSTCH('/',XP42) ;DIVIDE?
1002   043B 2F          
1002   043C 44          
1003   043D E5                          PUSH    HL      ;YES, SAVE 1ST <EXPR4>
1004   043E CD 66 04                    CALL    EXPR4   ;AND GET THE SECOND ONE
1005   0441 06 00                       LD      B,0H    ;CLEAR B FOR SIGN
1006   0443 CD 0C 05                    CALL    CHKSGN  ;CHECK SIGN OF 2ND
1007   0446 E3                          EX      (SP),HL ;GET 1ST IN HL
1008   0447 CD 0C 05                    CALL    CHKSGN  ;CHECK SIGN OF 1ST
1009   044A EB                          EX      DE,HL
1010   044B E3                          EX      (SP),HL
1011   044C EB                          EX      DE,HL
1012   044D 7A                          LD      A,D     ;DIVIDE BY 0?
1013   044E B3                          OR      E
1014   044F CA D1 00                    JP      Z,AHOW  ;SAY "HOW?"
1015   0452 C5                          PUSH    BC      ;ELSE SAVE SIGN
1016   0453 CD F3 04                    CALL    DIVIDE  ;USE SUBROUTINE
1017   0456 60                          LD      H,B     ;RESULT IN HL NOW
1018   0457 69                          LD      L,C
1019   0458 C1                          POP     BC      ;GET SIGN BACK
1020   0459 D1          XP35:           POP     DE      ;AND TEXT POINTER
1021   045A 7C                          LD      A,H     ;HL MUST BE +
1022   045B B7                          OR      A
1023   045C FA D0 00                    JP      M,QHOW  ;ELSE IT IS OVERFLOW
1024   045F 78                          LD      A,B
1025   0460 B7                          OR      A
1026   0461 FC 0F 05                    CALL    M,CHGSGN        ;CHANGE SIGN IF NEEDED
1027   0464 18 A9                       JR      XP31    ;LOOK FOR MORE TERMS
1028   0466             ;
1029   0466 21 83 07    EXPR4:          LD      HL,TAB4-1       ;FIND FUNCTION IN TAB4
1030   0469 C3 F0 06                    JP      EXEC    ;AND GO DO IT
1031   046C             ;
1032   046C FF          XP40:           RST     RTSTV   ;NO, NOT A FUNCTION
1033   046D 38 05                       JR      C,XP41  ;NOR A VARIABLE
1034   046F 7E                          LD      A,(HL)  ;VARIABLE
1035   0470 23                          INC     HL
1036   0471 66                          LD      H,(HL)  ;VALUE IN HL
1037   0472 6F                          LD      L,A
1038   0473 C9                          RET
1039   0474             ;
1040   0474 CD 7E 00    XP41:           CALL    TSTNUM  ;OR IS IT A NUMBER
1041   0477 78                          LD      A,B     ;# OF DIGIT
1042   0478 B7                          OR      A
1043   0479 C0                          RET     NZ      ;OK
1044   047A CF          PARN:           TSTCH($28,XP43) ; '('
1044   047B 28          
1044   047C 05          
1045   047D DF                          RST     REXPR   ;"(EXPR)"
1046   047E CF                          TSTCH($29,XP43) ; ')'
1046   047F 29          
1046   0480 01          
1047   0481 C9          XP42:           RET
1048   0482 C3 4E 05    XP43:           JP      QWHAT   ;ELSE SAY: "WHAT?"
1049   0485             
1050   0485 CD 7A 04    RND:            CALL    PARN    ;*** RND(EXPR) ***
1051   0488 7C                          LD      A,H     ;EXPR MUST BE +
1052   0489 B7                          OR      A
1053   048A FA D0 00                    JP      M,QHOW
1054   048D B5                          OR      L       ;AND NON-ZERO
1055   048E CA D0 00                    JP      Z,QHOW
1056   0491 D5                          PUSH    DE      ;SAVE BOTH
1057   0492 E5                          PUSH    HL
1058   0493 2A CA 0E                    LD      HL,(RANPNT)     ;GET MEMORY AS RANDOM
1059   0496 11 D6 07                    LD      DE,LSTROM       ;NUMBER
1060   0499 E7                          RST     RCOMP
1061   049A 38 03                       JR      C,RA1   ;WRAP AROUND IF LAST
1062   049C 21 00 00                    LD      HL,CSTART
1063   049F ED 5F       RA1:            LD      A,R     ;RFSH REG GIVES TIME DEP. RANDOM
1064   04A1 AE                          XOR     (HL)
1065   04A2 5F                          LD      E,A
1066   04A3 23                          INC     HL
1067   04A4 AE                          XOR     (HL)
1068   04A5 57                          LD      D,A
1069   04A6 22 CA 0E                    LD      (RANPNT),HL
1070   04A9 E1                          POP     HL
1071   04AA EB                          EX      DE,HL
1072   04AB C5                          PUSH    BC
1073   04AC CD F3 04                    CALL    DIVIDE  ;RND(N)=MOD(M,N)+1
1074   04AF C1                          POP     BC
1075   04B0 D1                          POP     DE
1076   04B1 23                          INC     HL
1077   04B2 C9                          RET
1078   04B3             
1079   04B3 CD 7A 04    ABS:            CALL    PARN    ;*** ABS(EXPR) ***
1080   04B6 1B                          DEC     DE
1081   04B7 CD 0C 05                    CALL    CHKSGN  ;CHECK SIGN AND CHANGE IF HL < 0
1082   04BA 13                          INC     DE
1083   04BB C9                          RET
1084   04BC             
1085   04BC 2A B6 0E    SIZE:           LD      HL,(TXTUNF)     ;*** RETURN SIZE IN HL ***
1086   04BF D5                          PUSH    DE              ;GET THE NUMBER OF FREE
1087   04C0 EB                          EX      DE,HL           ;BYTES BETWEEN 'TXTUNF'
1088   04C1 21 00 0E                    LD      HL,TXTEND       ;AND 'TXTEND'
1089   04C4 CD 08 05                    CALL    SUBDE
1090   04C7 D1                          POP     DE
1091   04C8 C9                          RET
1092   04C9             
1093   04C9 CD 7A 04    GET:            CALL    PARN    ;*** GET(ADDR) ***
1094   04CC 6E                          LD      L,(HL)  ;GET CONTENT OF (HL)
1095   04CD 26 00                       LD      H,0     ;RETURN RESULT IN HL
1096   04CF C9                          RET
1097   04D0             
1098   04D0 CD 7A 04    USR:            CALL    PARN    ;*** USR(PARA) ***
1099   04D3 C3 00 0E                    JP      USRSPC  ;GET para in HL and JP to prog
1100   04D6             ;                               ;There you should:
1101   04D6             ;               ...             ;    - Do the work
1102   04D6             ;               ...             ;    - Put result in HL
1103   04D6             ;               RET             ;$C9 - RET to BASIC
1104   04D6             ;                               ;DEFAULT: (USRSPC)=$C9
1105   04D6             
1106   04D6 21 00 08    RAM:            LD      HL,TXTBGN ; *** RAM *** START OF TEXT AREA
1107   04D9 C9                          RET
1108   04DA             
1109   04DA 21 00 0E    TOP:            LD      HL,TXTEND ; *** TOP *** END OF TEXT AREA
1110   04DD C9                          RET
1111   04DE             
1112   04DE DF          PUT:            RST     REXPR   ;*** PUT ADDR, VAL1 [,VAL2, VAL3,..]
1113   04DF CF                          TSTCH($2C,PT2)  ; 1ST ',' SEPARATES THE VALUE(S)
1113   04E0 2C          
1113   04E1 0D          
1114   04E2 E5                          PUSH    HL      ;SAVE ADDR
1115   04E3 DF          PT0:            RST     REXPR   ;GET VAL IN HL
1116   04E4 7D                          LD      A,L     ;LOW BYTE OF VAL
1117   04E5 E1                          POP     HL      ;GET ADDR
1118   04E6 77                          LD      (HL),A  ;PUT VALUE IN RAM
1119   04E7 CF                          TSTCH($2C,PT1)  ;READY UNLESS ","
1119   04E8 2C          
1119   04E9 04          
1120   04EA 23                          INC     HL      ;NEXT ADDR
1121   04EB E5                          PUSH    HL
1122   04EC 18 F5                       JR      PT0     ;LIST CONTINUES
1123   04EE             ;
1124   04EE F7          PT1:            RST     RFINISH ;READY
1125   04EF             ;
1126   04EF C3 4E 05    PT2:            JP      QWHAT   ;ELSE SAY: "WHAT?"
1127   04F2             
1128   04F2 76          HALT:           HALT            ;HALT CPU (return to analyser)
1129   04F3             
1130   04F3             ;
1131   04F3             ;*************************************************************
1132   04F3             ;
1133   04F3             ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1134   04F3             ;
1135   04F3             ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1136   04F3             ;
1137   04F3             ; 'SUBDE' SUBSTRACTS DE FROM HL
1138   04F3             ;
1139   04F3             ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1140   04F3             ; SIGN AND FLIP SIGN OF B.
1141   04F3             ;
1142   04F3             ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1143   04F3             ;
1144   04F3             ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1145   04F3             ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1146   04F3             ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1147   04F3             ;
1148   04F3 E5          DIVIDE:         PUSH    HL      ;*** DIVIDE ***
1149   04F4 6C                          LD      L,H     ;DIVIDE H BY DE
1150   04F5 26 00                       LD      H,0
1151   04F7 CD FE 04                    CALL    DV1
1152   04FA 41                          LD      B,C     ;SAVE RESULT IN B
1153   04FB 7D                          LD      A,L     ;(REMINDER+L)/DE
1154   04FC E1                          POP     HL
1155   04FD 67                          LD      H,A
1156   04FE 0E FF       DV1:            LD      C,0FFH  ;RESULT IN C
1157   0500 0C          DV2:            INC     C       ;DUMB ROUTINE
1158   0501 CD 08 05                    CALL    SUBDE   ;DIVIDE BY SUBTRACT
1159   0504 30 FA                       JR      NC,DV2  ;AND COUNT
1160   0506 19                          ADD     HL,DE
1161   0507 C9                          RET
1162   0508             
1163   0508 B7          SUBDE:          OR      A       ;CLR CY
1164   0509 ED 52                       SBC     HL,DE
1165   050B C9                          RET
1166   050C             
1167   050C 7C          CHKSGN:         LD      A,H     ;*** CHKSGN ***
1168   050D B7                          OR      A       ;CHECK SIGN OF HL
1169   050E F0                          RET     P       ;IF HL >=0 RETURN
1170   050F             ;
1171   050F 7C          CHGSGN:         LD      A,H     ;*** CHGSGN ***
1172   0510 B5                          OR      L       ;CHECK VALUE OF HL
1173   0511 C8                          RET     Z       ;IF HL == 0 RETURN
1174   0512             ;
1175   0512 7C                          LD      A,H
1176   0513 F5                          PUSH    AF      ;SAVE SIGN
1177   0514 2F                          CPL             ;CHANGE SIGN OF HL
1178   0515 67                          LD      H,A
1179   0516 7D                          LD      A,L
1180   0517 2F                          CPL
1181   0518 6F                          LD      L,A
1182   0519 23                          INC     HL      ;HL = -HL
1183   051A F1                          POP     AF      ;GET ORIGINAL SIGN
1184   051B AC                          XOR     H       ;COMPARE
1185   051C F2 D0 00                    JP      P,QHOW  ;ERROR IF SIGN UNCHANGED (HL=$8000)
1186   051F 78                          LD      A,B     ;AND ALSO FLIP B
1187   0520 EE 80                       XOR     80H
1188   0522 47                          LD      B,A
1189   0523 C9                          RET
1190   0524             
1191   0524 7C          CKHLDE:         LD      A,H
1192   0525 AA                          XOR     D       ;SAME SIGN?
1193   0526 F2 2A 05                    JP      P,CK1   ;YES, COMPARE
1194   0529 EB                          EX      DE,HL   ;NO, XCH AND COMP
1195   052A E7          CK1:            RST     RCOMP
1196   052B C9                          RET
1197   052C             ;
1198   052C             ;*************************************************************
1199   052C             ;
1200   052C             ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1201   052C             ;
1202   052C             ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1203   052C             ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1204   052C             ; TO THAT VALUE.
1205   052C             ;
1206   052C             ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1207   052C             ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1208   052C             ; NEXT LINE AND CONTINUE FROM THERE.
1209   052C             ;
1210   052C             ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1211   052C             ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1212   052C             ;
1213   052C             ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1214   052C             ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1215   052C             ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1216   052C             ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1217   052C             ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1218   052C             ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1219   052C             ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1220   052C             ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1221   052C             ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1222   052C             ;
1223   052C             ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1224   052C             ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1225   052C             ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1226   052C             ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1227   052C             ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1228   052C             ;
1229   052C FF          SETVAL:         RST     RTSTV   ;*** SETVAL ***
1230   052D 38 1F                       JR      C,QWHAT ;"WHAT?" NO VARIABLE
1231   052F E5                          PUSH    HL      ;SAVE ADDRESS OF VAR.
1232   0530 CF                          TSTCH('=',QWHAT)  ;PASS "=" SIGN
1232   0531 3D          
1232   0532 1B          
1233   0533 DF                          RST     REXPR   ;EVALUATE EXPR.
1234   0534 44                          LD      B,H     ;VALUE IS IN BC NOW
1235   0535 4D                          LD      C,L
1236   0536 E1                          POP     HL      ;GET ADDRESS
1237   0537 71                          LD      (HL),C  ;SAVE VALUE
1238   0538 23                          INC     HL
1239   0539 70                          LD      (HL),B
1240   053A C9                          RET
1241   053B             
1242   053B CF          FIN:            TSTCH(';',FI1)  ;*** FIN ***
1242   053C 3B          
1242   053D 04          
1243   053E F1                          POP     AF      ;";", PURGE RET. ADDR.
1244   053F C3 B8 01                    JP      RUNSML  ;CONTINUE SAME LINE
1245   0542 CF          FI1:            TSTCH(CR,FI2)   ;NOT ";", IS IT CR?
1245   0543 0D          
1245   0544 04          
1246   0545 F1                          POP     AF      ;YES, PURGE RET. ADDR.
1247   0546 C3 A8 01                    JP      RUNNXL  ;RUN NEXT LINE
1248   0549 C9          FI2:            RET             ;ELSE RETURN TO CALLER
1249   054A             
1250   054A EF          ENDCHK:         RST     RIGNBLK ;IGNBLK
1251   054B FE 0D                       CP      CR      ;END WITH CR?
1252   054D C8                          RET     Z       ;OK, ELSE SAY: "WHAT?"
1253   054E             ;
1254   054E D5          QWHAT:          PUSH    DE      ;*** QWHAT ***
1255   054F 11 E9 00    AWHAT:          LD      DE,WHAT ;*** AWHAT ***
1256   0552 97          ERROR:          SUB     A       ;*** ERROR ***
1257   0553 CD E5 05                    CALL    PRTSTG  ;PRINT 'WHAT?', 'HOW?'
1258   0556 D1                          POP     DE      ;OR 'SORRY'
1259   0557 1A                          LD      A,(DE)  ;SAVE THE CHARACTER
1260   0558 F5                          PUSH    AF      ;AT WHERE OLD DE ->
1261   0559 97                          SUB     A       ;AND PUT A 0 THERE
1262   055A 12                          LD      (DE),A
1263   055B 2A B8 0E                    LD      HL,(CURRNT)     ;GET CURRENT LINE #
1264   055E E5                          PUSH    HL
1265   055F 7E                          LD      A,(HL)  ;CHECK THE VALUE
1266   0560 23                          INC     HL
1267   0561 B6                          OR      (HL)
1268   0562 D1                          POP     DE
1269   0563 CA 1E 01                    JP      Z,WSTART ;IF ZERO, JUST RESTART
1270   0566 7E                          LD      A,(HL)  ;IF NEGATIVE,
1271   0567 B7                          OR      A
1272   0568 FA 34 03                    JP      M,INPERR        ;REDO INPUT
1273   056B CD 7E 06                    CALL    PRTLN   ;ELSE PRINT THE LINE
1274   056E 1B                          DEC     DE      ;UPTO WHERE THE 0 IS
1275   056F F1                          POP     AF      ;RESTORE THE CHARACTER
1276   0570 12                          LD      (DE),A
1277   0571 3E 3F                       LD      A,'?'   ;PRINT A "?"
1278   0573 D7                          RST     ROUTC
1279   0574 97                          SUB     A       ;AND THE REST OF THE
1280   0575 CD E5 05                    CALL    PRTSTG  ;LINE
1281   0578 C3 1E 01                    JP      WSTART  ;THEN RESTART
1282   057B             ;
1283   057B D5          QSORRY:         PUSH    DE      ;*** QSORRY ***
1284   057C 11 EF 00    ASORRY:         LD      DE,SORRY        ;*** ASORRY ***
1285   057F 18 D1                       JR      ERROR
1286   0581             
1287   0581             ;
1288   0581             ;*************************************************************
1289   0581             ;
1290   0581             ; *** GETLN *** FNDLN (& FRIENDS) ***
1291   0581             ;
1292   0581             ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1293   0581             ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1294   0581             ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1295   0581             ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1296   0581             ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1297   0581             ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1298   0581             ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1299   0581             ;
1300   0581             ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1301   0581             ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1302   0581             ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1303   0581             ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1304   0581             ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1305   0581             ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1306   0581             ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1307   0581             ; LINE, FLAGS ARE C & NZ.
1308   0581             ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1309   0581             ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1310   0581             ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1311   0581             ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1312   0581             ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1313   0581             ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1314   0581             ;
1315   0581 D7          GETLN:          RST     ROUTC   ;*** GETLN ***
1316   0582 11 CC 0E                    LD      DE,BUFFER       ;PROMPT AND INIT.
1317   0585 CD FB 00    GL1:            CALL    CHKIO   ;CHECK KEYBOARD
1318   0588 28 FB                       JR      Z,GL1   ;NO INPUT, WAIT
1319   058A FE 08                       CP      BS      ;BS, DELETE LAST CHARACTER?
1320   058C 28 1A                       JR      Z,GL3   ;YES
1321   058E FE 7F                       CP      DEL     ;DEL, DELETE LAST CHARACTER?
1322   0590 28 16                       JR      Z,GL3   ;YES
1323   0592 D7                          RST     ROUTC   ;INPUT, ECHO BACK
1324   0593 FE 0A                       CP      LF      ;IGNORE LF
1325   0595 28 EE                       JR      Z,GL1
1326   0597 B7                          OR      A       ;IGNORE NULL
1327   0598 28 EB                       JR      Z,GL1
1328   059A FE 18                       CP      CAN     ;^X, DELETE THE WHOLE LINE?
1329   059C 28 1B                       JR      Z,GL4   ;YES
1330   059E 12                          LD      (DE),A  ;ELSE SAVE INPUT
1331   059F 13                          INC     DE      ;AND BUMP POINTER
1332   05A0 FE 0D                       CP      CR      ;WAS IT CR?
1333   05A2 C8                          RET     Z       ;YES, END OF LINE
1334   05A3 7B                          LD      A,E     ;ELSE MORE FREE ROOM?
1335   05A4 FE 1C                       CP      BUFEND & 0FFH
1336   05A6 20 DD                       JR      NZ,GL1  ;YES, GET NEXT INPUT
1337   05A8 7B          GL3:            LD      A,E     ;DELETE LAST CHARACTER
1338   05A9 FE CC                       CP      BUFFER & 0FFH   ;BUT DO WE HAVE ANY?
1339   05AB 28 0C                       JR      Z,GL4   ;NO, REDO WHOLE LINE
1340   05AD 1B                          DEC     DE      ;YES, BACKUP POINTER
1341   05AE 3E 08                       LD      A,BS    ;AND ECHO A BACKSPACE
1342   05B0 D7                          RST     ROUTC
1343   05B1 3E 20                       LD      A,' '   ;AND ECHO A BLANK
1344   05B3 D7                          RST     ROUTC
1345   05B4 3E 08                       LD      A,BS    ;AND ECHO A BACKSPACE
1346   05B6 D7                          RST     ROUTC
1347   05B7 18 CC                       JR      GL1     ;GO GET NEXT INPUT
1348   05B9 CD 0E 00    GL4:            CALL    CRLF    ;REDO ENTIRE LINE
1349   05BC 3E 5E                       LD      A,'^'   ;CR, LF AND UP-ARROW
1350   05BE 18 C1                       JR      GETLN
1351   05C0             ;
1352   05C0 7C          FNDLN:          LD      A,H     ;*** FNDLN ***
1353   05C1 B7                          OR      A       ;CHECK SIGN OF HL
1354   05C2 FA D0 00                    JP      M,QHOW  ;IT CANNOT BE -
1355   05C5 11 00 08                    LD      DE,TXTBGN       ;INIT TEXT POINTER
1356   05C8             ;
1357   05C8             FNDLP:          ;*** FDLNP ***
1358   05C8 E5          FL1:            PUSH    HL      ;SAVE LINE #
1359   05C9 2A B6 0E                    LD      HL,(TXTUNF)     ;CHECK IF WE PASSED END
1360   05CC 2B                          DEC     HL
1361   05CD E7                          RST     RCOMP
1362   05CE E1                          POP     HL      ;GET LINE # BACK
1363   05CF D8                          RET     C       ;C,NZ PASSED END
1364   05D0 1A                          LD      A,(DE)  ;WE DID NOT, GET BYTE 1
1365   05D1 95                          SUB     L       ;IS THIS THE LINE?
1366   05D2 47                          LD      B,A     ;COMPARE LOW ORDER
1367   05D3 13                          INC     DE
1368   05D4 1A                          LD      A,(DE)  ;GET BYTE 2
1369   05D5 9C                          SBC     A,H     ;COMPARE HIGH ORDER
1370   05D6 38 04                       JR      C,FL2   ;NO, NOT THERE YET
1371   05D8 1B                          DEC     DE      ;ELSE WE EITHER FOUND
1372   05D9 B0                          OR      B       ;IT, OR IT IS NOT THERE
1373   05DA C9                          RET     ;NC,Z:FOUND, NC,NZ:NO
1374   05DB             ;
1375   05DB             FNDNXT:         ;*** FNDNXT ***
1376   05DB 13                          INC     DE      ;FIND NEXT LINE
1377   05DC 13          FL2:            INC     DE      ;JUST PASSED BYTE 1 & 2
1378   05DD             ;
1379   05DD 1A          FNDSKP:         LD      A,(DE)  ;*** FNDSKP ***
1380   05DE FE 0D                       CP      CR      ;TRY TO FIND CR
1381   05E0 20 FA                       JR      NZ,FL2  ;KEEP LOOKING
1382   05E2 13                          INC     DE      ;FOUND CR, SKIP OVER
1383   05E3 18 E3                       JR      FL1     ;CHECK IF END OF TEXT
1384   05E5             ;
1385   05E5             ;*************************************************************
1386   05E5             ;
1387   05E5             ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1388   05E5             ;
1389   05E5             ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1390   05E5             ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1391   05E5             ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1392   05E5             ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1393   05E5             ;
1394   05E5             ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1395   05E5             ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1396   05E5             ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1397   05E5             ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1398   05E5             ; HACK AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER
1399   05E5             ;      IS SKIPPED OVER (SHALL BE A "JP" INSTRUCTION).
1400   05E5             ;
1401   05E5             ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1402   05E5             ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1403   05E5             ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1404   05E5             ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1405   05E5             ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1406   05E5             ;
1407   05E5             ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1408   05E5             ;
1409   05E5 47          PRTSTG:         LD      B,A     ;*** PRTSTG ***
1410   05E6 1A          PS1:            LD      A,(DE)  ;GET A CHARACTER
1411   05E7 13                          INC     DE      ;BUMP POINTER
1412   05E8 B8                          CP      B       ;SAME AS OLD A?
1413   05E9 C8                          RET     Z       ;YES, RETURN
1414   05EA D7                          RST     ROUTC   ;ELSE PRINT IT
1415   05EB FE 0D                       CP      CR      ;WAS IT A CR?
1416   05ED 20 F7                       JR      NZ,PS1  ;NO, NEXT
1417   05EF C9                          RET             ;YES, RETURN
1418   05F0             ;
1419   05F0 CF          QTSTG:          TSTCH($22,QT3)  ;*** QTSTG ***
1419   05F1 22          
1419   05F2 0F          
1420   05F3 3E 22                       LD      A,22H   ;IT IS A '"'
1421   05F5 CD E5 05    QT1:            CALL    PRTSTG  ;PRINT UNTIL ANOTHER
1422   05F8 FE 0D       QT1A:           CP      CR      ;WAS LAST ONE A CR?
1423   05FA E1                          POP     HL       ; HACK RETURN ADDRESS
1424   05FB CA A8 01                    JP      Z,RUNNXL ; WAS CR, RUN NEXT LINE
1425   05FE 23          QT2:            INC     HL       ; !! SKIP 3 BYTES ON RETURN
1426   05FF 23                          INC     HL       ; !! -> AFTER "CALL QTSTG"
1427   0600 23                          INC     HL       ; !!    MUST BE "JP .."
1428   0601 E9                          JP      (HL)     ; !! RETURN AFTER THIS "JP"
1429   0602             ;
1430   0602 CF          QT3:            TSTCH($27,QT4)  ;IS IT A "'"?
1430   0603 27          
1430   0604 04          
1431   0605 3E 27                       LD      A,27H   ;YES, DO THE SAME
1432   0607 18 EC                       JR      QT1     ;AS IN '"'
1433   0609             ;
1434   0609 CF          QT4:            TSTCH($5F,QT5)  ;IS IT UNDERLINE?
1434   060A 5F          
1434   060B 06          
1435   060C 3E 8D                       LD      A,08DH  ;YES, CR WITHOUT LF
1436   060E D7                          RST     ROUTC
1437   060F E1                          POP     HL      ;HACK RETURN ADDRESS
1438   0610 18 EC                       JR      QT2
1439   0612             ;
1440   0612 CF          QT5:            TSTCH(5EH,QT6)  ;RST 1, is it '^'?
1440   0613 5E          
1440   0614 08          
1441   0615 1A                          LD      A,(DE)  ;CHR
1442   0616 EE 40                       XOR     40H     ;CONVERT TO CTRL
1443   0618 D7                          RST     ROUTC
1444   0619 1A                          LD      A,(DE)  ;RESTORE CHR
1445   061A 13                          INC     DE
1446   061B 18 DB                       JR      QT1A
1447   061D C9          QT6:            RET             ;NONE OF ABOVE
1448   061E             
1449   061E             PRTNUM:                         ;*** PRINT NUMBER IN HL ***
1450   061E 3A B5 0E                    LD      A,(PNBASE)      ;GET NUMBER BASE
1451   0621 B7                          OR      A
1452   0622 28 09                       JR      Z,PN0   ;0: DEFAULT DEC
1453   0624 FE 10                       CP      16      ;HEX NUMBER?
1454   0626 20 10                       JR      NZ,PN1  ;NO
1455   0628 06 24                       LD      B,'$'   ;PRINT LEADING '$'
1456   062A 0D                          DEC     C       ;'$' TAKES SPACE
1457   062B 18 0B                       JR      PN1     ;HEX IS UNSIGNED
1458   062D 06 00       PN0:            LD      B,0     ;NO PREFIX YET
1459   062F CD 0C 05                    CALL    CHKSGN  ;CHECK SIGN
1460   0632 F2 38 06                    JP      P,PN1   ;NO SIGN
1461   0635 06 2D                       LD      B,'-'   ;B=SIGN
1462   0637 0D                          DEC     C       ;'-' TAKES SPACE
1463   0638 D5          PN1:            PUSH    DE
1464   0639 3A B5 0E                    LD      A,(PNBASE)
1465   063C B7                          OR      A       ;DEFAULT DECIMAL?
1466   063D 20 02                       JR      NZ,PN1A
1467   063F 3E 0A                       LD      A,10
1468   0641 5F          PN1A:           LD      E,A
1469   0642 AF                          XOR     A
1470   0643 57                          LD      D,A
1471   0644 D5                          PUSH    DE      ;SAVE AS A FLAG
1472   0645 0D                          DEC     C       ;C=SPACES
1473   0646 C5                          PUSH    BC      ;SAVE SIGN & SPACE
1474   0647 CD F3 04    PN2:            CALL    DIVIDE  ;DIVIDE HL BY NUMBER BASE
1475   064A 78                          LD      A,B     ;RESULT 0?
1476   064B B1                          OR      C
1477   064C 28 07                       JR      Z,PN3   ;YES, WE GOT ALL
1478   064E E3                          EX      (SP),HL ;NO, SAVE REMAINDER
1479   064F 2D                          DEC     L       ;AND COUNT SPACE
1480   0650 E5                          PUSH    HL      ;HL IS OLD BC
1481   0651 60                          LD      H,B     ;MOVE RESULT TO BC
1482   0652 69                          LD      L,C
1483   0653 18 F2                       JR      PN2     ;AND DIVIDE AGAIN
1484   0655             ;
1485   0655 C1          PN3:            POP     BC      ;WE GOT ALL DIGITS IN
1486   0656 0D          PN4:            DEC     C       ;THE STACK
1487   0657 79                          LD      A,C     ;LOOK AT SPACE COUNT
1488   0658 B7                          OR      A
1489   0659 FA 61 06                    JP      M,PN5   ;NO LEADING BLANKS
1490   065C 3E 20                       LD      A,' '   ;LEADING BLANKS
1491   065E D7                          RST     ROUTC
1492   065F 18 F5                       JR      PN4     ;MORE?
1493   0661 78          PN5:            LD      A,B     ;PRINT SIGN OR '$'
1494   0662 B7                          OR      A
1495   0663 C4 10 00                    CALL    NZ,ROUTC
1496   0666 5D                          LD      E,L     ;LAST REMAINDER IN E
1497   0667 3A B5 0E    PN6:            LD      A,(PNBASE)      ;GET NUMBER BASE
1498   066A B7                          OR      A       ;DEFAULT DECIMAL?
1499   066B 20 02                       JR      NZ,PN6A
1500   066D 3E 0A                       LD      A,10
1501   066F BB          PN6A:           CP      E       ;IT IS FLAG FOR NO MORE
1502   0670 7B                          LD      A,E     ;CHECK DIGIT IN E
1503   0671 D1                          POP     DE
1504   0672 C8                          RET     Z       ;IF SO, RETURN
1505   0673 FE 0A                       CP      10      ;0-9? < A hex?
1506   0675 38 02                       JR      C,PN7   ;Skip Add 7
1507   0677 C6 07                       ADD     A,'A'-'0'-10    ;Bring it up to ASCII A-F
1508   0679 C6 30       PN7:            ADD     A,'0'   ;ELSE CONVERT TO ASCII
1509   067B D7                          RST     ROUTC   ;AND PRINT THE DIGIT
1510   067C 18 E9                       JR      PN6     ;GO BACK FOR MORE
1511   067E             
1512   067E AF          PRTLN:          XOR     A       ;0 -> DEFAULT BASE 10 SIGNED
1513   067F 32 B5 0E                    LD      (PNBASE),A      ;FOR PRTNUM
1514   0682 1A                          LD      A,(DE)
1515   0683 6F                          LD      L,A     ;LOW ORDER LINE #
1516   0684 13                          INC     DE
1517   0685 1A                          LD      A,(DE)  ;HIGH ORDER
1518   0686 67                          LD      H,A
1519   0687 13                          INC     DE
1520   0688 0E 04                       LD      C,4     ;PRINT 4 DIGIT LINE #
1521   068A CD 1E 06                    CALL    PRTNUM
1522   068D 3E 20                       LD      A,' '   ;FOLLOWED BY A BLANK
1523   068F D7                          RST     ROUTC
1524   0690 97                          SUB     A       ;AND THEN THE NEXT
1525   0691 CD E5 05                    CALL    PRTSTG
1526   0694 C9                          RET
1527   0695             ;
1528   0695             ;*************************************************************
1529   0695             ;
1530   0695             ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1531   0695             ;
1532   0695             ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1533   0695             ; DE = HL
1534   0695             ;
1535   0695             ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1536   0695             ; UNTIL DE = BC
1537   0695             ;
1538   0695             ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1539   0695             ; STACK
1540   0695             ;
1541   0695             ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1542   0695             ; STACK
1543   0695             ;
1544   0695 E7          MVUP:           RST     RCOMP   ;*** MVUP ***
1545   0696 C8                          RET     Z       ;DE = HL, RETURN
1546   0697 1A                          LD      A,(DE)  ;GET ONE BYTE
1547   0698 02                          LD      (BC),A  ;MOVE IT
1548   0699 13                          INC     DE      ;INCREASE BOTH POINTERS
1549   069A 03                          INC     BC
1550   069B 18 F8                       JR      MVUP    ;UNTIL DONE
1551   069D             ;
1552   069D 78          MVDOWN:         LD      A,B     ;*** MVDOWN ***
1553   069E 92                          SUB     D       ;TEST IF DE = BC
1554   069F 20 03                       JR      NZ,MD1  ;NO, GO MOVE
1555   06A1 79                          LD      A,C     ;MAYBE, OTHER BYTE?
1556   06A2 93                          SUB     E
1557   06A3 C8                          RET     Z       ;YES, RETURN
1558   06A4 1B          MD1:            DEC     DE      ;ELSE MOVE A BYTE
1559   06A5 2B                          DEC     HL      ;BUT FIRST DECREASE
1560   06A6 1A                          LD      A,(DE)  ;BOTH POINTERS AND
1561   06A7 77                          LD      (HL),A  ;THEN DO IT
1562   06A8 18 F3                       JR      MVDOWN  ;LOOP BACK
1563   06AA             ;
1564   06AA C1          POPA:           POP     BC      ;BC = RETURN ADDR.
1565   06AB E1                          POP     HL      ;RESTORE LOPVAR, BUT
1566   06AC 22 C0 0E                    LD      (LOPVAR),HL     ;=0 MEANS NO MORE
1567   06AF 7C                          LD      A,H
1568   06B0 B5                          OR      L
1569   06B1 28 10                       JR      Z,PP1   ;YEP, GO RETURN
1570   06B3 E1                          POP     HL      ;NOP, RESTORE OTHERS
1571   06B4 22 C2 0E                    LD      (LOPINC),HL
1572   06B7 E1                          POP     HL
1573   06B8 22 C4 0E                    LD      (LOPLMT),HL
1574   06BB E1                          POP     HL
1575   06BC 22 C6 0E                    LD      (LOPLN),HL
1576   06BF E1                          POP     HL
1577   06C0 22 C8 0E                    LD      (LOPPT),HL
1578   06C3 C5          PP1:            PUSH    BC      ;BC = RETURN ADDR.
1579   06C4 C9                          RET
1580   06C5             ;
1581   06C5 21 1D 0F    PUSHA:          LD      HL,STKLMT       ;*** PUSHA ***
1582   06C8 CD 0F 05                    CALL    CHGSGN
1583   06CB C1                          POP     BC      ;BC=RETURN ADDRESS
1584   06CC 39                          ADD     HL,SP   ;IS STACK NEAR THE TOP?
1585   06CD D2 7B 05                    JP      NC,QSORRY       ;YES, SORRY FOR THAT
1586   06D0 2A C0 0E                    LD      HL,(LOPVAR)     ;ELSE SAVE LOOP VAR'S
1587   06D3 7C                          LD      A,H     ;BUT IF LOPVAR IS 0
1588   06D4 B5                          OR      L       ;THAT WILL BE ALL
1589   06D5 28 13                       JR      Z,PU1
1590   06D7 2A C8 0E                    LD      HL,(LOPPT)      ;ELSE, MORE TO SAVE
1591   06DA E5                          PUSH    HL
1592   06DB 2A C6 0E                    LD      HL,(LOPLN)
1593   06DE E5                          PUSH    HL
1594   06DF 2A C4 0E                    LD      HL,(LOPLMT)
1595   06E2 E5                          PUSH    HL
1596   06E3 2A C2 0E                    LD      HL,(LOPINC)
1597   06E6 E5                          PUSH    HL
1598   06E7 2A C0 0E                    LD      HL,(LOPVAR)
1599   06EA E5          PU1:            PUSH    HL
1600   06EB C5                          PUSH    BC      ;BC = RETURN ADDR.
1601   06EC C9                          RET
1602   06ED             
1603   06ED             ;*************************************************************
1604   06ED             ;
1605   06ED             ; *** DIRECT *** EXEC *** TABLES ***
1606   06ED             ;
1607   06ED             ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1608   06ED             ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1609   06ED             ; OF CODE ACCORDING TO THE TABLE.
1610   06ED             ;
1611   06ED             ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1612   06ED             ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1613   06ED             ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1614   06ED             ; ALL DIRECT AND STATEMENT COMMANDS.
1615   06ED             ;
1616   06ED             ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1617   06ED             ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1618   06ED             ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1619   06ED             ;
1620   06ED             
1621   06ED 21 21 07    DIRECT:         LD      HL,TAB1-1       ;*** DIRECT ***
1622   06F0             ;
1623   06F0             EXEC:           ;*** EXEC ***
1624   06F0 EF          EX0:            RST     RIGNBLK ;IGNORE LEADING BLANKS
1625   06F1 D5                          PUSH    DE      ;SAVE POINTER
1626   06F2 1A          EX1:            LD      A,(DE)  ;IF FOUND '.' IN STRING
1627   06F3 13                          INC     DE      ;BEFORE ANY MISMATCH
1628   06F4 FE 2E                       CP      2EH     ;WE DECLARE A MATCH
1629   06F6 28 1C                       JR      Z,EX3
1630   06F8 FE 61                       CP      'a'     ;< 'a' ?
1631   06FA 38 06                       JR      C,EXN   ;NO ALPHA CHAR
1632   06FC FE 7B                       CP      'z'+1   ;> 'z'
1633   06FE 30 02                       JR      NC,EXN  ;NO ALPHA CHAR
1634   0700 E6 5F                       AND     5FH     ;MASK LOWER CASE TO UPPER CASE
1635   0702             EXN:
1636   0702 23                          INC     HL      ;HL->TABLE
1637   0703 BE                          CP      (HL)    ;IF MATCH, TEST NEXT
1638   0704 28 EC                       JR      Z,EX1
1639   0706 3E 7F                       LD      A,07FH  ;ELSE SEE IF BIT 7
1640   0708 1B                          DEC     DE      ;OF TABLE IS SET, WHICH
1641   0709 BE                          CP      (HL)    ;IS THE JUMP ADDR. (HI)
1642   070A 38 0E                       JR      C,EX5   ;C:YES, MATCHED
1643   070C 23          EX2:            INC     HL      ;NC:NO, FIND JUMP ADDR.
1644   070D BE                          CP      (HL)
1645   070E 30 FC                       JR      NC,EX2
1646   0710 23                          INC     HL      ;BUMP TO NEXT TAB. ITEM
1647   0711 D1                          POP     DE      ;RESTORE STRING POINTER
1648   0712 18 DC                       JR      EX0     ;TEST AGAINST NEXT ITEM
1649   0714 3E 7F       EX3:            LD      A,07FH  ;PARTIAL MATCH, FIND
1650   0716 23          EX4:            INC     HL      ;JUMP ADDR., WHICH IS
1651   0717 BE                          CP      (HL)    ;FLAGGED BY BIT 7
1652   0718 30 FC                       JR      NC,EX4
1653   071A 7E          EX5:            LD      A,(HL)  ;LOAD HL WITH THE JUMP
1654   071B 23                          INC     HL      ;ADDRESS FROM THE TABLE
1655   071C 6E                          LD      L,(HL)
1656   071D                                             ;ADDRESSES ARE BIG-ENDIAN
1657   071D                                             ;WITH MSB SET to 1
1658   071D             #IF             $ < 8000H
1659   071D E6 7F                       AND     7FH     ;MASK OFF HIGH ADDRESS BIT
1660   071F             #ENDIF
1661   071F 67                          LD      H,A
1662   0720 F1                          POP     AF      ;CLEAN UP THE GARBAGE
1663   0721 E9                          JP      (HL)    ;AND WE GO DO IT
1664   0722             ;
1665   0722             
1666   0722             ; THE TABLES CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1667   0722             ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1668   0722             ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1669   0722             ; BYTE SET TO 1.
1670   0722             ; This is done by the macro 'DWA'.
1671   0722             ; If the program is executed from an address < 0x8000
1672   0722             ; take care to mask this bit in program part 'EXEC'.
1673   0722             ;
1674   0722             ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.
1675   0722             ; IF THE STRING DOES NOT MATCH ANY OF THE OTHER ITEMS,
1676   0722             ; IT WILL MATCH THIS NULL ITEM AS DEFAULT.
1677   0722             
1678   0722             ;
1679   0722             TAB1:           ;DIRECT ONLY COMMANDS
1680   0722 4C 49 53 54                 .DB     "LIST"
1681   0726 81                          DWA(LIST)
1681   0727 CF          
1682   0728 52 55 4E                    .DB     "RUN"
1683   072B 81                          DWA(RUN)
1683   072C A2          
1684   072D 4E 45 57                    .DB     "NEW"
1685   0730 81                          DWA(NEW)
1685   0731 93          
1686   0732             ;
1687   0732             TAB2:           ;DIRECT OR PROGRAM STATEMENT
1688   0732 4E 45 58 54                 .DB     "NEXT"
1689   0736 82                          DWA(NEXT)
1689   0737 CB          
1690   0738 4C 45 54                    .DB     "LET"           ; can be omitted
1691   073B 83                          DWA(LET)
1691   073C 8D          
1692   073D 49 46                       .DB     "IF"
1693   073F 83                          DWA(IFF)
1693   0740 25          
1694   0741 47 4F 54 4F                 .DB     "GOTO"
1695   0745 81                          DWA(GOTO)
1695   0746 C1          
1696   0747 47 4F 53 55                 .DB     "GOSUB"
1696   074B 42 
1697   074C 82                          DWA(GOSUB)
1697   074D 37          
1698   074E 52 45 54 55                 .DB     "RETURN"
1698   0752 52 4E 
1699   0754 82                          DWA(RETURN)
1699   0755 57          
1700   0756 52 45 4D                    .DB     "REM"
1701   0759 83                          DWA(REM)
1701   075A 21          
1702   075B 46 4F 52                    .DB     "FOR"
1703   075E 82                          DWA(FOR)
1703   075F 70          
1704   0760 49 4E 50 55                 .DB     "INPUT"         ; wait for KBD input
1704   0764 54 
1705   0765 83                          DWA(INPUT)
1705   0766 3E          
1706   0767 50 52 49 4E                 .DB     "PRINT"
1706   076B 54 
1707   076C 81                          DWA(PRINT)
1707   076D E6          
1708   076E 3F                          .DB     "?"             ; short for PRINT
1709   076F 81                          DWA(PRINT)
1709   0770 E6          
1710   0771 50 55 54                    .DB     "PUT"           ; PUT ADDR, VAL, VAL,...
1711   0774 84                          DWA(PUT)
1711   0775 DE          
1712   0776 53 54 4F 50                 .DB     "STOP"          ; warm start
1713   077A 81                          DWA(STOP)
1713   077B 9C          
1714   077C 48 41 4C 54                 .DB     "HALT"          ; HALT CPU (return to analyser)
1715   0780 84                          DWA(HALT)
1715   0781 F2          
1716   0782 83                          DWA(DEFLT)              ;END OF LIST
1716   0783 88          
1717   0784             ;
1718   0784             TAB4:           ;FUNCTIONS AND CONSTANTS
1719   0784 52 4E 44                    .DB     "RND"           ;funct RND(RANGE)
1720   0787 84                          DWA(RND)
1720   0788 85          
1721   0789 41 42 53                    .DB     "ABS"           ;funct ABS(VALUE)
1722   078C 84                          DWA(ABS)
1722   078D B3          
1723   078E 47 45 54                    .DB     "GET"           ;funct GET(ADR) get byte from memory
1724   0791 84                          DWA(GET)
1724   0792 C9          
1725   0793 55 53 52                    .DB     "USR"           ;funct USR(PARA) call usr funct at TOP
1726   0796 84                          DWA(USR)                ; and return a result in HL
1726   0797 D0          
1727   0798 53 49 5A 45                 .DB     "SIZE"          ;const SIZE - no parantesis, get free mem
1728   079C 84                          DWA(SIZE)
1728   079D BC          
1729   079E 52 41 4D                    .DB     "RAM"           ;const RAM - no par., get TEXT begin
1730   07A1 84                          DWA(RAM)
1730   07A2 D6          
1731   07A3 54 4F 50                    .DB     "TOP"           ;const TOP - no par., get TEXT TOP
1732   07A6 84                          DWA(TOP)
1732   07A7 DA          
1733   07A8 84                          DWA(XP40)               ;END OF LIST
1733   07A9 6C          
1734   07AA             ;
1735   07AA             TAB5:           ;"TO" IN "FOR"
1736   07AA 54 4F                       .DB     "TO"
1737   07AC 82                          DWA(FR1)
1737   07AD 80          
1738   07AE 85                          DWA(QWHAT)              ;END OF LIST
1738   07AF 4E          
1739   07B0             ;
1740   07B0             TAB6:           ;"STEP" IN "FOR"
1741   07B0 53 54 45 50                 .DB     "STEP"
1742   07B4 82                          DWA(FR2)
1742   07B5 8A          
1743   07B6 82                          DWA(FR3)                ;END OF LIST
1743   07B7 8D          
1744   07B8             ;
1745   07B8             TAB8:           ;RELATION OPERATORS
1746   07B8 3E 3D                       .DB     ">="
1747   07BA 83                          DWA(XP11)
1747   07BB 9C          
1748   07BC 21 3D                       .DB     "!="
1749   07BE 83                          DWA(XP12)
1749   07BF A2          
1750   07C0 23                          .DB     "#"
1751   07C1 83                          DWA(XP12)
1751   07C2 A2          
1752   07C3 3E                          .DB     ">"
1753   07C4 83                          DWA(XP13)
1753   07C5 A8          
1754   07C6 3D 3D                       .DB     "=="
1755   07C8 83                          DWA(XP15)
1755   07C9 B7          
1756   07CA 3D                          .DB     "="
1757   07CB 83                          DWA(XP15)
1757   07CC B7          
1758   07CD 3C 3D                       .DB     "<="
1759   07CF 83                          DWA(XP14)
1759   07D0 AF          
1760   07D1 3C                          .DB     "<"
1761   07D2 83                          DWA(XP16)
1761   07D3 BD          
1762   07D4 83                          DWA(XP17)               ;END OF REL OPERATOR LIST
1762   07D5 C3          
1763   07D6             ;
1764   07D6             LSTROM:                                 ;ALL ABOVE CAN BE ROM
1765   07D6             
1766   07D6             ; Check if the program code overflows the ROM size
1767   07D6             ;
1768   07D6~            #IF $ > RAMBGN
1769   07D6~                            .ECHO   "\n\n*** The ROM section is "
1770   07D6~                            .ECHO   $ - RAMBGN
1771   07D6~                            .ECHO   " bytes too long! ***\n\n\n"
1772   07D6             #ELSE
1773   07D6                             .ECHO   "ROM size: "
1774   07D6                             .ECHO   $
1775   07D6                             .ECHO   " bytes\n"
1776   07D6             #ENDIF
1777   07D6             ;
1778   07D6             ;
1779   07D6             ;*************************************************************
1780   07D6             
1781   07D6             
1782   0800                             .ORG            RAMBGN          ;HERE DOWN MUST BE RAM
1783   0800             
1784   0800             ;*************************************************************
1785   0800             ;
1786   0800             ;
1787   0800             TXTBGN:
1788   0800             ;
1789   0E00                             .ORG            RAMBGN+RAMSZE-$200
1790   0E00             ;
1791   0E00             TXTEND:         .EQU            $               ;TEXT SAVE AREA ENDS
1792   0E00                                                             ;VARIABLEs '@(0)', '@(1), @(2)
1793   0E00                                                             ;... stored top-down
1794   0E00                                                             ;i.e. &@(i) = TXTEND-2-2*i
1795   0E00             USRSPC:         .DS             128
1796   0E80             ;
1797   0E80             VARBGN:         .DS             2*26            ;VARIABLES 'A'..'Z'
1798   0EB4             OCSW:           .DS             1               ;SWITCH FOR OUTPUT
1799   0EB5             PNBASE:         .DS             1               ;BASE FOR PRTNUM
1800   0EB6             TXTUNF:         .DS             2               ;->UNFILLED TEXT AREA
1801   0EB8             CURRNT:         .DS             2               ;POINTS TO CURRENT LINE
1802   0EBA             STKGOS:         .DS             2               ;SAVES SP IN 'GOSUB'
1803   0EBC             VARNXT:         .DS             2               ;TEMP STORAGE
1804   0EBE             STKINP:         .DS             2               ;SAVES SP IN 'INPUT'
1805   0EC0             LOPVAR:         .DS             2               ;'FOR' LOOP SAVE AREA
1806   0EC2             LOPINC:         .DS             2               ;INCREMENT
1807   0EC4             LOPLMT:         .DS             2               ;LIMIT
1808   0EC6             LOPLN:          .DS             2               ;LINE NUMBER
1809   0EC8             LOPPT:          .DS             2               ;TEXT POINTER
1810   0ECA             RANPNT:         .DS             2               ;RANDOM NUMBER POINTER
1811   0ECC             BUFFER:         .DS             80              ;INPUT BUFFER
1812   0F1C             BUFEND:         .DS             1               ;BUFFER ENDS
1813   0F1D             STKLMT:         .DS             1               ;TOP LIMIT FOR STACK
1814   0F1E             ;
1815   1000                             .ORG            RAMBGN+RAMSZE   ;RAM END
1816   1000             STACK:          .EQU            $               ;STACK STARTS HERE
1817   1000             ;
1818   1000                             .END
