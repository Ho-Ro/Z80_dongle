0001   0000             ;Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
0002   0000             ;Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
0003   0000             ;Status bit for read in CHKIO changed to 0x02
0004   0000             ;Status bit for write in OUTC (actually OC3) changed to 0x01
0005   0000             ;Changed UART initialization parameters in INIT
0006   0000             ;Changed ORG statements at end of file to match system with 2K RAM
0007   0000             ;
0008   0000             ;2024-10-11 Ho-Ro:
0009   0000             ;Automatically converted from 8080 syntax to Z80 syntax:
0010   0000             ;https://hc-ddr.hucki.net/wiki/doku.php/cpm/8080_z80
0011   0000             ;Assembler: uz80as for Z80 as well as i8080 (uz80as --target=i8080)
0012   0000             ;Modified for use with Z80 dongle simulator
0013   0000             ;UART data port 1
0014   0000             ;UART status port 2
0015   0000             ;New:
0016   0000             ;Case insensitive input
0017   0000             ;PEEK and DEEK
0018   0000             ;PRINT modifier for hex out: PRINT %16,..
0019   0000             ;Hex numbers: $xxxx
0020   0000             ;2024-10-13 Ho-Ro:
0021   0000             ;build ROM version (2K ROM / 6.5K RAM) and RAM version (2K prog RAM / 4K free RAM)
0022   0000             ;change "SIZE" to "FREE" (free RAM), add command "RAM" (all RAM)
0023   0000             ;add command "HALT" (halts Z80, returns to dongle analyser program)
0024   0000             
0025   0000             ;*************************************************************
0026   0000             ;
0027   0000             ;                 TINY BASIC FOR INTEL 8080
0028   0000             ;                       VERSION 2.0
0029   0000             ;                     BY LI-CHEN WANG
0030   0000             ;                  MODIFIED AND TRANSLATED
0031   0000             ;                    TO INTEL MNEMONICS
0032   0000             ;                     BY ROGER RAUSKOLB
0033   0000             ;                      10 OCTOBER,1976
0034   0000             ;                        @COPYLEFT
0035   0000             ;                   ALL WRONGS RESERVED
0036   0000             ;
0037   0000             ;*************************************************************
0038   0000             ;
0039   0000             ; *** ZERO PAGE SUBROUTINES ***
0040   0000             ;
0041   0000             ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
0042   0000             ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
0043   0000             ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
0044   0000             ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
0045   0000             ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
0046   0000             ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
0047   0000             ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
0048   0000             ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
0049   0000             ;
0050   0000             
0051   0000             ; Memory map
0052   0000             ROMBGN          .EQU            $0000           ; Execution must start here
0053   0000             RAMBGN          .EQU            $0800           ; 2K ROM
0054   0000             
0055   0000~            #IFDEF          MAKE_ROM
0056   0000~            ; 2K CODE IN ROM and 6.5K DATA IN RAM
0057   0000~            RAMSZE          .EQU            $1A00
0058   0000             #ELSE
0059   0000             ; 2K CODE IN RAM & 4K DATA IN RAM
0060   0000             RAMSZE          .EQU            $1000
0061   0000             #ENDIF
0062   0000             
0063   0000             ; IO map
0064   0000             IODATA          .EQU            1
0065   0000             IOSTAT          .EQU            2
0066   0000             IO_RX_BIT       .EQU            $01
0067   0000             
0068   0000             ; Control character
0069   0000             BS              .EQU            08H             ; ^H, BACKSPACE
0070   0000             CR              .EQU            0DH             ; ^M, CARRIAGE RETURN
0071   0000             LF              .EQU            0AH             ; ^J, LINE FEED
0072   0000             CAN             .EQU            18H             ; ^X, CANCEL
0073   0000             DEL             .EQU            7FH             ; DELETE
0074   0000             
0075   0000             
0076   0000             ; Store a label address as BIG endian with bit A15 set
0077   0000             #DEFINE DWA(LABEL) .DB (LABEL >> 8) | $80 \ .DB (LABEL & $FF)
0078   0000             
0079   0000             ; if CHAR = A THEN JUMP RELATIVE TO LABEL
0080   0000             #DEFINE TSTC(CHAR,LABEL) RST RTSTC \ .DB CHAR \ .DB LABEL-$-1
0081   0000             
0082   0000             
0083   0000             .ORG            ROMBGN
0084   0000             
0085   0000 31 00 18    START:          LD      SP,STACK        ;*** COLD START ***
0086   0003 3E FF                       LD      A,0FFH
0087   0005 C3 DF 06                    JP      INIT
0088   0008             
0089   0008             RTSTC           .EQU    $       ;*** RST 1 @ $0008 ***
0090   0008 E3                          EX      (SP),HL
0091   0009 EF                          RST     RIGNBLK ;IGNORE BLANKS AND
0092   000A BE                          CP      (HL)    ;TEST CHARACTER
0093   000B C3 6F 00                    JP      TC1     ;REST OF THIS IS AT TC1
0094   000E             
0095   000E 3E 0D       CRLF:           LD      A,CR    ;*** CRLF ***
0096   0010             ;
0097   0010             ROUTC           .EQU    $       ;*** RST 2 @ $0010 ***
0098   0010 D3 01       OUTC:           OUT     (IODATA),A      ;Out to data port
0099   0012 FE 0D                       CP      CR      ;WAS IT CR?
0100   0014 C0                          RET     NZ      ;NO, FINISHED
0101   0015 C3 F4 06                    JP      OC1     ;REST OF THIS IS AT OC1
0102   0018             
0103   0018             REXPR           .EQU    $       ;*** RST 3 @ $0018 ***
0104   0018 CD BE 03    EXPR:           CALL    EXPR2
0105   001B E5                          PUSH    HL      ;EVALUATE AN EXPRESSION
0106   001C C3 7A 03                    JP      EXPR1   ;REST OF IT AT EXPR1
0107   001F 57          .DB             "W"
0108   0020             
0109   0020             RCOMP           .EQU    $       ;*** RST 4 @ $0020 ***
0110   0020 7C          COMP:           LD      A,H
0111   0021 BA                          CP      D       ;COMPARE HL WITH DE
0112   0022 C0                          RET     NZ      ;RETURN CORRECT C AND
0113   0023 7D                          LD      A,L     ;Z FLAGS
0114   0024 BB                          CP      E       ;BUT OLD A IS LOST
0115   0025 C9                          RET
0116   0026 41 4E       .DB             "AN"
0117   0028             
0118   0028             RIGNBLK         .EQU    $       ;*** RST 5 @ $0028 ***
0119   0028 1A          IGNBLK:         LD      A,(DE)
0120   0029 FE 20                       CP      20H     ;IGNORE BLANKS
0121   002B C0                          RET     NZ      ;IN TEXT (WHERE DE->)
0122   002C 13                          INC     DE      ;AND RETURN THE FIRST
0123   002D C3 28 00                    JP      IGNBLK  ;NON-BLANK CHAR. IN A
0124   0030             
0125   0030             RFINISH         .EQU    $       ;*** RST 6 @ $0030 ***
0126   0030 F1          FINISH:         POP     AF
0127   0031 CD 19 05                    CALL    FIN     ;CHECK END OF COMMAND
0128   0034 C3 2C 05                    JP      QWHAT   ;PRINT "WHAT?" IF WRONG
0129   0037 47          .DB             "G"
0130   0038             
0131   0038             RTSTV           .EQU    $       ;*** RST 7 @ $0038 ***
0132   0038 EF          TSTV:           RST     RIGNBLK ;IGNBLK
0133   0039 D6 40                       SUB     '@'     ;TEST VARIABLES
0134   003B D8                          RET     C       ;C: < '@', NOT A VARIABLE
0135   003C C2 58 00                    JP      NZ,TV1  ;NZ: NOT THE '@' ARRAY
0136   003F 13                          INC     DE      ;IT IS THE "@" ARRAY
0137   0040 CD 67 04                    CALL    PARN    ;@ SHOULD BE FOLLOWED
0138   0043 29                          ADD     HL,HL   ;BY (EXPR) AS ITS INDEX
0139   0044 DA D5 00                    JP      C,QHOW  ;IS INDEX TOO BIG (>0x7FFF)?
0140   0047 D5                          PUSH    DE      ;WILL IT OVERWRITE
0141   0048 EB                          EX      DE,HL   ;TEXT?
0142   0049 CD A6 04                    CALL    FREE    ;FIND SIZE OF FREE RAM
0143   004C E7                          RST     RCOMP   ;AND CHECK THAT
0144   004D DA 5A 05                    JP      C,ASORRY        ;IF SO, SAY "SORRY"
0145   0050 21 00 17                    LD      HL,ARRBGN       ;IF NOT GET ADDRESS
0146   0053 CD DF 04                    CALL    SUBDE   ;OF @(EXPR) AND PUT IT
0147   0056 D1                          POP     DE      ;IN HL (top-down from TXTEND)
0148   0057 C9                          RET             ;C FLAG IS CLEARED
0149   0058             ;
0150   0058                                             ; VARIABLES 'A'..'Z'
0151   0058 FE 21       TV1:            CP      21H     ;>='a'?
0152   005A DA 5F 00                    JP      C,TV2   ;NO
0153   005D D6 20                       SUB     20H     ;MAKE UPPER CASE
0154   005F FE 1B       TV2:            CP      1BH     ;<='Z'
0155   0061 3F                          CCF             ;IF NOT RETURN C FLAG
0156   0062 D8                          RET     C
0157   0063 13                          INC     DE      ;IT IS 'A' THROUGH 'Z'
0158   0064 21 02 17                    LD      HL,VARBGN       ;COMPUTE ADDRESS OF
0159   0067 07                          RLCA            ;THAT VARIABLE
0160   0068 85                          ADD     A,L     ;AND RETURN IT IN HL
0161   0069 6F                          LD      L,A     ;WITH C FLAG CLEARED
0162   006A 3E 00                       LD      A,0
0163   006C 8C                          ADC     A,H
0164   006D 67                          LD      H,A
0165   006E C9                          RET
0166   006F             
0167   006F             ;TSTC:          EX      (SP),HL ;*** TSTC OR RST 1 ***
0168   006F             ;               RST  RIGNBLK    ;THIS IS AT LOC. 8
0169   006F             ;               CMP     (HL)    ;AND THEN JUMP HERE
0170   006F 23          TC1:            INC     HL      ;COMPARE THE BYTE THAT
0171   0070 CA 7A 00                    JP      Z,TC2   ;FOLLOWS THE RST INST.
0172   0073 C5                          PUSH    BC      ;WITH THE TEXT (DE->)
0173   0074 4E                          LD      C,(HL)  ;IF NOT =, ADD THE 2ND
0174   0075 06 00                       LD      B,0     ;BYTE THAT FOLLOWS THE
0175   0077 09                          ADD     HL,BC   ;RST TO THE OLD PC
0176   0078 C1                          POP     BC      ;I.E., DO A RELATIVE
0177   0079 1B                          DEC     DE      ;JUMP IF NOT =
0178   007A 13          TC2:            INC     DE      ;IF =, SKIP THOSE BYTES
0179   007B 23                          INC     HL      ;AND CONTINUE
0180   007C E3                          EX      (SP),HL
0181   007D C9                          RET
0182   007E             
0183   007E 21 00 00    TSTNUM:         LD      HL,0    ;*** TSTNUM ***
0184   0081 44                          LD      B,H     ;TEST IF THE TEXT IS
0185   0082 EF                          RST     RIGNBLK ;A NUMBER
0186   0083 FE 24                       CP      '$'     ;HEX NUMBER?
0187   0085 CA AB 00                    JP      Z,TX1   ;YES
0188   0088 FE 30       TN1:            CP      '0'     ;IF NOT, RETURN 0 IN
0189   008A D8                          RET     C       ;B AND HL
0190   008B FE 3A                       CP      '9'+1   ;IF NUMBERS, CONVERT
0191   008D D0                          RET     NC      ;TO BINARY IN HL AND
0192   008E 3E F0                       LD      A,0F0H  ;SET B TO # OF DIGITS
0193   0090 A4                          AND     H       ;IF H>15, THERE IS NO
0194   0091 C2 D5 00                    JP      NZ,QHOW ;ROOM FOR NEXT DIGIT
0195   0094 04                          INC     B       ;B COUNTS # OF DIGITS
0196   0095 C5                          PUSH    BC
0197   0096 44                          LD      B,H     ;HL=10*HL+(NEW DIGIT)
0198   0097 4D                          LD      C,L
0199   0098 29                          ADD     HL,HL   ; 2*HL
0200   0099 29                          ADD     HL,HL   ; 4*HL
0201   009A 09                          ADD     HL,BC   ; 5*HL
0202   009B 29                          ADD     HL,HL   ;10*HL
0203   009C 1A                          LD      A,(DE)  ;AND (DIGIT) IS FROM
0204   009D 13                          INC     DE      ;STRIPPING THE ASCII
0205   009E E6 0F                       AND     0FH     ;CODE
0206   00A0 85                          ADD     A,L
0207   00A1 6F                          LD      L,A
0208   00A2 3E 00                       LD      A,0
0209   00A4 8C                          ADC     A,H
0210   00A5 67                          LD      H,A
0211   00A6 C1                          POP     BC
0212   00A7 1A                          LD      A,(DE)  ;DO THIS DIGIT AFTER
0213   00A8 F2 88 00                    JP      P,TN1   ;DIGIT. S SAYS OVERFLOW
0214   00AB             
0215   00AB 13          TX1:            INC     DE      ;SKIP TO NEXT HEX
0216   00AC 1A                          LD      A,(DE)  ;GET HEX DIGIT
0217   00AD FE 30                       CP      '0'     ;< '0'
0218   00AF D8                          RET     C       ;ERROR
0219   00B0 FE 3A                       CP      '9'+1   ;<= '9'
0220   00B2 DA BF 00                    JP      C,TX2   ;OK '0'..'9'
0221   00B5 FE 41                       CP      'A'     ;< 'A'
0222   00B7 D8                          RET     C       ;ERROR, >'9' && < 'A'
0223   00B8 E6 5F                       AND     5FH     ;CONVERT ALPHA TO UPPER
0224   00BA FE 47                       CP      'F'+1   ;> 'F'
0225   00BC D0                          RET     NC      ;ERROR
0226   00BD D6 07                       SUB     'A'-'0'-10      ;SKIP GAP '9' -> 'A'
0227   00BF E6 0F       TX2:            AND     0FH     ;GET HEX CODE 0..F
0228   00C1 C5                          PUSH    BC
0229   00C2 47                          LD      B,A     ;SAVE HEX CODE
0230   00C3 3E F0                       LD      A,0F0H  ;IF H>15
0231   00C5 A4                          AND     H       ;THERE IS NO ROOM
0232   00C6 78                          LD      A,B
0233   00C7 C1                          POP     BC
0234   00C8 C2 D5 00                    JP      NZ,QHOW ;FOR NEXT DIGIT
0235   00CB             
0236   00CB 04                          INC     B       ;B COUNTS # OF DIGITS
0237   00CC 29                          ADD     HL,HL   ;2*HL
0238   00CD 29                          ADD     HL,HL   ;4*HL
0239   00CE 29                          ADD     HL,HL   ;8*HL
0240   00CF 29                          ADD     HL,HL   ;16*HL
0241   00D0 B5                          OR      L       ;PUT HEX CODE INTO
0242   00D1 6F                          LD      L,A     ;THE 4 LSB OF HL
0243   00D2                             ;MOV  A,H
0244   00D2                             ;ORA  A
0245   00D2 C3 AB 00                    JP      TX1     ;DIGIT AFTER DIGIT
0246   00D5             
0247   00D5 D5          QHOW:           PUSH    DE      ;*** ERROR "HOW?" ***
0248   00D6 11 DC 00    AHOW:           LD      DE,HOW
0249   00D9 C3 30 05                    JP      ERROR
0250   00DC             
0251   00DC 48 4F 57 3F HOW:            .DB             "HOW?"
0252   00E0 0D          .DB             CR
0253   00E1             
0254   00E1 4F 4B       OK:             .DB             "OK"
0255   00E3 0D          .DB             CR
0256   00E4             
0257   00E4 57 48 41 54 WHAT:           .DB             "WHAT?"
0257   00E8 3F 
0258   00E9 0D          .DB             CR
0259   00EA             
0260   00EA 53 4F 52 52 SORRY:          .DB             "SORRY"
0260   00EE 59 
0261   00EF 0D          .DB             CR
0262   00F0             
0263   00F0             ;*************************************************************
0264   00F0             ;
0265   00F0             ; *** MAIN ***
0266   00F0             ;
0267   00F0             ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
0268   00F0             ; AND STORES IT IN THE MEMORY.
0269   00F0             ;
0270   00F0             ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
0271   00F0             ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
0272   00F0             ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
0273   00F0             ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
0274   00F0             ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
0275   00F0             ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
0276   00F0             ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
0277   00F0             ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
0278   00F0             ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
0279   00F0             ;
0280   00F0             ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
0281   00F0             ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
0282   00F0             ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
0283   00F0             ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
0284   00F0             ;
0285   00F0             ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
0286   00F0             ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
0287   00F0             ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
0288   00F0             ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
0289   00F0             ;
0290   00F0             ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
0291   00F0             ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
0292   00F0             ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
0293   00F0             ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
0294   00F0             ;
0295   00F0 31 00 18    RSTART:         LD      SP,STACK
0296   00F3 CD 0E 00    ST1:            CALL    CRLF    ;AND JUMP TO HERE
0297   00F6 11 E1 00                    LD      DE,OK   ;DE->STRING
0298   00F9 97                          SUB     A       ;A=0
0299   00FA CD D1 05                    CALL    PRTSTG  ;PRINT STRING UNTIL CR
0300   00FD 21 04 01                    LD      HL,ST2+1        ;LITERAL 0
0301   0100 22 3A 17                    LD      (CURRNT),HL     ;CURRENT->LINE # = 0
0302   0103 21 00 00    ST2:            LD      HL,0
0303   0106 22 42 17                    LD      (LOPVAR),HL
0304   0109 22 3C 17                    LD      (STKGOS),HL
0305   010C 3E 3E       ST3:            LD      A,'>'   ;PROMPT '>' AND
0306   010E CD 60 05                    CALL    GETLN   ;READ A LINE
0307   0111 D5                          PUSH    DE      ;DE->END OF LINE
0308   0112 11 4E 17                    LD      DE,BUFFER       ;DE->BEGINNING OF LINE
0309   0115 CD 7E 00                    CALL    TSTNUM  ;TEST IF IT IS A NUMBER
0310   0118 EF                          RST     RIGNBLK
0311   0119 7C                          LD      A,H     ;HL=VALUE OF THE # OR
0312   011A B5                          OR      L       ;0 IF NO # WAS FOUND
0313   011B C1                          POP     BC      ;BC->END OF LINE
0314   011C CA BF 07                    JP      Z,DIRECT
0315   011F 1B                          DEC     DE      ;BACKUP DE AND SAVE
0316   0120 7C                          LD      A,H     ;VALUE OF LINE # THERE
0317   0121 12                          LD      (DE),A
0318   0122 1B                          DEC     DE
0319   0123 7D                          LD      A,L
0320   0124 12                          LD      (DE),A
0321   0125 C5                          PUSH    BC      ;BC,DE->BEGIN, END
0322   0126 D5                          PUSH    DE
0323   0127 79                          LD      A,C
0324   0128 93                          SUB     E
0325   0129 F5                          PUSH    AF      ;A=# OF BYTES IN LINE
0326   012A CD A9 05                    CALL    FNDLN   ;FIND THIS LINE IN SAVE
0327   012D D5                          PUSH    DE      ;AREA, DE->SAVE AREA
0328   012E C2 41 01                    JP      NZ,ST4  ;NZ:NOT FOUND, INSERT
0329   0131 D5                          PUSH    DE      ;Z:FOUND, DELETE IT
0330   0132 CD C5 05                    CALL    FNDNXT  ;FIND NEXT LINE
0331   0135                                             ;DE->NEXT LINE
0332   0135 C1                          POP     BC      ;BC->LINE TO BE DELETED
0333   0136 2A 38 17                    LD      HL,(TXTUNF)     ;HL->UNFILLED SAVE AREA
0334   0139 CD 82 06                    CALL    MVUP    ;MOVE UP TO DELETE
0335   013C 60                          LD      H,B     ;TXTUNF->UNFILLED AREA
0336   013D 69                          LD      L,C
0337   013E 22 38 17                    LD      (TXTUNF),HL     ;UPDATE
0338   0141 C1          ST4:            POP     BC      ;GET READY TO INSERT
0339   0142 2A 38 17                    LD      HL,(TXTUNF)     ;BUT FIRST CHECK IF
0340   0145 F1                          POP     AF      ;THE LENGTH OF NEW LINE
0341   0146 E5                          PUSH    HL      ;IS 3 (LINE # AND CR)
0342   0147 FE 03                       CP      3       ;THEN DO NOT INSERT
0343   0149 CA F0 00                    JP      Z,RSTART        ;MUST CLEAR THE STACK
0344   014C 85                          ADD     A,L     ;COMPUTE NEW TXTUNF
0345   014D 6F                          LD      L,A
0346   014E 3E 00                       LD      A,0
0347   0150 8C                          ADC     A,H
0348   0151 67                          LD      H,A     ;HL->NEW UNFILLED AREA
0349   0152 11 00 17                    LD      DE,TXTEND       ;CHECK TO SEE IF THERE
0350   0155 E7                          RST     RCOMP   ;COMP HL,DE - IS ENOUGH SPACE
0351   0156 D2 59 05                    JP      NC,QSORRY       ;SORRY, NO ROOM FOR IT
0352   0159 22 38 17                    LD      (TXTUNF),HL     ;OK, UPDATE TXTUNF
0353   015C D1                          POP     DE      ;DE->OLD UNFILLED AREA
0354   015D CD 8B 06                    CALL    MVDOWN
0355   0160 D1                          POP     DE      ;DE->BEGIN, HL->END
0356   0161 E1                          POP     HL
0357   0162 CD 82 06                    CALL    MVUP    ;MOVE NEW LINE TO SAVE
0358   0165 C3 0C 01                    JP      ST3     ;AREA
0359   0168             
0360   0168             ;*************************************************************
0361   0168             ;
0362   0168             ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
0363   0168             ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
0364   0168             ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
0365   0168             ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
0366   0168             ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
0367   0168             ;
0368   0168             ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
0369   0168             ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
0370   0168             ; GO BACK TO 'RSTART'.
0371   0168             ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
0372   0168             ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
0373   0168             ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
0374   0168             ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
0375   0168             ;*************************************************************
0376   0168             ;
0377   0168             ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
0378   0168             ;
0379   0168             ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
0380   0168             ;
0381   0168             ; 'STOP(CR)' GOES BACK TO 'RSTART'
0382   0168             ;
0383   0168             ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
0384   0168             ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
0385   0168             ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
0386   0168             ;
0387   0168             ; THERE ARE 3 MORE ENTRIES IN 'RUN':
0388   0168             ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
0389   0168             ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
0390   0168             ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
0391   0168             ;
0392   0168             ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
0393   0168             ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
0394   0168             ;
0395   0168 CD 28 05    NEW:            CALL    ENDCHK  ;*** NEW(CR) ***
0396   016B 21 00 08                    LD      HL,TXTBGN
0397   016E 22 38 17                    LD      (TXTUNF),HL
0398   0171             ;
0399   0171 CD 28 05    STOP:           CALL    ENDCHK  ;*** STOP(CR) ***
0400   0174 C3 F0 00                    JP      RSTART
0401   0177             
0402   0177 CD 28 05    RUN:            CALL    ENDCHK  ;*** RUN(CR) ***
0403   017A 11 00 08                    LD      DE,TXTBGN       ;FIRST SAVED LINE
0404   017D             ;
0405   017D 21 00 00    RUNNXL:         LD      HL,0    ;*** RUNNXL ***
0406   0180 CD B1 05                    CALL    FNDLP   ;FIND WHATEVER LINE #
0407   0183 DA F0 00                    JP      C,RSTART        ;C:PASSED TXTUNF, QUIT
0408   0186             ;
0409   0186 EB          RUNTSL:         EX      DE,HL   ;*** RUNTSL ***
0410   0187 22 3A 17                    LD      (CURRNT),HL     ;SET 'CURRENT'->LINE #
0411   018A EB                          EX      DE,HL
0412   018B 13                          INC     DE      ;BUMP PASS LINE #
0413   018C 13                          INC     DE
0414   018D             ;
0415   018D CD FA 06    RUNSML:         CALL    CHKIO   ;*** RUNSML ***
0416   0190 21 22 07                    LD      HL,TAB2-1       ;FIND COMMAND IN TAB2
0417   0193 C3 C2 07                    JP      EXEC    ;AND EXECUTE IT
0418   0196             
0419   0196 DF          GOTO:           RST     REXPR   ;*** GOTO EXPR ***
0420   0197 D5                          PUSH    DE      ;SAVE FOR ERROR ROUTINE
0421   0198 CD 28 05                    CALL    ENDCHK  ;MUST FIND A CR
0422   019B CD A9 05                    CALL    FNDLN   ;FIND THE TARGET LINE
0423   019E C2 D6 00                    JP      NZ,AHOW ;NO SUCH LINE #
0424   01A1 F1                          POP     AF      ;CLEAR THE PUSH DE
0425   01A2 C3 86 01                    JP      RUNTSL  ;GO DO IT
0426   01A5             ;
0427   01A5             ;*************************************************************
0428   01A5             ;
0429   01A5             ; *** LIST *** & PRINT ***
0430   01A5             ;
0431   01A5             ; LIST HAS TWO FORMS:
0432   01A5             ; 'LIST(CR)' LISTS ALL SAVED LINES
0433   01A5             ; 'LIST #(CR)' START LIST AT THIS LINE #
0434   01A5             ; YOU CAN STOP THE LISTING BY CONTROL C KEY
0435   01A5             ;
0436   01A5             ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
0437   01A5             ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
0438   01A5             ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
0439   01A5             ;
0440   01A5             ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
0441   01A5             ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
0442   01A5             ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
0443   01A5             ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
0444   01A5             ; SPECIFIED, 6 POSITIONS WILL BE USED.
0445   01A5             ;
0446   01A5             ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
0447   01A5             ; DOUBLE QUOTES.
0448   01A5             ;
0449   01A5             ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
0450   01A5             ;
0451   01A5             ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
0452   01A5             ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
0453   01A5             ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
0454   01A5             ;
0455   01A5 CD 7E 00    LIST:           CALL    TSTNUM  ;TEST IF THERE IS A #
0456   01A8 CD 28 05                    CALL    ENDCHK  ;IF NO # WE GET A 0
0457   01AB CD A9 05                    CALL    FNDLN   ;FIND THIS OR NEXT LINE
0458   01AE DA F0 00    LS1:            JP      C,RSTART        ;C:PASSED TXTUNF
0459   01B1 CD 6A 06                    CALL    PRTLN   ;PRINT THE LINE
0460   01B4 CD FA 06                    CALL    CHKIO   ;STOP IF HIT CONTROL-C
0461   01B7 CD B1 05                    CALL    FNDLP   ;FIND NEXT LINE
0462   01BA C3 AE 01                    JP      LS1     ;AND LOOP BACK
0463   01BD             
0464   01BD 0E 08       PRINT:          LD      C,8     ;C = # OF SPACES
0465   01BF 3E 0A                       LD      A,10    ;DEFAULT BASE FOR PRTNUM
0466   01C1 32 37 17                    LD      (PNBASE),A
0467   01C4 CF                          TSTC(';',PR2)   ;IF NULL LIST & ";"
0467   01C5 3B          
0467   01C6 06          
0468   01C7 CD 0E 00                    CALL    CRLF    ;GIVE CR-LF AND
0469   01CA C3 8D 01                    JP      RUNSML  ;CONTINUE SAME LINE
0470   01CD CF          PR2:            TSTC(CR,PR0)    ;IF NULL LIST (CR)
0470   01CE 0D          
0470   01CF 06          
0471   01D0 CD 0E 00                    CALL    CRLF    ;ALSO GIVE CR-LF AND
0472   01D3 C3 7D 01                    JP      RUNNXL  ;GO TO NEXT LINE
0473   01D6 CF          PR0:            TSTC('#',PR5)   ;ELSE IS IT FORMAT?
0473   01D7 23          
0473   01D8 05          
0474   01D9 DF                          RST     REXPR   ;YES, EVALUATE EXPR.
0475   01DA 4D                          LD      C,L     ;AND SAVE IT IN C
0476   01DB C3 F4 01                    JP      PR3     ;LOOK FOR MORE TO PRINT
0477   01DE CF          PR5:            TSTC('%',PR1)   ;ELSE IS IT PRTNUM BASE?
0477   01DF 25          
0477   01E0 0D          
0478   01E1 DF                          RST     REXPR   ;YES, EVALUATE EXPR.
0479   01E2 7D                          LD      A,L     ;AND STORE THE LOW PART
0480   01E3 FE 02                       CP      2       ;IF BASE < 2?
0481   01E5 DA F4 01                    JP      C,PR3   ;IGNORE IT
0482   01E8 32 37 17                    LD      (PNBASE),A      ;IN PNBASE
0483   01EB C3 F4 01                    JP      PR3     ;LOOK FOR MORE TO PRINT
0484   01EE CD DD 05    PR1:            CALL    QTSTG   ;OR IS IT A STRING?
0485   01F1 C3 06 02                    JP      PR8     ;IF NOT, MUST BE EXPR.
0486   01F4 CF          PR3:            TSTC($2C,PR6)   ;IF ",", GO FIND NEXT
0486   01F5 2C          
0486   01F6 06          
0487   01F7 CD 19 05                    CALL    FIN     ;IN THE LIST.
0488   01FA C3 D6 01                    JP      PR0     ;LIST CONTINUES
0489   01FD 3E 0A       PR6:            LD      A,10    ;END OF LIST REACHED
0490   01FF 32 37 17                    LD      (PNBASE),A      ;RESET DEFAULT BASE
0491   0202 CD 0E 00                    CALL    CRLF    ;LIST ENDS WITH CRLF
0492   0205 F7                          RST     RFINISH ;FINISH
0493   0206 DF          PR8:            RST     REXPR   ;EVALUATE THE EXPR
0494   0207 C5                          PUSH    BC
0495   0208 CD 10 06                    CALL    PRTNUM  ;PRINT THE VALUE
0496   020B C1                          POP     BC
0497   020C C3 F4 01                    JP      PR3     ;MORE TO PRINT?
0498   020F             ;
0499   020F             ;*************************************************************
0500   020F             ;
0501   020F             ; *** GOSUB *** & RETURN ***
0502   020F             ;
0503   020F             ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
0504   020F             ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
0505   020F             ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
0506   020F             ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
0507   020F             ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
0508   020F             ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
0509   020F             ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
0510   020F             ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
0511   020F             ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
0512   020F             ;
0513   020F             ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
0514   020F             ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
0515   020F             ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
0516   020F             ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
0517   020F             ;
0518   020F CD B6 06    GOSUB:          CALL    PUSHA   ;SAVE THE CURRENT "FOR"
0519   0212 DF                          RST     REXPR   ;PARAMETERS
0520   0213 D5                          PUSH    DE      ;AND TEXT POINTER
0521   0214 CD A9 05                    CALL    FNDLN   ;FIND THE TARGET LINE
0522   0217 C2 D6 00                    JP      NZ,AHOW ;NOT THERE. SAY "HOW?"
0523   021A 2A 3A 17                    LD      HL,(CURRNT)     ;FOUND IT, SAVE OLD
0524   021D E5                          PUSH    HL      ;'CURRNT' OLD 'STKGOS'
0525   021E 2A 3C 17                    LD      HL,(STKGOS)
0526   0221 E5                          PUSH    HL
0527   0222 21 00 00                    LD      HL,0    ;AND LOAD NEW ONES
0528   0225 22 42 17                    LD      (LOPVAR),HL
0529   0228 39                          ADD     HL,SP
0530   0229 22 3C 17                    LD      (STKGOS),HL
0531   022C C3 86 01                    JP      RUNTSL  ;THEN RUN THAT LINE
0532   022F CD 28 05    RETURN:         CALL    ENDCHK  ;THERE MUST BE A CR
0533   0232 2A 3C 17                    LD      HL,(STKGOS)     ;OLD STACK POINTER
0534   0235 7C                          LD      A,H     ;0 MEANS NOT EXIST
0535   0236 B5                          OR      L
0536   0237 CA 2C 05                    JP      Z,QWHAT ;SO, WE SAY: "WHAT?"
0537   023A F9                          LD      SP,HL   ;ELSE, RESTORE IT
0538   023B E1                          POP     HL
0539   023C 22 3C 17                    LD      (STKGOS),HL     ;AND THE OLD 'STKGOS'
0540   023F E1                          POP     HL
0541   0240 22 3A 17                    LD      (CURRNT),HL     ;AND THE OLD 'CURRNT'
0542   0243 D1                          POP     DE      ;OLD TEXT POINTER
0543   0244 CD 9A 06                    CALL    POPA    ;OLD "FOR" PARAMETERS
0544   0247 F7                          RST     RFINISH ;AND WE ARE BACK HOME
0545   0248             ;
0546   0248             ;*************************************************************
0547   0248             ;
0548   0248             ; *** FOR *** & NEXT ***
0549   0248             ;
0550   0248             ; 'FOR' HAS TWO FORMS:
0551   0248             ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
0552   0248             ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
0553   0248             ; EXP3=1.  (I.E., WITH A STEP OF +1.)
0554   0248             ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
0555   0248             ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
0556   0248             ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
0557   0248             ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
0558   0248             ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
0559   0248             ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
0560   0248             ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
0561   0248             ; BEFORE THE NEW ONE OVERWRITES IT.
0562   0248             ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
0563   0248             ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
0564   0248             ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
0565   0248             ; (PURGED FROM THE STACK..)
0566   0248             ;
0567   0248             ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
0568   0248             ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
0569   0248             ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
0570   0248             ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
0571   0248             ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
0572   0248             ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
0573   0248             ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
0574   0248             ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
0575   0248             ; IS PURGED AND EXECUTION CONTINUES.
0576   0248             ;
0577   0248 CD B6 06    FOR:            CALL    PUSHA           ;SAVE THE OLD SAVE AREA
0578   024B CD 06 05                    CALL    SETVAL          ;SET THE CONTROL VAR.
0579   024E 2B                          DEC     HL              ;HL IS ITS ADDRESS
0580   024F 22 42 17                    LD      (LOPVAR),HL     ;SAVE THAT
0581   0252 21 92 07                    LD      HL,TAB5-1       ;USE 'EXEC' TO LOOK
0582   0255 C3 C2 07                    JP      EXEC            ;FOR THE WORD 'TO'
0583   0258 DF          FR1:            RST     REXPR           ;EVALUATE THE LIMIT
0584   0259 22 46 17                    LD      (LOPLMT),HL     ;SAVE THAT
0585   025C 21 98 07                    LD      HL,TAB6-1       ;USE 'EXEC' TO LOOK
0586   025F C3 C2 07                    JP      EXEC            ;FOR THE WORD 'STEP'
0587   0262 DF          FR2:            RST     REXPR           ;FOUND IT, GET STEP
0588   0263 C3 69 02                    JP      FR4
0589   0266 21 01 00    FR3:            LD      HL,1H           ;NOT FOUND, SET TO 1
0590   0269 22 44 17    FR4:            LD      (LOPINC),HL     ;SAVE THAT TOO
0591   026C 2A 3A 17    FR5:            LD      HL,(CURRNT)     ;SAVE CURRENT LINE #
0592   026F 22 48 17                    LD      (LOPLN),HL
0593   0272 EB                          EX      DE,HL           ;AND TEXT POINTER
0594   0273 22 4A 17                    LD      (LOPPT),HL
0595   0276 01 0A 00                    LD      BC,0AH          ;DIG INTO STACK TO
0596   0279 2A 42 17                    LD      HL,(LOPVAR)     ;FIND 'LOPVAR'
0597   027C EB                          EX      DE,HL
0598   027D 60                          LD      H,B
0599   027E 68                          LD      L,B             ;HL=0 NOW
0600   027F 39                          ADD     HL,SP           ;HERE IS THE STACK
0601   0280 3E                          .DB     3EH             ;SKIP "ADD HL,BC"
0602   0281 09          FR7:            ADD     HL,BC           ;EACH LEVEL IS 10 DEEP
0603   0282 7E                          LD      A,(HL)          ;GET THAT OLD 'LOPVAR'
0604   0283 23                          INC     HL
0605   0284 B6                          OR      (HL)
0606   0285 CA A2 02                    JP      Z,FR8           ;0 SAYS NO MORE IN IT
0607   0288 7E                          LD      A,(HL)
0608   0289 2B                          DEC     HL
0609   028A BA                          CP      D               ;SAME AS THIS ONE?
0610   028B C2 81 02                    JP      NZ,FR7
0611   028E 7E                          LD      A,(HL)          ;THE OTHER HALF?
0612   028F BB                          CP      E
0613   0290 C2 81 02                    JP      NZ,FR7
0614   0293 EB                          EX      DE,HL           ;YES, FOUND ONE
0615   0294 21 00 00                    LD      HL,0H
0616   0297 39                          ADD     HL,SP           ;TRY TO MOVE SP
0617   0298 44                          LD      B,H
0618   0299 4D                          LD      C,L
0619   029A 21 0A 00                    LD      HL,0AH
0620   029D 19                          ADD     HL,DE
0621   029E CD 8B 06                    CALL    MVDOWN          ;AND PURGE 10 WORDS
0622   02A1 F9                          LD      SP,HL           ;IN THE STACK
0623   02A2 2A 4A 17    FR8:            LD      HL,(LOPPT)      ;JOB DONE, RESTORE DE
0624   02A5 EB                          EX      DE,HL
0625   02A6 F7                          RST     RFINISH         ;AND CONTINUE
0626   02A7             ;
0627   02A7 FF          NEXT:           RST     RTSTV           ;GET ADDRESS OF VAR.
0628   02A8 DA 2C 05                    JP      C,QWHAT         ;NO VARIABLE, "WHAT?"
0629   02AB 22 3E 17                    LD      (VARNXT),HL     ;YES, SAVE IT
0630   02AE D5          NX0:            PUSH    DE              ;SAVE TEXT POINTER
0631   02AF EB                          EX      DE,HL
0632   02B0 2A 42 17                    LD      HL,(LOPVAR)     ;GET VAR. IN 'FOR'
0633   02B3 7C                          LD      A,H
0634   02B4 B5                          OR      L               ;0 SAYS NEVER HAD ONE
0635   02B5 CA 2D 05                    JP      Z,AWHAT         ;SO WE ASK: "WHAT?"
0636   02B8 E7                          RST     RCOMP           ;ELSE WE CHECK THEM
0637   02B9 CA C6 02                    JP      Z,NX3           ;OK, THEY AGREE
0638   02BC D1                          POP     DE              ;NO, LET'S SEE
0639   02BD CD 9A 06                    CALL    POPA            ;PURGE CURRENT LOOP
0640   02C0 2A 3E 17                    LD      HL,(VARNXT)     ;AND POP ONE LEVEL
0641   02C3 C3 AE 02                    JP      NX0             ;GO CHECK AGAIN
0642   02C6 5E          NX3:            LD      E,(HL)          ;COME HERE WHEN AGREED
0643   02C7 23                          INC     HL
0644   02C8 56                          LD      D,(HL)          ;DE=VALUE OF VAR.
0645   02C9 2A 44 17                    LD      HL,(LOPINC)
0646   02CC E5                          PUSH    HL
0647   02CD 7C                          LD      A,H
0648   02CE AA                          XOR     D
0649   02CF 7A                          LD      A,D
0650   02D0 19                          ADD     HL,DE           ;ADD ONE STEP
0651   02D1 FA D8 02                    JP      M,NX4
0652   02D4 AC                          XOR     H
0653   02D5 FA FA 02                    JP      M,NX5
0654   02D8 EB          NX4:            EX      DE,HL
0655   02D9 2A 42 17                    LD      HL,(LOPVAR)     ;PUT IT BACK
0656   02DC 73                          LD      (HL),E
0657   02DD 23                          INC     HL
0658   02DE 72                          LD      (HL),D
0659   02DF 2A 46 17                    LD      HL,(LOPLMT)     ;HL->LIMIT
0660   02E2 F1                          POP     AF              ;OLD HL
0661   02E3 B7                          OR      A
0662   02E4 F2 E8 02                    JP      P,NX1           ;STEP > 0
0663   02E7 EB                          EX      DE,HL           ;STEP < 0
0664   02E8 CD FE 04    NX1:            CALL    CKHLDE          ;COMPARE WITH LIMIT
0665   02EB D1                          POP     DE              ;RESTORE TEXT POINTER
0666   02EC DA FC 02                    JP      C,NX2           ;OUTSIDE LIMIT
0667   02EF 2A 48 17                    LD      HL,(LOPLN)      ;WITHIN LIMIT, GO
0668   02F2 22 3A 17                    LD      (CURRNT),HL     ;BACK TO THE SAVED
0669   02F5 2A 4A 17                    LD      HL,(LOPPT)      ;'CURRNT' AND TEXT
0670   02F8 EB                          EX      DE,HL           ;POINTER
0671   02F9 F7                          RST     RFINISH
0672   02FA E1          NX5:            POP     HL
0673   02FB D1                          POP     DE
0674   02FC CD 9A 06    NX2:            CALL    POPA            ;PURGE THIS LOOP
0675   02FF F7                          RST     RFINISH
0676   0300             ;
0677   0300             ;*************************************************************
0678   0300             ;
0679   0300             ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
0680   0300             ;
0681   0300             ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
0682   0300             ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
0683   0300             ;
0684   0300             ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
0685   0300             ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
0686   0300             ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
0687   0300             ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
0688   0300             ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
0689   0300             ; EXECUTION CONTINUES AT THE NEXT LINE.
0690   0300             ;
0691   0300             ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
0692   0300             ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
0693   0300             ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
0694   0300             ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
0695   0300             ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
0696   0300             ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
0697   0300             ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
0698   0300             ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
0699   0300             ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
0700   0300             ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
0701   0300             ;
0702   0300             ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
0703   0300             ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
0704   0300             ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
0705   0300             ; THIS IS HANDLED IN 'INPERR'.
0706   0300             ;
0707   0300             ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
0708   0300             ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
0709   0300             ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
0710   0300             ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
0711   0300             ; THIS IS DONE BY 'DEFLT'.
0712   0300             ;
0713   0300 21 00 00    REM:            LD      HL,0H   ;*** REM ***
0714   0303 3E          .DB             3EH             ;SKIP RST, THIS IS LIKE 'IF 0'
0715   0304             ;
0716   0304 DF          IFF:            RST     REXPR   ;*** IF ***
0717   0305 7C                          LD      A,H     ;IS THE EXPR.=0?
0718   0306 B5                          OR      L
0719   0307 C2 8D 01                    JP      NZ,RUNSML       ;NO, CONTINUE
0720   030A CD C7 05                    CALL    FNDSKP  ;YES, SKIP REST OF LINE
0721   030D D2 86 01                    JP      NC,RUNTSL       ;AND RUN THE NEXT LINE
0722   0310 C3 F0 00                    JP      RSTART  ;IF NO NEXT, RE-START
0723   0313             ;
0724   0313 2A 40 17    INPERR:         LD      HL,(STKINP)     ;*** INPERR ***
0725   0316 F9                          LD      SP,HL   ;RESTORE OLD SP
0726   0317 E1                          POP     HL      ;AND OLD 'CURRNT'
0727   0318 22 3A 17                    LD      (CURRNT),HL
0728   031B D1                          POP     DE      ;AND OLD TEXT POINTER
0729   031C D1                          POP     DE      ;REDO INPUT
0730   031D             ;
0731   031D             INPUT:          ;*** INPUT ***
0732   031D D5          IP1:            PUSH    DE      ;SAVE IN CASE OF ERROR
0733   031E CD DD 05                    CALL    QTSTG   ;IS NEXT ITEM A STRING?
0734   0321 C3 2B 03                    JP      IP2     ;NO
0735   0324 FF                          RST     RTSTV   ;YES, BUT FOLLOWED BY A
0736   0325 DA 62 03                    JP      C,IP4   ;VARIABLE?   NO.
0737   0328 C3 3B 03                    JP      IP3     ;YES.  INPUT VARIABLE
0738   032B D5          IP2:            PUSH    DE      ;SAVE FOR 'PRTSTG'
0739   032C FF                          RST     RTSTV   ;MUST BE VARIABLE NOW
0740   032D DA 2C 05                    JP      C,QWHAT ;"WHAT?" IT IS NOT?
0741   0330 1A                          LD      A,(DE)  ;GET READY FOR 'PRTSTG'
0742   0331 4F                          LD      C,A
0743   0332 97                          SUB     A
0744   0333 12                          LD      (DE),A
0745   0334 D1                          POP     DE
0746   0335 CD D1 05                    CALL    PRTSTG  ;PRINT STRING AS PROMPT
0747   0338 79                          LD      A,C     ;RESTORE TEXT
0748   0339 1B                          DEC     DE
0749   033A 12                          LD      (DE),A
0750   033B D5          IP3:            PUSH    DE      ;SAVE TEXT POINTER
0751   033C EB                          EX      DE,HL
0752   033D 2A 3A 17                    LD      HL,(CURRNT)     ;ALSO SAVE 'CURRNT'
0753   0340 E5                          PUSH    HL
0754   0341 21 1D 03                    LD      HL,IP1  ;A NEGATIVE NUMBER
0755   0344 22 3A 17                    LD      (CURRNT),HL     ;AS A FLAG
0756   0347 21 00 00                    LD      HL,0H   ;SAVE SP TOO
0757   034A 39                          ADD     HL,SP
0758   034B 22 40 17                    LD      (STKINP),HL
0759   034E D5                          PUSH    DE      ;OLD HL
0760   034F 3E 3A                       LD      A,':'   ;PRINT THIS TOO
0761   0351 CD 60 05                    CALL    GETLN   ;AND GET A LINE
0762   0354 11 4E 17                    LD      DE,BUFFER       ;POINTS TO BUFFER
0763   0357 DF                          RST     REXPR   ;EVALUATE INPUT
0764   0358             ;NOP                             ;CAN BE 'CALL ENDCHK'
0765   0358             ;NOP
0766   0358             ;NOP
0767   0358 D1                          POP     DE      ;OK, GET OLD HL
0768   0359 EB                          EX      DE,HL
0769   035A 73                          LD      (HL),E  ;SAVE VALUE IN VAR.
0770   035B 23                          INC     HL
0771   035C 72                          LD      (HL),D
0772   035D E1                          POP     HL      ;GET OLD 'CURRNT'
0773   035E 22 3A 17                    LD      (CURRNT),HL
0774   0361 D1                          POP     DE      ;AND OLD TEXT POINTER
0775   0362 F1          IP4:            POP     AF      ;PURGE JUNK IN STACK
0776   0363 CF                          TSTC($2C,IP5)   ;IS NEXT CH. ','?
0776   0364 2C          
0776   0365 03          
0777   0366 C3 1D 03                    JP      IP1     ;YES, MORE ITEMS.
0778   0369 F7          IP5:            RST     RFINISH
0779   036A             ;
0780   036A 1A          DEFLT:          LD      A,(DE)  ;***  DEFLT ***
0781   036B FE 0D                       CP      CR      ;EMPTY LINE IS OK
0782   036D CA 79 03                    JP      Z,LT1   ;ELSE IT IS 'LET'
0783   0370             ;
0784   0370 CD 06 05    LET:            CALL    SETVAL  ;*** LET ***
0785   0373 CF                          TSTC($2C,LT1)   ;SET VALUE TO VAR.
0785   0374 2C          
0785   0375 03          
0786   0376 C3 70 03                    JP      LET     ;ITEM BY ITEM
0787   0379 F7          LT1:            RST     RFINISH ;UNTIL FINISH
0788   037A             ;
0789   037A             ;*************************************************************
0790   037A             ;
0791   037A             ; *** EXPR ***
0792   037A             ;
0793   037A             ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
0794   037A             ; <EXPR>::<EXPR2>
0795   037A             ;         <EXPR2><REL.OP.><EXPR2>
0796   037A             ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
0797   037A             ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
0798   037A             ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
0799   037A             ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
0800   037A             ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
0801   037A             ; <EXPR4>::=<VARIABLE>
0802   037A             ;           <FUNCTION>
0803   037A             ;           (<EXPR>)
0804   037A             ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
0805   037A             ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
0806   037A             ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
0807   037A             ;
0808   037A             ;EXPR:          CALL    EXPR2   ;THIS IS AT LOC. 18
0809   037A             ;               PUSH    HL      ;SAVE <EXPR2> VALUE
0810   037A             ;               JP      EXPR1   ;REST OF IT AT EXPR1
0811   037A 21 A0 07    EXPR1:          LD      HL,TAB8-1       ;LOOKUP REL.OP.
0812   037D C3 C2 07                    JP      EXEC    ;GO DO IT
0813   0380             ;
0814   0380 CD A9 03    XP11:           CALL    XP18    ;REL.OP.">="
0815   0383 D8                          RET     C       ;NO, RETURN HL=0
0816   0384 6F                          LD      L,A     ;YES, RETURN HL=1
0817   0385 C9                          RET
0818   0386             ;
0819   0386 CD A9 03    XP12:           CALL    XP18    ;REL.OP."#"
0820   0389 C8                          RET     Z       ;FALSE, RETURN HL=0
0821   038A 6F                          LD      L,A     ;TRUE, RETURN HL=1
0822   038B C9                          RET
0823   038C             ;
0824   038C CD A9 03    XP13:           CALL    XP18    ;REL.OP.">"
0825   038F C8                          RET     Z       ;FALSE
0826   0390 D8                          RET     C       ;ALSO FALSE, HL=0
0827   0391 6F                          LD      L,A     ;TRUE, HL=1
0828   0392 C9                          RET
0829   0393             ;
0830   0393 CD A9 03    XP14:           CALL    XP18    ;REL.OP."<="
0831   0396 6F                          LD      L,A     ;SET HL=1
0832   0397 C8                          RET     Z       ;REL. TRUE, RETURN
0833   0398 D8                          RET     C
0834   0399 6C                          LD      L,H     ;ELSE SET HL=0
0835   039A C9                          RET
0836   039B             ;
0837   039B CD A9 03    XP15:           CALL    XP18    ;REL.OP."="
0838   039E C0                          RET     NZ      ;FALSE, RETURN HL=0
0839   039F 6F                          LD      L,A     ;ELSE SET HL=1
0840   03A0 C9                          RET
0841   03A1             ;
0842   03A1 CD A9 03    XP16:           CALL    XP18    ;REL.OP."<"
0843   03A4 D0                          RET     NC      ;FALSE, RETURN HL=0
0844   03A5 6F                          LD      L,A     ;ELSE SET HL=1
0845   03A6 C9                          RET
0846   03A7             ;
0847   03A7 E1          XP17:           POP     HL      ;NOT .REL.OP
0848   03A8 C9                          RET             ;RETURN HL=<EXPR2>
0849   03A9             ;
0850   03A9 79          XP18:           LD      A,C     ;SUBROUTINE FOR ALL
0851   03AA E1                          POP     HL      ;REL.OP.'S
0852   03AB C1                          POP     BC
0853   03AC E5                          PUSH    HL      ;REVERSE TOP OF STACK
0854   03AD C5                          PUSH    BC
0855   03AE 4F                          LD      C,A
0856   03AF CD BE 03                    CALL    EXPR2   ;GET 2ND <EXPR2>
0857   03B2 EB                          EX      DE,HL   ;VALUE IN DE NOW
0858   03B3 E3                          EX      (SP),HL ;1ST <EXPR2> IN HL
0859   03B4 CD FE 04                    CALL    CKHLDE  ;COMPARE 1ST WITH 2ND
0860   03B7 D1                          POP     DE      ;RESTORE TEXT POINTER
0861   03B8 21 00 00                    LD      HL,0H   ;SET HL=0, A=1
0862   03BB 3E 01                       LD      A,1
0863   03BD C9                          RET
0864   03BE             ;
0865   03BE CF          EXPR2:          TSTC('-',XP21)  ;NEGATIVE SIGN?
0865   03BF 2D          
0865   03C0 06          
0866   03C1 21 00 00                    LD      HL,0H   ;YES, FAKE '0-'
0867   03C4 C3 E8 03                    JP      XP26    ;TREAT LIKE SUBTRACT
0868   03C7             ;
0869   03C7 CF          XP21:           TSTC('+',XP22)  ;POSITIVE SIGN? IGNORE
0869   03C8 2B          
0869   03C9 00          
0870   03CA CD F2 03    XP22:           CALL    EXPR3   ;1ST <EXPR3>
0871   03CD CF          XP23:           TSTC('+',XP25)  ;ADD?
0871   03CE 2B          
0871   03CF 15          
0872   03D0 E5                          PUSH    HL      ;YES, SAVE VALUE
0873   03D1 CD F2 03                    CALL    EXPR3   ;GET 2ND <EXPR3>
0874   03D4 EB          XP24:           EX      DE,HL   ;2ND IN DE
0875   03D5 E3                          EX      (SP),HL ;1ST IN HL
0876   03D6 7C                          LD      A,H     ;COMPARE SIGN
0877   03D7 AA                          XOR     D
0878   03D8 7A                          LD      A,D
0879   03D9 19                          ADD     HL,DE
0880   03DA D1                          POP     DE      ;RESTORE TEXT POINTER
0881   03DB FA CD 03                    JP      M,XP23  ;1ST AND 2ND SIGN DIFFER
0882   03DE AC                          XOR     H       ;1ST AND 2ND SIGN EQUAL
0883   03DF F2 CD 03                    JP      P,XP23  ;SO IS RESULT
0884   03E2             ;
0885   03E2 C3 D5 00                    JP      QHOW    ;ELSE WE HAVE OVERFLOW
0886   03E5             ;
0887   03E5 CF          XP25:           TSTC('-',XP42)  ;SUBTRACT?
0887   03E6 2D          
0887   03E7 86          
0888   03E8 E5          XP26:           PUSH    HL      ;YES, SAVE 1ST <EXPR3>
0889   03E9 CD F2 03                    CALL    EXPR3   ;GET 2ND <EXPR3>
0890   03EC CD E9 04                    CALL    CHGSGN  ;NEGATE
0891   03EF C3 D4 03                    JP      XP24    ;AND ADD THEM
0892   03F2             ;
0893   03F2 CD 52 04    EXPR3:          CALL    EXPR4   ;GET 1ST <EXPR4>
0894   03F5 CF          XP31:           TSTC('*',XP34)  ;MULTIPLY?
0894   03F6 2A          
0894   03F7 2D          
0895   03F8 E5                          PUSH    HL      ;YES, SAVE 1ST
0896   03F9 CD 52 04                    CALL    EXPR4   ;AND GET 2ND <EXPR4>
0897   03FC 06 00                       LD      B,0H    ;CLEAR B FOR SIGN
0898   03FE CD E6 04                    CALL    CHKSGN  ;CHECK SIGN
0899   0401 E3                          EX      (SP),HL ;1ST IN HL
0900   0402 CD E6 04                    CALL    CHKSGN  ;CHECK SIGN OF 1ST
0901   0405 EB                          EX      DE,HL
0902   0406 E3                          EX      (SP),HL
0903   0407 7C                          LD      A,H     ;IS HL > 255 ?
0904   0408 B7                          OR      A
0905   0409 CA 12 04                    JP      Z,XP32  ;NO
0906   040C 7A                          LD      A,D     ;YES, HOW ABOUT DE
0907   040D B2                          OR      D
0908   040E EB                          EX      DE,HL   ;PUT SMALLER IN HL
0909   040F C2 D6 00                    JP      NZ,AHOW ;ALSO >, WILL OVERFLOW
0910   0412 7D          XP32:           LD      A,L     ;THIS IS DUMB
0911   0413 21 00 00                    LD      HL,0H   ;CLEAR RESULT
0912   0416 B7                          OR      A       ;ADD AND COUNT
0913   0417 CA 44 04                    JP      Z,XP35
0914   041A 19          XP33:           ADD     HL,DE
0915   041B DA D6 00                    JP      C,AHOW  ;OVERFLOW
0916   041E 3D                          DEC     A
0917   041F C2 1A 04                    JP      NZ,XP33
0918   0422 C3 44 04                    JP      XP35    ;FINISHED
0919   0425             ;
0920   0425 CF          XP34:           TSTC('/',XP42)  ;DIVIDE?
0920   0426 2F          
0920   0427 46          
0921   0428 E5                          PUSH    HL      ;YES, SAVE 1ST <EXPR4>
0922   0429 CD 52 04                    CALL    EXPR4   ;AND GET THE SECOND ONE
0923   042C 06 00                       LD      B,0H    ;CLEAR B FOR SIGN
0924   042E CD E6 04                    CALL    CHKSGN  ;CHECK SIGN OF 2ND
0925   0431 E3                          EX      (SP),HL ;GET 1ST IN HL
0926   0432 CD E6 04                    CALL    CHKSGN  ;CHECK SIGN OF 1ST
0927   0435 EB                          EX      DE,HL
0928   0436 E3                          EX      (SP),HL
0929   0437 EB                          EX      DE,HL
0930   0438 7A                          LD      A,D     ;DIVIDE BY 0?
0931   0439 B3                          OR      E
0932   043A CA D6 00                    JP      Z,AHOW  ;SAY "HOW?"
0933   043D C5                          PUSH    BC      ;ELSE SAVE SIGN
0934   043E CD C9 04                    CALL    DIVIDE  ;USE SUBROUTINE
0935   0441 60                          LD      H,B     ;RESULT IN HL NOW
0936   0442 69                          LD      L,C
0937   0443 C1                          POP     BC      ;GET SIGN BACK
0938   0444 D1          XP35:           POP     DE      ;AND TEXT POINTER
0939   0445 7C                          LD      A,H     ;HL MUST BE +
0940   0446 B7                          OR      A
0941   0447 FA D5 00                    JP      M,QHOW  ;ELSE IT IS OVERFLOW
0942   044A 78                          LD      A,B
0943   044B B7                          OR      A
0944   044C FC E9 04                    CALL    M,CHGSGN        ;CHANGE SIGN IF NEEDED
0945   044F C3 F5 03                    JP      XP31    ;LOOK FOR MORE TERMS
0946   0452             ;
0947   0452 21 6F 07    EXPR4:          LD      HL,TAB4-1       ;FIND FUNCTION IN TAB4
0948   0455 C3 C2 07                    JP      EXEC    ;AND GO DO IT
0949   0458             ;
0950   0458 FF          XP40:           RST     RTSTV   ;NO, NOT A FUNCTION
0951   0459 DA 61 04                    JP      C,XP41  ;NOR A VARIABLE
0952   045C 7E                          LD      A,(HL)  ;VARIABLE
0953   045D 23                          INC     HL
0954   045E 66                          LD      H,(HL)  ;VALUE IN HL
0955   045F 6F                          LD      L,A
0956   0460 C9                          RET
0957   0461             ;
0958   0461 CD 7E 00    XP41:           CALL    TSTNUM  ;OR IS IT A NUMBER
0959   0464 78                          LD      A,B     ;# OF DIGIT
0960   0465 B7                          OR      A
0961   0466 C0                          RET     NZ      ;OK
0962   0467 CF          PARN:           TSTC($28,XP43)  ; '('
0962   0468 28          
0962   0469 05          
0963   046A DF                          RST     REXPR   ;"(EXPR)"
0964   046B CF                          TSTC($29,XP43)  ; ')'
0964   046C 29          
0964   046D 01          
0965   046E C9          XP42:           RET
0966   046F C3 2C 05    XP43:           JP      QWHAT   ;ELSE SAY: "WHAT?"
0967   0472             
0968   0472 CD 67 04    RND:            CALL    PARN    ;*** RND(EXPR) ***
0969   0475 7C                          LD      A,H     ;EXPR MUST BE +
0970   0476 B7                          OR      A
0971   0477 FA D5 00                    JP      M,QHOW
0972   047A B5                          OR      L       ;AND NON-ZERO
0973   047B CA D5 00                    JP      Z,QHOW
0974   047E D5                          PUSH    DE      ;SAVE BOTH
0975   047F E5                          PUSH    HL
0976   0480 2A 4C 17                    LD      HL,(RANPNT)     ;GET MEMORY AS RANDOM
0977   0483 11 FC 07                    LD      DE,LSTROM       ;NUMBER
0978   0486 E7                          RST     RCOMP
0979   0487 DA 8D 04                    JP      C,RA1   ;WRAP AROUND IF LAST
0980   048A 21 00 00                    LD      HL,START
0981   048D 5E          RA1:            LD      E,(HL)
0982   048E 23                          INC     HL
0983   048F 56                          LD      D,(HL)
0984   0490 22 4C 17                    LD      (RANPNT),HL
0985   0493 E1                          POP     HL
0986   0494 EB                          EX      DE,HL
0987   0495 C5                          PUSH    BC
0988   0496 CD C9 04                    CALL    DIVIDE  ;RND(N)=MOD(M,N)+1
0989   0499 C1                          POP     BC
0990   049A D1                          POP     DE
0991   049B 23                          INC     HL
0992   049C C9                          RET
0993   049D             
0994   049D CD 67 04    ABS:            CALL    PARN    ;*** ABS(EXPR) ***
0995   04A0 1B                          DEC     DE
0996   04A1 CD E6 04                    CALL    CHKSGN  ;CHECK SIGN AND CHANGE IF HL < 0
0997   04A4 13                          INC     DE
0998   04A5 C9                          RET
0999   04A6             
1000   04A6 2A 38 17    FREE:           LD      HL,(TXTUNF)     ;*** RETURN FREE IN HL ***
1001   04A9 D5                          PUSH    DE              ;GET THE NUMBER OF FREE
1002   04AA EB                          EX      DE,HL           ;BYTES BETWEEN 'TXTUNF'
1003   04AB 21 00 17                    LD      HL,TXTEND       ;AND 'TXTEND'
1004   04AE CD DF 04                    CALL    SUBDE
1005   04B1 D1                          POP     DE
1006   04B2 C9                          RET
1007   04B3             
1008   04B3 CD 67 04    PEEK:           CALL    PARN    ;*** PEEK(EXPR) ***
1009   04B6 6E                          LD      L,(HL)  ;GET CONTENT OF (HL)
1010   04B7 26 00                       LD      H,0     ;RETURN RESULT IN HL
1011   04B9 C9                          RET
1012   04BA             
1013   04BA CD 67 04    DEEK:           CALL    PARN    ;*** PEEK(EXPR) ***
1014   04BD D5                          PUSH    DE
1015   04BE 5E                          LD      E,(HL)  ;GET LOW CONTENT OF (HL)
1016   04BF 23                          INC     HL
1017   04C0 56                          LD      D,(HL)  ;GET HIGH CONTENT OF (HL)
1018   04C1 EB                          EX      DE,HL   ;RETURN RESULT IN HL
1019   04C2 D1                          POP     DE
1020   04C3 C9                          RET
1021   04C4             
1022   04C4 21 00 10    RAM:            LD      HL,RAMSZE
1023   04C7 C9                          RET
1024   04C8             
1025   04C8 76          HALT:           HALT            ;HALT CPU (return to analyser)
1026   04C9             ;
1027   04C9             ;*************************************************************
1028   04C9             ;
1029   04C9             ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1030   04C9             ;
1031   04C9             ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1032   04C9             ;
1033   04C9             ; 'SUBDE' SUBSTRACTS DE FROM HL
1034   04C9             ;
1035   04C9             ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1036   04C9             ; SIGN AND FLIP SIGN OF B.
1037   04C9             ;
1038   04C9             ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1039   04C9             ;
1040   04C9             ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1041   04C9             ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1042   04C9             ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1043   04C9             ;
1044   04C9 E5          DIVIDE:         PUSH    HL      ;*** DIVIDE ***
1045   04CA 6C                          LD      L,H     ;DIVIDE H BY DE
1046   04CB 26 00                       LD      H,0
1047   04CD CD D4 04                    CALL    DV1
1048   04D0 41                          LD      B,C     ;SAVE RESULT IN B
1049   04D1 7D                          LD      A,L     ;(REMINDER+L)/DE
1050   04D2 E1                          POP     HL
1051   04D3 67                          LD      H,A
1052   04D4 0E FF       DV1:            LD      C,0FFH  ;RESULT IN C
1053   04D6 0C          DV2:            INC     C       ;DUMB ROUTINE
1054   04D7 CD DF 04                    CALL    SUBDE   ;DIVIDE BY SUBTRACT
1055   04DA D2 D6 04                    JP      NC,DV2  ;AND COUNT
1056   04DD 19                          ADD     HL,DE
1057   04DE C9                          RET
1058   04DF             ;
1059   04DF 7D          SUBDE:          LD      A,L     ;*** SUBDE ***
1060   04E0 93                          SUB     E       ;SUBSTRACT DE FROM
1061   04E1 6F                          LD      L,A     ;HL
1062   04E2 7C                          LD      A,H
1063   04E3 9A                          SBC     A,D
1064   04E4 67                          LD      H,A
1065   04E5 C9                          RET
1066   04E6             ;
1067   04E6 7C          CHKSGN:         LD      A,H     ;*** CHKSGN ***
1068   04E7 B7                          OR      A       ;CHECK SIGN OF HL
1069   04E8 F0                          RET     P       ;IF HL >=0 RETURN
1070   04E9             ;
1071   04E9 7C          CHGSGN:         LD      A,H     ;*** CHGSGN ***
1072   04EA B5                          OR      L       ;CHECK VALUE OF HL
1073   04EB C8                          RET     Z       ;IF HL == 0 RETURN
1074   04EC             ;
1075   04EC 7C                          LD      A,H
1076   04ED F5                          PUSH    AF      ;SAVE SIGN
1077   04EE 2F                          CPL             ;CHANGE SIGN OF HL
1078   04EF 67                          LD      H,A
1079   04F0 7D                          LD      A,L
1080   04F1 2F                          CPL
1081   04F2 6F                          LD      L,A
1082   04F3 23                          INC     HL      ;HL = -HL
1083   04F4 F1                          POP     AF      ;GET ORIGINAL SIGN
1084   04F5 AC                          XOR     H       ;COMPARE
1085   04F6 F2 D5 00                    JP      P,QHOW  ;ERROR IF SIGN UNCHANGED (HL=$8000)
1086   04F9 78                          LD      A,B     ;AND ALSO FLIP B
1087   04FA EE 80                       XOR     80H
1088   04FC 47                          LD      B,A
1089   04FD C9                          RET
1090   04FE             
1091   04FE 7C          CKHLDE:         LD      A,H
1092   04FF AA                          XOR     D       ;SAME SIGN?
1093   0500 F2 04 05                    JP      P,CK1   ;YES, COMPARE
1094   0503 EB                          EX      DE,HL   ;NO, XCH AND COMP
1095   0504 E7          CK1:            RST     RCOMP
1096   0505 C9                          RET
1097   0506             ;
1098   0506             ;*************************************************************
1099   0506             ;
1100   0506             ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1101   0506             ;
1102   0506             ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1103   0506             ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1104   0506             ; TO THAT VALUE.
1105   0506             ;
1106   0506             ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1107   0506             ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1108   0506             ; NEXT LINE AND CONTINUE FROM THERE.
1109   0506             ;
1110   0506             ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1111   0506             ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1112   0506             ;
1113   0506             ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1114   0506             ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1115   0506             ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1116   0506             ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1117   0506             ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1118   0506             ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1119   0506             ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1120   0506             ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1121   0506             ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1122   0506             ;
1123   0506             ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1124   0506             ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1125   0506             ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1126   0506             ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1127   0506             ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1128   0506             ;
1129   0506 FF          SETVAL:         RST     RTSTV   ;*** SETVAL ***
1130   0507 DA 2C 05                    JP      C,QWHAT ;"WHAT?" NO VARIABLE
1131   050A E5                          PUSH    HL      ;SAVE ADDRESS OF VAR.
1132   050B CF                          TSTC('=',SV1)   ;PASS "=" SIGN
1132   050C 3D          
1132   050D 08          
1133   050E DF                          RST     REXPR   ;EVALUATE EXPR.
1134   050F 44                          LD      B,H     ;VALUE IS IN BC NOW
1135   0510 4D                          LD      C,L
1136   0511 E1                          POP     HL      ;GET ADDRESS
1137   0512 71                          LD      (HL),C  ;SAVE VALUE
1138   0513 23                          INC     HL
1139   0514 70                          LD      (HL),B
1140   0515 C9                          RET
1141   0516 C3 2C 05    SV1:            JP      QWHAT   ;NO "=" SIGN
1142   0519             
1143   0519 CF          FIN:            TSTC(';',FI1)   ;*** FIN ***
1143   051A 3B          
1143   051B 04          
1144   051C F1                          POP     AF      ;";", PURGE RET. ADDR.
1145   051D C3 8D 01                    JP      RUNSML  ;CONTINUE SAME LINE
1146   0520 CF          FI1:            TSTC(CR,FI2)    ;NOT ";", IS IT CR?
1146   0521 0D          
1146   0522 04          
1147   0523 F1                          POP     AF      ;YES, PURGE RET. ADDR.
1148   0524 C3 7D 01                    JP      RUNNXL  ;RUN NEXT LINE
1149   0527 C9          FI2:            RET             ;ELSE RETURN TO CALLER
1150   0528             
1151   0528 EF          ENDCHK:         RST     RIGNBLK ;IGNBLK
1152   0529 FE 0D                       CP      CR      ;END WITH CR?
1153   052B C8                          RET     Z       ;OK, ELSE SAY: "WHAT?"
1154   052C             ;
1155   052C D5          QWHAT:          PUSH    DE      ;*** QWHAT ***
1156   052D 11 E4 00    AWHAT:          LD      DE,WHAT ;*** AWHAT ***
1157   0530 97          ERROR:          SUB     A       ;*** ERROR ***
1158   0531 CD D1 05                    CALL    PRTSTG  ;PRINT 'WHAT?', 'HOW?'
1159   0534 D1                          POP     DE      ;OR 'SORRY'
1160   0535 1A                          LD      A,(DE)  ;SAVE THE CHARACTER
1161   0536 F5                          PUSH    AF      ;AT WHERE OLD DE ->
1162   0537 97                          SUB     A       ;AND PUT A 0 THERE
1163   0538 12                          LD      (DE),A
1164   0539 2A 3A 17                    LD      HL,(CURRNT)     ;GET CURRENT LINE #
1165   053C E5                          PUSH    HL
1166   053D 7E                          LD      A,(HL)  ;CHECK THE VALUE
1167   053E 23                          INC     HL
1168   053F B6                          OR      (HL)
1169   0540 D1                          POP     DE
1170   0541 CA F0 00                    JP      Z,RSTART        ;IF ZERO, JUST RESTART
1171   0544 7E                          LD      A,(HL)  ;IF NEGATIVE,
1172   0545 B7                          OR      A
1173   0546 FA 13 03                    JP      M,INPERR        ;REDO INPUT
1174   0549 CD 6A 06                    CALL    PRTLN   ;ELSE PRINT THE LINE
1175   054C 1B                          DEC     DE      ;UPTO WHERE THE 0 IS
1176   054D F1                          POP     AF      ;RESTORE THE CHARACTER
1177   054E 12                          LD      (DE),A
1178   054F 3E 3F                       LD      A,'?'   ;PRINT A "?"
1179   0551 D7                          RST     ROUTC
1180   0552 97                          SUB     A       ;AND THE REST OF THE
1181   0553 CD D1 05                    CALL    PRTSTG  ;LINE
1182   0556 C3 F0 00                    JP      RSTART  ;THEN RESTART
1183   0559             ;
1184   0559 D5          QSORRY:         PUSH    DE      ;*** QSORRY ***
1185   055A 11 EA 00    ASORRY:         LD      DE,SORRY        ;*** ASORRY ***
1186   055D C3 30 05                    JP      ERROR
1187   0560             ;
1188   0560             ;*************************************************************
1189   0560             ;
1190   0560             ; *** GETLN *** FNDLN (& FRIENDS) ***
1191   0560             ;
1192   0560             ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1193   0560             ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1194   0560             ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1195   0560             ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1196   0560             ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1197   0560             ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1198   0560             ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1199   0560             ;
1200   0560             ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1201   0560             ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1202   0560             ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1203   0560             ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1204   0560             ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1205   0560             ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1206   0560             ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1207   0560             ; LINE, FLAGS ARE C & NZ.
1208   0560             ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1209   0560             ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1210   0560             ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1211   0560             ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1212   0560             ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1213   0560             ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1214   0560             ;
1215   0560 D7          GETLN:          RST     ROUTC   ;*** GETLN ***
1216   0561 11 4E 17                    LD      DE,BUFFER       ;PROMPT AND INIT.
1217   0564 CD FA 06    GL1:            CALL    CHKIO   ;CHECK KEYBOARD
1218   0567 CA 64 05                    JP      Z,GL1   ;NO INPUT, WAIT
1219   056A FE 08                       CP      BS      ;BS, DELETE LAST CHARACTER?
1220   056C CA 8E 05                    JP      Z,GL3   ;YES
1221   056F FE 7F                       CP      DEL     ;DEL, DELETE LAST CHARACTER?
1222   0571 CA 8E 05                    JP      Z,GL3   ;YES
1223   0574 D7                          RST     ROUTC   ;INPUT, ECHO BACK
1224   0575 FE 0A                       CP      LF      ;IGNORE LF
1225   0577 CA 64 05                    JP      Z,GL1
1226   057A B7                          OR      A       ;IGNORE NULL
1227   057B CA 64 05                    JP      Z,GL1
1228   057E FE 18                       CP      CAN     ;^X, DELETE THE WHOLE LINE?
1229   0580 CA A1 05                    JP      Z,GL4   ;YES
1230   0583 12                          LD      (DE),A  ;ELSE SAVE INPUT
1231   0584 13                          INC     DE      ;AND BUMP POINTER
1232   0585 FE 0D                       CP      CR      ;WAS IT CR?
1233   0587 C8                          RET     Z       ;YES, END OF LINE
1234   0588 7B                          LD      A,E     ;ELSE MORE FREE ROOM?
1235   0589 FE 8E                       CP      BUFEND & 0FFH
1236   058B C2 64 05                    JP      NZ,GL1  ;YES, GET NEXT INPUT
1237   058E 7B          GL3:            LD      A,E     ;DELETE LAST CHARACTER
1238   058F FE 4E                       CP      BUFFER & 0FFH   ;BUT DO WE HAVE ANY?
1239   0591 CA A1 05                    JP      Z,GL4   ;NO, REDO WHOLE LINE
1240   0594 1B                          DEC     DE      ;YES, BACKUP POINTER
1241   0595 3E 08                       LD      A,BS    ;AND ECHO A BACKSPACE
1242   0597 D7                          RST     ROUTC
1243   0598 3E 20                       LD      A,' '   ;AND ECHO A BLANK
1244   059A D7                          RST     ROUTC
1245   059B 3E 08                       LD      A,BS    ;AND ECHO A BACKSPACE
1246   059D D7                          RST     ROUTC
1247   059E C3 64 05                    JP      GL1     ;GO GET NEXT INPUT
1248   05A1 CD 0E 00    GL4:            CALL    CRLF    ;REDO ENTIRE LINE
1249   05A4 3E 5E                       LD      A,'^'   ;CR, LF AND UP-ARROW
1250   05A6 C3 60 05                    JP      GETLN
1251   05A9             ;
1252   05A9 7C          FNDLN:          LD      A,H     ;*** FNDLN ***
1253   05AA B7                          OR      A       ;CHECK SIGN OF HL
1254   05AB FA D5 00                    JP      M,QHOW  ;IT CANNOT BE -
1255   05AE 11 00 08                    LD      DE,TXTBGN       ;INIT TEXT POINTER
1256   05B1             ;
1257   05B1             FNDLP:          ;*** FDLNP ***
1258   05B1 E5          FL1:            PUSH    HL      ;SAVE LINE #
1259   05B2 2A 38 17                    LD      HL,(TXTUNF)     ;CHECK IF WE PASSED END
1260   05B5 2B                          DEC     HL
1261   05B6 E7                          RST     RCOMP
1262   05B7 E1                          POP     HL      ;GET LINE # BACK
1263   05B8 D8                          RET     C       ;C,NZ PASSED END
1264   05B9 1A                          LD      A,(DE)  ;WE DID NOT, GET BYTE 1
1265   05BA 95                          SUB     L       ;IS THIS THE LINE?
1266   05BB 47                          LD      B,A     ;COMPARE LOW ORDER
1267   05BC 13                          INC     DE
1268   05BD 1A                          LD      A,(DE)  ;GET BYTE 2
1269   05BE 9C                          SBC     A,H     ;COMPARE HIGH ORDER
1270   05BF DA C6 05                    JP      C,FL2   ;NO, NOT THERE YET
1271   05C2 1B                          DEC     DE      ;ELSE WE EITHER FOUND
1272   05C3 B0                          OR      B       ;IT, OR IT IS NOT THERE
1273   05C4 C9                          RET     ;NC,Z:FOUND, NC,NZ:NO
1274   05C5             ;
1275   05C5             FNDNXT:         ;*** FNDNXT ***
1276   05C5 13                          INC     DE      ;FIND NEXT LINE
1277   05C6 13          FL2:            INC     DE      ;JUST PASSED BYTE 1 & 2
1278   05C7             ;
1279   05C7 1A          FNDSKP:         LD      A,(DE)  ;*** FNDSKP ***
1280   05C8 FE 0D                       CP      CR      ;TRY TO FIND CR
1281   05CA C2 C6 05                    JP      NZ,FL2  ;KEEP LOOKING
1282   05CD 13                          INC     DE      ;FOUND CR, SKIP OVER
1283   05CE C3 B1 05                    JP      FL1     ;CHECK IF END OF TEXT
1284   05D1             ;
1285   05D1             ;*************************************************************
1286   05D1             ;
1287   05D1             ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1288   05D1             ;
1289   05D1             ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1290   05D1             ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1291   05D1             ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1292   05D1             ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1293   05D1             ;
1294   05D1             ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1295   05D1             ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1296   05D1             ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1297   05D1             ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1298   05D1             ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1299   05D1             ; OVER (USUALLY A JUMP INSTRUCTION.
1300   05D1             ;
1301   05D1             ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1302   05D1             ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1303   05D1             ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1304   05D1             ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1305   05D1             ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1306   05D1             ;
1307   05D1             ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1308   05D1             ;
1309   05D1 47          PRTSTG:         LD      B,A     ;*** PRTSTG ***
1310   05D2 1A          PS1:            LD      A,(DE)  ;GET A CHARACTER
1311   05D3 13                          INC     DE      ;BUMP POINTER
1312   05D4 B8                          CP      B       ;SAME AS OLD A?
1313   05D5 C8                          RET     Z       ;YES, RETURN
1314   05D6 D7                          RST     ROUTC   ;ELSE PRINT IT
1315   05D7 FE 0D                       CP      CR      ;WAS IT A CR?
1316   05D9 C2 D2 05                    JP      NZ,PS1  ;NO, NEXT
1317   05DC C9                          RET             ;YES, RETURN
1318   05DD             ;
1319   05DD CF          QTSTG:          TSTC($22,QT3)   ;*** QTSTG ***
1319   05DE 22          
1319   05DF 0F          
1320   05E0 3E 22                       LD      A,22H   ;IT IS A '"'
1321   05E2 CD D1 05    QT1:            CALL    PRTSTG  ;PRINT UNTIL ANOTHER
1322   05E5 FE 0D       QT1A:           CP      CR      ;WAS LAST ONE A CR?
1323   05E7 E1                          POP     HL      ;RETURN ADDRESS
1324   05E8 CA 7D 01                    JP      Z,RUNNXL        ;WAS CR, RUN NEXT LINE
1325   05EB 23          QT2:            INC     HL      ;SKIP 3 BYTES ON RETURN
1326   05EC 23                          INC     HL
1327   05ED 23                          INC     HL
1328   05EE E9                          JP      (HL)    ;RETURN
1329   05EF CF          QT3:            TSTC($27,QT4)   ;IS IT A "'"?
1329   05F0 27          
1329   05F1 05          
1330   05F2 3E 27                       LD      A,27H   ;YES, DO THE SAME
1331   05F4 C3 E2 05                    JP      QT1     ;AS IN '"'
1332   05F7 CF          QT4:            TSTC($5F,QT5)   ;IS IT UNDERLINE?
1332   05F8 5F          
1332   05F9 07          
1333   05FA 3E 8D                       LD      A,08DH  ;YES, CR WITHOUT LF
1334   05FC D7                          RST     ROUTC
1335   05FD E1                          POP     HL      ;RETURN ADDRESS
1336   05FE C3 EB 05                    JP      QT2
1337   0601 CF          QT5:            TSTC(5EH,QT5)   ;RST 1, is it '^'?
1337   0602 5E          
1337   0603 FD          
1338   0604 1A                          LD      A,(DE)
1339   0605 EE 40                       XOR     40H
1340   0607 CD 10 00                    CALL    OUTC
1341   060A 1A                          LD      A,(DE)
1342   060B 13                          INC     DE
1343   060C C3 E5 05                    JP      QT1A
1344   060F C9          QT6:            RET             ;NONE OF ABOVE
1345   0610             
1346   0610             PRTNUM:                         ;*** PRINT NUMBER IN HL ***
1347   0610 3A 37 17                    LD      A,(PNBASE)      ;GET NUMBER BASE
1348   0613 FE 10                       CP      16      ;HEX NUMBER?
1349   0615 C2 1E 06                    JP      NZ,PN0  ;NO, CHECK SIGN
1350   0618 06 24                       LD      B,'$'   ;PRINT LEADING '$'
1351   061A 0D                          DEC     C       ;'$' TAKES SPACE
1352   061B C3 29 06                    JP      PN1     ;HEX IS UNSIGNED
1353   061E 06 00       PN0:            LD      B,0     ;NO PREFIX YET
1354   0620 CD E6 04                    CALL    CHKSGN  ;CHECK SIGN
1355   0623 F2 29 06                    JP      P,PN1   ;NO SIGN
1356   0626 06 2D                       LD      B,'-'   ;B=SIGN
1357   0628 0D                          DEC     C       ;'-' TAKES SPACE
1358   0629 D5          PN1:            PUSH    DE
1359   062A 3A 37 17                    LD      A,(PNBASE)
1360   062D 5F                          LD      E,A
1361   062E AF                          XOR     A
1362   062F 57                          LD      D,A
1363   0630 D5                          PUSH    DE      ;SAVE AS A FLAG
1364   0631 0D                          DEC     C       ;C=SPACES
1365   0632 C5                          PUSH    BC      ;SAVE SIGN & SPACE
1366   0633 CD C9 04    PN2:            CALL    DIVIDE  ;DIVIDE HL BY NUMBER BASE
1367   0636 78                          LD      A,B     ;RESULT 0?
1368   0637 B1                          OR      C
1369   0638 CA 43 06                    JP      Z,PN3   ;YES, WE GOT ALL
1370   063B E3                          EX      (SP),HL ;NO, SAVE REMAINDER
1371   063C 2D                          DEC     L       ;AND COUNT SPACE
1372   063D E5                          PUSH    HL      ;HL IS OLD BC
1373   063E 60                          LD      H,B     ;MOVE RESULT TO BC
1374   063F 69                          LD      L,C
1375   0640 C3 33 06                    JP      PN2     ;AND DIVIDE AGAIN
1376   0643             ;
1377   0643 C1          PN3:            POP     BC      ;WE GOT ALL DIGITS IN
1378   0644 0D          PN4:            DEC     C       ;THE STACK
1379   0645 79                          LD      A,C     ;LOOK AT SPACE COUNT
1380   0646 B7                          OR      A
1381   0647 FA 50 06                    JP      M,PN5   ;NO LEADING BLANKS
1382   064A 3E 20                       LD      A,' '   ;LEADING BLANKS
1383   064C D7                          RST     ROUTC
1384   064D C3 44 06                    JP      PN4     ;MORE?
1385   0650 78          PN5:            LD      A,B     ;PRINT SIGN OR '$'
1386   0651 B7                          OR      A
1387   0652 C4 10 00                    CALL    NZ,OUTC
1388   0655 5D                          LD      E,L     ;LAST REMAINDER IN E
1389   0656 3A 37 17    PN6:            LD      A,(PNBASE)      ;GET NUMBER BASE
1390   0659 BB                          CP      E       ;IT IS FLAG FOR NO MORE
1391   065A 7B                          LD      A,E     ;CHECK DIGIT IN E
1392   065B D1                          POP     DE
1393   065C C8                          RET     Z       ;IF SO, RETURN
1394   065D FE 0A                       CP      10      ;0-9? < A hex?
1395   065F DA 64 06                    JP      C,PN7   ;Skip Add 7
1396   0662 C6 07                       ADD     A,'A'-'0'-10    ;Bring it up to ASCII A-F
1397   0664 C6 30       PN7:            ADD     A,'0'   ;ELSE CONVERT TO ASCII
1398   0666 D7                          RST     ROUTC   ;AND PRINT THE DIGIT
1399   0667 C3 56 06                    JP      PN6     ;GO BACK FOR MORE
1400   066A             
1401   066A 3E 0A       PRTLN:          LD      A,10    ;SET 10 AS DEFAULT BASE
1402   066C 32 37 17                    LD      (PNBASE),A      ;FOR PRTNUM
1403   066F 1A                          LD      A,(DE)
1404   0670 6F                          LD      L,A     ;LOW ORDER LINE #
1405   0671 13                          INC     DE
1406   0672 1A                          LD      A,(DE)  ;HIGH ORDER
1407   0673 67                          LD      H,A
1408   0674 13                          INC     DE
1409   0675 0E 04                       LD      C,4     ;PRINT 4 DIGIT LINE #
1410   0677 CD 10 06                    CALL    PRTNUM
1411   067A 3E 20                       LD      A,' '   ;FOLLOWED BY A BLANK
1412   067C D7                          RST     ROUTC
1413   067D 97                          SUB     A       ;AND THEN THE NEXT
1414   067E CD D1 05                    CALL    PRTSTG
1415   0681 C9                          RET
1416   0682             ;
1417   0682             ;*************************************************************
1418   0682             ;
1419   0682             ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1420   0682             ;
1421   0682             ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1422   0682             ; DE = HL
1423   0682             ;
1424   0682             ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1425   0682             ; UNTIL DE = BC
1426   0682             ;
1427   0682             ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1428   0682             ; STACK
1429   0682             ;
1430   0682             ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1431   0682             ; STACK
1432   0682             ;
1433   0682 E7          MVUP:           RST     RCOMP   ;*** MVUP ***
1434   0683 C8                          RET     Z       ;DE = HL, RETURN
1435   0684 1A                          LD      A,(DE)  ;GET ONE BYTE
1436   0685 02                          LD      (BC),A  ;MOVE IT
1437   0686 13                          INC     DE      ;INCREASE BOTH POINTERS
1438   0687 03                          INC     BC
1439   0688 C3 82 06                    JP      MVUP    ;UNTIL DONE
1440   068B             ;
1441   068B 78          MVDOWN:         LD      A,B     ;*** MVDOWN ***
1442   068C 92                          SUB     D       ;TEST IF DE = BC
1443   068D C2 93 06                    JP      NZ,MD1  ;NO, GO MOVE
1444   0690 79                          LD      A,C     ;MAYBE, OTHER BYTE?
1445   0691 93                          SUB     E
1446   0692 C8                          RET     Z       ;YES, RETURN
1447   0693 1B          MD1:            DEC     DE      ;ELSE MOVE A BYTE
1448   0694 2B                          DEC     HL      ;BUT FIRST DECREASE
1449   0695 1A                          LD      A,(DE)  ;BOTH POINTERS AND
1450   0696 77                          LD      (HL),A  ;THEN DO IT
1451   0697 C3 8B 06                    JP      MVDOWN  ;LOOP BACK
1452   069A             ;
1453   069A C1          POPA:           POP     BC      ;BC = RETURN ADDR.
1454   069B E1                          POP     HL      ;RESTORE LOPVAR, BUT
1455   069C 22 42 17                    LD      (LOPVAR),HL     ;=0 MEANS NO MORE
1456   069F 7C                          LD      A,H
1457   06A0 B5                          OR      L
1458   06A1 CA B4 06                    JP      Z,PP1   ;YEP, GO RETURN
1459   06A4 E1                          POP     HL      ;NOP, RESTORE OTHERS
1460   06A5 22 44 17                    LD      (LOPINC),HL
1461   06A8 E1                          POP     HL
1462   06A9 22 46 17                    LD      (LOPLMT),HL
1463   06AC E1                          POP     HL
1464   06AD 22 48 17                    LD      (LOPLN),HL
1465   06B0 E1                          POP     HL
1466   06B1 22 4A 17                    LD      (LOPPT),HL
1467   06B4 C5          PP1:            PUSH    BC      ;BC = RETURN ADDR.
1468   06B5 C9                          RET
1469   06B6             ;
1470   06B6 21 8F 17    PUSHA:          LD      HL,STKLMT       ;*** PUSHA ***
1471   06B9 CD E9 04                    CALL    CHGSGN
1472   06BC C1                          POP     BC      ;BC=RETURN ADDRESS
1473   06BD 39                          ADD     HL,SP   ;IS STACK NEAR THE TOP?
1474   06BE D2 59 05                    JP      NC,QSORRY       ;YES, SORRY FOR THAT
1475   06C1 2A 42 17                    LD      HL,(LOPVAR)     ;ELSE SAVE LOOP VAR'S
1476   06C4 7C                          LD      A,H     ;BUT IF LOPVAR IS 0
1477   06C5 B5                          OR      L       ;THAT WILL BE ALL
1478   06C6 CA DC 06                    JP      Z,PU1
1479   06C9 2A 4A 17                    LD      HL,(LOPPT)      ;ELSE, MORE TO SAVE
1480   06CC E5                          PUSH    HL
1481   06CD 2A 48 17                    LD      HL,(LOPLN)
1482   06D0 E5                          PUSH    HL
1483   06D1 2A 46 17                    LD      HL,(LOPLMT)
1484   06D4 E5                          PUSH    HL
1485   06D5 2A 44 17                    LD      HL,(LOPINC)
1486   06D8 E5                          PUSH    HL
1487   06D9 2A 42 17                    LD      HL,(LOPVAR)
1488   06DC E5          PU1:            PUSH    HL
1489   06DD C5                          PUSH    BC      ;BC = RETURN ADDR.
1490   06DE C9                          RET
1491   06DF             
1492   06DF             ;*************************************************************
1493   06DF             ;
1494   06DF             ; *** OUTC *** CHKIO ***
1495   06DF             ;
1496   06DF             ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1497   06DF             ; OUTC WILL OUTPUT THE BYTE IN A.
1498   06DF             ; IF THAT IS A CR, A LF IS ALSO SEND OUT.
1499   06DF             ; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
1500   06DF             ; ALL REGISTERS ARE RESTORED.
1501   06DF             ;
1502   06DF             ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1503   06DF             ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1504   06DF             ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1505   06DF             ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1506   06DF             ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1507   06DF             ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
1508   06DF             ;
1509   06DF             ;THIS IS AT LOC. 0
1510   06DF             ;START:         LD      SP,STACK        ;*** COLD START ***
1511   06DF             ;               LD      A,0FFH
1512   06DF             ;               JP      INIT
1513   06DF             
1514   06DF 11 09 07    INIT:           LD      DE,MSG1
1515   06E2 CD D1 05                    CALL    PRTSTG
1516   06E5 21 00 00                    LD      HL,START
1517   06E8 22 4C 17                    LD      (RANPNT),HL
1518   06EB 21 00 08                    LD      HL,TXTBGN
1519   06EE 22 38 17                    LD      (TXTUNF),HL
1520   06F1 C3 F0 00                    JP      RSTART
1521   06F4             
1522   06F4             ;THIS IS AT LOC. 10
1523   06F4             ;OUTC:          OUT     (IODATA),A      ;Out to data port
1524   06F4             ;               CP      CR      ;WAS IT CR?
1525   06F4             ;               RET     NZ      ;NO, FINISHED
1526   06F4             ;               JP      OC1     ;REST OF THIS IS AT OC1
1527   06F4 3E 0A       OC1:            LD      A,LF    ;YES, WE SEND LF TOO
1528   06F6 D7                          RST     ROUTC   ;THIS IS RECURSIVE
1529   06F7 3E 0D                       LD      A,CR    ;GET CR BACK IN A
1530   06F9 C9                          RET
1531   06FA             
1532   06FA DB 02       CHKIO:          IN      A,(IOSTAT)      ;*** CHKIO ***
1533   06FC E6 01                       AND     IO_RX_BIT       ;MASK STATUS BIT
1534   06FE C8                          RET     Z       ;NOT READY, RETURN "Z"
1535   06FF DB 01                       IN      A,(IODATA)      ;READY, READ DATA
1536   0701 E6 7F                       AND     7FH     ;MASK BIT 7 OFF
1537   0703 FE 03       CI0:            CP      03H     ;IS IT CONTROL-C?
1538   0705 C0                          RET     NZ      ;NO, RETURN "NZ"
1539   0706 C3 F0 00                    JP      RSTART  ;YES, RESTART TBI
1540   0709             ;
1541   0709 54 69 6E 79 MSG1:           .DB     "TinyBASIC"
1541   070D 42 41 53 49 
1541   0711 43 
1542   0712 0D                          .DB     CR
1543   0713             
1544   0713             
1545   0713             ;*************************************************************
1546   0713             ;
1547   0713             ; *** TABLES *** DIRECT *** & EXEC ***
1548   0713             ;
1549   0713             ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1550   0713             ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1551   0713             ; OF CODE ACCORDING TO THE TABLE.
1552   0713             ;
1553   0713             ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1554   0713             ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1555   0713             ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1556   0713             ; ALL DIRECT AND STATEMENT COMMANDS.
1557   0713             ;
1558   0713             ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1559   0713             ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1560   0713             ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1561   0713             ;
1562   0713             ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1563   0713             ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1564   0713             ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1565   0713             ; BYTE SET TO 1.
1566   0713             ; This is done by the macro 'DWA'.
1567   0713             ; If the program is executed from an address < 0x8000
1568   0713             ; take care to mask this bit in program part 'EXEC'.
1569   0713             ;
1570   0713             ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
1571   0713             ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
1572   0713             ; MATCH THIS NULL ITEM AS DEFAULT.
1573   0713             ;
1574   0713             TAB1:           ;DIRECT COMMANDS
1575   0713 4C 49 53 54                 .DB     "LIST"
1576   0717 81                          DWA(LIST)
1576   0718 A5          
1577   0719 52 55 4E                    .DB     "RUN"
1578   071C 81                          DWA(RUN)
1578   071D 77          
1579   071E 4E 45 57                    .DB     "NEW"
1580   0721 81                          DWA(NEW)
1580   0722 68          
1581   0723             ;
1582   0723             TAB2:           ;DIRECT/STATEMENT
1583   0723 4E 45 58 54                 .DB     "NEXT"
1584   0727 82                          DWA(NEXT)
1584   0728 A7          
1585   0729 4C 45 54                    .DB     "LET"
1586   072C 83                          DWA(LET)
1586   072D 70          
1587   072E 49 46                       .DB     "IF"
1588   0730 83                          DWA(IFF)
1588   0731 04          
1589   0732 47 4F 54 4F                 .DB     "GOTO"
1590   0736 81                          DWA(GOTO)
1590   0737 96          
1591   0738 47 4F 53 55                 .DB     "GOSUB"
1591   073C 42 
1592   073D 82                          DWA(GOSUB)
1592   073E 0F          
1593   073F 52 45 54 55                 .DB     "RETURN"
1593   0743 52 4E 
1594   0745 82                          DWA(RETURN)
1594   0746 2F          
1595   0747 52 45 4D                    .DB     "REM"
1596   074A 83                          DWA(REM)
1596   074B 00          
1597   074C 46 4F 52                    .DB     "FOR"
1598   074F 82                          DWA(FOR)
1598   0750 48          
1599   0751 49 4E 50 55                 .DB     "INPUT"
1599   0755 54 
1600   0756 83                          DWA(INPUT)
1600   0757 1D          
1601   0758 50 52 49 4E                 .DB     "PRINT"
1601   075C 54 
1602   075D 81                          DWA(PRINT)
1602   075E BD          
1603   075F 3F                          .DB     "?"
1604   0760 81                          DWA(PRINT)
1604   0761 BD          
1605   0762 53 54 4F 50                 .DB     "STOP"
1606   0766 81                          DWA(STOP)
1606   0767 71          
1607   0768 48 41 4C 54                 .DB     "HALT"          ;HALT CPU (return to analyser)
1608   076C 84                          DWA(HALT)
1608   076D C8          
1609   076E 83                          DWA(DEFLT)      ;END OF LIST
1609   076F 6A          
1610   0770             ;
1611   0770             TAB4:           ;FUNCTIONS
1612   0770 52 4E 44                    .DB     "RND"
1613   0773 84                          DWA(RND)
1613   0774 72          
1614   0775 41 42 53                    .DB     "ABS"
1615   0778 84                          DWA(ABS)
1615   0779 9D          
1616   077A 46 52 45 45                 .DB     "FREE"
1617   077E 84                          DWA(FREE)
1617   077F A6          
1618   0780 50 45 45 4B                 .DB     "PEEK"          ;get byte from memory
1619   0784 84                          DWA(PEEK)
1619   0785 B3          
1620   0786 44 45 45 4B                 .DB     "DEEK"          ;get word from memory
1621   078A 84                          DWA(DEEK)
1621   078B BA          
1622   078C 52 41 4D                    .DB     "RAM"           ;get RAM size
1623   078F 84                          DWA(RAM)
1623   0790 C4          
1624   0791 84                          DWA(XP40)       ;END OF LIST
1624   0792 58          
1625   0793             ;
1626   0793             TAB5:           ;"TO" IN "FOR"
1627   0793 54 4F                       .DB     "TO"
1628   0795 82                          DWA(FR1)
1628   0796 58          
1629   0797 85                          DWA(QWHAT)      ;END OF LIST
1629   0798 2C          
1630   0799             ;
1631   0799             TAB6:           ;"STEP" IN "FOR"
1632   0799 53 54 45 50                 .DB     "STEP"
1633   079D 82                          DWA(FR2)
1633   079E 62          
1634   079F 82                          DWA(FR3)        ;END OF LIST
1634   07A0 66          
1635   07A1             ;
1636   07A1             TAB8:           ;RELATION OPERATORS
1637   07A1 3E 3D                       .DB     ">="
1638   07A3 83                          DWA(XP11)
1638   07A4 80          
1639   07A5 21 3D                       .DB     "!="
1640   07A7 83                          DWA(XP12)
1640   07A8 86          
1641   07A9 23                          .DB     "#"
1642   07AA 83                          DWA(XP12)
1642   07AB 86          
1643   07AC 3E                          .DB     ">"
1644   07AD 83                          DWA(XP13)
1644   07AE 8C          
1645   07AF 3D 3D                       .DB     "=="
1646   07B1 83                          DWA(XP15)
1646   07B2 9B          
1647   07B3 3D                          .DB     "="
1648   07B4 83                          DWA(XP15)
1648   07B5 9B          
1649   07B6 3C 3D                       .DB     "<="
1650   07B8 83                          DWA(XP14)
1650   07B9 93          
1651   07BA 3C                          .DB     "<"
1652   07BB 83                          DWA(XP16)
1652   07BC A1          
1653   07BD 83                          DWA(XP17)       ;END OF REL OPERATOR LIST
1653   07BE A7          
1654   07BF             ;
1655   07BF 21 12 07    DIRECT:         LD      HL,TAB1-1       ;*** DIRECT ***
1656   07C2             ;
1657   07C2             EXEC:           ;*** EXEC ***
1658   07C2 EF          EX0:            RST     RIGNBLK ;IGNORE LEADING BLANKS
1659   07C3 D5                          PUSH    DE      ;SAVE POINTER
1660   07C4 1A          EX1:            LD      A,(DE)  ;IF FOUND '.' IN STRING
1661   07C5 13                          INC     DE      ;BEFORE ANY MISMATCH
1662   07C6 FE 2E                       CP      2EH     ;WE DECLARE A MATCH
1663   07C8 CA ED 07                    JP      Z,EX3
1664   07CB FE 61                       CP      'a'     ;< 'a' ?
1665   07CD DA D7 07                    JP      C,EXN   ;NO ALPHA CHAR
1666   07D0 FE 7B                       CP      'z'+1   ;> 'z'
1667   07D2 D2 D7 07                    JP      NC,EXN  ;NO ALPHA CHAR
1668   07D5 E6 5F                       AND     5FH     ;MASK LOWER CASE TO UPPER CASE
1669   07D7             EXN:
1670   07D7 23                          INC     HL      ;HL->TABLE
1671   07D8 BE                          CP      (HL)    ;IF MATCH, TEST NEXT
1672   07D9 CA C4 07                    JP      Z,EX1
1673   07DC 3E 7F                       LD      A,07FH  ;ELSE SEE IF BIT 7
1674   07DE 1B                          DEC     DE      ;OF TABLE IS SET, WHICH
1675   07DF BE                          CP      (HL)    ;IS THE JUMP ADDR. (HI)
1676   07E0 DA F4 07                    JP      C,EX5   ;C:YES, MATCHED
1677   07E3 23          EX2:            INC     HL      ;NC:NO, FIND JUMP ADDR.
1678   07E4 BE                          CP      (HL)
1679   07E5 D2 E3 07                    JP      NC,EX2
1680   07E8 23                          INC     HL      ;BUMP TO NEXT TAB. ITEM
1681   07E9 D1                          POP     DE      ;RESTORE STRING POINTER
1682   07EA C3 C2 07                    JP      EX0     ;TEST AGAINST NEXT ITEM
1683   07ED 3E 7F       EX3:            LD      A,07FH  ;PARTIAL MATCH, FIND
1684   07EF 23          EX4:            INC     HL      ;JUMP ADDR., WHICH IS
1685   07F0 BE                          CP      (HL)    ;FLAGGED BY BIT 7
1686   07F1 D2 EF 07                    JP      NC,EX4
1687   07F4 7E          EX5:            LD      A,(HL)  ;LOAD HL WITH THE JUMP
1688   07F5 23                          INC     HL      ;ADDRESS FROM THE TABLE
1689   07F6 6E                          LD      L,(HL)
1690   07F7             #IF             $ < 8000H
1691   07F7 E6 7F                       AND     7FH     ;MASK OFF HIGH ADDRESS BIT
1692   07F9             #ENDIF
1693   07F9 67                          LD      H,A
1694   07FA F1                          POP     AF      ;CLEAN UP THE GARBAGE
1695   07FB E9                          JP      (HL)    ;AND WE GO DO IT
1696   07FC             ;
1697   07FC             LSTROM:                         ;ALL ABOVE CAN BE ROM
1698   07FC             
1699   07FC             ; Check if the program code overflows the ROM size
1700   07FC             
1701   07FC~            #IF $ > RAMBGN
1702   07FC~                            .ECHO   "\n\n*** The ROM section is "
1703   07FC~                            .ECHO   $ - RAMBGN
1704   07FC~                            .ECHO   " bytes too long! ***\n\n\n"
1705   07FC             #ENDIF
1706   07FC             ;
1707   07FC             ;
1708   07FC             ;*************************************************************
1709   07FC             
1710   07FC             
1711   0800                             .ORG            RAMBGN          ;HERE DOWN MUST BE RAM
1712   0800             
1713   0800             ;*************************************************************
1714   0800             ;
1715   0800             ;
1716   0800             TXTBGN:
1717   0800             ;
1718   1700                             .ORG            RAMBGN+RAMSZE-$100
1719   1700             ;
1720   1700             TXTEND:         .EQU            $               ;TEXT SAVE AREA ENDS
1721   1700             ARRBGN:         .DS             2               ;VARIABLEs '@(0)', '@(1), @(2)
1722   1702                                                             ;... stored top-down
1723   1702                                                             ;i.e. &@(i) = TXTEND-2*i
1724   1702             ;
1725   1702             VARBGN:         .DS             2*26            ;VARIABLES 'A'..'Z'
1726   1736             OCSW:           .DS             1               ;SWITCH FOR OUTPUT
1727   1737             PNBASE:         .DS             1               ;BASE FOR PRTNUM
1728   1738             TXTUNF:         .DS             2               ;->UNFILLED TEXT AREA
1729   173A             CURRNT:         .DS             2               ;POINTS TO CURRENT LINE
1730   173C             STKGOS:         .DS             2               ;SAVES SP IN 'GOSUB'
1731   173E             VARNXT:         .DS             2               ;TEMP STORAGE
1732   1740             STKINP:         .DS             2               ;SAVES SP IN 'INPUT'
1733   1742             LOPVAR:         .DS             2               ;'FOR' LOOP SAVE AREA
1734   1744             LOPINC:         .DS             2               ;INCREMENT
1735   1746             LOPLMT:         .DS             2               ;LIMIT
1736   1748             LOPLN:          .DS             2               ;LINE NUMBER
1737   174A             LOPPT:          .DS             2               ;TEXT POINTER
1738   174C             RANPNT:         .DS             2               ;RANDOM NUMBER POINTER
1739   174E             BUFFER:         .DS             64              ;INPUT BUFFER
1740   178E             BUFEND:         .DS             1               ;BUFFER ENDS
1741   178F             STKLMT:         .DS             1               ;TOP LIMIT FOR STACK
1742   1790             ;
1743   1800                             .ORG            RAMBGN+RAMSZE   ;RAM END
1744   1800             STACK:          .EQU            $               ;STACK STARTS HERE
1745   1800             ;
1746   1800                             .END
