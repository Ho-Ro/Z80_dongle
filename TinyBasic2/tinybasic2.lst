0001   0000             ;        .Z80
0002   0000             ;Modified Nov 1 2016 by Donn Stewart for use in CPUville Z80 computer
0003   0000             ;Changed UART (ACIA) port numbers to 3 for status, 2 for data in INIT, CHKIO, OUTC
0004   0000             ;Status bit for read in CHKIO changed to 0x02
0005   0000             ;Status bit for write in OUTC (actually OC3) changed to 0x01
0006   0000             ;Changed UART initialization parameters in INIT
0007   0000             ;Changed ORG statements at end of file to match system with 2K RAM
0008   0000             ;
0009   0000             ;2024-10-11 Ho-Ro:
0010   0000             ;Automatically converted from 8080 syntax to Z80 syntax:
0011   0000             ;https://hc-ddr.hucki.net/wiki/doku.php/cpm/8080_z80
0012   0000             ;Modified for use with Z80 dongle simulator
0013   0000             ;UART data port 1
0014   0000             ;UART status port 2
0015   0000             ;New:
0016   0000             ;Case insensitive input
0017   0000             ;PEEK and DEEK
0018   0000             ;PRINT modifier for hex out: PRINT %16,..
0019   0000             ;Hex numbers: $xxxx
0020   0000             
0021   0000             ;*************************************************************
0022   0000             ;
0023   0000             ;                 TINY BASIC FOR INTEL 8080
0024   0000             ;                       VERSION 2.0
0025   0000             ;                     BY LI-CHEN WANG
0026   0000             ;                  MODIFIED AND TRANSLATED
0027   0000             ;                    TO INTEL MNEMONICS
0028   0000             ;                     BY ROGER RAUSKOLB
0029   0000             ;                      10 OCTOBER,1976
0030   0000             ;                        @COPYLEFT
0031   0000             ;                   ALL WRONGS RESERVED
0032   0000             ;
0033   0000             ;*************************************************************
0034   0000             ;
0035   0000             ; *** ZERO PAGE SUBROUTINES ***
0036   0000             ;
0037   0000             ; THE 8080 INSTRUCTION SET LETS YOU HAVE 8 ROUTINES IN LOW
0038   0000             ; MEMORY THAT MAY BE CALLED BY RST N, N BEING 0 THROUGH 7.
0039   0000             ; THIS IS A ONE BYTE INSTRUCTION AND HAS THE SAME POWER AS
0040   0000             ; THE THREE BYTE INSTRUCTION CALL LLHH.  TINY BASIC WILL
0041   0000             ; USE RST 0 AS START AND RST 1 THROUGH RST 7 FOR
0042   0000             ; THE SEVEN MOST FREQUENTLY USED SUBROUTINES.
0043   0000             ; TWO OTHER SUBROUTINES (CRLF AND TSTNUM) ARE ALSO IN THIS
0044   0000             ; SECTION.  THEY CAN BE REACHED ONLY BY 3-BYTE CALLS.
0045   0000             ;
0046   0000             
0047   0000             ; Memory map
0048   0000             ROMBGN          .EQU            $0000           ; Execution must start here
0049   0000             RAMBGN          .EQU            $0800           ; 2K ROM
0050   0000             RAMSZE          .EQU            $1800           ; 6K RAM
0051   0000             
0052   0000             ; IO map
0053   0000             IODATA          .EQU            1
0054   0000             IOSTAT          .EQU            2
0055   0000             IO_RX_BIT       .EQU            $01
0056   0000             
0057   0000             ; Control character
0058   0000             BS              .EQU            08H             ; ^H, BACKSPACE
0059   0000             CR              .EQU            0DH             ; ^M, CARRIAGE RETURN
0060   0000             LF              .EQU            0AH             ; ^J, LINE FEED
0061   0000             CAN             .EQU            18H             ; ^X, CANCEL
0062   0000             DEL             .EQU            7FH             ; DELETE
0063   0000             
0064   0000             ; Store a label address as BIG endian with bit A15 set
0065   0000             #DEFINE DWA(LABEL) .DB (LABEL >> 8) | $80 \ .DB (LABEL & $FF)
0066   0000             
0067   0000             ; if CHAR = A THEN JUMP RELATIVE TO LABEL
0068   0000             #DEFINE TSTC(CHAR,LABEL) RST RTSTC \ .DB CHAR \ .DB LABEL-$-1
0069   0000             
0070   0000             
0071   0000             .ORG            ROMBGN
0072   0000             
0073   0000 31 00 20    START:          LD      SP,STACK        ;*** COLD START ***
0074   0003 3E FF                       LD      A,0FFH
0075   0005 C3 C3 06                    JP      INIT
0076   0008             
0077   0008             RTSTC           .EQU    $       ;*** RST 1 @ $0008 ***
0078   0008 E3                          EX      (SP),HL
0079   0009 EF                          RST     RIGNBLK ;IGNORE BLANKS AND
0080   000A BE                          CP      (HL)    ;TEST CHARACTER
0081   000B C3 6F 00                    JP      TC1     ;REST OF THIS IS AT TC1
0082   000E             
0083   000E 3E 0D       CRLF:           LD      A,CR    ;*** CRLF ***
0084   0010             ;
0085   0010             ROUTC           .EQU    $               ;*** RST 2 @ $0010 ***
0086   0010 D3 01       OUTC:           OUT     (IODATA),A      ;Out to data port
0087   0012 FE 0D                       CP      CR      ;WAS IT CR?
0088   0014 C0                          RET     NZ      ;NO, FINISHED
0089   0015 C3 E2 06                    JP      OC1     ;REST OF THIS IS AT OC1
0090   0018             
0091   0018             REXPR           .EQU    $       ;*** RST 3 @ $0018 ***
0092   0018 CD B9 03    EXPR:           CALL    EXPR2
0093   001B E5                          PUSH    HL      ;EVALUATE AN EXPRESSION
0094   001C C3 75 03                    JP      EXPR1   ;REST OF IT AT EXPR1
0095   001F 57          .DB             "W"
0096   0020             
0097   0020             RCOMP           .EQU    $       ;*** RST 4 @ $0020 ***
0098   0020 7C          COMP:           LD      A,H
0099   0021 BA                          CP      D       ;COMPARE HL WITH DE
0100   0022 C0                          RET     NZ      ;RETURN CORRECT C AND
0101   0023 7D                          LD      A,L     ;Z FLAGS
0102   0024 BB                          CP      E       ;BUT OLD A IS LOST
0103   0025 C9                          RET
0104   0026 41 4E       .DB             "AN"
0105   0028             
0106   0028             RIGNBLK         .EQU    $       ;*** RST 5 @ $0028 ***
0107   0028 1A          IGNBLK:         LD      A,(DE)
0108   0029 FE 20                       CP      20H     ;IGNORE BLANKS
0109   002B C0                          RET     NZ      ;IN TEXT (WHERE DE->)
0110   002C 13                          INC     DE      ;AND RETURN THE FIRST
0111   002D C3 28 00                    JP      IGNBLK  ;NON-BLANK CHAR. IN A
0112   0030             
0113   0030             RFINISH         .EQU    $       ;*** RST 6 @ $0030 ***
0114   0030 F1          FINISH:         POP     AF
0115   0031 CD 0D 05                    CALL    FIN     ;CHECK END OF COMMAND
0116   0034 C3 20 05                    JP      QWHAT   ;PRINT "WHAT?" IF WRONG
0117   0037 47          .DB             "G"
0118   0038             
0119   0038             RTSTV           .EQU    $       ;*** RST 7 @ $0038 ***
0120   0038 EF          TSTV:           RST     RIGNBLK ;IGNBLK
0121   0039 D6 40                       SUB     40H     ;TEST VARIABLES
0122   003B D8                          RET     C       ;C:NOT A VARIABLE
0123   003C C2 58 00                    JP      NZ,TV1  ;NOT "@" ARRAY
0124   003F 13                          INC     DE      ;IT IS THE "@" ARRAY
0125   0040 CD 62 04                    CALL    PARN    ;@ SHOULD BE FOLLOWED
0126   0043 29                          ADD     HL,HL   ;BY (EXPR) AS ITS INDEX
0127   0044 DA D5 00                    JP      C,QHOW  ;IS INDEX TOO BIG (>0x7FFF)?
0128   0047 D5                          PUSH    DE      ;WILL IT OVERWRITE
0129   0048 EB                          EX      DE,HL   ;TEXT?
0130   0049 CD A1 04                    CALL    SIZE    ;FIND SIZE OF FREE
0131   004C E7                          RST     RCOMP   ;AND CHECK THAT
0132   004D DA 4E 05                    JP      C,ASORRY        ;IF SO, SAY "SORRY"
0133   0050 21 00 1F                    LD      HL,VARBGN       ;IF NOT GET ADDRESS
0134   0053 CD D6 04                    CALL    SUBDE   ;OF @(EXPR) AND PUT IT
0135   0056 D1                          POP     DE      ;IN HL (top-down from TXTEND)
0136   0057 C9                          RET     ;C FLAG IS CLEARED
0137   0058             ;
0138   0058 FE 21       TV1:            CP      21H     ;>='a'?
0139   005A DA 5F 00                    JP      C,TV2   ;NO
0140   005D D6 20                       SUB     20H     ;MAKE UPPER CASE
0141   005F FE 1B       TV2:            CP      1BH     ;NOT @, IS IT A TO Z?
0142   0061 3F                          CCF     ;IF NOT RETURN C FLAG
0143   0062 D8                          RET     C
0144   0063 13                          INC     DE      ;IF A THROUGH Z
0145   0064 21 00 1F                    LD      HL,VARBGN       ;COMPUTE ADDRESS OF
0146   0067 07                          RLCA    ;THAT VARIABLE
0147   0068 85                          ADD     A,L     ;AND RETURN IT IN HL
0148   0069 6F                          LD      L,A     ;WITH C FLAG CLEARED
0149   006A 3E 00                       LD      A,0
0150   006C 8C                          ADC     A,H
0151   006D 67                          LD      H,A
0152   006E C9                          RET
0153   006F             
0154   006F             ;TSTC:          EX      (SP),HL ;*** TSTC OR RST 1 ***
0155   006F             ;               RST  RIGNBLK    ;THIS IS AT LOC. 8
0156   006F             ;               CMP     (HL)    ;AND THEN JUMP HERE
0157   006F 23          TC1:            INC     HL      ;COMPARE THE BYTE THAT
0158   0070 CA 7A 00                    JP      Z,TC2   ;FOLLOWS THE RST INST.
0159   0073 C5                          PUSH    BC      ;WITH THE TEXT (DE->)
0160   0074 4E                          LD      C,(HL)  ;IF NOT =, ADD THE 2ND
0161   0075 06 00                       LD      B,0     ;BYTE THAT FOLLOWS THE
0162   0077 09                          ADD     HL,BC   ;RST TO THE OLD PC
0163   0078 C1                          POP     BC      ;I.E., DO A RELATIVE
0164   0079 1B                          DEC     DE      ;JUMP IF NOT =
0165   007A 13          TC2:            INC     DE      ;IF =, SKIP THOSE BYTES
0166   007B 23                          INC     HL      ;AND CONTINUE
0167   007C E3                          EX      (SP),HL
0168   007D C9                          RET
0169   007E             
0170   007E 21 00 00    TSTNUM:         LD      HL,0    ;*** TSTNUM ***
0171   0081 44                          LD      B,H     ;TEST IF THE TEXT IS
0172   0082 EF                          RST     RIGNBLK ;A NUMBER
0173   0083 FE 24                       CP      '$'     ;HEX NUMBER?
0174   0085 CA AB 00                    JP      Z,TX1   ;YES
0175   0088 FE 30       TN1:            CP      '0'     ;IF NOT, RETURN 0 IN
0176   008A D8                          RET     C       ;B AND HL
0177   008B FE 3A                       CP      '9'+1   ;IF NUMBERS, CONVERT
0178   008D D0                          RET     NC      ;TO BINARY IN HL AND
0179   008E 3E F0                       LD      A,0F0H  ;SET B TO # OF DIGITS
0180   0090 A4                          AND     H       ;IF H>15, THERE IS NO
0181   0091 C2 D5 00                    JP      NZ,QHOW ;ROOM FOR NEXT DIGIT
0182   0094 04                          INC     B       ;B COUNTS # OF DIGITS
0183   0095 C5                          PUSH    BC
0184   0096 44                          LD      B,H     ;HL=10*HL+(NEW DIGIT)
0185   0097 4D                          LD      C,L
0186   0098 29                          ADD     HL,HL   ; 2*HL
0187   0099 29                          ADD     HL,HL   ; 4*HL
0188   009A 09                          ADD     HL,BC   ; 5*HL
0189   009B 29                          ADD     HL,HL   ;10*HL
0190   009C 1A                          LD      A,(DE)  ;AND (DIGIT) IS FROM
0191   009D 13                          INC     DE      ;STRIPPING THE ASCII
0192   009E E6 0F                       AND     0FH     ;CODE
0193   00A0 85                          ADD     A,L
0194   00A1 6F                          LD      L,A
0195   00A2 3E 00                       LD      A,0
0196   00A4 8C                          ADC     A,H
0197   00A5 67                          LD      H,A
0198   00A6 C1                          POP     BC
0199   00A7 1A                          LD      A,(DE)  ;DO THIS DIGIT AFTER
0200   00A8 F2 88 00                    JP      P,TN1   ;DIGIT. S SAYS OVERFLOW
0201   00AB             
0202   00AB 13          TX1:            INC     DE      ;SKIP TO NEXT HEX
0203   00AC 1A                          LD      A,(DE)  ;GET HEX DIGIT
0204   00AD FE 30                       CP      '0'     ;< '0'
0205   00AF D8                          RET     C       ;ERROR
0206   00B0 FE 3A                       CP      '9'+1   ;<= '9'
0207   00B2 DA BF 00                    JP      C,TX2   ;OK '0'..'9'
0208   00B5 FE 41                       CP      'A'     ;< 'A'
0209   00B7 D8                          RET     C       ;ERROR, >'9' && < 'A'
0210   00B8 E6 5F                       AND     5FH     ;CONVERT ALPHA TO UPPER
0211   00BA FE 47                       CP      'F'+1   ;> 'F'
0212   00BC D0                          RET     NC      ;ERROR
0213   00BD D6 07                       SUB     'A'-'0'-10      ;SKIP GAP '9' -> 'A'
0214   00BF E6 0F       TX2:            AND     0FH     ;GET HEX CODE 0..F
0215   00C1 C5                          PUSH    BC
0216   00C2 47                          LD      B,A     ;SAVE HEX CODE
0217   00C3 3E F0                       LD      A,0F0H  ;IF H>15
0218   00C5 A4                          AND     H       ;THERE IS NO ROOM
0219   00C6 78                          LD      A,B
0220   00C7 C1                          POP     BC
0221   00C8 C2 D5 00                    JP      NZ,QHOW ;FOR NEXT DIGIT
0222   00CB             
0223   00CB 04                          INC     B       ;B COUNTS # OF DIGITS
0224   00CC 29                          ADD     HL,HL   ;2*HL
0225   00CD 29                          ADD     HL,HL   ;4*HL
0226   00CE 29                          ADD     HL,HL   ;8*HL
0227   00CF 29                          ADD     HL,HL   ;16*HL
0228   00D0 B5                          OR      L       ;PUT HEX CODE INTO
0229   00D1 6F                          LD      L,A     ;THE 4 LSB OF HL
0230   00D2             ;MOV  A,H
0231   00D2             ;ORA  A
0232   00D2 C3 AB 00                    JP      TX1     ;DIGIT AFTER DIGIT
0233   00D5             
0234   00D5 D5          QHOW:           PUSH    DE      ;*** ERROR "HOW?" ***
0235   00D6 11 DC 00    AHOW:           LD      DE,HOW
0236   00D9 C3 24 05                    JP      ERROR
0237   00DC             
0238   00DC 48 4F 57 3F HOW:            .DB             "HOW?"
0239   00E0 0D          .DB             CR
0240   00E1             
0241   00E1 4F 4B       OK:             .DB             "OK"
0242   00E3 0D          .DB             CR
0243   00E4             
0244   00E4 57 48 41 54 WHAT:           .DB             "WHAT?"
0244   00E8 3F 
0245   00E9 0D          .DB             CR
0246   00EA             
0247   00EA 53 4F 52 52 SORRY:          .DB             "SORRY"
0247   00EE 59 
0248   00EF 0D          .DB             CR
0249   00F0             
0250   00F0             ;*************************************************************
0251   00F0             ;
0252   00F0             ; *** MAIN ***
0253   00F0             ;
0254   00F0             ; THIS IS THE MAIN LOOP THAT COLLECTS THE TINY BASIC PROGRAM
0255   00F0             ; AND STORES IT IN THE MEMORY.
0256   00F0             ;
0257   00F0             ; AT START, IT PRINTS OUT "(CR)OK(CR)", AND INITIALIZES THE
0258   00F0             ; STACK AND SOME OTHER INTERNAL VARIABLES.  THEN IT PROMPTS
0259   00F0             ; ">" AND READS A LINE.  IF THE LINE STARTS WITH A NON-ZERO
0260   00F0             ; NUMBER, THIS NUMBER IS THE LINE NUMBER.  THE LINE NUMBER
0261   00F0             ; (IN 16 BIT BINARY) AND THE REST OF THE LINE (INCLUDING CR)
0262   00F0             ; IS STORED IN THE MEMORY.  IF A LINE WITH THE SAME LINE
0263   00F0             ; NUMBER IS ALREADY THERE, IT IS REPLACED BY THE NEW ONE.  IF
0264   00F0             ; THE REST OF THE LINE CONSISTS OF A CR ONLY, IT IS NOT STORED
0265   00F0             ; AND ANY EXISTING LINE WITH THE SAME LINE NUMBER IS DELETED.
0266   00F0             ;
0267   00F0             ; AFTER A LINE IS INSERTED, REPLACED, OR DELETED, THE PROGRAM
0268   00F0             ; LOOPS BACK AND ASKS FOR ANOTHER LINE.  THIS LOOP WILL BE
0269   00F0             ; TERMINATED WHEN IT READS A LINE WITH ZERO OR NO LINE
0270   00F0             ; NUMBER; AND CONTROL IS TRANSFERED TO "DIRECT".
0271   00F0             ;
0272   00F0             ; TINY BASIC PROGRAM SAVE AREA STARTS AT THE MEMORY LOCATION
0273   00F0             ; LABELED "TXTBGN" AND ENDS AT "TXTEND".  WE ALWAYS FILL THIS
0274   00F0             ; AREA STARTING AT "TXTBGN", THE UNFILLED PORTION IS POINTED
0275   00F0             ; BY THE CONTENT OF A MEMORY LOCATION LABELED "TXTUNF".
0276   00F0             ;
0277   00F0             ; THE MEMORY LOCATION "CURRNT" POINTS TO THE LINE NUMBER
0278   00F0             ; THAT IS CURRENTLY BEING INTERPRETED.  WHILE WE ARE IN
0279   00F0             ; THIS LOOP OR WHILE WE ARE INTERPRETING A DIRECT COMMAND
0280   00F0             ; (SEE NEXT SECTION). "CURRNT" SHOULD POINT TO A 0.
0281   00F0             ;
0282   00F0 31 00 20    RSTART:         LD      SP,STACK
0283   00F3 CD 0E 00    ST1:            CALL    CRLF    ;AND JUMP TO HERE
0284   00F6 11 E1 00                    LD      DE,OK   ;DE->STRING
0285   00F9 97                          SUB     A       ;A=0
0286   00FA CD C5 05                    CALL    PRTSTG  ;PRINT STRING UNTIL CR
0287   00FD 21 04 01                    LD      HL,ST2+1        ;LITERAL 0
0288   0100 22 02 08                    LD      (CURRNT),HL     ;CURRENT->LINE # = 0
0289   0103 21 00 00    ST2:            LD      HL,0
0290   0106 22 0A 08                    LD      (LOPVAR),HL
0291   0109 22 04 08                    LD      (STKGOS),HL
0292   010C 3E 3E       ST3:            LD      A,'>'   ;PROMPT '>' AND
0293   010E CD 54 05                    CALL    GETLN   ;READ A LINE
0294   0111 D5                          PUSH    DE      ;DE->END OF LINE
0295   0112 11 68 1F                    LD      DE,BUFFER       ;DE->BEGINNING OF LINE
0296   0115 CD 7E 00                    CALL    TSTNUM  ;TEST IF IT IS A NUMBER
0297   0118 EF                          RST     RIGNBLK
0298   0119 7C                          LD      A,H     ;HL=VALUE OF THE # OR
0299   011A B5                          OR      L       ;0 IF NO # WAS FOUND
0300   011B C1                          POP     BC      ;BC->END OF LINE
0301   011C CA 9A 07                    JP      Z,DIRECT
0302   011F 1B                          DEC     DE      ;BACKUP DE AND SAVE
0303   0120 7C                          LD      A,H     ;VALUE OF LINE # THERE
0304   0121 12                          LD      (DE),A
0305   0122 1B                          DEC     DE
0306   0123 7D                          LD      A,L
0307   0124 12                          LD      (DE),A
0308   0125 C5                          PUSH    BC      ;BC,DE->BEGIN, END
0309   0126 D5                          PUSH    DE
0310   0127 79                          LD      A,C
0311   0128 93                          SUB     E
0312   0129 F5                          PUSH    AF      ;A=# OF BYTES IN LINE
0313   012A CD 9D 05                    CALL    FNDLN   ;FIND THIS LINE IN SAVE
0314   012D D5                          PUSH    DE      ;AREA, DE->SAVE AREA
0315   012E C2 41 01                    JP      NZ,ST4  ;NZ:NOT FOUND, INSERT
0316   0131 D5                          PUSH    DE      ;Z:FOUND, DELETE IT
0317   0132 CD B9 05                    CALL    FNDNXT  ;FIND NEXT LINE
0318   0135             ;DE->NEXT LINE
0319   0135 C1                          POP     BC      ;BC->LINE TO BE DELETED
0320   0136 2A 16 08                    LD      HL,(TXTUNF)     ;HL->UNFILLED SAVE AREA
0321   0139 CD 66 06                    CALL    MVUP    ;MOVE UP TO DELETE
0322   013C 60                          LD      H,B     ;TXTUNF->UNFILLED AREA
0323   013D 69                          LD      L,C
0324   013E 22 16 08                    LD      (TXTUNF),HL     ;UPDATE
0325   0141 C1          ST4:            POP     BC      ;GET READY TO INSERT
0326   0142 2A 16 08                    LD      HL,(TXTUNF)     ;BUT FIRST CHECK IF
0327   0145 F1                          POP     AF      ;THE LENGTH OF NEW LINE
0328   0146 E5                          PUSH    HL      ;IS 3 (LINE # AND CR)
0329   0147 FE 03                       CP      3       ;THEN DO NOT INSERT
0330   0149 CA F0 00                    JP      Z,RSTART        ;MUST CLEAR THE STACK
0331   014C 85                          ADD     A,L     ;COMPUTE NEW TXTUNF
0332   014D 6F                          LD      L,A
0333   014E 3E 00                       LD      A,0
0334   0150 8C                          ADC     A,H
0335   0151 67                          LD      H,A     ;HL->NEW UNFILLED AREA
0336   0152 11 00 1F                    LD      DE,TXTEND       ;CHECK TO SEE IF THERE
0337   0155 E7                          RST     RCOMP   ;COMP HL,DE - IS ENOUGH SPACE
0338   0156 D2 4D 05                    JP      NC,QSORRY       ;SORRY, NO ROOM FOR IT
0339   0159 22 16 08                    LD      (TXTUNF),HL     ;OK, UPDATE TXTUNF
0340   015C D1                          POP     DE      ;DE->OLD UNFILLED AREA
0341   015D CD 6F 06                    CALL    MVDOWN
0342   0160 D1                          POP     DE      ;DE->BEGIN, HL->END
0343   0161 E1                          POP     HL
0344   0162 CD 66 06                    CALL    MVUP    ;MOVE NEW LINE TO SAVE
0345   0165 C3 0C 01                    JP      ST3     ;AREA
0346   0168             
0347   0168             ;*************************************************************
0348   0168             ;
0349   0168             ; WHAT FOLLOWS IS THE CODE TO EXECUTE DIRECT AND STATEMENT
0350   0168             ; COMMANDS.  CONTROL IS TRANSFERED TO THESE POINTS VIA THE
0351   0168             ; COMMAND TABLE LOOKUP CODE OF 'DIRECT' AND 'EXEC' IN LAST
0352   0168             ; SECTION.  AFTER THE COMMAND IS EXECUTED, CONTROL IS
0353   0168             ; TRANSFERED TO OTHERS SECTIONS AS FOLLOWS:
0354   0168             ;
0355   0168             ; FOR 'LIST', 'NEW', AND 'STOP': GO BACK TO 'RSTART'
0356   0168             ; FOR 'RUN': GO EXECUTE THE FIRST STORED LINE IF ANY, ELSE
0357   0168             ; GO BACK TO 'RSTART'.
0358   0168             ; FOR 'GOTO' AND 'GOSUB': GO EXECUTE THE TARGET LINE.
0359   0168             ; FOR 'RETURN' AND 'NEXT': GO BACK TO SAVED RETURN LINE.
0360   0168             ; FOR ALL OTHERS: IF 'CURRENT' -> 0, GO TO 'RSTART', ELSE
0361   0168             ; GO EXECUTE NEXT COMMAND.  (THIS IS DONE IN 'FINISH'.)
0362   0168             ;*************************************************************
0363   0168             ;
0364   0168             ; *** NEW *** STOP *** RUN (& FRIENDS) *** & GOTO ***
0365   0168             ;
0366   0168             ; 'NEW(CR)' SETS 'TXTUNF' TO POINT TO 'TXTBGN'
0367   0168             ;
0368   0168             ; 'STOP(CR)' GOES BACK TO 'RSTART'
0369   0168             ;
0370   0168             ; 'RUN(CR)' FINDS THE FIRST STORED LINE, STORE ITS ADDRESS (IN
0371   0168             ; 'CURRENT'), AND START EXECUTE IT.  NOTE THAT ONLY THOSE
0372   0168             ; COMMANDS IN TAB2 ARE LEGAL FOR STORED PROGRAM.
0373   0168             ;
0374   0168             ; THERE ARE 3 MORE ENTRIES IN 'RUN':
0375   0168             ; 'RUNNXL' FINDS NEXT LINE, STORES ITS ADDR. AND EXECUTES IT.
0376   0168             ; 'RUNTSL' STORES THE ADDRESS OF THIS LINE AND EXECUTES IT.
0377   0168             ; 'RUNSML' CONTINUES THE EXECUTION ON SAME LINE.
0378   0168             ;
0379   0168             ; 'GOTO EXPR(CR)' EVALUATES THE EXPRESSION, FIND THE TARGET
0380   0168             ; LINE, AND JUMP TO 'RUNTSL' TO DO IT.
0381   0168             ;
0382   0168 CD 1C 05    NEW:            CALL    ENDCHK  ;*** NEW(CR) ***
0383   016B 21 18 08                    LD      HL,TXTBGN
0384   016E 22 16 08                    LD      (TXTUNF),HL
0385   0171             ;
0386   0171 CD 1C 05    STOP:           CALL    ENDCHK  ;*** STOP(CR) ***
0387   0174 C3 F0 00                    JP      RSTART
0388   0177             
0389   0177 CD 1C 05    RUN:            CALL    ENDCHK  ;*** RUN(CR) ***
0390   017A 11 18 08                    LD      DE,TXTBGN       ;FIRST SAVED LINE
0391   017D             ;
0392   017D 21 00 00    RUNNXL:         LD      HL,0    ;*** RUNNXL ***
0393   0180 CD A5 05                    CALL    FNDLP   ;FIND WHATEVER LINE #
0394   0183 DA F0 00                    JP      C,RSTART        ;C:PASSED TXTUNF, QUIT
0395   0186             ;
0396   0186 EB          RUNTSL:         EX      DE,HL   ;*** RUNTSL ***
0397   0187 22 02 08                    LD      (CURRNT),HL     ;SET 'CURRENT'->LINE #
0398   018A EB                          EX      DE,HL
0399   018B 13                          INC     DE      ;BUMP PASS LINE #
0400   018C 13                          INC     DE
0401   018D             ;
0402   018D CD E8 06    RUNSML:         CALL    CHKIO   ;*** RUNSML ***
0403   0190 21 10 07                    LD      HL,TAB2-1       ;FIND COMMAND IN TAB2
0404   0193 C3 9D 07                    JP      EXEC    ;AND EXECUTE IT
0405   0196             
0406   0196 DF          GOTO:           RST     REXPR   ;*** GOTO EXPR ***
0407   0197 D5                          PUSH    DE      ;SAVE FOR ERROR ROUTINE
0408   0198 CD 1C 05                    CALL    ENDCHK  ;MUST FIND A CR
0409   019B CD 9D 05                    CALL    FNDLN   ;FIND THE TARGET LINE
0410   019E C2 D6 00                    JP      NZ,AHOW ;NO SUCH LINE #
0411   01A1 F1                          POP     AF      ;CLEAR THE PUSH DE
0412   01A2 C3 86 01                    JP      RUNTSL  ;GO DO IT
0413   01A5             ;
0414   01A5             ;*************************************************************
0415   01A5             ;
0416   01A5             ; *** LIST *** & PRINT ***
0417   01A5             ;
0418   01A5             ; LIST HAS TWO FORMS:
0419   01A5             ; 'LIST(CR)' LISTS ALL SAVED LINES
0420   01A5             ; 'LIST #(CR)' START LIST AT THIS LINE #
0421   01A5             ; YOU CAN STOP THE LISTING BY CONTROL C KEY
0422   01A5             ;
0423   01A5             ; PRINT COMMAND IS 'PRINT ....;' OR 'PRINT ....(CR)'
0424   01A5             ; WHERE '....' IS A LIST OF EXPRESIONS, FORMATS, BACK-
0425   01A5             ; ARROWS, AND STRINGS.  THESE ITEMS ARE SEPERATED BY COMMAS.
0426   01A5             ;
0427   01A5             ; A FORMAT IS A POUND SIGN FOLLOWED BY A NUMBER.  IT CONTROLS
0428   01A5             ; THE NUMBER OF SPACES THE VALUE OF A EXPRESION IS GOING TO
0429   01A5             ; BE PRINTED.  IT STAYS EFFECTIVE FOR THE REST OF THE PRINT
0430   01A5             ; COMMAND UNLESS CHANGED BY ANOTHER FORMAT.  IF NO FORMAT IS
0431   01A5             ; SPECIFIED, 6 POSITIONS WILL BE USED.
0432   01A5             ;
0433   01A5             ; A STRING IS QUOTED IN A PAIR OF SINGLE QUOTES OR A PAIR OF
0434   01A5             ; DOUBLE QUOTES.
0435   01A5             ;
0436   01A5             ; A BACK-ARROW MEANS GENERATE A (CR) WITHOUT (LF)
0437   01A5             ;
0438   01A5             ; A (CRLF) IS GENERATED AFTER THE ENTIRE LIST HAS BEEN
0439   01A5             ; PRINTED OR IF THE LIST IS A NULL LIST.  HOWEVER IF THE LIST
0440   01A5             ; ENDED WITH A COMMA, NO (CRLF) IS GENERATED.
0441   01A5             ;
0442   01A5 CD 7E 00    LIST:           CALL    TSTNUM  ;TEST IF THERE IS A #
0443   01A8 CD 1C 05                    CALL    ENDCHK  ;IF NO # WE GET A 0
0444   01AB CD 9D 05                    CALL    FNDLN   ;FIND THIS OR NEXT LINE
0445   01AE DA F0 00    LS1:            JP      C,RSTART        ;C:PASSED TXTUNF
0446   01B1 CD 4E 06                    CALL    PRTLN   ;PRINT THE LINE
0447   01B4 CD E8 06                    CALL    CHKIO   ;STOP IF HIT CONTROL-C
0448   01B7 CD A5 05                    CALL    FNDLP   ;FIND NEXT LINE
0449   01BA C3 AE 01                    JP      LS1     ;AND LOOP BACK
0450   01BD             
0451   01BD 0E 08       PRINT:          LD      C,8     ;C = # OF SPACES
0452   01BF 3E 0A                       LD      A,10    ;DEFAULT BASE FOR PRTNUM
0453   01C1 32 00 08                    LD      (PNBASE),A
0454   01C4 CF                          TSTC(';',PR2)   ;IF NULL LIST & ";"
0454   01C5 3B          
0454   01C6 06          
0455   01C7 CD 0E 00                    CALL    CRLF    ;GIVE CR-LF AND
0456   01CA C3 8D 01                    JP      RUNSML  ;CONTINUE SAME LINE
0457   01CD CF          PR2:            TSTC(CR,PR0)    ;IF NULL LIST (CR)
0457   01CE 0D          
0457   01CF 06          
0458   01D0 CD 0E 00                    CALL    CRLF    ;ALSO GIVE CR-LF AND
0459   01D3 C3 7D 01                    JP      RUNNXL  ;GO TO NEXT LINE
0460   01D6 CF          PR0:            TSTC('#',PR5)   ;ELSE IS IT FORMAT?
0460   01D7 23          
0460   01D8 05          
0461   01D9 DF                          RST     REXPR   ;YES, EVALUATE EXPR.
0462   01DA 4D                          LD      C,L     ;AND SAVE IT IN C
0463   01DB C3 EF 01                    JP      PR3     ;LOOK FOR MORE TO PRINT
0464   01DE CF          PR5:            TSTC('%',PR1)   ;ELSE IS IT PRTNUM BASE?
0464   01DF 25          
0464   01E0 08          
0465   01E1 DF                          RST     REXPR   ;YES, EVALUATE EXPR.
0466   01E2 7D                          LD      A,L     ;AND STORE THE LOW PART
0467   01E3 32 00 08                    LD      (PNBASE),A      ;IN PNBASE
0468   01E6 C3 EF 01                    JP      PR3     ;LOOK FOR MORE TO PRINT
0469   01E9 CD D1 05    PR1:            CALL    QTSTG   ;OR IS IT A STRING?
0470   01EC C3 01 02                    JP      PR8     ;IF NOT, MUST BE EXPR.
0471   01EF CF          PR3:            TSTC($2C,PR6)   ;IF ",", GO FIND NEXT
0471   01F0 2C          
0471   01F1 06          
0472   01F2 CD 0D 05                    CALL    FIN     ;IN THE LIST.
0473   01F5 C3 D6 01                    JP      PR0     ;LIST CONTINUES
0474   01F8 3E 0A       PR6:            LD      A,10    ;END OF LIST REACHED
0475   01FA 32 00 08                    LD      (PNBASE),A      ;RESET DEFAULT BASE
0476   01FD CD 0E 00                    CALL    CRLF    ;LIST ENDS WITH CRLF
0477   0200 F7                          RST     RFINISH ;FINISH
0478   0201 DF          PR8:            RST     REXPR   ;EVALUATE THE EXPR
0479   0202 C5                          PUSH    BC
0480   0203 CD F6 05                    CALL    PRTNUM  ;PRINT THE VALUE
0481   0206 C1                          POP     BC
0482   0207 C3 EF 01                    JP      PR3     ;MORE TO PRINT?
0483   020A             ;
0484   020A             ;*************************************************************
0485   020A             ;
0486   020A             ; *** GOSUB *** & RETURN ***
0487   020A             ;
0488   020A             ; 'GOSUB EXPR;' OR 'GOSUB EXPR (CR)' IS LIKE THE 'GOTO'
0489   020A             ; COMMAND, EXCEPT THAT THE CURRENT TEXT POINTER, STACK POINTER
0490   020A             ; ETC. ARE SAVE SO THAT EXECUTION CAN BE CONTINUED AFTER THE
0491   020A             ; SUBROUTINE 'RETURN'.  IN ORDER THAT 'GOSUB' CAN BE NESTED
0492   020A             ; (AND EVEN RECURSIVE), THE SAVE AREA MUST BE STACKED.
0493   020A             ; THE STACK POINTER IS SAVED IN 'STKGOS', THE OLD 'STKGOS' IS
0494   020A             ; SAVED IN THE STACK.  IF WE ARE IN THE MAIN ROUTINE, 'STKGOS'
0495   020A             ; IS ZERO (THIS WAS DONE BY THE "MAIN" SECTION OF THE CODE),
0496   020A             ; BUT WE STILL SAVE IT AS A FLAG FOR NO FURTHER 'RETURN'S.
0497   020A             ;
0498   020A             ; 'RETURN(CR)' UNDOS EVERYTHING THAT 'GOSUB' DID, AND THUS
0499   020A             ; RETURN THE EXECUTION TO THE COMMAND AFTER THE MOST RECENT
0500   020A             ; 'GOSUB'.  IF 'STKGOS' IS ZERO, IT INDICATES THAT WE
0501   020A             ; NEVER HAD A 'GOSUB' AND IS THUS AN ERROR.
0502   020A             ;
0503   020A CD 9A 06    GOSUB:          CALL    PUSHA   ;SAVE THE CURRENT "FOR"
0504   020D DF                          RST     REXPR   ;PARAMETERS
0505   020E D5                          PUSH    DE      ;AND TEXT POINTER
0506   020F CD 9D 05                    CALL    FNDLN   ;FIND THE TARGET LINE
0507   0212 C2 D6 00                    JP      NZ,AHOW ;NOT THERE. SAY "HOW?"
0508   0215 2A 02 08                    LD      HL,(CURRNT)     ;FOUND IT, SAVE OLD
0509   0218 E5                          PUSH    HL      ;'CURRNT' OLD 'STKGOS'
0510   0219 2A 04 08                    LD      HL,(STKGOS)
0511   021C E5                          PUSH    HL
0512   021D 21 00 00                    LD      HL,0    ;AND LOAD NEW ONES
0513   0220 22 0A 08                    LD      (LOPVAR),HL
0514   0223 39                          ADD     HL,SP
0515   0224 22 04 08                    LD      (STKGOS),HL
0516   0227 C3 86 01                    JP      RUNTSL  ;THEN RUN THAT LINE
0517   022A CD 1C 05    RETURN:         CALL    ENDCHK  ;THERE MUST BE A CR
0518   022D 2A 04 08                    LD      HL,(STKGOS)     ;OLD STACK POINTER
0519   0230 7C                          LD      A,H     ;0 MEANS NOT EXIST
0520   0231 B5                          OR      L
0521   0232 CA 20 05                    JP      Z,QWHAT ;SO, WE SAY: "WHAT?"
0522   0235 F9                          LD      SP,HL   ;ELSE, RESTORE IT
0523   0236 E1                          POP     HL
0524   0237 22 04 08                    LD      (STKGOS),HL     ;AND THE OLD 'STKGOS'
0525   023A E1                          POP     HL
0526   023B 22 02 08                    LD      (CURRNT),HL     ;AND THE OLD 'CURRNT'
0527   023E D1                          POP     DE      ;OLD TEXT POINTER
0528   023F CD 7E 06                    CALL    POPA    ;OLD "FOR" PARAMETERS
0529   0242 F7                          RST     RFINISH ;AND WE ARE BACK HOME
0530   0243             ;
0531   0243             ;*************************************************************
0532   0243             ;
0533   0243             ; *** FOR *** & NEXT ***
0534   0243             ;
0535   0243             ; 'FOR' HAS TWO FORMS:
0536   0243             ; 'FOR VAR=EXP1 TO EXP2 STEP EXP3' AND 'FOR VAR=EXP1 TO EXP2'
0537   0243             ; THE SECOND FORM MEANS THE SAME THING AS THE FIRST FORM WITH
0538   0243             ; EXP3=1.  (I.E., WITH A STEP OF +1.)
0539   0243             ; TBI WILL FIND THE VARIABLE VAR, AND SET ITS VALUE TO THE
0540   0243             ; CURRENT VALUE OF EXP1.  IT ALSO EVALUATES EXP2 AND EXP3
0541   0243             ; AND SAVE ALL THESE TOGETHER WITH THE TEXT POINTER ETC. IN
0542   0243             ; THE 'FOR' SAVE AREA, WHICH CONSISTS OF 'LOPVAR', 'LOPINC',
0543   0243             ; 'LOPLMT', 'LOPLN', AND 'LOPPT'.  IF THERE IS ALREADY SOME-
0544   0243             ; THING IN THE SAVE AREA (THIS IS INDICATED BY A NON-ZERO
0545   0243             ; 'LOPVAR'), THEN THE OLD SAVE AREA IS SAVED IN THE STACK
0546   0243             ; BEFORE THE NEW ONE OVERWRITES IT.
0547   0243             ; TBI WILL THEN DIG IN THE STACK AND FIND OUT IF THIS SAME
0548   0243             ; VARIABLE WAS USED IN ANOTHER CURRENTLY ACTIVE 'FOR' LOOP.
0549   0243             ; IF THAT IS THE CASE, THEN THE OLD 'FOR' LOOP IS DEACTIVATED.
0550   0243             ; (PURGED FROM THE STACK..)
0551   0243             ;
0552   0243             ; 'NEXT VAR' SERVES AS THE LOGICAL (NOT NECESSARILLY PHYSICAL)
0553   0243             ; END OF THE 'FOR' LOOP.  THE CONTROL VARIABLE VAR. IS CHECKED
0554   0243             ; WITH THE 'LOPVAR'.  IF THEY ARE NOT THE SAME, TBI DIGS IN
0555   0243             ; THE STACK TO FIND THE RIGHT ONE AND PURGES ALL THOSE THAT
0556   0243             ; DID NOT MATCH.  EITHER WAY, TBI THEN ADDS THE 'STEP' TO
0557   0243             ; THAT VARIABLE AND CHECK THE RESULT WITH THE LIMIT.  IF IT
0558   0243             ; IS WITHIN THE LIMIT, CONTROL LOOPS BACK TO THE COMMAND
0559   0243             ; FOLLOWING THE 'FOR'.  IF OUTSIDE THE LIMIT, THE SAVE AREA
0560   0243             ; IS PURGED AND EXECUTION CONTINUES.
0561   0243             ;
0562   0243 CD 9A 06    FOR:            CALL    PUSHA   ;SAVE THE OLD SAVE AREA
0563   0246 CD FA 04                    CALL    SETVAL  ;SET THE CONTROL VAR.
0564   0249 2B                          DEC     HL      ;HL IS ITS ADDRESS
0565   024A 22 0A 08                    LD      (LOPVAR),HL     ;SAVE THAT
0566   024D 21 75 07                    LD      HL,TAB5-1       ;USE 'EXEC' TO LOOK
0567   0250 C3 9D 07                    JP      EXEC    ;FOR THE WORD 'TO'
0568   0253 DF          FR1:            RST     REXPR   ;EVALUATE THE LIMIT
0569   0254 22 0E 08                    LD      (LOPLMT),HL     ;SAVE THAT
0570   0257 21 7B 07                    LD      HL,TAB6-1       ;USE 'EXEC' TO LOOK
0571   025A C3 9D 07                    JP      EXEC    ;FOR THE WORD 'STEP'
0572   025D DF          FR2:            RST     REXPR   ;FOUND IT, GET STEP
0573   025E C3 64 02                    JP      FR4
0574   0261 21 01 00    FR3:            LD      HL,1H   ;NOT FOUND, SET TO 1
0575   0264 22 0C 08    FR4:            LD      (LOPINC),HL     ;SAVE THAT TOO
0576   0267 2A 02 08    FR5:            LD      HL,(CURRNT)     ;SAVE CURRENT LINE #
0577   026A 22 10 08                    LD      (LOPLN),HL
0578   026D EB                          EX      DE,HL   ;AND TEXT POINTER
0579   026E 22 12 08                    LD      (LOPPT),HL
0580   0271 01 0A 00                    LD      BC,0AH  ;DIG INTO STACK TO
0581   0274 2A 0A 08                    LD      HL,(LOPVAR)     ;FIND 'LOPVAR'
0582   0277 EB                          EX      DE,HL
0583   0278 60                          LD      H,B
0584   0279 68                          LD      L,B     ;HL=0 NOW
0585   027A 39                          ADD     HL,SP   ;HERE IS THE STACK
0586   027B 3E          .DB             3EH
0587   027C 09          FR7:            ADD     HL,BC   ;EACH LEVEL IS 10 DEEP
0588   027D 7E                          LD      A,(HL)  ;GET THAT OLD 'LOPVAR'
0589   027E 23                          INC     HL
0590   027F B6                          OR      (HL)
0591   0280 CA 9D 02                    JP      Z,FR8   ;0 SAYS NO MORE IN IT
0592   0283 7E                          LD      A,(HL)
0593   0284 2B                          DEC     HL
0594   0285 BA                          CP      D       ;SAME AS THIS ONE?
0595   0286 C2 7C 02                    JP      NZ,FR7
0596   0289 7E                          LD      A,(HL)  ;THE OTHER HALF?
0597   028A BB                          CP      E
0598   028B C2 7C 02                    JP      NZ,FR7
0599   028E EB                          EX      DE,HL   ;YES, FOUND ONE
0600   028F 21 00 00                    LD      HL,0H
0601   0292 39                          ADD     HL,SP   ;TRY TO MOVE SP
0602   0293 44                          LD      B,H
0603   0294 4D                          LD      C,L
0604   0295 21 0A 00                    LD      HL,0AH
0605   0298 19                          ADD     HL,DE
0606   0299 CD 6F 06                    CALL    MVDOWN  ;AND PURGE 10 WORDS
0607   029C F9                          LD      SP,HL   ;IN THE STACK
0608   029D 2A 12 08    FR8:            LD      HL,(LOPPT)      ;JOB DONE, RESTORE DE
0609   02A0 EB                          EX      DE,HL
0610   02A1 F7                          RST     RFINISH ;AND CONTINUE
0611   02A2             ;
0612   02A2 FF          NEXT:           RST     RTSTV   ;GET ADDRESS OF VAR.
0613   02A3 DA 20 05                    JP      C,QWHAT ;NO VARIABLE, "WHAT?"
0614   02A6 22 06 08                    LD      (VARNXT),HL     ;YES, SAVE IT
0615   02A9 D5          NX0:            PUSH    DE      ;SAVE TEXT POINTER
0616   02AA EB                          EX      DE,HL
0617   02AB 2A 0A 08                    LD      HL,(LOPVAR)     ;GET VAR. IN 'FOR'
0618   02AE 7C                          LD      A,H
0619   02AF B5                          OR      L       ;0 SAYS NEVER HAD ONE
0620   02B0 CA 21 05                    JP      Z,AWHAT ;SO WE ASK: "WHAT?"
0621   02B3 E7                          RST     RCOMP   ;ELSE WE CHECK THEM
0622   02B4 CA C1 02                    JP      Z,NX3   ;OK, THEY AGREE
0623   02B7 D1                          POP     DE      ;NO, LET'S SEE
0624   02B8 CD 7E 06                    CALL    POPA    ;PURGE CURRENT LOOP
0625   02BB 2A 06 08                    LD      HL,(VARNXT)     ;AND POP ONE LEVEL
0626   02BE C3 A9 02                    JP      NX0     ;GO CHECK AGAIN
0627   02C1 5E          NX3:            LD      E,(HL)  ;COME HERE WHEN AGREED
0628   02C2 23                          INC     HL
0629   02C3 56                          LD      D,(HL)  ;DE=VALUE OF VAR.
0630   02C4 2A 0C 08                    LD      HL,(LOPINC)
0631   02C7 E5                          PUSH    HL
0632   02C8 7C                          LD      A,H
0633   02C9 AA                          XOR     D
0634   02CA 7A                          LD      A,D
0635   02CB 19                          ADD     HL,DE   ;ADD ONE STEP
0636   02CC FA D3 02                    JP      M,NX4
0637   02CF AC                          XOR     H
0638   02D0 FA F5 02                    JP      M,NX5
0639   02D3 EB          NX4:            EX      DE,HL
0640   02D4 2A 0A 08                    LD      HL,(LOPVAR)     ;PUT IT BACK
0641   02D7 73                          LD      (HL),E
0642   02D8 23                          INC     HL
0643   02D9 72                          LD      (HL),D
0644   02DA 2A 0E 08                    LD      HL,(LOPLMT)     ;HL->LIMIT
0645   02DD F1                          POP     AF      ;OLD HL
0646   02DE B7                          OR      A
0647   02DF F2 E3 02                    JP      P,NX1   ;STEP > 0
0648   02E2 EB                          EX      DE,HL   ;STEP < 0
0649   02E3 CD F2 04    NX1:            CALL    CKHLDE  ;COMPARE WITH LIMIT
0650   02E6 D1                          POP     DE      ;RESTORE TEXT POINTER
0651   02E7 DA F7 02                    JP      C,NX2   ;OUTSIDE LIMIT
0652   02EA 2A 10 08                    LD      HL,(LOPLN)      ;WITHIN LIMIT, GO
0653   02ED 22 02 08                    LD      (CURRNT),HL     ;BACK TO THE SAVED
0654   02F0 2A 12 08                    LD      HL,(LOPPT)      ;'CURRNT' AND TEXT
0655   02F3 EB                          EX      DE,HL   ;POINTER
0656   02F4 F7                          RST     RFINISH
0657   02F5 E1          NX5:            POP     HL
0658   02F6 D1                          POP     DE
0659   02F7 CD 7E 06    NX2:            CALL    POPA    ;PURGE THIS LOOP
0660   02FA F7                          RST     RFINISH
0661   02FB             ;
0662   02FB             ;*************************************************************
0663   02FB             ;
0664   02FB             ; *** REM *** IF *** INPUT *** & LET (& DEFLT) ***
0665   02FB             ;
0666   02FB             ; 'REM' CAN BE FOLLOWED BY ANYTHING AND IS IGNORED BY TBI.
0667   02FB             ; TBI TREATS IT LIKE AN 'IF' WITH A FALSE CONDITION.
0668   02FB             ;
0669   02FB             ; 'IF' IS FOLLOWED BY AN EXPR. AS A CONDITION AND ONE OR MORE
0670   02FB             ; COMMANDS (INCLUDING OTHER 'IF'S) SEPERATED BY SEMI-COLONS.
0671   02FB             ; NOTE THAT THE WORD 'THEN' IS NOT USED.  TBI EVALUATES THE
0672   02FB             ; EXPR. IF IT IS NON-ZERO, EXECUTION CONTINUES.  IF THE
0673   02FB             ; EXPR. IS ZERO, THE COMMANDS THAT FOLLOWS ARE IGNORED AND
0674   02FB             ; EXECUTION CONTINUES AT THE NEXT LINE.
0675   02FB             ;
0676   02FB             ; 'INPUT' COMMAND IS LIKE THE 'PRINT' COMMAND, AND IS FOLLOWED
0677   02FB             ; BY A LIST OF ITEMS.  IF THE ITEM IS A STRING IN SINGLE OR
0678   02FB             ; DOUBLE QUOTES, OR IS A BACK-ARROW, IT HAS THE SAME EFFECT AS
0679   02FB             ; IN 'PRINT'.  IF AN ITEM IS A VARIABLE, THIS VARIABLE NAME IS
0680   02FB             ; PRINTED OUT FOLLOWED BY A COLON.  THEN TBI WAITS FOR AN
0681   02FB             ; EXPR. TO BE TYPED IN.  THE VARIABLE IS THEN SET TO THE
0682   02FB             ; VALUE OF THIS EXPR.  IF THE VARIABLE IS PROCEDED BY A STRING
0683   02FB             ; (AGAIN IN SINGLE OR DOUBLE QUOTES), THE STRING WILL BE
0684   02FB             ; PRINTED FOLLOWED BY A COLON.  TBI THEN WAITS FOR INPUT EXPR.
0685   02FB             ; AND SET THE VARIABLE TO THE VALUE OF THE EXPR.
0686   02FB             ;
0687   02FB             ; IF THE INPUT EXPR. IS INVALID, TBI WILL PRINT "WHAT?",
0688   02FB             ; "HOW?" OR "SORRY" AND REPRINT THE PROMPT AND REDO THE INPUT.
0689   02FB             ; THE EXECUTION WILL NOT TERMINATE UNLESS YOU TYPE CONTROL-C.
0690   02FB             ; THIS IS HANDLED IN 'INPERR'.
0691   02FB             ;
0692   02FB             ; 'LET' IS FOLLOWED BY A LIST OF ITEMS SEPERATED BY COMMAS.
0693   02FB             ; EACH ITEM CONSISTS OF A VARIABLE, AN EQUAL SIGN, AND AN EXPR.
0694   02FB             ; TBI EVALUATES THE EXPR. AND SET THE VARIABLE TO THAT VALUE.
0695   02FB             ; TBI WILL ALSO HANDLE 'LET' COMMAND WITHOUT THE WORD 'LET'.
0696   02FB             ; THIS IS DONE BY 'DEFLT'.
0697   02FB             ;
0698   02FB 21 00 00    REM:            LD      HL,0H   ;*** REM ***
0699   02FE 3E          .DB             3EH             ;SKIP RST, THIS IS LIKE 'IF 0'
0700   02FF             ;
0701   02FF DF          IFF:            RST     REXPR   ;*** IF ***
0702   0300 7C                          LD      A,H     ;IS THE EXPR.=0?
0703   0301 B5                          OR      L
0704   0302 C2 8D 01                    JP      NZ,RUNSML       ;NO, CONTINUE
0705   0305 CD BB 05                    CALL    FNDSKP  ;YES, SKIP REST OF LINE
0706   0308 D2 86 01                    JP      NC,RUNTSL       ;AND RUN THE NEXT LINE
0707   030B C3 F0 00                    JP      RSTART  ;IF NO NEXT, RE-START
0708   030E             ;
0709   030E 2A 08 08    INPERR:         LD      HL,(STKINP)     ;*** INPERR ***
0710   0311 F9                          LD      SP,HL   ;RESTORE OLD SP
0711   0312 E1                          POP     HL      ;AND OLD 'CURRNT'
0712   0313 22 02 08                    LD      (CURRNT),HL
0713   0316 D1                          POP     DE      ;AND OLD TEXT POINTER
0714   0317 D1                          POP     DE      ;REDO INPUT
0715   0318             ;
0716   0318             INPUT:          ;*** INPUT ***
0717   0318 D5          IP1:            PUSH    DE      ;SAVE IN CASE OF ERROR
0718   0319 CD D1 05                    CALL    QTSTG   ;IS NEXT ITEM A STRING?
0719   031C C3 26 03                    JP      IP2     ;NO
0720   031F FF                          RST     RTSTV   ;YES, BUT FOLLOWED BY A
0721   0320 DA 5D 03                    JP      C,IP4   ;VARIABLE?   NO.
0722   0323 C3 36 03                    JP      IP3     ;YES.  INPUT VARIABLE
0723   0326 D5          IP2:            PUSH    DE      ;SAVE FOR 'PRTSTG'
0724   0327 FF                          RST     RTSTV   ;MUST BE VARIABLE NOW
0725   0328 DA 20 05                    JP      C,QWHAT ;"WHAT?" IT IS NOT?
0726   032B 1A                          LD      A,(DE)  ;GET READY FOR 'PRTSTR'
0727   032C 4F                          LD      C,A
0728   032D 97                          SUB     A
0729   032E 12                          LD      (DE),A
0730   032F D1                          POP     DE
0731   0330 CD C5 05                    CALL    PRTSTG  ;PRINT STRING AS PROMPT
0732   0333 79                          LD      A,C     ;RESTORE TEXT
0733   0334 1B                          DEC     DE
0734   0335 12                          LD      (DE),A
0735   0336 D5          IP3:            PUSH    DE      ;SAVE TEXT POINTER
0736   0337 EB                          EX      DE,HL
0737   0338 2A 02 08                    LD      HL,(CURRNT)     ;ALSO SAVE 'CURRNT'
0738   033B E5                          PUSH    HL
0739   033C 21 18 03                    LD      HL,IP1  ;A NEGATIVE NUMBER
0740   033F 22 02 08                    LD      (CURRNT),HL     ;AS A FLAG
0741   0342 21 00 00                    LD      HL,0H   ;SAVE SP TOO
0742   0345 39                          ADD     HL,SP
0743   0346 22 08 08                    LD      (STKINP),HL
0744   0349 D5                          PUSH    DE      ;OLD HL
0745   034A 3E 3A                       LD      A,':'   ;PRINT THIS TOO
0746   034C CD 54 05                    CALL    GETLN   ;AND GET A LINE
0747   034F 11 68 1F                    LD      DE,BUFFER       ;POINTS TO BUFFER
0748   0352 DF                          RST     REXPR   ;EVALUATE INPUT
0749   0353             ;NOP                             ;CAN BE 'CALL ENDCHK'
0750   0353             ;NOP
0751   0353             ;NOP
0752   0353 D1                          POP     DE      ;OK, GET OLD HL
0753   0354 EB                          EX      DE,HL
0754   0355 73                          LD      (HL),E  ;SAVE VALUE IN VAR.
0755   0356 23                          INC     HL
0756   0357 72                          LD      (HL),D
0757   0358 E1                          POP     HL      ;GET OLD 'CURRNT'
0758   0359 22 02 08                    LD      (CURRNT),HL
0759   035C D1                          POP     DE      ;AND OLD TEXT POINTER
0760   035D F1          IP4:            POP     AF      ;PURGE JUNK IN STACK
0761   035E CF                          TSTC($2C,IP5)   ;IS NEXT CH. ','?
0761   035F 2C          
0761   0360 03          
0762   0361 C3 18 03                    JP      IP1     ;YES, MORE ITEMS.
0763   0364 F7          IP5:            RST     RFINISH
0764   0365             ;
0765   0365 1A          DEFLT:          LD      A,(DE)  ;***  DEFLT ***
0766   0366 FE 0D                       CP      CR      ;EMPTY LINE IS OK
0767   0368 CA 74 03                    JP      Z,LT1   ;ELSE IT IS 'LET'
0768   036B             ;
0769   036B CD FA 04    LET:            CALL    SETVAL  ;*** LET ***
0770   036E CF                          TSTC($2C,LT1)   ;SET VALUE TO VAR.
0770   036F 2C          
0770   0370 03          
0771   0371 C3 6B 03                    JP      LET     ;ITEM BY ITEM
0772   0374 F7          LT1:            RST     RFINISH ;UNTIL FINISH
0773   0375             ;
0774   0375             ;*************************************************************
0775   0375             ;
0776   0375             ; *** EXPR ***
0777   0375             ;
0778   0375             ; 'EXPR' EVALUATES ARITHMETICAL OR LOGICAL EXPRESSIONS.
0779   0375             ; <EXPR>::<EXPR2>
0780   0375             ;         <EXPR2><REL.OP.><EXPR2>
0781   0375             ; WHERE <REL.OP.> IS ONE OF THE OPERATORS IN TAB8 AND THE
0782   0375             ; RESULT OF THESE OPERATIONS IS 1 IF TRUE AND 0 IF FALSE.
0783   0375             ; <EXPR2>::=(+ OR -)<EXPR3>(+ OR -<EXPR3>)(....)
0784   0375             ; WHERE () ARE OPTIONAL AND (....) ARE OPTIONAL REPEATS.
0785   0375             ; <EXPR3>::=<EXPR4>(* OR /><EXPR4>)(....)
0786   0375             ; <EXPR4>::=<VARIABLE>
0787   0375             ;           <FUNCTION>
0788   0375             ;           (<EXPR>)
0789   0375             ; <EXPR> IS RECURSIVE SO THAT VARIABLE '@' CAN HAVE AN <EXPR>
0790   0375             ; AS INDEX, FUNCTIONS CAN HAVE AN <EXPR> AS ARGUMENTS, AND
0791   0375             ; <EXPR4> CAN BE AN <EXPR> IN PARANTHESE.
0792   0375             ;
0793   0375             ;EXPR:          CALL    EXPR2   ;THIS IS AT LOC. 18
0794   0375             ;               PUSH    HL      ;SAVE <EXPR2> VALUE
0795   0375             ;               JP      EXPR1   ;REST OF IT AT EXPR1
0796   0375 21 83 07    EXPR1:          LD      HL,TAB8-1       ;LOOKUP REL.OP.
0797   0378 C3 9D 07                    JP      EXEC    ;GO DO IT
0798   037B             ;
0799   037B CD A4 03    XP11:           CALL    XP18    ;REL.OP.">="
0800   037E D8                          RET     C       ;NO, RETURN HL=0
0801   037F 6F                          LD      L,A     ;YES, RETURN HL=1
0802   0380 C9                          RET
0803   0381             ;
0804   0381 CD A4 03    XP12:           CALL    XP18    ;REL.OP."#"
0805   0384 C8                          RET     Z       ;FALSE, RETURN HL=0
0806   0385 6F                          LD      L,A     ;TRUE, RETURN HL=1
0807   0386 C9                          RET
0808   0387             ;
0809   0387 CD A4 03    XP13:           CALL    XP18    ;REL.OP.">"
0810   038A C8                          RET     Z       ;FALSE
0811   038B D8                          RET     C       ;ALSO FALSE, HL=0
0812   038C 6F                          LD      L,A     ;TRUE, HL=1
0813   038D C9                          RET
0814   038E             ;
0815   038E CD A4 03    XP14:           CALL    XP18    ;REL.OP."<="
0816   0391 6F                          LD      L,A     ;SET HL=1
0817   0392 C8                          RET     Z       ;REL. TRUE, RETURN
0818   0393 D8                          RET     C
0819   0394 6C                          LD      L,H     ;ELSE SET HL=0
0820   0395 C9                          RET
0821   0396             ;
0822   0396 CD A4 03    XP15:           CALL    XP18    ;REL.OP."="
0823   0399 C0                          RET     NZ      ;FALSE, RETURN HL=0
0824   039A 6F                          LD      L,A     ;ELSE SET HL=1
0825   039B C9                          RET
0826   039C             ;
0827   039C CD A4 03    XP16:           CALL    XP18    ;REL.OP."<"
0828   039F D0                          RET     NC      ;FALSE, RETURN HL=0
0829   03A0 6F                          LD      L,A     ;ELSE SET HL=1
0830   03A1 C9                          RET
0831   03A2             ;
0832   03A2 E1          XP17:           POP     HL      ;NOT .REL.OP
0833   03A3 C9                          RET             ;RETURN HL=<EXPR2>
0834   03A4             ;
0835   03A4 79          XP18:           LD      A,C     ;SUBROUTINE FOR ALL
0836   03A5 E1                          POP     HL      ;REL.OP.'S
0837   03A6 C1                          POP     BC
0838   03A7 E5                          PUSH    HL      ;REVERSE TOP OF STACK
0839   03A8 C5                          PUSH    BC
0840   03A9 4F                          LD      C,A
0841   03AA CD B9 03                    CALL    EXPR2   ;GET 2ND <EXPR2>
0842   03AD EB                          EX      DE,HL   ;VALUE IN DE NOW
0843   03AE E3                          EX      (SP),HL ;1ST <EXPR2> IN HL
0844   03AF CD F2 04                    CALL    CKHLDE  ;COMPARE 1ST WITH 2ND
0845   03B2 D1                          POP     DE      ;RESTORE TEXT POINTER
0846   03B3 21 00 00                    LD      HL,0H   ;SET HL=0, A=1
0847   03B6 3E 01                       LD      A,1
0848   03B8 C9                          RET
0849   03B9             ;
0850   03B9 CF          EXPR2:          TSTC('-',XP21)  ;NEGATIVE SIGN?
0850   03BA 2D          
0850   03BB 06          
0851   03BC 21 00 00                    LD      HL,0H   ;YES, FAKE '0-'
0852   03BF C3 E3 03                    JP      XP26    ;TREAT LIKE SUBTRACT
0853   03C2             ;
0854   03C2 CF          XP21:           TSTC('+',XP22)  ;POSITIVE SIGN? IGNORE
0854   03C3 2B          
0854   03C4 00          
0855   03C5 CD ED 03    XP22:           CALL    EXPR3   ;1ST <EXPR3>
0856   03C8 CF          XP23:           TSTC('+',XP25)  ;ADD?
0856   03C9 2B          
0856   03CA 15          
0857   03CB E5                          PUSH    HL      ;YES, SAVE VALUE
0858   03CC CD ED 03                    CALL    EXPR3   ;GET 2ND <EXPR3>
0859   03CF EB          XP24:           EX      DE,HL   ;2ND IN DE
0860   03D0 E3                          EX      (SP),HL ;1ST IN HL
0861   03D1 7C                          LD      A,H     ;COMPARE SIGN
0862   03D2 AA                          XOR     D
0863   03D3 7A                          LD      A,D
0864   03D4 19                          ADD     HL,DE
0865   03D5 D1                          POP     DE      ;RESTORE TEXT POINTER
0866   03D6 FA C8 03                    JP      M,XP23  ;1ST AND 2ND SIGN DIFFER
0867   03D9 AC                          XOR     H       ;1ST AND 2ND SIGN EQUAL
0868   03DA F2 C8 03                    JP      P,XP23  ;SO IS RESULT
0869   03DD             ;
0870   03DD C3 D5 00                    JP      QHOW    ;ELSE WE HAVE OVERFLOW
0871   03E0             ;
0872   03E0 CF          XP25:           TSTC('-',XP42)  ;SUBTRACT?
0872   03E1 2D          
0872   03E2 86          
0873   03E3 E5          XP26:           PUSH    HL      ;YES, SAVE 1ST <EXPR3>
0874   03E4 CD ED 03                    CALL    EXPR3   ;GET 2ND <EXPR3>
0875   03E7 CD E0 04                    CALL    CHGSGN  ;NEGATE
0876   03EA C3 CF 03                    JP      XP24    ;AND ADD THEM
0877   03ED             ;
0878   03ED CD 4D 04    EXPR3:          CALL    EXPR4   ;GET 1ST <EXPR4>
0879   03F0 CF          XP31:           TSTC('*',XP34)  ;MULTIPLY?
0879   03F1 2A          
0879   03F2 2D          
0880   03F3 E5                          PUSH    HL      ;YES, SAVE 1ST
0881   03F4 CD 4D 04                    CALL    EXPR4   ;AND GET 2ND <EXPR4>
0882   03F7 06 00                       LD      B,0H    ;CLEAR B FOR SIGN
0883   03F9 CD DD 04                    CALL    CHKSGN  ;CHECK SIGN
0884   03FC E3                          EX      (SP),HL ;1ST IN HL
0885   03FD CD DD 04                    CALL    CHKSGN  ;CHECK SIGN OF 1ST
0886   0400 EB                          EX      DE,HL
0887   0401 E3                          EX      (SP),HL
0888   0402 7C                          LD      A,H     ;IS HL > 255 ?
0889   0403 B7                          OR      A
0890   0404 CA 0D 04                    JP      Z,XP32  ;NO
0891   0407 7A                          LD      A,D     ;YES, HOW ABOUT DE
0892   0408 B2                          OR      D
0893   0409 EB                          EX      DE,HL   ;PUT SMALLER IN HL
0894   040A C2 D6 00                    JP      NZ,AHOW ;ALSO >, WILL OVERFLOW
0895   040D 7D          XP32:           LD      A,L     ;THIS IS DUMB
0896   040E 21 00 00                    LD      HL,0H   ;CLEAR RESULT
0897   0411 B7                          OR      A       ;ADD AND COUNT
0898   0412 CA 3F 04                    JP      Z,XP35
0899   0415 19          XP33:           ADD     HL,DE
0900   0416 DA D6 00                    JP      C,AHOW  ;OVERFLOW
0901   0419 3D                          DEC     A
0902   041A C2 15 04                    JP      NZ,XP33
0903   041D C3 3F 04                    JP      XP35    ;FINISHED
0904   0420             ;
0905   0420 CF          XP34:           TSTC('/',XP42)  ;DIVIDE?
0905   0421 2F          
0905   0422 46          
0906   0423 E5                          PUSH    HL      ;YES, SAVE 1ST <EXPR4>
0907   0424 CD 4D 04                    CALL    EXPR4   ;AND GET THE SECOND ONE
0908   0427 06 00                       LD      B,0H    ;CLEAR B FOR SIGN
0909   0429 CD DD 04                    CALL    CHKSGN  ;CHECK SIGN OF 2ND
0910   042C E3                          EX      (SP),HL ;GET 1ST IN HL
0911   042D CD DD 04                    CALL    CHKSGN  ;CHECK SIGN OF 1ST
0912   0430 EB                          EX      DE,HL
0913   0431 E3                          EX      (SP),HL
0914   0432 EB                          EX      DE,HL
0915   0433 7A                          LD      A,D     ;DIVIDE BY 0?
0916   0434 B3                          OR      E
0917   0435 CA D6 00                    JP      Z,AHOW  ;SAY "HOW?"
0918   0438 C5                          PUSH    BC      ;ELSE SAVE SIGN
0919   0439 CD C0 04                    CALL    DIVIDE  ;USE SUBROUTINE
0920   043C 60                          LD      H,B     ;RESULT IN HL NOW
0921   043D 69                          LD      L,C
0922   043E C1                          POP     BC      ;GET SIGN BACK
0923   043F D1          XP35:           POP     DE      ;AND TEXT POINTER
0924   0440 7C                          LD      A,H     ;HL MUST BE +
0925   0441 B7                          OR      A
0926   0442 FA D5 00                    JP      M,QHOW  ;ELSE IT IS OVERFLOW
0927   0445 78                          LD      A,B
0928   0446 B7                          OR      A
0929   0447 FC E0 04                    CALL    M,CHGSGN        ;CHANGE SIGN IF NEEDED
0930   044A C3 F0 03                    JP      XP31    ;LOOK FOR MORE TERMS
0931   044D             ;
0932   044D 21 57 07    EXPR4:          LD      HL,TAB4-1       ;FIND FUNCTION IN TAB4
0933   0450 C3 9D 07                    JP      EXEC    ;AND GO DO IT
0934   0453             ;
0935   0453 FF          XP40:           RST     RTSTV   ;NO, NOT A FUNCTION
0936   0454 DA 5C 04                    JP      C,XP41  ;NOR A VARIABLE
0937   0457 7E                          LD      A,(HL)  ;VARIABLE
0938   0458 23                          INC     HL
0939   0459 66                          LD      H,(HL)  ;VALUE IN HL
0940   045A 6F                          LD      L,A
0941   045B C9                          RET
0942   045C             ;
0943   045C CD 7E 00    XP41:           CALL    TSTNUM  ;OR IS IT A NUMBER
0944   045F 78                          LD      A,B     ;# OF DIGIT
0945   0460 B7                          OR      A
0946   0461 C0                          RET     NZ      ;OK
0947   0462 CF          PARN:           TSTC($28,XP43)  ; '('
0947   0463 28          
0947   0464 05          
0948   0465 DF                          RST     REXPR   ;"(EXPR)"
0949   0466 CF                          TSTC($29,XP43)  ; ')'
0949   0467 29          
0949   0468 01          
0950   0469 C9          XP42:           RET
0951   046A C3 20 05    XP43:           JP      QWHAT   ;ELSE SAY: "WHAT?"
0952   046D             
0953   046D CD 62 04    RND:            CALL    PARN    ;*** RND(EXPR) ***
0954   0470 7C                          LD      A,H     ;EXPR MUST BE +
0955   0471 B7                          OR      A
0956   0472 FA D5 00                    JP      M,QHOW
0957   0475 B5                          OR      L       ;AND NON-ZERO
0958   0476 CA D5 00                    JP      Z,QHOW
0959   0479 D5                          PUSH    DE      ;SAVE BOTH
0960   047A E5                          PUSH    HL
0961   047B 2A 14 08                    LD      HL,(RANPNT)     ;GET MEMORY AS RANDOM
0962   047E 11 D7 07                    LD      DE,LSTROM       ;NUMBER
0963   0481 E7                          RST     RCOMP
0964   0482 DA 88 04                    JP      C,RA1   ;WRAP AROUND IF LAST
0965   0485 21 00 00                    LD      HL,START
0966   0488 5E          RA1:            LD      E,(HL)
0967   0489 23                          INC     HL
0968   048A 56                          LD      D,(HL)
0969   048B 22 14 08                    LD      (RANPNT),HL
0970   048E E1                          POP     HL
0971   048F EB                          EX      DE,HL
0972   0490 C5                          PUSH    BC
0973   0491 CD C0 04                    CALL    DIVIDE  ;RND(N)=MOD(M,N)+1
0974   0494 C1                          POP     BC
0975   0495 D1                          POP     DE
0976   0496 23                          INC     HL
0977   0497 C9                          RET
0978   0498             
0979   0498 CD 62 04    ABS:            CALL    PARN    ;*** ABS(EXPR) ***
0980   049B 1B                          DEC     DE
0981   049C CD DD 04                    CALL    CHKSGN  ;CHECK SIGN
0982   049F 13                          INC     DE
0983   04A0 C9                          RET
0984   04A1             
0985   04A1 2A 16 08    SIZE:           LD      HL,(TXTUNF)     ;*** RETURN SIZE IN HL ***
0986   04A4 D5                          PUSH    DE      ;GET THE NUMBER OF FREE
0987   04A5 EB                          EX      DE,HL   ;BYTES BETWEEN 'TXTUNF'
0988   04A6 21 00 1F                    LD      HL,VARBGN       ;AND 'VARBGN'
0989   04A9 CD D6 04                    CALL    SUBDE
0990   04AC D1                          POP     DE
0991   04AD C9                          RET
0992   04AE             
0993   04AE CD 62 04    PEEK:           CALL    PARN    ;*** PEEK(EXPR) ***
0994   04B1 7E                          LD      A,(HL)  ;GET CONTENT OF (HL)
0995   04B2 26 00                       LD      H,0     ;RETURN RESULT IN HL
0996   04B4 6F                          LD      L,A
0997   04B5 C9                          RET
0998   04B6             
0999   04B6 CD 62 04    DEEK:           CALL    PARN    ;*** PEEK(EXPR) ***
1000   04B9 D5                          PUSH    DE
1001   04BA 5E                          LD      E,(HL)  ;GET LOW CONTENT OF (HL)
1002   04BB 23                          INC     HL
1003   04BC 56                          LD      D,(HL)  ;GET HIGH CONTENT OF (HL)
1004   04BD EB                          EX      DE,HL   ;RETURN RESULT IN HL
1005   04BE D1                          POP     DE
1006   04BF C9                          RET
1007   04C0             
1008   04C0             ;
1009   04C0             ;*************************************************************
1010   04C0             ;
1011   04C0             ; *** DIVIDE *** SUBDE *** CHKSGN *** CHGSGN *** & CKHLDE ***
1012   04C0             ;
1013   04C0             ; 'DIVIDE' DIVIDES HL BY DE, RESULT IN BC, REMAINDER IN HL
1014   04C0             ;
1015   04C0             ; 'SUBDE' SUBSTRACTS DE FROM HL
1016   04C0             ;
1017   04C0             ; 'CHKSGN' CHECKS SIGN OF HL.  IF +, NO CHANGE.  IF -, CHANGE
1018   04C0             ; SIGN AND FLIP SIGN OF B.
1019   04C0             ;
1020   04C0             ; 'CHGSGN' CHECKS SIGN N OF HL AND B UNCONDITIONALLY.
1021   04C0             ;
1022   04C0             ; 'CKHLDE' CHECKS SIGN OF HL AND DE.  IF DIFFERENT, HL AND DE
1023   04C0             ; ARE INTERCHANGED.  IF SAME SIGN, NOT INTERCHANGED.  EITHER
1024   04C0             ; CASE, HL DE ARE THEN COMPARED TO SET THE FLAGS.
1025   04C0             ;
1026   04C0 E5          DIVIDE:         PUSH    HL      ;*** DIVIDE ***
1027   04C1 6C                          LD      L,H     ;DIVIDE H BY DE
1028   04C2 26 00                       LD      H,0
1029   04C4 CD CB 04                    CALL    DV1
1030   04C7 41                          LD      B,C     ;SAVE RESULT IN B
1031   04C8 7D                          LD      A,L     ;(REMINDER+L)/DE
1032   04C9 E1                          POP     HL
1033   04CA 67                          LD      H,A
1034   04CB 0E FF       DV1:            LD      C,0FFH  ;RESULT IN C
1035   04CD 0C          DV2:            INC     C       ;DUMB ROUTINE
1036   04CE CD D6 04                    CALL    SUBDE   ;DIVIDE BY SUBTRACT
1037   04D1 D2 CD 04                    JP      NC,DV2  ;AND COUNT
1038   04D4 19                          ADD     HL,DE
1039   04D5 C9                          RET
1040   04D6             ;
1041   04D6 7D          SUBDE:          LD      A,L     ;*** SUBDE ***
1042   04D7 93                          SUB     E       ;SUBSTRACT DE FROM
1043   04D8 6F                          LD      L,A     ;HL
1044   04D9 7C                          LD      A,H
1045   04DA 9A                          SBC     A,D
1046   04DB 67                          LD      H,A
1047   04DC C9                          RET
1048   04DD             ;
1049   04DD 7C          CHKSGN:         LD      A,H     ;*** CHKSGN ***
1050   04DE B7                          OR      A       ;CHECK SIGN OF HL
1051   04DF F0                          RET     P       ;IF -, CHANGE SIGN
1052   04E0             ;
1053   04E0 7C          CHGSGN:         LD      A,H     ;*** CHGSGN ***
1054   04E1 F5                          PUSH    AF
1055   04E2 2F                          CPL             ;CHANGE SIGN OF HL
1056   04E3 67                          LD      H,A
1057   04E4 7D                          LD      A,L
1058   04E5 2F                          CPL
1059   04E6 6F                          LD      L,A
1060   04E7 23                          INC     HL
1061   04E8 F1                          POP     AF
1062   04E9 AC                          XOR     H
1063   04EA F2 D5 00                    JP      P,QHOW
1064   04ED 78                          LD      A,B     ;AND ALSO FLIP B
1065   04EE EE 80                       XOR     80H
1066   04F0 47                          LD      B,A
1067   04F1 C9                          RET
1068   04F2             
1069   04F2 7C          CKHLDE:         LD      A,H
1070   04F3 AA                          XOR     D       ;SAME SIGN?
1071   04F4 F2 F8 04                    JP      P,CK1   ;YES, COMPARE
1072   04F7 EB                          EX      DE,HL   ;NO, XCH AND COMP
1073   04F8 E7          CK1:            RST     RCOMP
1074   04F9 C9                          RET
1075   04FA             ;
1076   04FA             ;*************************************************************
1077   04FA             ;
1078   04FA             ; *** SETVAL *** FIN *** ENDCHK *** & ERROR (& FRIENDS) ***
1079   04FA             ;
1080   04FA             ; "SETVAL" EXPECTS A VARIABLE, FOLLOWED BY AN EQUAL SIGN AND
1081   04FA             ; THEN AN EXPR.  IT EVALUATES THE EXPR. AND SET THE VARIABLE
1082   04FA             ; TO THAT VALUE.
1083   04FA             ;
1084   04FA             ; "FIN" CHECKS THE END OF A COMMAND.  IF IT ENDED WITH ";",
1085   04FA             ; EXECUTION CONTINUES.  IF IT ENDED WITH A CR, IT FINDS THE
1086   04FA             ; NEXT LINE AND CONTINUE FROM THERE.
1087   04FA             ;
1088   04FA             ; "ENDCHK" CHECKS IF A COMMAND IS ENDED WITH CR.  THIS IS
1089   04FA             ; REQUIRED IN CERTAIN COMMANDS.  (GOTO, RETURN, AND STOP ETC.)
1090   04FA             ;
1091   04FA             ; "ERROR" PRINTS THE STRING POINTED BY DE (AND ENDS WITH CR).
1092   04FA             ; IT THEN PRINTS THE LINE POINTED BY 'CURRNT' WITH A "?"
1093   04FA             ; INSERTED AT WHERE THE OLD TEXT POINTER (SHOULD BE ON TOP
1094   04FA             ; OF THE STACK) POINTS TO.  EXECUTION OF TB IS STOPPED
1095   04FA             ; AND TBI IS RESTARTED.  HOWEVER, IF 'CURRNT' -> ZERO
1096   04FA             ; (INDICATING A DIRECT COMMAND), THE DIRECT COMMAND IS NOT
1097   04FA             ; PRINTED.  AND IF 'CURRNT' -> NEGATIVE # (INDICATING 'INPUT'
1098   04FA             ; COMMAND), THE INPUT LINE IS NOT PRINTED AND EXECUTION IS
1099   04FA             ; NOT TERMINATED BUT CONTINUED AT 'INPERR'.
1100   04FA             ;
1101   04FA             ; RELATED TO 'ERROR' ARE THE FOLLOWING:
1102   04FA             ; 'QWHAT' SAVES TEXT POINTER IN STACK AND GET MESSAGE "WHAT?"
1103   04FA             ; 'AWHAT' JUST GET MESSAGE "WHAT?" AND JUMP TO 'ERROR'.
1104   04FA             ; 'QSORRY' AND 'ASORRY' DO SAME KIND OF THING.
1105   04FA             ; 'AHOW' AND 'AHOW' IN THE ZERO PAGE SECTION ALSO DO THIS.
1106   04FA             ;
1107   04FA FF          SETVAL:         RST     RTSTV   ;*** SETVAL ***
1108   04FB DA 20 05                    JP      C,QWHAT ;"WHAT?" NO VARIABLE
1109   04FE E5                          PUSH    HL      ;SAVE ADDRESS OF VAR.
1110   04FF CF                          TSTC('=',SV1)   ;PASS "=" SIGN
1110   0500 3D          
1110   0501 08          
1111   0502 DF                          RST     REXPR   ;EVALUATE EXPR.
1112   0503 44                          LD      B,H     ;VALUE IS IN BC NOW
1113   0504 4D                          LD      C,L
1114   0505 E1                          POP     HL      ;GET ADDRESS
1115   0506 71                          LD      (HL),C  ;SAVE VALUE
1116   0507 23                          INC     HL
1117   0508 70                          LD      (HL),B
1118   0509 C9                          RET
1119   050A C3 20 05    SV1:            JP      QWHAT   ;NO "=" SIGN
1120   050D             
1121   050D CF          FIN:            TSTC(';',FI1)   ;*** FIN ***
1121   050E 3B          
1121   050F 04          
1122   0510 F1                          POP     AF      ;";", PURGE RET. ADDR.
1123   0511 C3 8D 01                    JP      RUNSML  ;CONTINUE SAME LINE
1124   0514 CF          FI1:            TSTC(CR,FI2)    ;NOT ";", IS IT CR?
1124   0515 0D          
1124   0516 04          
1125   0517 F1                          POP     AF      ;YES, PURGE RET. ADDR.
1126   0518 C3 7D 01                    JP      RUNNXL  ;RUN NEXT LINE
1127   051B C9          FI2:            RET             ;ELSE RETURN TO CALLER
1128   051C             
1129   051C EF          ENDCHK:         RST     RIGNBLK ;IGNBLK
1130   051D FE 0D                       CP      CR      ;END WITH CR?
1131   051F C8                          RET     Z       ;OK, ELSE SAY: "WHAT?"
1132   0520             ;
1133   0520 D5          QWHAT:          PUSH    DE      ;*** QWHAT ***
1134   0521 11 E4 00    AWHAT:          LD      DE,WHAT ;*** AWHAT ***
1135   0524 97          ERROR:          SUB     A       ;*** ERROR ***
1136   0525 CD C5 05                    CALL    PRTSTG  ;PRINT 'WHAT?', 'HOW?'
1137   0528 D1                          POP     DE      ;OR 'SORRY'
1138   0529 1A                          LD      A,(DE)  ;SAVE THE CHARACTER
1139   052A F5                          PUSH    AF      ;AT WHERE OLD DE ->
1140   052B 97                          SUB     A       ;AND PUT A 0 THERE
1141   052C 12                          LD      (DE),A
1142   052D 2A 02 08                    LD      HL,(CURRNT)     ;GET CURRENT LINE #
1143   0530 E5                          PUSH    HL
1144   0531 7E                          LD      A,(HL)  ;CHECK THE VALUE
1145   0532 23                          INC     HL
1146   0533 B6                          OR      (HL)
1147   0534 D1                          POP     DE
1148   0535 CA F0 00                    JP      Z,RSTART        ;IF ZERO, JUST RESTART
1149   0538 7E                          LD      A,(HL)  ;IF NEGATIVE,
1150   0539 B7                          OR      A
1151   053A FA 0E 03                    JP      M,INPERR        ;REDO INPUT
1152   053D CD 4E 06                    CALL    PRTLN   ;ELSE PRINT THE LINE
1153   0540 1B                          DEC     DE      ;UPTO WHERE THE 0 IS
1154   0541 F1                          POP     AF      ;RESTORE THE CHARACTER
1155   0542 12                          LD      (DE),A
1156   0543 3E 3F                       LD      A,'?'   ;PRINT A "?"
1157   0545 D7                          RST     ROUTC
1158   0546 97                          SUB     A       ;AND THE REST OF THE
1159   0547 CD C5 05                    CALL    PRTSTG  ;LINE
1160   054A C3 F0 00                    JP      RSTART  ;THEN RESTART
1161   054D             ;
1162   054D D5          QSORRY:         PUSH    DE      ;*** QSORRY ***
1163   054E 11 EA 00    ASORRY:         LD      DE,SORRY        ;*** ASORRY ***
1164   0551 C3 24 05                    JP      ERROR
1165   0554             ;
1166   0554             ;*************************************************************
1167   0554             ;
1168   0554             ; *** GETLN *** FNDLN (& FRIENDS) ***
1169   0554             ;
1170   0554             ; 'GETLN' READS A INPUT LINE INTO 'BUFFER'.  IT FIRST PROMPT
1171   0554             ; THE CHARACTER IN A (GIVEN BY THE CALLER), THEN IT FILLS
1172   0554             ; THE BUFFER AND ECHOS.  IT IGNORES LF'S AND NULLS, BUT STILL
1173   0554             ; ECHOS THEM BACK.  RUB-OUT IS USED TO CAUSE IT TO DELETE
1174   0554             ; THE LAST CHARACTER (IF THERE IS ONE), AND ALT-MOD IS USED TO
1175   0554             ; CAUSE IT TO DELETE THE WHOLE LINE AND START IT ALL OVER.
1176   0554             ; CR SIGNALS THE END OF A LINE, AND CAUSE 'GETLN' TO RETURN.
1177   0554             ;
1178   0554             ; 'FNDLN' FINDS A LINE WITH A GIVEN LINE # (IN HL) IN THE
1179   0554             ; TEXT SAVE AREA.  DE IS USED AS THE TEXT POINTER.  IF THE
1180   0554             ; LINE IS FOUND, DE WILL POINT TO THE BEGINNING OF THAT LINE
1181   0554             ; (I.E., THE LOW BYTE OF THE LINE #), AND FLAGS ARE NC & Z.
1182   0554             ; IF THAT LINE IS NOT THERE AND A LINE WITH A HIGHER LINE #
1183   0554             ; IS FOUND, DE POINTS TO THERE AND FLAGS ARE NC & NZ.  IF
1184   0554             ; WE REACHED THE END OF TEXT SAVE AREA AND CANNOT FIND THE
1185   0554             ; LINE, FLAGS ARE C & NZ.
1186   0554             ; 'FNDLN' WILL INITIALIZE DE TO THE BEGINNING OF THE TEXT SAVE
1187   0554             ; AREA TO START THE SEARCH.  SOME OTHER ENTRIES OF THIS
1188   0554             ; ROUTINE WILL NOT INITIALIZE DE AND DO THE SEARCH.
1189   0554             ; 'FNDLNP' WILL START WITH DE AND SEARCH FOR THE LINE #.
1190   0554             ; 'FNDNXT' WILL BUMP DE BY 2, FIND A CR AND THEN START SEARCH.
1191   0554             ; 'FNDSKP' USE DE TO FIND A CR, AND THEN START SEARCH.
1192   0554             ;
1193   0554 D7          GETLN:          RST     ROUTC   ;*** GETLN ***
1194   0555 11 68 1F                    LD      DE,BUFFER       ;PROMPT AND INIT.
1195   0558 CD E8 06    GL1:            CALL    CHKIO   ;CHECK KEYBOARD
1196   055B CA 58 05                    JP      Z,GL1   ;NO INPUT, WAIT
1197   055E FE 08                       CP      BS      ;BS, DELETE LAST CHARACTER?
1198   0560 CA 82 05                    JP      Z,GL3   ;YES
1199   0563 FE 7F                       CP      DEL     ;DEL, DELETE LAST CHARACTER?
1200   0565 CA 82 05                    JP      Z,GL3   ;YES
1201   0568 D7                          RST     ROUTC   ;INPUT, ECHO BACK
1202   0569 FE 0A                       CP      LF      ;IGNORE LF
1203   056B CA 58 05                    JP      Z,GL1
1204   056E B7                          OR      A       ;IGNORE NULL
1205   056F CA 58 05                    JP      Z,GL1
1206   0572 FE 18                       CP      CAN     ;^X, DELETE THE WHOLE LINE?
1207   0574 CA 95 05                    JP      Z,GL4   ;YES
1208   0577 12                          LD      (DE),A  ;ELSE SAVE INPUT
1209   0578 13                          INC     DE      ;AND BUMP POINTER
1210   0579 FE 0D                       CP      CR      ;WAS IT CR?
1211   057B C8                          RET     Z       ;YES, END OF LINE
1212   057C 7B                          LD      A,E     ;ELSE MORE FREE ROOM?
1213   057D FE A8                       CP      BUFEND & 0FFH
1214   057F C2 58 05                    JP      NZ,GL1  ;YES, GET NEXT INPUT
1215   0582 7B          GL3:            LD      A,E     ;DELETE LAST CHARACTER
1216   0583 FE 68                       CP      BUFFER & 0FFH   ;BUT DO WE HAVE ANY?
1217   0585 CA 95 05                    JP      Z,GL4   ;NO, REDO WHOLE LINE
1218   0588 1B                          DEC     DE      ;YES, BACKUP POINTER
1219   0589 3E 08                       LD      A,BS    ;AND ECHO A BACKSPACE
1220   058B D7                          RST     ROUTC
1221   058C 3E 20                       LD      A,' '   ;AND ECHO A BLANK
1222   058E D7                          RST     ROUTC
1223   058F 3E 08                       LD      A,BS    ;AND ECHO A BACKSPACE
1224   0591 D7                          RST     ROUTC
1225   0592 C3 58 05                    JP      GL1     ;GO GET NEXT INPUT
1226   0595 CD 0E 00    GL4:            CALL    CRLF    ;REDO ENTIRE LINE
1227   0598 3E 5E                       LD      A,'^'   ;CR, LF AND UP-ARROW
1228   059A C3 54 05                    JP      GETLN
1229   059D             ;
1230   059D 7C          FNDLN:          LD      A,H     ;*** FNDLN ***
1231   059E B7                          OR      A       ;CHECK SIGN OF HL
1232   059F FA D5 00                    JP      M,QHOW  ;IT CANNOT BE -
1233   05A2 11 18 08                    LD      DE,TXTBGN       ;INIT TEXT POINTER
1234   05A5             ;
1235   05A5             FNDLP:          ;*** FDLNP ***
1236   05A5 E5          FL1:            PUSH    HL      ;SAVE LINE #
1237   05A6 2A 16 08                    LD      HL,(TXTUNF)     ;CHECK IF WE PASSED END
1238   05A9 2B                          DEC     HL
1239   05AA E7                          RST     RCOMP
1240   05AB E1                          POP     HL      ;GET LINE # BACK
1241   05AC D8                          RET     C       ;C,NZ PASSED END
1242   05AD 1A                          LD      A,(DE)  ;WE DID NOT, GET BYTE 1
1243   05AE 95                          SUB     L       ;IS THIS THE LINE?
1244   05AF 47                          LD      B,A     ;COMPARE LOW ORDER
1245   05B0 13                          INC     DE
1246   05B1 1A                          LD      A,(DE)  ;GET BYTE 2
1247   05B2 9C                          SBC     A,H     ;COMPARE HIGH ORDER
1248   05B3 DA BA 05                    JP      C,FL2   ;NO, NOT THERE YET
1249   05B6 1B                          DEC     DE      ;ELSE WE EITHER FOUND
1250   05B7 B0                          OR      B       ;IT, OR IT IS NOT THERE
1251   05B8 C9                          RET     ;NC,Z:FOUND, NC,NZ:NO
1252   05B9             ;
1253   05B9             FNDNXT:         ;*** FNDNXT ***
1254   05B9 13                          INC     DE      ;FIND NEXT LINE
1255   05BA 13          FL2:            INC     DE      ;JUST PASSED BYTE 1 & 2
1256   05BB             ;
1257   05BB 1A          FNDSKP:         LD      A,(DE)  ;*** FNDSKP ***
1258   05BC FE 0D                       CP      CR      ;TRY TO FIND CR
1259   05BE C2 BA 05                    JP      NZ,FL2  ;KEEP LOOKING
1260   05C1 13                          INC     DE      ;FOUND CR, SKIP OVER
1261   05C2 C3 A5 05                    JP      FL1     ;CHECK IF END OF TEXT
1262   05C5             ;
1263   05C5             ;*************************************************************
1264   05C5             ;
1265   05C5             ; *** PRTSTG *** QTSTG *** PRTNUM *** & PRTLN ***
1266   05C5             ;
1267   05C5             ; 'PRTSTG' PRINTS A STRING POINTED BY DE.  IT STOPS PRINTING
1268   05C5             ; AND RETURNS TO CALLER WHEN EITHER A CR IS PRINTED OR WHEN
1269   05C5             ; THE NEXT BYTE IS THE SAME AS WHAT WAS IN A (GIVEN BY THE
1270   05C5             ; CALLER).  OLD A IS STORED IN B, OLD B IS LOST.
1271   05C5             ;
1272   05C5             ; 'QTSTG' LOOKS FOR A BACK-ARROW, SINGLE QUOTE, OR DOUBLE
1273   05C5             ; QUOTE.  IF NONE OF THESE, RETURN TO CALLER.  IF BACK-ARROW,
1274   05C5             ; OUTPUT A CR WITHOUT A LF.  IF SINGLE OR DOUBLE QUOTE, PRINT
1275   05C5             ; THE STRING IN THE QUOTE AND DEMANDS A MATCHING UNQUOTE.
1276   05C5             ; AFTER THE PRINTING THE NEXT 3 BYTES OF THE CALLER IS SKIPPED
1277   05C5             ; OVER (USUALLY A JUMP INSTRUCTION.
1278   05C5             ;
1279   05C5             ; 'PRTNUM' PRINTS THE NUMBER IN HL.  LEADING BLANKS ARE ADDED
1280   05C5             ; IF NEEDED TO PAD THE NUMBER OF SPACES TO THE NUMBER IN C.
1281   05C5             ; HOWEVER, IF THE NUMBER OF DIGITS IS LARGER THAN THE # IN
1282   05C5             ; C, ALL DIGITS ARE PRINTED ANYWAY.  NEGATIVE SIGN IS ALSO
1283   05C5             ; PRINTED AND COUNTED IN, POSITIVE SIGN IS NOT.
1284   05C5             ;
1285   05C5             ; 'PRTLN' PRINTS A SAVED TEXT LINE WITH LINE # AND ALL.
1286   05C5             ;
1287   05C5 47          PRTSTG:         LD      B,A     ;*** PRTSTG ***
1288   05C6 1A          PS1:            LD      A,(DE)  ;GET A CHARACTER
1289   05C7 13                          INC     DE      ;BUMP POINTER
1290   05C8 B8                          CP      B       ;SAME AS OLD A?
1291   05C9 C8                          RET     Z       ;YES, RETURN
1292   05CA D7                          RST     ROUTC   ;ELSE PRINT IT
1293   05CB FE 0D                       CP      CR      ;WAS IT A CR?
1294   05CD C2 C6 05                    JP      NZ,PS1  ;NO, NEXT
1295   05D0 C9                          RET     ;YES, RETURN
1296   05D1             ;
1297   05D1 CF          QTSTG:          TSTC($22,QT3)   ;*** QTSTG ***
1297   05D2 22          
1297   05D3 0F          
1298   05D4 3E 22                       LD      A,22H   ;IT IS A "
1299   05D6 CD C5 05    QT1:            CALL    PRTSTG  ;PRINT UNTIL ANOTHER
1300   05D9 FE 0D                       CP      CR      ;WAS LAST ONE A CR?
1301   05DB E1                          POP     HL      ;RETURN ADDRESS
1302   05DC CA 7D 01                    JP      Z,RUNNXL        ;WAS CR, RUN NEXT LINE
1303   05DF 23          QT2:            INC     HL      ;SKIP 3 BYTES ON RETURN
1304   05E0 23                          INC     HL
1305   05E1 23                          INC     HL
1306   05E2 E9                          JP      (HL)    ;RETURN
1307   05E3 CF          QT3:            TSTC($27,QT4)   ;IS IT A '?
1307   05E4 27          
1307   05E5 05          
1308   05E6 3E 27                       LD      A,27H   ;YES, DO THE SAME
1309   05E8 C3 D6 05                    JP      QT1     ;AS IN "
1310   05EB CF          QT4:            TSTC($5F,QT5)   ;IS IT BACK-ARROW?
1310   05EC 5F          
1310   05ED 07          
1311   05EE 3E 8D                       LD      A,08DH  ;YES, CR WITHOUT LF
1312   05F0 D7                          RST     ROUTC
1313   05F1 E1                          POP     HL      ;RETURN ADDRESS
1314   05F2 C3 DF 05                    JP      QT2
1315   05F5 C9          QT5:            RET     ;NONE OF ABOVE
1316   05F6             
1317   05F6 D5          PRTNUM:         PUSH    DE      ;*** PRINT NUMBER IN HL ***
1318   05F7 3A 00 08                    LD      A,(PNBASE)      ;GET NUMBER BASE
1319   05FA 16 00                       LD      D,0     ;16 BIT FOR DIVIDE
1320   05FC 5F                          LD      E,A
1321   05FD 42                          LD      B,D     ;NO PREFIX YET
1322   05FE FE 10                       CP      16      ;HEX NUMBER?
1323   0600 C2 09 06                    JP      NZ,PN0  ;NO, CHECK SIGN
1324   0603 06 24                       LD      B,'$'   ;PRINT LEADING '$'
1325   0605 0D                          DEC     C       ;'$' TAKES SPACE
1326   0606 C3 12 06                    JP      PN1     ;HEX IS UNSIGNED
1327   0609 CD DD 04    PN0:            CALL    CHKSGN  ;CHECK SIGN
1328   060C F2 12 06                    JP      P,PN1   ;NO SIGN
1329   060F 06 2D                       LD      B,'-'   ;B=SIGN
1330   0611 0D                          DEC     C       ;'-' TAKES SPACE
1331   0612 AF          PN1:            XOR     A
1332   0613 57                          LD      D,A
1333   0614 D5                          PUSH    DE      ;SAVE AS A FLAG
1334   0615 0D                          DEC     C       ;C=SPACES
1335   0616 C5                          PUSH    BC      ;SAVE SIGN & SPACE
1336   0617 CD C0 04    PN2:            CALL    DIVIDE  ;DIVIDE HL BY 10
1337   061A 78                          LD      A,B     ;RESULT 0?
1338   061B B1                          OR      C
1339   061C CA 27 06                    JP      Z,PN3   ;YES, WE GOT ALL
1340   061F E3                          EX      (SP),HL ;NO, SAVE REMAINDER
1341   0620 2D                          DEC     L       ;AND COUNT SPACE
1342   0621 E5                          PUSH    HL      ;HL IS OLD BC
1343   0622 60                          LD      H,B     ;MOVE RESULT TO BC
1344   0623 69                          LD      L,C
1345   0624 C3 17 06                    JP      PN2     ;AND DIVIDE BY 10
1346   0627 C1          PN3:            POP     BC      ;WE GOT ALL DIGITS IN
1347   0628 0D          PN4:            DEC     C       ;THE STACK
1348   0629 79                          LD      A,C     ;LOOK AT SPACE COUNT
1349   062A B7                          OR      A
1350   062B FA 34 06                    JP      M,PN5   ;NO LEADING BLANKS
1351   062E 3E 20                       LD      A,' '   ;LEADING BLANKS
1352   0630 D7                          RST     ROUTC
1353   0631 C3 28 06                    JP      PN4     ;MORE?
1354   0634 78          PN5:            LD      A,B     ;PRINT SIGN
1355   0635 B7                          OR      A
1356   0636 C4 10 00                    CALL    NZ,OUTC
1357   0639 5D                          LD      E,L     ;LAST REMAINDER IN E
1358   063A 3A 00 08    PN6:            LD      A,(PNBASE)      ;GET NUMBER BASE
1359   063D BB                          CP      E       ;IT IS FLAG FOR NO MORE
1360   063E 7B                          LD      A,E     ;CHECK DIGIT IN E
1361   063F D1                          POP     DE
1362   0640 C8                          RET     Z       ;IF SO, RETURN
1363   0641 FE 0A                       CP      10      ;0-9? < A hex?
1364   0643 DA 48 06                    JP      C,PN7   ;Skip Add 7
1365   0646 C6 07                       ADD     A,'A'-'0'-10    ;Bring it up to ASCII A-F
1366   0648 C6 30       PN7:            ADD     A,'0'   ;ELSE CONVERT TO ASCII
1367   064A D7                          RST     ROUTC   ;AND PRINT THE DIGIT
1368   064B C3 3A 06                    JP      PN6     ;GO BACK FOR MORE
1369   064E             
1370   064E 3E 0A       PRTLN:          LD      A,10    ;SET 10 AS DEFAULT BASE
1371   0650 32 00 08                    LD      (PNBASE),A      ;FOR PRTNUM
1372   0653 1A                          LD      A,(DE)
1373   0654 6F                          LD      L,A     ;LOW ORDER LINE #
1374   0655 13                          INC     DE
1375   0656 1A                          LD      A,(DE)  ;HIGH ORDER
1376   0657 67                          LD      H,A
1377   0658 13                          INC     DE
1378   0659 0E 04                       LD      C,4     ;PRINT 4 DIGIT LINE #
1379   065B CD F6 05                    CALL    PRTNUM
1380   065E 3E 20                       LD      A,' '   ;FOLLOWED BY A BLANK
1381   0660 D7                          RST     ROUTC
1382   0661 97                          SUB     A       ;AND THEN THE NEXT
1383   0662 CD C5 05                    CALL    PRTSTG
1384   0665 C9                          RET
1385   0666             ;
1386   0666             ;*************************************************************
1387   0666             ;
1388   0666             ; *** MVUP *** MVDOWN *** POPA *** & PUSHA ***
1389   0666             ;
1390   0666             ; 'MVUP' MOVES A BLOCK UP FROM WHERE DE-> TO WHERE BC-> UNTIL
1391   0666             ; DE = HL
1392   0666             ;
1393   0666             ; 'MVDOWN' MOVES A BLOCK DOWN FROM WHERE DE-> TO WHERE HL->
1394   0666             ; UNTIL DE = BC
1395   0666             ;
1396   0666             ; 'POPA' RESTORES THE 'FOR' LOOP VARIABLE SAVE AREA FROM THE
1397   0666             ; STACK
1398   0666             ;
1399   0666             ; 'PUSHA' STACKS THE 'FOR' LOOP VARIABLE SAVE AREA INTO THE
1400   0666             ; STACK
1401   0666             ;
1402   0666 E7          MVUP:           RST     RCOMP   ;*** MVUP ***
1403   0667 C8                          RET     Z       ;DE = HL, RETURN
1404   0668 1A                          LD      A,(DE)  ;GET ONE BYTE
1405   0669 02                          LD      (BC),A  ;MOVE IT
1406   066A 13                          INC     DE      ;INCREASE BOTH POINTERS
1407   066B 03                          INC     BC
1408   066C C3 66 06                    JP      MVUP    ;UNTIL DONE
1409   066F             ;
1410   066F 78          MVDOWN:         LD      A,B     ;*** MVDOWN ***
1411   0670 92                          SUB     D       ;TEST IF DE = BC
1412   0671 C2 77 06                    JP      NZ,MD1  ;NO, GO MOVE
1413   0674 79                          LD      A,C     ;MAYBE, OTHER BYTE?
1414   0675 93                          SUB     E
1415   0676 C8                          RET     Z       ;YES, RETURN
1416   0677 1B          MD1:            DEC     DE      ;ELSE MOVE A BYTE
1417   0678 2B                          DEC     HL      ;BUT FIRST DECREASE
1418   0679 1A                          LD      A,(DE)  ;BOTH POINTERS AND
1419   067A 77                          LD      (HL),A  ;THEN DO IT
1420   067B C3 6F 06                    JP      MVDOWN  ;LOOP BACK
1421   067E             ;
1422   067E C1          POPA:           POP     BC      ;BC = RETURN ADDR.
1423   067F E1                          POP     HL      ;RESTORE LOPVAR, BUT
1424   0680 22 0A 08                    LD      (LOPVAR),HL     ;=0 MEANS NO MORE
1425   0683 7C                          LD      A,H
1426   0684 B5                          OR      L
1427   0685 CA 98 06                    JP      Z,PP1   ;YEP, GO RETURN
1428   0688 E1                          POP     HL      ;NOP, RESTORE OTHERS
1429   0689 22 0C 08                    LD      (LOPINC),HL
1430   068C E1                          POP     HL
1431   068D 22 0E 08                    LD      (LOPLMT),HL
1432   0690 E1                          POP     HL
1433   0691 22 10 08                    LD      (LOPLN),HL
1434   0694 E1                          POP     HL
1435   0695 22 12 08                    LD      (LOPPT),HL
1436   0698 C5          PP1:            PUSH    BC      ;BC = RETURN ADDR.
1437   0699 C9                          RET
1438   069A             ;
1439   069A 21 A9 1F    PUSHA:          LD      HL,STKLMT       ;*** PUSHA ***
1440   069D CD E0 04                    CALL    CHGSGN
1441   06A0 C1                          POP     BC      ;BC=RETURN ADDRESS
1442   06A1 39                          ADD     HL,SP   ;IS STACK NEAR THE TOP?
1443   06A2 D2 4D 05                    JP      NC,QSORRY       ;YES, SORRY FOR THAT
1444   06A5 2A 0A 08                    LD      HL,(LOPVAR)     ;ELSE SAVE LOOP VAR'S
1445   06A8 7C                          LD      A,H     ;BUT IF LOPVAR IS 0
1446   06A9 B5                          OR      L       ;THAT WILL BE ALL
1447   06AA CA C0 06                    JP      Z,PU1
1448   06AD 2A 12 08                    LD      HL,(LOPPT)      ;ELSE, MORE TO SAVE
1449   06B0 E5                          PUSH    HL
1450   06B1 2A 10 08                    LD      HL,(LOPLN)
1451   06B4 E5                          PUSH    HL
1452   06B5 2A 0E 08                    LD      HL,(LOPLMT)
1453   06B8 E5                          PUSH    HL
1454   06B9 2A 0C 08                    LD      HL,(LOPINC)
1455   06BC E5                          PUSH    HL
1456   06BD 2A 0A 08                    LD      HL,(LOPVAR)
1457   06C0 E5          PU1:            PUSH    HL
1458   06C1 C5                          PUSH    BC      ;BC = RETURN ADDR.
1459   06C2 C9                          RET
1460   06C3             
1461   06C3             ;*************************************************************
1462   06C3             ;
1463   06C3             ; *** OUTC *** CHKIO ***
1464   06C3             ;
1465   06C3             ; THESE ARE THE ONLY I/O ROUTINES IN TBI.
1466   06C3             ; OUTC WILL OUTPUT THE BYTE IN A.
1467   06C3             ; IF THAT IS A CR, A LF IS ALSO SEND OUT.
1468   06C3             ; ONLY THE FLAGS MAY BE CHANGED AT RETURN.
1469   06C3             ; ALL REGISTERS ARE RESTORED.
1470   06C3             ;
1471   06C3             ; 'CHKIO' CHECKS THE INPUT.  IF NO INPUT, IT WILL RETURN TO
1472   06C3             ; THE CALLER WITH THE Z FLAG SET.  IF THERE IS INPUT, Z FLAG
1473   06C3             ; IS CLEARED AND THE INPUT BYTE IS IN A.  HOWEVER, IF THE
1474   06C3             ; INPUT IS A CONTROL-O, THE 'OCSW' SWITCH IS COMPLIMENTED, AND
1475   06C3             ; Z FLAG IS RETURNED.  IF A CONTROL-C IS READ, 'CHKIO' WILL
1476   06C3             ; RESTART TBI AND DO NOT RETURN TO THE CALLER.
1477   06C3             ;
1478   06C3 16 1E       INIT:           LD      D,30    ;30 new lines to clear screen
1479   06C5 CD 0E 00    PATLOP:         CALL    CRLF
1480   06C8 15                          DEC     D
1481   06C9 C2 C5 06                    JP      NZ,PATLOP
1482   06CC 97                          SUB     A
1483   06CD 11 F7 06                    LD      DE,MSG1
1484   06D0 CD C5 05                    CALL    PRTSTG
1485   06D3 21 00 00                    LD      HL,START
1486   06D6 22 14 08                    LD      (RANPNT),HL
1487   06D9 21 18 08                    LD      HL,TXTBGN
1488   06DC 22 16 08                    LD      (TXTUNF),HL
1489   06DF C3 F0 00                    JP      RSTART
1490   06E2             
1491   06E2             ;THIS IS AT LOC. 10
1492   06E2             ;OUTC:          OUT     (IODATA),A      ;Out to data port
1493   06E2             ;               CP      CR      ;WAS IT CR?
1494   06E2             ;               RET     NZ      ;NO, FINISHED
1495   06E2             ;               JP      OC1     ;REST OF THIS IS AT OC1
1496   06E2 3E 0A       OC1:            LD      A,LF    ;YES, WE SEND LF TOO
1497   06E4 D7                          RST     ROUTC   ;THIS IS RECURSIVE
1498   06E5 3E 0D                       LD      A,CR    ;GET CR BACK IN A
1499   06E7 C9                          RET
1500   06E8             
1501   06E8 DB 02       CHKIO:          IN      A,(IOSTAT)      ;*** CHKIO ***
1502   06EA E6 01                       AND     IO_RX_BIT       ;MASK STATUS BIT
1503   06EC C8                          RET     Z       ;NOT READY, RETURN "Z"
1504   06ED DB 01                       IN      A,(IODATA)      ;READY, READ DATA
1505   06EF E6 7F                       AND     7FH     ;MASK BIT 7 OFF
1506   06F1 FE 03       CI0:            CP      03H     ;IS IT CONTROL-C?
1507   06F3 C0                          RET     NZ      ;NO, RETURN "NZ"
1508   06F4 C3 F0 00                    JP      RSTART  ;YES, RESTART TBI
1509   06F7             ;
1510   06F7 54 69 6E 79 MSG1:           .DB     "TinyBASIC"
1510   06FB 42 41 53 49 
1510   06FF 43 
1511   0700 0D                          .DB     CR
1512   0701             
1513   0701             ;*************************************************************
1514   0701             ;
1515   0701             ; *** TABLES *** DIRECT *** & EXEC ***
1516   0701             ;
1517   0701             ; THIS SECTION OF THE CODE TESTS A STRING AGAINST A TABLE.
1518   0701             ; WHEN A MATCH IS FOUND, CONTROL IS TRANSFERED TO THE SECTION
1519   0701             ; OF CODE ACCORDING TO THE TABLE.
1520   0701             ;
1521   0701             ; AT 'EXEC', DE SHOULD POINT TO THE STRING AND HL SHOULD POINT
1522   0701             ; TO THE TABLE-1.  AT 'DIRECT', DE SHOULD POINT TO THE STRING.
1523   0701             ; HL WILL BE SET UP TO POINT TO TAB1-1, WHICH IS THE TABLE OF
1524   0701             ; ALL DIRECT AND STATEMENT COMMANDS.
1525   0701             ;
1526   0701             ; A '.' IN THE STRING WILL TERMINATE THE TEST AND THE PARTIAL
1527   0701             ; MATCH WILL BE CONSIDERED AS A MATCH.  E.G., 'P.', 'PR.',
1528   0701             ; 'PRI.', 'PRIN.', OR 'PRINT' WILL ALL MATCH 'PRINT'.
1529   0701             ;
1530   0701             ; THE TABLE CONSISTS OF ANY NUMBER OF ITEMS.  EACH ITEM
1531   0701             ; IS A STRING OF CHARACTERS WITH BIT 7 SET TO 0 AND
1532   0701             ; A JUMP ADDRESS STORED HI-LOW WITH BIT 7 OF THE HIGH
1533   0701             ; BYTE SET TO 1.
1534   0701             ; This is done by the macro 'DWA'.
1535   0701             ; If the program is executed from an address < 0x8000
1536   0701             ; take care to mask this bit in program part 'EXEC'.
1537   0701             ;
1538   0701             ; END OF TABLE IS AN ITEM WITH A JUMP ADDRESS ONLY.  IF THE
1539   0701             ; STRING DOES NOT MATCH ANY OF THE OTHER ITEMS, IT WILL
1540   0701             ; MATCH THIS NULL ITEM AS DEFAULT.
1541   0701             ;
1542   0701             TAB1:           ;DIRECT COMMANDS
1543   0701 4C 49 53 54                 .DB     "LIST"
1544   0705 81                          DWA(LIST)
1544   0706 A5          
1545   0707 52 55 4E                    .DB     "RUN"
1546   070A 81                          DWA(RUN)
1546   070B 77          
1547   070C 4E 45 57                    .DB     "NEW"
1548   070F 81                          DWA(NEW)
1548   0710 68          
1549   0711             ;
1550   0711             TAB2:           ;DIRECT/STATEMENT
1551   0711 4E 45 58 54                 .DB     "NEXT"
1552   0715 82                          DWA(NEXT)
1552   0716 A2          
1553   0717 4C 45 54                    .DB     "LET"
1554   071A 83                          DWA(LET)
1554   071B 6B          
1555   071C 49 46                       .DB     "IF"
1556   071E 82                          DWA(IFF)
1556   071F FF          
1557   0720 47 4F 54 4F                 .DB     "GOTO"
1558   0724 81                          DWA(GOTO)
1558   0725 96          
1559   0726 47 4F 53 55                 .DB     "GOSUB"
1559   072A 42 
1560   072B 82                          DWA(GOSUB)
1560   072C 0A          
1561   072D 52 45 54 55                 .DB     "RETURN"
1561   0731 52 4E 
1562   0733 82                          DWA(RETURN)
1562   0734 2A          
1563   0735 52 45 4D                    .DB     "REM"
1564   0738 82                          DWA(REM)
1564   0739 FB          
1565   073A 46 4F 52                    .DB     "FOR"
1566   073D 82                          DWA(FOR)
1566   073E 43          
1567   073F 49 4E 50 55                 .DB     "INPUT"
1567   0743 54 
1568   0744 83                          DWA(INPUT)
1568   0745 18          
1569   0746 50 52 49 4E                 .DB     "PRINT"
1569   074A 54 
1570   074B 81                          DWA(PRINT)
1570   074C BD          
1571   074D 3F                          .DB     "?"
1572   074E 81                          DWA(PRINT)
1572   074F BD          
1573   0750 53 54 4F 50                 .DB     "STOP"
1574   0754 81                          DWA(STOP)
1574   0755 71          
1575   0756 83                          DWA(DEFLT)      ;END OF LIST
1575   0757 65          
1576   0758             ;
1577   0758             TAB4:           ;FUNCTIONS
1578   0758 52 4E 44                    .DB     "RND"
1579   075B 84                          DWA(RND)
1579   075C 6D          
1580   075D 41 42 53                    .DB     "ABS"
1581   0760 84                          DWA(ABS)
1581   0761 98          
1582   0762 53 49 5A 45                 .DB     "SIZE"
1583   0766 84                          DWA(SIZE)
1583   0767 A1          
1584   0768 50 45 45 4B                 .DB     "PEEK"          ;get byte from memory
1585   076C 84                          DWA(PEEK)
1585   076D AE          
1586   076E 44 45 45 4B                 .DB     "DEEK"          ;get word from memory
1587   0772 84                          DWA(DEEK)
1587   0773 B6          
1588   0774 84                          DWA(XP40)       ;END OF LIST
1588   0775 53          
1589   0776             ;
1590   0776             TAB5:           ;"TO" IN "FOR"
1591   0776 54 4F                       .DB     "TO"
1592   0778 82                          DWA(FR1)
1592   0779 53          
1593   077A 85                          DWA(QWHAT)      ;END OF LIST
1593   077B 20          
1594   077C             ;
1595   077C             TAB6:           ;"STEP" IN "FOR"
1596   077C 53 54 45 50                 .DB     "STEP"
1597   0780 82                          DWA(FR2)
1597   0781 5D          
1598   0782 82                          DWA(FR3)        ;END OF LIST
1598   0783 61          
1599   0784             ;
1600   0784             TAB8:           ;RELATION OPERATORS
1601   0784 3E 3D                       .DB     ">="
1602   0786 83                          DWA(XP11)
1602   0787 7B          
1603   0788 23                          .DB     "#"
1604   0789 83                          DWA(XP12)
1604   078A 81          
1605   078B 3E                          .DB     ">"
1606   078C 83                          DWA(XP13)
1606   078D 87          
1607   078E 3D                          .DB     "="
1608   078F 83                          DWA(XP15)
1608   0790 96          
1609   0791 3C 3D                       .DB     "<="
1610   0793 83                          DWA(XP14)
1610   0794 8E          
1611   0795 3C                          .DB     "<"
1612   0796 83                          DWA(XP16)
1612   0797 9C          
1613   0798 83                          DWA(XP17)       ;END OF REL OPERATOR LIST
1613   0799 A2          
1614   079A             ;
1615   079A 21 00 07    DIRECT:         LD      HL,TAB1-1       ;*** DIRECT ***
1616   079D             ;
1617   079D             EXEC:           ;*** EXEC ***
1618   079D EF          EX0:            RST     RIGNBLK ;IGNORE LEADING BLANKS
1619   079E D5                          PUSH    DE      ;SAVE POINTER
1620   079F 1A          EX1:            LD      A,(DE)  ;IF FOUND '.' IN STRING
1621   07A0 13                          INC     DE      ;BEFORE ANY MISMATCH
1622   07A1 FE 2E                       CP      2EH     ;WE DECLARE A MATCH
1623   07A3 CA C8 07                    JP      Z,EX3
1624   07A6 FE 61                       CP      'a'     ;< 'a' ?
1625   07A8 DA B2 07                    JP      C,EXN   ;NO ALPHA CHAR
1626   07AB FE 7B                       CP      'z'+1   ;> 'z'
1627   07AD D2 B2 07                    JP      NC,EXN  ;NO ALPHA CHAR
1628   07B0 E6 5F                       AND     5FH     ;MASK LOWER CASE TO UPPER CASE
1629   07B2             EXN:
1630   07B2 23                          INC     HL      ;HL->TABLE
1631   07B3 BE                          CP      (HL)    ;IF MATCH, TEST NEXT
1632   07B4 CA 9F 07                    JP      Z,EX1
1633   07B7 3E 7F                       LD      A,07FH  ;ELSE SEE IF BIT 7
1634   07B9 1B                          DEC     DE      ;OF TABLE IS SET, WHICH
1635   07BA BE                          CP      (HL)    ;IS THE JUMP ADDR. (HI)
1636   07BB DA CF 07                    JP      C,EX5   ;C:YES, MATCHED
1637   07BE 23          EX2:            INC     HL      ;NC:NO, FIND JUMP ADDR.
1638   07BF BE                          CP      (HL)
1639   07C0 D2 BE 07                    JP      NC,EX2
1640   07C3 23                          INC     HL      ;BUMP TO NEXT TAB. ITEM
1641   07C4 D1                          POP     DE      ;RESTORE STRING POINTER
1642   07C5 C3 9D 07                    JP      EX0     ;TEST AGAINST NEXT ITEM
1643   07C8 3E 7F       EX3:            LD      A,07FH  ;PARTIAL MATCH, FIND
1644   07CA 23          EX4:            INC     HL      ;JUMP ADDR., WHICH IS
1645   07CB BE                          CP      (HL)    ;FLAGGED BY BIT 7
1646   07CC D2 CA 07                    JP      NC,EX4
1647   07CF 7E          EX5:            LD      A,(HL)  ;LOAD HL WITH THE JUMP
1648   07D0 23                          INC     HL      ;ADDRESS FROM THE TABLE
1649   07D1 6E                          LD      L,(HL)
1650   07D2             #IF             $ < 8000H
1651   07D2 E6 7F                       AND     7FH     ;MASK OFF HIGH ADDRESS BIT
1652   07D4             #ENDIF
1653   07D4 67                          LD      H,A
1654   07D5 F1                          POP     AF      ;CLEAN UP THE GARBAGE
1655   07D6 E9                          JP      (HL)    ;AND WE GO DO IT
1656   07D7             ;
1657   07D7             LSTROM:                         ;ALL ABOVE CAN BE ROM
1658   07D7             ;
1659   07D7             ;*************************************************************
1660   07D7             
1661   07D7             ;*************************************************************
1662   07D7             ;
1663   0800                             .ORG            RAMBGN          ;HERE DOWN MUST BE RAM
1664   0800             ;
1665   0800             PNBASE:         .DS             1               ;BASE FOR PRTNUM
1666   0801             OCSW:           .DS             1               ;SWITCH FOR OUTPUT
1667   0802             CURRNT:         .DS             2               ;POINTS TO CURRENT LINE
1668   0804             STKGOS:         .DS             2               ;SAVES SP IN 'GOSUB'
1669   0806             VARNXT:         .DS             2               ;TEMP STORAGE
1670   0808             STKINP:         .DS             2               ;SAVES SP IN 'INPUT'
1671   080A             LOPVAR:         .DS             2               ;'FOR' LOOP SAVE AREA
1672   080C             LOPINC:         .DS             2               ;INCREMENT
1673   080E             LOPLMT:         .DS             2               ;LIMIT
1674   0810             LOPLN:          .DS             2               ;LINE NUMBER
1675   0812             LOPPT:          .DS             2               ;TEXT POINTER
1676   0814             RANPNT:         .DS             2               ;RANDOM NUMBER POINTER
1677   0816             TXTUNF:         .DS             2               ;->UNFILLED TEXT AREA
1678   0818             TXTBGN:         .EQU            $               ;TEXT SAVE AREA BEGINS
1679   0818             
1680   1F00                             .ORG            RAMBGN+RAMSZE-$0100
1681   1F00             ;
1682   1F00             TXTEND:         .EQU            $               ;TEXT SAVE AREA ENDS
1683   1F00             VARBGN:         .DS             2+2*26          ;VARIABLE '@(0)' FOLLOWED BY 'A'..'Z'
1684   1F68                                                             ;'@(1), @(2), ... are stored top-down
1685   1F68                                                             ;i.e. &@(i) = TXTEND-2*i
1686   1F68             BUFFER:         .DS             64              ;INPUT BUFFER
1687   1FA8             BUFEND:         .DS             1               ;BUFFER ENDS
1688   1FA9             STKLMT:         .DS             1               ;TOP LIMIT FOR STACK
1689   1FAA             
1690   2000                             .ORG            RAMBGN+RAMSZE
1691   2000             ;
1692   2000             STACK:          .EQU            $               ;STACK STARTS HERE
1693   2000             ;
1694   2000                             .END
